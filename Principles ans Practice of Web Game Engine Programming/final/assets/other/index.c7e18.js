System.register("chunks:///_virtual/AppManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './SoundManager.ts', './Tools.ts', './AutoShowManager.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, error, sys, assetManager, find, Define, SoundManager, Tools, AutoShowManager;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      error = module.error;
      sys = module.sys;
      assetManager = module.assetManager;
      find = module.find;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      AutoShowManager = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c0586UVj0JHM5dXCUDWBbe0", "AppManager", undefined);

      var UrlLobbyData = null;
      var AppManager = exports('default', /*#__PURE__*/function () {
        function AppManager() {} // public static get UrlLobbyData()
        // {
        //     UrlLobbyData = JSON.parse( Tools.GetLinkParameterByName( "LobbyData" ) );
        //     if ( UrlLobbyData )
        //     {
        //         return UrlLobbyData;
        //     }
        //     else
        //     {
        //         return null;
        //     }
        // }


        AppManager.GetUrl = function GetUrl() {
          if (typeof LobbyData !== "undefined") {
            return LobbyData.url;
          }

          if (UrlLobbyData) {
            return window.location.href;
          } else {
            error("LobbyData is undefined!");
            return "";
          }
        } //與大廳溝通
        ;

        AppManager.AddLeaveCbs = function AddLeaveCbs(cb) {
          this.m_leaveCbs.push(cb);
        };

        AppManager.SetChangeGameStateCb = function SetChangeGameStateCb(func) {
          this.m_changeGameStateCb = func;
        };

        AppManager.LoadingComplete = function LoadingComplete() {
          error("LoadingComplete ", sys.isNative || AppManager.LobbyData);

          if (sys.isNative || AppManager.LobbyData) {
            error("LoadingComplete this.Token:", this.Token);

            if (this.m_lobbyBridgeNode) {
              this.m_lobbyBridgeNode.emit(this.Game2Lobby.LoadingComplete, {
                token: this.Token
              });
              this.m_changeGameStateCb && this.m_changeGameStateCb();
            }
          }
        };

        AppManager.ChangePos = function ChangePos(isLandscape) {
          if (sys.isNative || AppManager.LobbyData) {
            if (this.m_lobbyBridgeNode) {
              this.m_lobbyBridgeNode.emit(this.Game2Lobby.Rotation);
            }
          }
        };

        AppManager.LeaveGame = function LeaveGame(isSelf, gameId) {
          if (gameId === void 0) {
            gameId = null;
          }

          if (sys.isNative || AppManager.LobbyData) {
            error("LeaveGame native");

            if (UrlLobbyData) {
              window.location.replace(AppManager.LobbyData.backUrl + (gameId ? "&gameID=" + gameId : ""));
            } else if (this.m_lobbyBridgeNode) {
              this.m_leaveCbs.forEach(function (element) {
                element();
              });

              if (isSelf) {
                this.m_lobbyBridgeNode.emit(this.Game2Lobby.CloseByGame, {
                  token: this.Token,
                  gameId: gameId,
                  mute: SoundManager.getInstance().isMute
                });
              } else {
                this.m_lobbyBridgeNode.emit(this.Game2Lobby.GameClose, {
                  token: this.Token,
                  mute: SoundManager.getInstance().isMute
                });
              }

              AppManager.OnExit();
            }
          } else if (window.top == window.self) {
            // APP版
            var url = "lobby://send?";

            if (gameId) {
              url += "gameID=" + gameId;
            }

            window.location.replace(url);
          } else {
            // H5版
            // error( "AppManager.UrlLobbyData", AppManager.UrlLobbyData )
            window.location.replace(AppManager.LobbyData.backUrl + (gameId ? "&gameID=" + gameId : ""));
          }
        };

        AppManager.SetNovice = function SetNovice() {
          if (sys.isNative || AppManager.LobbyData) {
            if (this.m_lobbyBridgeNode && AppManager.LobbyData.novice == true && this.canSendNovice == true) {
              this.m_lobbyBridgeNode.emit(this.Game2Lobby.SetNovice);
            }
          }
        } //Bundle載入
        ;

        AppManager.LoadVersion = function LoadVersion(gameBundleName, noGame) {
          var _this = this; // let commonPath = "assets/common/Astt/" + ( Tools.IsTada ? "tada" : "jili" );
          // let otherPath = "assets/common/Astt/other";
          // let gamePath = "assets/" + gameBundleName;
          // let commonVersion = "";
          // let otherVersion = "";
          // let gameVersion = "";
          // try
          // {
          //     if ( typeof LobbyData !== "undefined" )
          //     {
          //         gamePath = LobbyData.bundleDomin + gameBundleName;
          //         gameVersion = LobbyData.versionJson[ gameBundleName ];
          //         commonPath = LobbyData.bundleDomin + ( Tools.IsTada ? "tada" : "jili" );
          //         commonVersion = LobbyData.versionJson[ ( Tools.IsTada ? "tada" : "jili" ) ];
          //         otherPath = LobbyData.bundleDomin + "other";
          //         otherVersion = LobbyData.versionJson[ "other" ];
          //     }
          // }
          // catch ( error )
          // {
          //     //沒有就當作非APP
          // }
          // //共用
          // this.LoadBundle(
          //     otherPath,
          //     otherVersion,
          //     ( bundle: AssetManager.Bundle ) =>
          //     {
          //         Define.OtherBundle = bundle;
          //     }
          // );
          // this.LoadBundle(
          //     commonPath,
          //     commonVersion,
          //     ( bundle: AssetManager.Bundle ) =>
          //     {
          //         Define.CommonBundle = bundle;
          //     }
          // );
          // //遊戲
          // if ( !noGame )
          // {
          //     this.LoadBundle(
          //         gamePath,
          //         gameVersion,
          //         ( bundle: AssetManager.Bundle ) =>
          //         {
          //             Define.GameBundle = bundle;
          //         }
          //     );
          // }


          if (!this.m_addAutoShowSkyBarCB) {
            this.m_addAutoShowSkyBarCB = true;

            var AutoOpenSkyBarCB = function AutoOpenSkyBarCB() {
              _this.AutoOpenSkyBar();

              AutoShowManager.GetInstance().AutoShowNext();
            };

            AutoShowManager.GetInstance().AddAutoShowCb(AutoOpenSkyBarCB, Define.AutoShowOrder.SKY_BAR);
          } // }

        };

        AppManager.LoadBundle = function LoadBundle(path, version, endCb) {
          var _this2 = this;

          assetManager.loadBundle(path, {
            version: version
          }, function (err, bundle) {
            if (err) {
              _this2.LoadBundle(path, version, endCb);

              return;
            }

            endCb(bundle);
          });
        };

        AppManager.GetMarquee = function GetMarquee(data, callback) {
          if (AppManager.LobbyData && this.m_lobbyBridgeNode) {
            this.m_lobbyBridgeNode.emit(this.Game2Lobby.Marquee, function (node) {
              callback(node);
            }, data);
          } else {
            callback(null);
          }
        };

        AppManager.ShowSkyBar = function ShowSkyBar(node, autoOpen) {
          if (autoOpen === void 0) {
            autoOpen = false;
          }

          error("ShowSkyBar");

          if (Tools.IsTadaCasino && !this.isShowedSkyBar && this.m_lobbyBridgeNode) {
            this.isShowedSkyBar = true;
            this.m_lobbyBridgeNode.emit(this.Game2Lobby.SkyBarNotify, function (comp) {
              // comp[ "onResize" ]();
              comp.onResize(node); // comp[ "show" ]();

              comp.show();

              if (autoOpen) {
                comp.shopTopBar();
              }
            });
          }
        } // public static SetLevelInfo( info: levelProto.levelProto.ILevelServiceResp )
        // {
        //     if ( Tools.IsTadaCasino && this.m_lobbyBridgeNode )
        //     {
        //         this.m_lobbyBridgeNode.emit(
        //             this.Game2Lobby.SkyBarNotify,
        //             ( comp: LobbyIngameUiDefine.CommonGameLayout ) => 
        //             {
        //                 // comp.reportPlayerLevelData( info );
        //                 comp.setLevelData( info )
        //             } );
        //     }
        // }
        ;

        AppManager.InitLevelSystem = function InitLevelSystem(GetLevelData) {
          if (Tools.IsTadaCasino && this.m_lobbyBridgeNode) {
            this.m_lobbyBridgeNode.emit(this.Game2Lobby.SkyBarNotify, function (comp) {
              comp.setGetLevelDataFunc(GetLevelData);
            });
          }
        };

        AppManager.SetData = function SetData(data) {
          if (Tools.IsTadaCasino && this.m_lobbyBridgeNode) {
            this.m_lobbyBridgeNode.emit(this.Game2Lobby.SkyBarNotify, function (comp) {
              comp.reportData(data);
            });
          }
        };

        AppManager.SetIAP = function SetIAP(exchangeCb) {
          if (Tools.IsTadaCasino && this.m_lobbyBridgeNode) {
            this.m_lobbyBridgeNode.emit(this.Game2Lobby.SkyBarNotify, function (comp) {
              comp.node.on(comp.EventType.IAP_CONSUME_COMPLETE, exchangeCb);
            });
          }
        };

        AppManager.AutoOpenSkyBar = function AutoOpenSkyBar() {
          if (Tools.IsTadaCasino && this.m_lobbyBridgeNode) {
            this.m_lobbyBridgeNode.emit(this.Game2Lobby.SkyBarNotify, function (comp) {
              // comp[ "setLevelUpEndCallback" ]( cb );
              comp.shopTopBar();
            });
          }
        };

        AppManager.SetOpenSkyBar = function SetOpenSkyBar(cb) {
          if (Tools.IsTadaCasino && this.m_lobbyBridgeNode) {
            this.m_lobbyBridgeNode.emit(this.Game2Lobby.SkyBarNotify, function (comp) {
              // comp[ "setLevelUpEndCallback" ]( cb );
              comp.node.on(comp.EventType.TOP_BAR_SHOW_START, cb);
              comp.node.on(comp.EventType.TOP_BAR_SHOW_END, function () {});
            });
          }
        };

        AppManager.ShowReward = function ShowReward(endCb) {
          if (Tools.IsTadaCasino && this.m_lobbyBridgeNode) {
            // error( '➤➤➤➤➤ShowReward' )
            this.m_lobbyBridgeNode.emit(this.Game2Lobby.SkyBarNotify, function (comp) {
              comp.showLobbyPerformance().then(function () {
                endCb();
              });
            });
          }
        };

        AppManager.SetRewardDatas = function SetRewardDatas(rewardData, subTitle) {
          if (Tools.IsTadaCasino && this.m_lobbyBridgeNode) {
            error('➤➤➤➤➤SetRewardDatas');
            this.m_lobbyBridgeNode.emit(this.Game2Lobby.SkyBarNotify, function (comp) {
              comp.setReward(rewardData);
            });
          }
        };

        AppManager.InitBuffSystem = function InitBuffSystem(GetBuffBack, GetBuffNow, UseBuff, GetBuffInfo) {
          if (Tools.IsTadaCasino && this.m_lobbyBridgeNode) {
            error('➤➤➤➤➤InitBuffSystem');
            this.m_lobbyBridgeNode.emit(this.Game2Lobby.SkyBarNotify, function (comp) {
              comp.initBuffSystem(Number(Define.NOW_GAME_ID), GetBuffBack, GetBuffNow, UseBuff, GetBuffInfo);
            });
          }
        };

        AppManager.UseBuff = function UseBuff(id, idx) {
          if (Tools.IsTadaCasino && this.m_lobbyBridgeNode) {
            // error( '➤➤➤➤➤UseBuff' )
            this.m_lobbyBridgeNode.emit(this.Game2Lobby.SkyBarNotify, function (comp) {
              comp.useBuff(id, idx);
            });
          }
        };

        AppManager.GetBuffCardData = function GetBuffCardData(cb) {
          if (Tools.IsTadaCasino && this.m_lobbyBridgeNode) {
            // error( '➤➤➤➤➤GetBuffCardData' )
            this.m_lobbyBridgeNode.emit(this.Game2Lobby.SkyBarNotify, function (comp) {
              var buffCardData = comp.getAllBuffCardData();
              console.error('✚✚✚✚✚GetBuffCardData:', buffCardData);
              cb && cb(buffCardData);
            });
          }
        };

        AppManager.GetBuffCardNode = function GetBuffCardNode(buffID, addChildCb, amount) {
          if (amount === void 0) {
            amount = 1;
          }

          if (Tools.IsTadaCasino && this.m_lobbyBridgeNode) {
            // error( '➤➤➤➤➤GetBuffCardNode' )
            this.m_lobbyBridgeNode.emit(this.Game2Lobby.SkyBarNotify, function (comp) {
              var buffCardNode = comp.getBuffCardNode(buffID, amount);
              buffCardNode.name = buffID.toString();

              if (amount > 1) {
                buffCardNode.name = buffID.toString() + "+" + amount.toString();
              }

              console.error('✚✚✚✚✚GetBuffCardNode:', buffID, buffCardNode, amount);
              addChildCb && addChildCb(buffCardNode);
            });
          }
        };

        AppManager.ForceBuffEnd = function ForceBuffEnd(idx) {
          if (Tools.IsTadaCasino && this.m_lobbyBridgeNode) {
            // error( '➤➤➤➤➤GetBuffCardNode' )
            this.m_lobbyBridgeNode.emit(this.Game2Lobby.SkyBarNotify, function (comp) {
              comp.forceBuffEnd(idx);
            });
          }
        };

        AppManager.ConvertCardList = function ConvertCardList(cardList, str) {
          var rewardDatas = [];

          if (cardList && cardList.length > 0) {
            for (var i = 0; i < cardList.length; i++) {
              var rewards = {
                data: {
                  type: Define.RewardInfoDataType.ALBUM_CARD,
                  amount: cardList[i].Count ? cardList[i].Count : 0,
                  value: cardList[i].GameID ? cardList[i].GameID : 0,
                  value2: cardList[i].Level ? cardList[i].Level : 0,
                  value3: cardList[i].CardIndex ? cardList[i].CardIndex : 0,
                  value4: null
                }
              };
              rewardDatas.push(rewards);
            }

            console.error('ConvertCardList', JSON.stringify(rewardDatas));
            this.SetRewardDatas(rewardDatas, str);
          }
        } // public static GetAppVip()
        // {
        //     if ( Tools.IsTadaCasino && this.m_lobbyBridgeNode )
        //     {
        //         this.m_lobbyBridgeNode.emit(
        //             "onSubGameGetGameHud",
        //             ( comp: LobbyIngameUiDefine.CommonGameLayout ) => 
        //             {
        //                 // comp[ "setLevelUpEndCallback" ]( cb );
        //                 this.m_AppVip = comp.getVipLv();
        //             } );
        //     }
        // }
        ;

        AppManager.OnExit = function OnExit() {
          if (Tools.IsTadaCasino && this.m_lobbyBridgeNode) {
            this.m_lobbyBridgeNode.emit(this.Game2Lobby.SkyBarNotify, function (comp) {
              comp.node.targetOff(comp.EventType.IAP_CONSUME_COMPLETE);
            });
          }

          this.m_lobbyBridgeNode = null;
          this.canSendNovice = true;
          this.m_leaveCbs = [];

          if (typeof LobbyData !== "undefined") {
            LobbyData = undefined;
          }

          this.isShowedSkyBar = false;
        };

        _createClass(AppManager, null, [{
          key: "LobbyData",
          get:
          /**
           * 讓遊戲端取得APP大廳的資訊
           */
          function get() {
            if (typeof LobbyData !== "undefined") {
              return LobbyData;
            }

            if (UrlLobbyData) {
              return UrlLobbyData;
            } else if (Tools.GetLinkParameterByNameForLobbyData("LobbyData") && Tools.GetLinkParameterByNameForLobbyData("LobbyData") != "") {
              UrlLobbyData = JSON.parse(Tools.GetLinkParameterByNameForLobbyData("LobbyData"));
              return UrlLobbyData;
            } else {
              return null;
            }
          }
        }, {
          key: "LobbyBridge",
          get: function get() {
            if (!this.m_lobbyBridgeNode) {
              this.m_lobbyBridgeNode = find("LobbyPersistCanvas/LobbyBridge");
            }

            return this.m_lobbyBridgeNode;
          }
        }, {
          key: "BackPackInfo",
          get: // private static m_AppVip: number = null;
          // public static get Vip(): number
          // {
          //     if ( Tools.IsTadaCasino )
          //     {
          //         return this.m_AppVip;
          //     }
          //     else if ( VipManager.GetInstance().VipInfo )
          //     {
          //         return VipManager.GetInstance().VipInfo.Lv;
          //     }
          //     else
          //     {
          //         return null;
          //     }
          // }
          function get() {
            if (typeof LobbyData !== "undefined") {
              return LobbyData.backpack;
            } else {
              error("LobbyData is undefined!");
              return null;
            }
          }
        }]);

        return AppManager;
      }());
      AppManager.Game2Lobby = {
        GameClose: "onSubGameClosed",
        CloseByGame: "onSubGameCloseSelf",
        LoadingComplete: "onSubGameLoadingComplete",
        Rotation: "onSubGameRotation",
        SetNovice: "onSubGameSetNovice",
        Marquee: "onSubGameMarquee",
        SkyBarNotify: "onSubGameGetGameHud"
      };
      AppManager.Lobby2Game = {
        GameClose: "onLobbyCloseSubGame"
      };
      AppManager.LobbyComponentName = {
        marquee: "lobbyMarquee"
      };
      AppManager.Token = "";
      AppManager.m_lobbyBridgeNode = null;
      AppManager.m_addAutoShowSkyBarCB = false;
      AppManager.m_leaveCbs = [];
      AppManager.m_changeGameStateCb = null;
      AppManager.canSendNovice = true;
      AppManager.isShowedSkyBar = false;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AudioSourceExtension.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, AudioSource;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioSource = module.AudioSource;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "925baxqzmFKk7D1p7Z4daRN", "AudioSourceExtension", undefined);

      var ccclass = _decorator.ccclass;
      var AudioSourceExtension = exports('AudioSourceExtension', (_dec = ccclass("AudioSourceExtension"), _dec(_class = /*#__PURE__*/function (_AudioSource) {
        _inheritsLoose(AudioSourceExtension, _AudioSource);

        function AudioSourceExtension() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _AudioSource.call.apply(_AudioSource, [this].concat(args)) || this;
          _this._isLoaded = false;
          return _this;
        }

        var _proto = AudioSourceExtension.prototype;

        _proto.IsIdle = function IsIdle() {
          if (!this._player) {
            return false;
          }

          if (this.state == AudioSourceExtension.AudioState.PLAYING || this.state == AudioSourceExtension.AudioState.PAUSED) {
            return false;
          }

          return true;
        };

        _proto.Reset = function Reset() {
          this._isLoaded = false;
          this._player = null;
          this.clip = null;
        };

        return AudioSourceExtension;
      }(AudioSource)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AutoPlaySetting.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SoundManager.ts', './Define.ts', './Tools.ts', './ConnectionManager.ts', './LocaleStringManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Node, Button, Label, RichText, Toggle, log, Component, SoundManager, Define, Tools, ConnectionManager, LocaleStringManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Node = module.Node;
      Button = module.Button;
      Label = module.Label;
      RichText = module.RichText;
      Toggle = module.Toggle;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      ConnectionManager = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _class3;

      cclegacy._RF.push({}, "959620eWhNOTbnAXs05Z5Dm", "AutoPlaySetting", undefined);
      /**
       * AutoplaySetting的統一介面
       * 所有的AutoplaySetting需繼承
       * BarControler只能呼叫在這設定的函式
       */


      var AUTOPLAY_SETTING_PANEL_LIMIT_VALUE = [{
        MIN: 5,
        MAX: 999
      }, {
        MIN: 1,
        MAX: 999999999
      }, {
        MIN: 0,
        MAX: 999999999
      }, {
        MIN: 0,
        MAX: 999999999
      }, {}];
      var AUTOPLAY_SETTING_PANEL_CHANGE_STEP = [1, 1, 10, 10];
      var AUTOPLAY_SETTING_HOLD_SPEED = [1, 3, 5, 10, 50];
      var HOLD_INTERVEL = 0.05;
      var CLICK_INTERVEL = 0.2;
      var PRESS_INTERVEL = 0.05;
      var HOLD_TIME_THRESHOLD = 1;
      var AutoplaySettingIndex = exports('AutoplaySettingIndex', {
        TotalRound: 0,
        TotalBet: 1,
        LessChip: 2,
        GreatChip: 3
      });
      var ConstRoundNumber = [50, 100, 200, 500, 999];
      var PanelData = exports('PanelData', function PanelData() {
        this.TotalRound = {
          isCheck: false,
          value: "100"
        };
        this.TotalBet = {
          isCheck: false,
          value: ""
        };
        this.LessThan = {
          isCheck: false,
          value: ""
        };
        this.GreaterThan = {
          isCheck: false,
          value: ""
        };
      });
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AutoPlaySetting = exports('default', (_dec = property(Sprite), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property({
        type: Button,
        tooltip: "整塊的選項按鈕"
      }), _dec7 = property({
        type: Node,
        tooltip: "checkbox方塊"
      }), _dec8 = property({
        type: Node,
        tooltip: "checkbox mark"
      }), _dec9 = property(Button), _dec10 = property(Button), _dec11 = property(Button), _dec12 = property(Button), _dec13 = property(Label), _dec14 = property(Node), _dec15 = property(Node), _dec16 = property(RichText), _dec17 = property(Label), _dec18 = property(Node), _dec19 = property(Label), ccclass(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AutoPlaySetting, _Component);

        function AutoPlaySetting() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_title", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_totalRoundCheckNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_totalBetCheckNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_chipGreatCheckNode", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_chipLessCheckNode", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_checkboxBtn", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_checkboxBg", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_checkboxMark", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_closeBtn", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_cancelBtn", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_confirmBtn", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_constRoundBtn", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_constRoundNum", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_increaseBtn", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_decreaseBtn", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_infoValue", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_infoTxt", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_totalRoundBg", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_constRoundTxt", _descriptor19, _assertThisInitialized(_this));

          _this.m_settingInfoData = [100, 100, 0, 0];
          _this.m_confirmCb = null;
          _this.m_cancelCb = null;
          _this.m_countTarget = null;
          _this.m_isCountStart = false;
          _this.m_increaseOrDecrease = 1;
          _this.m_holdTime = 0;
          _this.m_typeIndex = 0;
          _this.m_timer = HOLD_INTERVEL;
          _this.m_holdIncreaseStep = 0;
          _this.m_currentTouchName = null;
          _this.m_isInvert = false;
          _this.m_aid = void 0;
          _this.m_apiid = void 0;
          _this.m_gameid = void 0;
          _this.m_bottombarView = void 0;
          _this.m_storageKey = "";
          _this.m_isLandscape = false;
          _this.m_totalTime = 0;
          _this.m_totalRound = 5;
          _this.m_totalBet = 1;
          _this.m_chipLessLimit = 0;
          _this.m_chipGreatLimit = 0;
          _this.m_isUseWisePlay = false;
          _this.m_checkTotalRound = "-";
          _this.m_checkTotalBet = "-";
          _this.m_checkChipGreatLimit = "-";
          _this.m_checkChipLessLimit = "-";
          _this.m_isInTrial = false;
          _this.m_lastCurrencyID = void 0;
          _this.m_singleWin = -1;
          _this.m_nowBet = -1;
          _this.m_tempBet = -1;
          return _this;
        }

        var _proto = AutoPlaySetting.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this; // 預設要讓局數亮起來
          // this.m_totalRoundCheckNode.getComponent( Toggle ).check();


          this.m_totalRoundCheckNode.getComponent(Toggle).isChecked = true;

          if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG)) {
            this.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG).active = true;
          } //選擇設定


          var _loop = function _loop(i) {
            var checkNode = _this2.node.getChildByName(AutoPlaySetting.UIName.CHECKBOX + i);

            if (checkNode) {
              checkNode.on('toggle', function (event) {
                if (event.isChecked) {
                  event.node.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG).active = true;
                } else {
                  if (_this2.m_isInvert && (event.node.name == AutoPlaySetting.UIName.CHECKBOX + "3" || event.node.name == AutoPlaySetting.UIName.CHECKBOX + "4")) {
                    _this2.m_isInvert = false;
                  } else if (event.node.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG).active) ;

                  event.node.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG).active = false;
                }
              }, _this2);
            }

            var buttonNode = null;

            if (checkNode) {
              buttonNode = checkNode.getChildByName(AutoPlaySetting.UIName.BUTTON);
            }

            if (buttonNode) {
              buttonNode.on(Node.EventType.TOUCH_START, function (event) {
                // log("touch start", event)
                // event.stopPropagationImmediate();
                // event.stopPropagation();
                event.propagationImmediateStopped = true;
                event.propagationStopped = true;

                if (_this2.m_currentTouchName == null) {
                  _this2.m_currentTouchName = event.target.name;
                } else {
                  if (event.target && event.target.active == false) {
                    _this2.m_currentTouchName = event.target.name;
                  }
                }
              }, _this2);
              buttonNode.on(Node.EventType.TOUCH_END, function (event) {
                if (_this2.m_currentTouchName != event.target.name) {
                  return;
                }

                _this2.m_currentTouchName = null;
                var btn = buttonNode.getComponent(Button);

                if (!_this2.m_bottombarView.IsGLIGames && !_this2.m_bottombarView.IsBMMGames && !Tools.KeepGLISetting && btn.interactable) {
                  var toggle = checkNode.getComponent(Toggle);

                  if (toggle.isChecked) {
                    SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_OFF);
                    toggle.isChecked = false;
                  } else {
                    SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_ON);
                    toggle.isChecked = true;
                  }
                }
              }, _this2);
              buttonNode.on(Node.EventType.TOUCH_CANCEL, function (event) {
                if (_this2.m_currentTouchName == event.target.name) {
                  _this2.m_currentTouchName = null;
                }

                _this2.m_currentTouchName = null;
              }, _this2);
            } // 有加減之類事件


            if (i < 5) {
              //減
              var subBtnNode = null;

              if (checkNode) {
                subBtnNode = checkNode.getChildByName(AutoPlaySetting.UIName.BTN_DECREASE);
              }

              if (!subBtnNode) {
                _this2.SetSubBtnNode(_this2.m_decreaseBtn[i - 1], i - 1);
              } else {
                subBtnNode.on(Node.EventType.TOUCH_START, function (event) {
                  // log("touch start", event)
                  // event.stopPropagationImmediate();
                  // event.stopPropagation();
                  event.propagationImmediateStopped = true;
                  event.propagationStopped = true;

                  if (_this2.m_currentTouchName == null) {
                    _this2.m_currentTouchName = checkNode.name + "/" + event.target.name;
                    var parent = event.target.parent;
                    var valueLabel = parent.getChildByName(AutoPlaySetting.UIName.VALUE).getComponent(RichText);
                    var index = Number(parent.name.split(AutoPlaySetting.UIName.CHECKBOX)[1]) - 1;
                    _this2.m_typeIndex = index;
                    _this2.m_holdTime = 0;
                    _this2.m_holdIncreaseStep = 0;
                    _this2.m_countTarget = valueLabel;
                    _this2.m_increaseOrDecrease = -1;
                    HOLD_INTERVEL = CLICK_INTERVEL;
                    _this2.m_timer = HOLD_INTERVEL;
                    _this2.m_isCountStart = true;

                    if (!_this2.m_bottombarView.IsGLIGames && !_this2.m_bottombarView.IsBMMGames && !Tools.KeepGLISetting) {
                      parent.getComponent(Toggle).isChecked = true;
                    }
                  } // this.CleanConstRoundBtnState();

                }, _this2);
                subBtnNode.on(Node.EventType.TOUCH_END, function (event) {
                  if (_this2.m_currentTouchName == checkNode.name + "/" + event.target.name) {
                    _this2.m_currentTouchName = null;
                    var parent = event.target.parent;
                    var valueLabel = parent.getChildByName(AutoPlaySetting.UIName.VALUE).getComponent(RichText);
                    var index = Number(parent.name.split(AutoPlaySetting.UIName.CHECKBOX)[1]) - 1;

                    var value = _this2.OnClickChange(valueLabel, AUTOPLAY_SETTING_PANEL_CHANGE_STEP[index], -1, AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[index].MIN, AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[index].MAX, index);

                    _this2.m_settingInfoData[index] = index > 1 ? _this2.m_bottombarView.GetRawValue(value) : value;
                    _this2.m_isCountStart = false;
                    SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);

                    if (parent.name == 'checkbox1') {
                      _this2.ChangeTotalRoundBg(false);
                    }
                  }
                }, _this2);
                subBtnNode.on(Node.EventType.TOUCH_CANCEL, function (event) {
                  if (_this2.m_currentTouchName == checkNode.name + "/" + event.target.name) {
                    _this2.m_currentTouchName = null;
                    var parent = event.target.parent;
                    var valueLabel = parent.getChildByName(AutoPlaySetting.UIName.VALUE).getComponent(RichText);
                    var index = Number(parent.name.split(AutoPlaySetting.UIName.CHECKBOX)[1]) - 1;

                    var value = _this2.OnClickChange(valueLabel, AUTOPLAY_SETTING_PANEL_CHANGE_STEP[index], -1, AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[index].MIN, AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[index].MAX, index);

                    _this2.m_settingInfoData[index] = index > 1 ? _this2.m_bottombarView.GetRawValue(value) : value;
                    _this2.m_isCountStart = false;
                  }
                }, _this2);
              } //加


              var addBtnNode = null;

              if (checkNode) {
                addBtnNode = checkNode.getChildByName(AutoPlaySetting.UIName.BTN_INCREASE);
              }

              if (!addBtnNode) {
                _this2.SetAddBtnNode(_this2.m_increaseBtn[i - 1], i - 1);
              } else {
                addBtnNode.on(Node.EventType.TOUCH_START, function (event) {
                  // log("touch start", event)
                  // event.stopPropagationImmediate();
                  // event.stopPropagation();
                  event.propagationImmediateStopped = true;
                  event.propagationStopped = true;

                  if (_this2.m_currentTouchName == null) {
                    _this2.m_currentTouchName = checkNode.name + "/" + event.target.name;
                    var parent = event.target.parent;
                    var valueLabel = parent.getChildByName(AutoPlaySetting.UIName.VALUE).getComponent(RichText);
                    var index = Number(parent.name.split(AutoPlaySetting.UIName.CHECKBOX)[1]) - 1;
                    _this2.m_typeIndex = index;
                    _this2.m_holdTime = 0;
                    _this2.m_holdIncreaseStep = 0;
                    _this2.m_countTarget = valueLabel;
                    _this2.m_increaseOrDecrease = 1;
                    HOLD_INTERVEL = CLICK_INTERVEL;
                    _this2.m_timer = HOLD_INTERVEL;
                    _this2.m_isCountStart = true;

                    if (!_this2.m_bottombarView.IsGLIGames && !_this2.m_bottombarView.IsBMMGames && !Tools.KeepGLISetting) {
                      parent.getComponent(Toggle).isChecked = true;
                    }
                  } // this.CleanConstRoundBtnState();

                }, _this2);
                addBtnNode.on(Node.EventType.TOUCH_END, function (event) {
                  // log("touch end")
                  if (_this2.m_currentTouchName == checkNode.name + "/" + event.target.name) {
                    _this2.m_currentTouchName = null;
                    var parent = event.target.parent;
                    var valueLabel = parent.getChildByName(AutoPlaySetting.UIName.VALUE).getComponent(RichText);
                    var index = Number(parent.name.split(AutoPlaySetting.UIName.CHECKBOX)[1]) - 1;

                    var value = _this2.OnClickChange(valueLabel, AUTOPLAY_SETTING_PANEL_CHANGE_STEP[index], 1, AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[index].MIN, AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[index].MAX, index);

                    _this2.m_settingInfoData[index] = index > 1 ? _this2.m_bottombarView.GetRawValue(value) : value;
                    _this2.m_isCountStart = false;
                    SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);

                    if (parent.name == 'checkbox1') {
                      _this2.ChangeTotalRoundBg(false);
                    }
                  }
                }, _this2);
                addBtnNode.on(Node.EventType.TOUCH_CANCEL, function (event) {
                  // log("touch end")
                  if (_this2.m_currentTouchName == checkNode.name + "/" + event.target.name) {
                    _this2.m_currentTouchName = null;
                    var parent = event.target.parent;
                    var valueLabel = parent.getChildByName(AutoPlaySetting.UIName.VALUE).getComponent(RichText);
                    var index = Number(parent.name.split(AutoPlaySetting.UIName.CHECKBOX)[1]) - 1;

                    var value = _this2.OnClickChange(valueLabel, AUTOPLAY_SETTING_PANEL_CHANGE_STEP[index], 1, AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[index].MIN, AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[index].MAX, index);

                    _this2.m_settingInfoData[index] = index > 1 ? _this2.m_bottombarView.GetRawValue(value) : value;
                    _this2.m_isCountStart = false;
                  }
                }, _this2);
              }
            }
          };

          for (var i = 1; i <= 4; i++) {
            _loop(i);
          }

          if (this.m_confirmBtn) {
            this.m_confirmBtn.node.on("click", function (event) {
              _this2.m_totalRound = _this2.m_settingInfoData[AutoplaySettingIndex.TotalRound];

              if (_this2.IsCheckTotalRound) {
                _this2.SetUseWisePlay(true);

                _this2.m_checkTotalRound = String(_this2.m_totalRound);
              } else {
                _this2.m_checkTotalRound = "-";
              }

              if (_this2.IsCheckTotalBet) {
                _this2.SetUseWisePlay(true);

                _this2.m_totalBet = _this2.m_settingInfoData[AutoplaySettingIndex.TotalBet];
                _this2.m_checkTotalBet = String(_this2.m_totalBet) + 'X';
              } else {
                _this2.m_checkTotalBet = "-";
              }

              if (_this2.IsCheckChipGreat) {
                _this2.SetUseWisePlay(true);

                _this2.m_chipGreatLimit = _this2.m_settingInfoData[AutoplaySettingIndex.GreatChip];
                _this2.m_checkChipGreatLimit = String(_this2.m_chipGreatLimit);
              } else {
                _this2.m_checkChipGreatLimit = "-";
              }

              if (_this2.IsCheckChipLess) {
                _this2.SetUseWisePlay(true);

                _this2.m_chipLessLimit = _this2.m_settingInfoData[AutoplaySettingIndex.LessChip];
                _this2.m_checkChipLessLimit = String(_this2.m_chipLessLimit);
              } else {
                _this2.m_checkChipLessLimit = "-";
              }

              _this2.m_confirmCb();

              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN, false);
              ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(_this2.m_aid, _this2.m_apiid, Number(_this2.m_gameid), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.WISEAUTO_TOTAL, _this2.SumaryWiseAutoPlay(), _this2.m_isLandscape));
            });
          }

          this.m_cancelBtn.node.on("click", function (event) {
            // this.node.active = false
            if (_this2.m_confirmBtn) {
              // this.SavePanelData();
              _this2.m_cancelCb();

              SoundManager.getInstance().Play(Define.AudioClips.COMMON_CANCEL_BTN);
            } else {
              if (_this2.IsCheckAnyToggle()) {
                _this2.m_totalRound = _this2.m_settingInfoData[AutoplaySettingIndex.TotalRound];

                if (_this2.IsCheckTotalBet) {
                  _this2.m_totalBet = _this2.m_settingInfoData[AutoplaySettingIndex.TotalBet];
                }

                if (_this2.IsCheckChipGreat) {
                  _this2.m_chipGreatLimit = _this2.m_settingInfoData[AutoplaySettingIndex.GreatChip];
                }

                if (_this2.IsCheckChipLess) {
                  _this2.m_chipLessLimit = _this2.m_settingInfoData[AutoplaySettingIndex.LessChip];
                }

                _this2.m_confirmCb();
              } else {
                _this2.m_cancelCb();

                SoundManager.getInstance().Play(Define.AudioClips.COMMON_CANCEL_BTN);
              }
            }
          });

          if (this.m_closeBtn) {
            this.m_closeBtn.node.on("click", function (event) {
              // this.node.active = false
              if (_this2.m_confirmBtn) {
                _this2.m_cancelCb();

                SoundManager.getInstance().Play(Define.AudioClips.COMMON_CANCEL_BTN);
              } else {
                if (_this2.IsCheckAnyToggle()) {
                  _this2.m_totalRound = _this2.m_settingInfoData[AutoplaySettingIndex.TotalRound];

                  if (_this2.IsCheckTotalBet) {
                    _this2.m_totalBet = _this2.m_settingInfoData[AutoplaySettingIndex.TotalBet];
                  }

                  if (_this2.IsCheckChipGreat) {
                    _this2.m_chipGreatLimit = _this2.m_settingInfoData[AutoplaySettingIndex.GreatChip];
                  }

                  if (_this2.IsCheckChipLess) {
                    _this2.m_chipLessLimit = _this2.m_settingInfoData[AutoplaySettingIndex.LessChip];
                  }

                  _this2.m_confirmCb();
                } else {
                  _this2.m_cancelCb();

                  SoundManager.getInstance().Play(Define.AudioClips.COMMON_CANCEL_BTN);
                }
              }
            });
          } //回合數改為特定回合


          var _loop2 = function _loop2(_i) {
            label = null;

            if (_this2.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.VALUE)) {
              label = _this2.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.VALUE).getComponent(RichText);
            } else {
              label = _this2.m_infoValue[AutoplaySettingIndex.TotalRound];
            } // this.m_constRoundBtn[ i ].node.on( "click", () =>
            // {
            // } )


            _this2.m_constRoundBtn[_i].node.on(Node.EventType.TOUCH_START, function (event) {
              // event.stopPropagationImmediate();
              // event.stopPropagation();
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this2.m_currentTouchName == null) {
                _this2.m_currentTouchName = event.target.name;
              } else {
                if (event.target && event.target.active == false) {
                  _this2.m_currentTouchName = event.target.name;
                }
              }
            });

            _this2.m_constRoundBtn[_i].node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              if (_this2.m_currentTouchName == event.target.name) {
                _this2.m_currentTouchName = null;
              }
            });

            _this2.m_constRoundBtn[_i].node.on(Node.EventType.TOUCH_END, function (event) {
              if (_this2.m_currentTouchName != event.target.name) {
                return;
              }

              _this2.m_currentTouchName = null; // this.CleanConstRoundBtnState();
              // this.m_constRoundBtn[ i ].node.getChildByName( AutoPlaySetting.UIName.IMG_ON_BG ).active = true;

              if (_this2.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG)) {
                _this2.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG).active = true;
              }

              if (!_this2.m_bottombarView.IsGLIGames && !_this2.m_bottombarView.IsBMMGames && !Tools.KeepGLISetting) {
                _this2.m_totalRoundCheckNode.getComponent(Toggle).isChecked = true;
              }

              _this2.m_settingInfoData[0] = ConstRoundNumber[_i];
              label.string = ConstRoundNumber[_i].toString();
              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);

              _this2.ChangeTotalRoundBg(false);
            });
          };

          for (var _i = 0; _i < this.m_constRoundBtn.length; _i++) {
            var label;

            _loop2(_i);
          }
        };

        _proto.SetSubBtnNode = function SetSubBtnNode(subBtnNode, id) {
          var _this3 = this;

          subBtnNode.on(Node.EventType.TOUCH_START, function (event) {
            // log("touch start", event)
            // event.stopPropagationImmediate();
            // event.stopPropagation();
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this3.m_currentTouchName == null) {
              _this3.m_currentTouchName = event.target.name + id.toString();
              var root = event.target.parent;
              var index = id;
              _this3.m_typeIndex = index;
              _this3.m_holdTime = 0;
              _this3.m_holdIncreaseStep = 0;
              _this3.m_countTarget = _this3.m_infoValue[id];
              _this3.m_increaseOrDecrease = -1;
              HOLD_INTERVEL = CLICK_INTERVEL;
              _this3.m_timer = HOLD_INTERVEL;
              _this3.m_isCountStart = true;

              if (!_this3.m_bottombarView.IsGLIGames && !_this3.m_bottombarView.IsBMMGames && !Tools.KeepGLISetting) {
                root.parent.getComponent(Toggle).isChecked = true;
              }
            } // this.CleanConstRoundBtnState();

          }, this);
          subBtnNode.on(Node.EventType.TOUCH_END, function (event) {
            if (_this3.m_currentTouchName == event.target.name + id.toString()) {
              _this3.m_currentTouchName = null;
              var index = id;

              var value = _this3.OnClickChange(_this3.m_infoValue[id], AUTOPLAY_SETTING_PANEL_CHANGE_STEP[index], -1, AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[index].MIN, AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[index].MAX, index);

              _this3.m_settingInfoData[index] = index > 1 ? _this3.m_bottombarView.GetRawValue(value) : value;
              _this3.m_isCountStart = false;
              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN); // if ( parent.name == 'checkbox1' )
              // {
              //     this.ChangeTotalRoundBg( false );
              // }
            }
          }, this);
          subBtnNode.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this3.m_currentTouchName == event.target.name + id.toString()) {
              _this3.m_currentTouchName = null;
              var valueLabel = _this3.m_infoValue[id];
              var index = id;

              var value = _this3.OnClickChange(valueLabel, AUTOPLAY_SETTING_PANEL_CHANGE_STEP[index], -1, AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[index].MIN, AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[index].MAX, index);

              _this3.m_settingInfoData[index] = index > 1 ? _this3.m_bottombarView.GetRawValue(value) : value;
              _this3.m_isCountStart = false;
            }
          }, this);
        };

        _proto.SetAddBtnNode = function SetAddBtnNode(addBtnNode, id) {
          var _this4 = this;

          addBtnNode.on(Node.EventType.TOUCH_START, function (event) {
            // log("touch start", event)
            // event.stopPropagationImmediate();
            // event.stopPropagation();
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this4.m_currentTouchName == null) {
              _this4.m_currentTouchName = event.target.name + id.toString();
              var root = event.target.parent;
              var index = id;
              _this4.m_typeIndex = index;
              _this4.m_holdTime = 0;
              _this4.m_holdIncreaseStep = 0;
              _this4.m_countTarget = _this4.m_infoValue[id];
              _this4.m_increaseOrDecrease = 1;
              HOLD_INTERVEL = CLICK_INTERVEL;
              _this4.m_timer = HOLD_INTERVEL;
              _this4.m_isCountStart = true;

              if (!_this4.m_bottombarView.IsGLIGames && !_this4.m_bottombarView.IsBMMGames && !Tools.KeepGLISetting) {
                root.parent.getComponent(Toggle).isChecked = true;
              }
            } // this.CleanConstRoundBtnState();

          }, this);
          addBtnNode.on(Node.EventType.TOUCH_END, function (event) {
            // log("touch end")
            if (_this4.m_currentTouchName == event.target.name + id.toString()) {
              _this4.m_currentTouchName = null;
              var valueLabel = _this4.m_infoValue[id];
              var index = id;

              var value = _this4.OnClickChange(valueLabel, AUTOPLAY_SETTING_PANEL_CHANGE_STEP[index], 1, AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[index].MIN, AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[index].MAX, index);

              _this4.m_settingInfoData[index] = index > 1 ? _this4.m_bottombarView.GetRawValue(value) : value;
              _this4.m_isCountStart = false;
              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN); // if ( parent.name == 'checkbox1' )
              // {
              //     this.ChangeTotalRoundBg( false );
              // }
            }
          }, this);
          addBtnNode.on(Node.EventType.TOUCH_CANCEL, function (event) {
            // log("touch end")
            if (_this4.m_currentTouchName == event.target.name + id.toString()) {
              _this4.m_currentTouchName = null;
              var valueLabel = _this4.m_infoValue[id];
              var index = id;

              var value = _this4.OnClickChange(valueLabel, AUTOPLAY_SETTING_PANEL_CHANGE_STEP[index], 1, AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[index].MIN, AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[index].MAX, index);

              _this4.m_settingInfoData[index] = index > 1 ? _this4.m_bottombarView.GetRawValue(value) : value;
              _this4.m_isCountStart = false;
            }
          }, this);
        };

        _proto.Init = function Init(aid, apiid, gameid, bottombarView) {
          this.m_aid = aid;
          this.m_apiid = apiid;
          this.m_gameid = gameid;
          this.m_bottombarView = bottombarView;
          this.m_storageKey = this.m_aid + ":" + this.m_gameid + ":AutoPlayPanel"; // if ( this.m_apiid == Define.GLIApi.COLOMBIA.toString() )

          if (this.m_bottombarView.IsGLIGames || this.m_bottombarView.IsBMMGames || Tools.KeepGLISetting) {
            Define.GLIAutoPlaySingleWinRate();
            this.m_totalRoundCheckNode.getComponent(Toggle).isChecked = true;
            this.m_totalRoundCheckNode.getComponent(Toggle).interactable = false;
            this.m_totalBetCheckNode.getComponent(Toggle).isChecked = true;
            this.m_totalBetCheckNode.getComponent(Toggle).interactable = false;
            this.m_chipGreatCheckNode.getComponent(Toggle).isChecked = true;
            this.m_chipGreatCheckNode.getComponent(Toggle).interactable = false;
            this.m_chipLessCheckNode.getComponent(Toggle).isChecked = true;
            this.m_chipLessCheckNode.getComponent(Toggle).interactable = false;
            this.CloseButtonAndBox();
          }

          if (Define.HAS_CLIENTMODE) {
            if (Define.AUTOPLAY_MAX_ROUND > 0 && AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[AutoplaySettingIndex.TotalRound].MAX != Define.AUTOPLAY_MAX_ROUND) {
              AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[AutoplaySettingIndex.TotalRound].MAX = Define.AUTOPLAY_MAX_ROUND;
              var data = Define.AUTOPLAY_MAX_ROUND < 100 ? Define.AUTOPLAY_MAX_ROUND : 100;
              this.m_settingInfoData = [data, 0, 0, 0];
            }

            for (var i = 0; i < this.m_constRoundBtn.length; i++) {
              if (i + 1 > Define.AUTOPLAY_ROUND_BTN.length || Define.AUTOPLAY_ROUND_BTN[i] && Define.AUTOPLAY_ROUND_BTN[i] > Define.AUTOPLAY_MAX_ROUND) {
                this.m_constRoundBtn[i].node.active = false;
                this.m_constRoundNum[i].node.active = false; // TADA數字是獨立節點
              } else {
                ConstRoundNumber[i] = Define.AUTOPLAY_ROUND_BTN[i];

                if (this.m_constRoundNum[i]) {
                  this.m_constRoundNum[i].string = Define.AUTOPLAY_ROUND_BTN[i].toString();
                }
              }
            }
          }
        };

        _proto.CloseButtonAndBox = function CloseButtonAndBox() {
          if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG)) {
            this.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG).active = false;
          }

          for (var i = 0; i < this.m_checkboxBg.length; i++) {
            if (this.m_checkboxBtn[0]) {
              this.m_checkboxBtn[i].interactable = false;
            }

            this.m_checkboxBg[i].active = false;
            this.m_checkboxMark[i].active = false;
          }
        };

        _proto.SetBallIcon = function SetBallIcon(icons) {};

        _proto.SetTotalRound = function SetTotalRound(round) {
          if (Number(round) > AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[AutoplaySettingIndex.TotalRound].MAX) {
            round = AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[AutoplaySettingIndex.TotalRound].MAX.toString();
          }

          if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.VALUE)) {
            this.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.VALUE).getComponent(Label).string = round;
          } else {
            this.m_infoValue[AutoplaySettingIndex.TotalRound].string = round;
          }

          this.SavePanelData();
        } //清除固定回和數被選選擇的狀態
        ;

        _proto.CleanConstRoundBtnState = function CleanConstRoundBtnState() {
          for (var i = 0; i < this.m_constRoundBtn.length; i++) {
            if (this.m_constRoundBtn[i].node.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG)) {
              this.m_constRoundBtn[i].node.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG).active = false;
            }
          }
        };

        _proto.OnClickChange = function OnClickChange(tagert, step, increaseOrDecrease, minus, maximum, index) {
          var string = this.m_countTarget.string.replace(/<.*?>|\(\d*\)|[^0-9|.]/g, "").replace(/^\./g, "");
          var value;

          if (!isNaN(Number(string))) {
            value = Number(string);
          }

          value = Tools.plus(value, Tools.times(step, increaseOrDecrease));

          if (value <= minus) {
            value = minus;
          } else if (value > maximum) {
            value = maximum;
          } // if ( index == 1 || index == 2 || index == 3 )


          if (index == 2 || index == 3) {
            tagert.string = (this.m_isInTrial ? "" : "<p>" + Define.DollarSymbol + " </p>") + Tools.FormatNumberThousands(value, Tools.FORMAT_NUMBER_TYPE.NONE_DOT) + Define.DollarSymbolSuffix;
            tagert.fontFamily = Define.DollarFontFamily;
          } else if (index == 1) {
            tagert.string = Tools.FormatNumberThousands(value, Tools.FORMAT_NUMBER_TYPE.NONE_DOT) + "X";
          } else {
            tagert.string = Tools.FormatNumberThousands(value, Tools.FORMAT_NUMBER_TYPE.NONE_DOT);
          }

          return value;
        };

        _proto.SetInitChips = function SetInitChips(chips, isInTrail, bet, currencyID) {
          this.m_isInTrial = isInTrail;
          this.m_nowBet = this.m_bottombarView.GetNowBetValue();
          this.LoadPanelData();
          var chipGreatLabel = null;
          var chipLessLabel = null;

          if (this.m_chipGreatCheckNode.getChildByName(AutoPlaySetting.UIName.VALUE) && this.m_chipLessCheckNode.getChildByName(AutoPlaySetting.UIName.VALUE)) {
            chipGreatLabel = this.m_chipGreatCheckNode.getChildByName(AutoPlaySetting.UIName.VALUE).getComponent(RichText);
            chipLessLabel = this.m_chipLessCheckNode.getChildByName(AutoPlaySetting.UIName.VALUE).getComponent(RichText);
          } else {
            chipGreatLabel = this.m_infoValue[AutoplaySettingIndex.GreatChip];
            chipLessLabel = this.m_infoValue[AutoplaySettingIndex.LessChip];
          }

          var GreatNum = this.m_bottombarView.GetRawValue(parseInt(chipGreatLabel.string.replace(/<.*?>|[^0-9|.]/g, "")));
          var LessNum = this.m_bottombarView.GetRawValue(parseInt(chipLessLabel.string.replace(/<.*?>|[^0-9|.]/g, "")));
          var greatChips = chips * 1.5;
          var lessChips = chips * 0.4;
          var changeCurrency = currencyID != this.m_lastCurrencyID;
          this.m_lastCurrencyID = currencyID;
          var chipGreatString = "0";
          var chipLessString = "0"; // GLI規格

          if (this.m_bottombarView.IsGLIGames || this.m_bottombarView.IsBMMGames || Tools.KeepGLISetting) {
            var greatValue = 0;
            var mod = chips % 1000;

            var _bet = Tools.times(this.m_nowBet, 1000);

            var carry = mod > 0 ? 1000 : 0;

            if (chips >= 1000) {
              greatValue = Tools.plus(Tools.plus(Tools.minus(chips, mod), carry), _bet);
            } else {
              greatValue = 1000;
            }

            chipGreatString = Tools.FormatNumberThousands(greatValue, Tools.FORMAT_NUMBER_TYPE.NONE_DOT);
            greatChips = greatValue;
            lessChips = 0;
          } else {
            chipGreatString = Tools.FormatNumberThousands(this.m_bottombarView.GetDisplayValue(greatChips), Tools.FORMAT_NUMBER_TYPE.NONE_DOT);
            chipLessString = Tools.FormatNumberThousands(this.m_bottombarView.GetDisplayValue(lessChips), Tools.FORMAT_NUMBER_TYPE.NONE_DOT);
          }

          if (changeCurrency || chipGreatLabel.string == "" || chips > GreatNum || this.m_bottombarView.IsGLIGames || this.m_bottombarView.IsBMMGames || Tools.KeepGLISetting) {
            chipGreatLabel.string = (this.m_isInTrial ? "" : "<p>" + Define.DollarSymbol + " </p>") + chipGreatString + Define.DollarSymbolSuffix;
            chipGreatLabel.fontFamily = Define.DollarFontFamily;
            this.m_settingInfoData[AutoplaySettingIndex.GreatChip] = Math.floor(greatChips);
          } else {
            this.m_settingInfoData[AutoplaySettingIndex.GreatChip] = GreatNum;
          }

          if (changeCurrency || chipLessLabel.string == "" || chips < LessNum || this.m_bottombarView.IsGLIGames || this.m_bottombarView.IsBMMGames || Tools.KeepGLISetting) {
            chipLessLabel.string = (this.m_isInTrial ? "" : "<p>" + Define.DollarSymbol + " </p>") + chipLessString + Define.DollarSymbolSuffix;
            chipLessLabel.fontFamily = Define.DollarFontFamily;
            this.m_settingInfoData[AutoplaySettingIndex.LessChip] = Math.floor(lessChips);
          } else {
            this.m_settingInfoData[AutoplaySettingIndex.LessChip] = LessNum;
          }

          var roundLabel = null;

          if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.VALUE)) {
            roundLabel = this.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.VALUE).getComponent(RichText);
          } else {
            roundLabel = this.m_infoValue[AutoplaySettingIndex.TotalRound];
          }

          if (roundLabel.string == "0") {
            roundLabel.string = AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[AutoplaySettingIndex.TotalRound].MIN.toString();
          }

          if (Number(roundLabel.string) > AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[AutoplaySettingIndex.TotalRound].MAX) {
            roundLabel.string = AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[AutoplaySettingIndex.TotalRound].MAX.toString();
          }

          var betLabel = null;

          if (this.m_totalBetCheckNode.getChildByName(AutoPlaySetting.UIName.VALUE)) {
            betLabel = this.m_totalBetCheckNode.getChildByName(AutoPlaySetting.UIName.VALUE).getComponent(RichText);
          } else {
            betLabel = this.m_infoValue[AutoplaySettingIndex.TotalBet];
          }

          if (betLabel.string == "0") {
            betLabel.string = AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[AutoplaySettingIndex.TotalBet].MIN.toString();
          }

          if (Define.IS_DEMO) {
            this.m_totalRoundCheckNode.getComponent(Toggle).isChecked = true;
            this.m_totalRoundCheckNode.getComponent(Toggle).interactable = false;

            if (this.m_checkboxBtn[0]) {
              this.m_checkboxBtn[0].interactable = false;
            }
          }
        };

        _proto.IsCheckAnyToggle = function IsCheckAnyToggle() {
          log("IsCheckAnyToggle");

          if (this.m_totalBetCheckNode.getComponent(Toggle).isChecked) {
            return true;
          }

          if (this.m_totalRoundCheckNode.getComponent(Toggle).isChecked) {
            return true;
          }

          if (this.m_chipLessCheckNode.getComponent(Toggle).isChecked) {
            return true;
          }

          return false;
        };

        _proto.update = function update(dt) {
          if (this.m_isCountStart) {
            this.m_totalTime += dt;

            if (this.m_totalTime >= HOLD_TIME_THRESHOLD) {
              HOLD_INTERVEL = PRESS_INTERVEL;
            } else {
              HOLD_INTERVEL = CLICK_INTERVEL;
            }

            if (this.m_timer < 0) {
              this.m_holdTime += HOLD_INTERVEL; // log(this.m_typeIndex)

              var holdIncreaseStep = 0;

              if (this.m_holdTime > 6) {
                holdIncreaseStep = AUTOPLAY_SETTING_HOLD_SPEED[4];
              } else if (this.m_holdTime > 4.5) {
                holdIncreaseStep = AUTOPLAY_SETTING_HOLD_SPEED[3];
              } else if (this.m_holdTime > 3) {
                holdIncreaseStep = AUTOPLAY_SETTING_HOLD_SPEED[2];
              } else if (this.m_holdTime > 1) {
                holdIncreaseStep = AUTOPLAY_SETTING_HOLD_SPEED[1];
              } else {
                holdIncreaseStep = AUTOPLAY_SETTING_HOLD_SPEED[0];
              }

              this.m_holdIncreaseStep = Tools.plus(this.m_holdIncreaseStep, holdIncreaseStep);
              var string = this.m_countTarget.string.replace(/<.*?>|\(\d*\)|[^0-9|.]/g, "");
              var value;

              if (!isNaN(Number(string))) {
                value = Number(string);
              }

              var step = Tools.plus(this.m_holdIncreaseStep, AUTOPLAY_SETTING_PANEL_CHANGE_STEP[this.m_typeIndex]);
              value = Tools.plus(value, Tools.times(step, this.m_increaseOrDecrease)); // log(value)

              if (value < AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[this.m_typeIndex].MIN) {
                value = AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[this.m_typeIndex].MIN;
              } else if (value > AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[this.m_typeIndex].MAX) {
                value = AUTOPLAY_SETTING_PANEL_LIMIT_VALUE[this.m_typeIndex].MAX;
              }

              if (this.m_typeIndex == 2 || this.m_typeIndex == 3) {
                this.m_countTarget.string = (this.m_isInTrial ? "" : "<p>" + Define.DollarSymbol + " </p>") + Tools.FormatNumberThousands(value, Tools.FORMAT_NUMBER_TYPE.NONE_DOT) + Define.DollarSymbolSuffix;
                this.m_countTarget.fontFamily = Define.DollarFontFamily;
              } else {
                this.m_countTarget.string = Tools.FormatNumberThousands(value, Tools.FORMAT_NUMBER_TYPE.NONE_DOT);
              }

              this.m_settingInfoData[this.m_typeIndex] = this.m_typeIndex > 1 ? this.m_bottombarView.GetRawValue(value) : value;
              this.m_timer = HOLD_INTERVEL;
            } else {
              this.m_timer -= dt;
            }
          }
        };

        _proto.GetString = function GetString(key) {
          return LocaleStringManager.GetInstance().GetString(key);
        };

        _proto.SetTxt = function SetTxt() {
          var font = null;

          if (LocaleStringManager.CurrLang === Define.Lang.MM) {
            font = Define.DefaultFont;
          }

          if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.TXT1)) {
            this.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.TXT1).getComponent(Label).string = this.GetString(Define.StringKey.AUTO_PLAY_PANEL_TOTALROUND);
            this.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.TXT1).getComponent(Label).font = font;
          } else {
            this.m_infoTxt[AutoplaySettingIndex.TotalRound].string = this.GetString(Define.StringKey.AUTO_PLAY_PANEL_TOTALROUND);
            Tools.SetFont(this.m_infoTxt[AutoplaySettingIndex.TotalRound]);
          }

          if (this.m_totalBetCheckNode.getChildByName(AutoPlaySetting.UIName.TXT1)) {
            this.m_totalBetCheckNode.getChildByName(AutoPlaySetting.UIName.TXT1).getComponent(Label).string = this.GetString(Define.StringKey.AUTO_PLAY_PANEL_SINGLE_AWARD);
            this.m_totalBetCheckNode.getChildByName(AutoPlaySetting.UIName.TXT1).getComponent(Label).font = font;
          } else {
            this.m_infoTxt[AutoplaySettingIndex.TotalBet].string = this.GetString(Define.StringKey.AUTO_PLAY_PANEL_SINGLE_AWARD);
            Tools.SetFont(this.m_infoTxt[AutoplaySettingIndex.TotalBet]);
          } // this.m_totalBetCheckNode.getChildByName( AutoPlaySetting.UIName.TXT2 ).getComponent( Label ).string =
          //     this.GetString( Define.StringKey.AUTO_PLAY_PANEL_AWARDTIMES_POSFIX );


          if (this.m_chipGreatCheckNode.getChildByName(AutoPlaySetting.UIName.TXT1)) {
            this.m_chipGreatCheckNode.getChildByName(AutoPlaySetting.UIName.TXT1).getComponent(Label).string = this.GetString(Define.StringKey.AUTO_PLAY_PANEL_CHIPS_GREAT);
            this.m_chipGreatCheckNode.getChildByName(AutoPlaySetting.UIName.TXT1).getComponent(Label).font = font;
          } else {
            this.m_infoTxt[AutoplaySettingIndex.GreatChip].string = this.GetString(Define.StringKey.AUTO_PLAY_PANEL_CHIPS_GREAT);
            Tools.SetFont(this.m_infoTxt[AutoplaySettingIndex.GreatChip]);
          }

          if (this.m_chipLessCheckNode.getChildByName(AutoPlaySetting.UIName.TXT1)) {
            this.m_chipLessCheckNode.getChildByName(AutoPlaySetting.UIName.TXT1).getComponent(Label).string = this.GetString(Define.StringKey.AUTO_PLAY_PANEL_CHIPS_LESS);
            this.m_chipLessCheckNode.getChildByName(AutoPlaySetting.UIName.TXT1).getComponent(Label).font = font;
          } else {
            this.m_infoTxt[AutoplaySettingIndex.LessChip].string = this.GetString(Define.StringKey.AUTO_PLAY_PANEL_CHIPS_LESS);
            Tools.SetFont(this.m_infoTxt[AutoplaySettingIndex.LessChip]);
          } // this.m_chipCheckNode.getChildByName(AutoPlaySetting.UIName.TXT2).getComponent(Label).string = this.GetString(StringKey.BalanceStop)
          // this.m_freeCheckNode.getChildByName( AutoPlaySetting.UIName.TXT1 ).getComponent( Label ).string = this.GetString( Define.StringKey.FreeGame )


          this.m_cancelBtn.node.getChildByName(AutoPlaySetting.UIName.LABEL).getComponent(Label).string = this.GetString(Define.StringKey.AUTO_PLAY_PANEL_CANEL); // this.m_cancelBtn.node.getChildByName( AutoPlaySetting.UIName.LABEL ).getComponent( Label ).font = font;

          Tools.SetFont(this.m_cancelBtn.node.getChildByName(AutoPlaySetting.UIName.LABEL).getComponent(Label));

          if (this.m_confirmBtn) {
            this.m_confirmBtn.node.getChildByName(AutoPlaySetting.UIName.LABEL).getComponent(Label).string = this.GetString(Define.StringKey.AUTO_PLAY_PANEL_START); // this.m_confirmBtn.node.getChildByName( AutoPlaySetting.UIName.LABEL ).getComponent( Label ).font = font;

            Tools.SetFont(this.m_confirmBtn.node.getChildByName(AutoPlaySetting.UIName.LABEL).getComponent(Label));
          }

          if (this.m_infoValue) {
            for (var i = 0; i < this.m_infoValue.length; i++) {
              Tools.SetFont(this.m_infoValue[i]);
            }
          }

          if (this.m_constRoundTxt) {
            for (var _i2 = 0; _i2 < this.m_constRoundTxt.length; _i2++) {
              Tools.SetFont(this.m_constRoundTxt[_i2]);
            }
          }
        };

        _proto.ClearPanel = function ClearPanel() {
          if (this.m_bottombarView.IsGLIGames || this.m_bottombarView.IsBMMGames || Tools.KeepGLISetting) {
            return; // GLI 這4項常駐開啟不可關閉
          }

          this.m_totalRoundCheckNode.getComponent(Toggle).isChecked = false;

          for (var index = 0; index < this.m_constRoundBtn.length; index++) {
            if (this.m_constRoundBtn[index].node.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG)) {
              this.m_constRoundBtn[index].node.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG).active = false;
            }
          }

          if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG)) {
            this.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG).active = false;
          } // this.m_totalBetCheckNode.getComponent( Toggle ).uncheck();


          this.m_totalBetCheckNode.getComponent(Toggle).isChecked = false;

          if (this.m_totalBetCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG)) {
            this.m_totalBetCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG).active = false;
          } // this.m_chipGreatCheckNode.getComponent( Toggle ).uncheck();


          this.m_chipGreatCheckNode.getComponent(Toggle).isChecked = false;

          if (this.m_chipGreatCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG)) {
            this.m_chipGreatCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG).active = false;
          } // this.m_chipLessCheckNode.getComponent( Toggle ).uncheck();


          this.m_chipLessCheckNode.getComponent(Toggle).isChecked = false;

          if (this.m_chipLessCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG)) {
            this.m_chipLessCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG).active = false;
          }
        };

        _proto.IsUseWisePlay = function IsUseWisePlay() {
          return this.m_isUseWisePlay;
        };

        _proto.SetUseWisePlay = function SetUseWisePlay(state) {
          this.m_isUseWisePlay = state;
        };

        _proto.SetFreeGameSelectSprites = function SetFreeGameSelectSprites(spriteFrames, rounds) {};

        _proto.ChangeTotalRoundBg = function ChangeTotalRoundBg(isOpen) {
          if (this.m_totalRoundBg) {
            this.m_totalRoundBg.active = isOpen;
          }
        };

        _createClass(AutoPlaySetting, [{
          key: "Title",
          get: function get() {
            return this.m_title;
          }
        }, {
          key: "ConfirmCb",
          set: function set(cb) {
            var _this5 = this;

            this.m_confirmCb = function () {
              _this5.m_isCountStart = false;
              _this5.m_currentTouchName = null;

              if (cb) {
                cb();
              }
            };
          }
        }, {
          key: "CancelCb",
          set: function set(cb) {
            var _this6 = this;

            this.m_cancelCb = function () {
              _this6.m_isCountStart = false;
              _this6.m_currentTouchName = null;

              if (cb) {
                cb();
              }
            };
          }
        }, {
          key: "IsCheckTotalRound",
          get: function get() {
            if (Define.IS_DEMO) {
              return true;
            } else {
              return this.m_totalRoundCheckNode.getComponent(Toggle).isChecked;
            }
          }
        }, {
          key: "IsCheckTotalBet",
          get: function get() {
            return this.m_totalBetCheckNode.getComponent(Toggle).isChecked;
          }
        }, {
          key: "IsCheckChipGreat",
          get: function get() {
            return this.m_chipGreatCheckNode.getComponent(Toggle).isChecked;
          }
        }, {
          key: "IsCheckChipLess",
          get: function get() {
            return this.m_chipLessCheckNode.getComponent(Toggle).isChecked;
          }
        }, {
          key: "AID",
          get: function get() {
            return this.m_aid;
          }
        }, {
          key: "TotalRound",
          get: function get() {
            return this.m_totalRound;
          }
        }, {
          key: "TotalBet",
          get: function get() {
            return this.m_totalBet;
          }
        }, {
          key: "ChipLessLimit",
          get: function get() {
            return this.m_chipLessLimit;
          }
        }, {
          key: "ChipGreatLimit",
          get: function get() {
            return this.m_chipGreatLimit;
          }
        }]);

        return AutoPlaySetting;
      }(Component), _class3.UIName = {
        /**/
        IMG_AUTOPLAY_LABEL: "img_autoplay_label",

        /**/
        BTN_CLOSE: "btn_close",

        /**/
        IMG_HOSTING_LABEL: "img_hosting_label",

        /**/
        CHECKBOX: "checkbox",
        // checkbox1-5

        /**/
        IMG_ON_BG: "img_on_bg",

        /**/
        BUTTON: "button",

        /**/
        VALUE: "value",

        /**/
        BTN_DECREASE: "btn_decrease",

        /**/
        BTN_INCREASE: "btn_increase",

        /**/
        BTN_FAST: "btn_fast0",
        // btn_fast0-btn_fast05

        /**/
        TXT1: "txt1",

        /**/
        TXT2: "txt2",

        /**/
        IMG_MASK: "img_mask",

        /**/
        BTN_CANCEL: "btn_cancel",

        /**/
        LABEL: "Label",

        /**/
        BTN_OK: "btn_ok"
      }, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_title", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_totalRoundCheckNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_totalBetCheckNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_chipGreatCheckNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_chipLessCheckNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_checkboxBtn", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_checkboxBg", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_checkboxMark", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_closeBtn", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_cancelBtn", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_confirmBtn", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_constRoundBtn", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_constRoundNum", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_increaseBtn", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_decreaseBtn", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_infoValue", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "m_infoTxt", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "m_totalRoundBg", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "m_constRoundTxt", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AutoPlaySettingPanel_BS.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AutoPlaySetting.ts', './Define.ts', './SoundManager.ts', './LocalStorageManager.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Button, Toggle, Label, Sprite, RichText, AutoPlaySetting, PanelData, Define, SoundManager, LocalStorageManager, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      Toggle = module.Toggle;
      Label = module.Label;
      Sprite = module.Sprite;
      RichText = module.RichText;
    }, function (module) {
      AutoPlaySetting = module.default;
      PanelData = module.PanelData;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      LocalStorageManager = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "926caCzOlZHcamP4sy2DnOE", "AutoPlaySettingPanel_BS", undefined);

      var AutoplayType = exports('AutoplayType', function AutoplayType() {
        this.isCheckFree = false;
        this.isCheckTatget = false;
        this.targetType = [];
      });
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AutoplaySettingIndex = {
        TotalRound: 0,
        TotalBet: 1,
        LessChip: 2,
        GreatChip: 3
      };
      var Auto_Play_Setting_Panel_Ani_S = "Clip_AutoPlayAG_Portrait";
      var Auto_Play_Setting_Panel_Ani_L = "Clip_AutoPlayAG_Landscape";
      var Auto_Play_Setting_Panel_Ani_S_BS = "Clip_AutoPlayBS_Portrait";
      var Auto_Play_Setting_Panel_Ani_L_BS = "Clip_AutoPlayBS_Landscape";

      var AutoPlayData = /*#__PURE__*/function (_PanelData) {
        _inheritsLoose(AutoPlayData, _PanelData);

        function AutoPlayData() {
          var _this;

          _this = _PanelData.call(this) || this;
          _this.WhenFree = {
            isCheck: false
          };
          _this.WhenTarget = {
            isCheck: false,
            value: [-1]
          };
          return _this;
        }

        return AutoPlayData;
      }(PanelData);

      var AutoPlaySettingPanel_BS = exports('default', (_dec = property(Node), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Button), _dec7 = property(Node), _dec8 = property(Node), ccclass(_class = (_class2 = /*#__PURE__*/function (_AutoPlaySetting) {
        _inheritsLoose(AutoPlaySettingPanel_BS, _AutoPlaySetting);

        function AutoPlaySettingPanel_BS() {
          var _this2;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this2 = _AutoPlaySetting.call.apply(_AutoPlaySetting, [this].concat(args)) || this;

          _initializerDefineProperty(_this2, "m_targetCheckNode", _descriptor, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_targetCheckTxt", _descriptor2, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeCheckNode", _descriptor3, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeCheckTxt", _descriptor4, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeMask", _descriptor5, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeMaskBtn", _descriptor6, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_targetTypeNode", _descriptor7, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_targetTypeSprite", _descriptor8, _assertThisInitialized(_this2));

          _this2.m_panelData = new AutoPlayData();
          _this2.m_freeGameString1 = null;
          _this2.m_freeGameString2 = null;
          _this2.m_freeGameString3 = void 0;
          _this2.m_targetType = [];
          _this2.m_isCloseJp = false;
          _this2.m_isCheckTarget = "-";
          _this2.m_isCheckFree = "-";
          return _this2;
        }

        var _proto = AutoPlaySettingPanel_BS.prototype;

        _proto.onLoad = function onLoad() {
          var _this3 = this;

          _AutoPlaySetting.prototype.onLoad.call(this); // this.m_targetCheckNode.getComponent( Toggle ).check();


          this.m_targetCheckNode.getComponent(Toggle).isChecked = true;

          if (this.m_targetCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG)) {
            this.m_targetCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG).active = true;
          }

          if (this.m_freeMask) {
            this.m_freeMask.active = false;
          } //選擇設定


          var _loop = function _loop() {
            // 基本按鈕點擊事件
            var checkNode = _this3.node.getChildByName(AutoPlaySettingPanel_BS.UIName.CHECKBOX + i);

            if (checkNode) {
              checkNode.on('toggle', function (event) {
                if (event.node.name == AutoPlaySettingPanel_BS.UIName.CHECKBOX + "6") {
                  _this3.m_freeMask.active = !event.isChecked;
                }

                if (event.isChecked) {
                  event.node.getChildByName(AutoPlaySettingPanel_BS.UIName.IMG_ON_BG).active = true; // SoundManager.getInstance().Play( Define.AudioClips.COMMON_BTN, false );
                } else {
                  if (_this3.m_isInvert && (event.node.name == AutoPlaySettingPanel_BS.UIName.CHECKBOX + "3" || event.node.name == AutoPlaySettingPanel_BS.UIName.CHECKBOX + "4")) {
                    _this3.m_isInvert = false;
                  } else if (event.node.getChildByName(AutoPlaySettingPanel_BS.UIName.IMG_ON_BG).active) ;

                  event.node.getChildByName(AutoPlaySettingPanel_BS.UIName.IMG_ON_BG).active = false;
                }
              }, _this3);
            } else if (i == 6) {
              _this3.m_targetCheckNode.on('toggle', function (event) {
                var toggle = _this3.m_targetCheckNode.getComponent(Toggle);

                if (toggle.isChecked) {
                  _this3.m_freeMask.active = false;
                } else {
                  _this3.m_freeMask.active = true;
                }
              }, _this3);
            }

            var button = null;

            if (checkNode) {
              button = checkNode.getChildByName(AutoPlaySettingPanel_BS.UIName.BUTTON);
            }

            if (button) {
              button.on(Node.EventType.TOUCH_START, function (event) {
                // cc.log("touch start", event)
                // event.stopPropagationImmediate();
                // event.stopPropagation();
                event.propagationImmediateStopped = true;
                event.propagationStopped = true;

                if (_this3.m_currentTouchName == null) {
                  _this3.m_currentTouchName = event.target.name;
                } else {
                  if (event.target && event.target.active == false) {
                    _this3.m_currentTouchName = event.target.name;
                  }
                }
              }, _this3);
              button.on(Node.EventType.TOUCH_END, function (event) {
                if (_this3.m_currentTouchName != event.target.name) {
                  return;
                }

                _this3.m_currentTouchName = null;
                var toggle = checkNode.getComponent(Toggle);

                if (toggle.isChecked) {
                  SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_OFF); // toggle.uncheck();

                  toggle.isChecked = false;
                } else {
                  SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_ON); // toggle.check();

                  toggle.isChecked = true;
                }
              }, _this3);
              button.on(Node.EventType.TOUCH_CANCEL, function (event) {
                if (_this3.m_currentTouchName == event.target.name) {
                  _this3.m_currentTouchName = null;
                }

                _this3.m_currentTouchName = null;
              }, _this3);
            } // 目標選擇事件


            if (i == 6) {
              var _loop2 = function _loop2(j) {
                var targetCheckNode = null;

                if (checkNode) {
                  targetCheckNode = checkNode.getChildByName(AutoPlaySettingPanel_BS.UIName.CHECKBOX + "_D" + j);
                } else {
                  targetCheckNode = _this3.m_targetTypeNode[j - 1];
                }

                if (!targetCheckNode) {
                  return "continue";
                }

                targetCheckNode.on('click', function (event) {
                  if (!_this3.m_freeMask.active) ;
                  SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_ON);
                }, _this3);
              };

              for (var j = 1; j <= 7; j++) {
                var _ret = _loop2(j);

                if (_ret === "continue") continue;
              }
            }
          };

          for (var i = 5; i <= 6; i++) {
            _loop();
          }

          if (this.m_confirmBtn) {
            this.m_confirmBtn.node.on("click", function (event) {
              if (_this3.m_targetCheckNode.getComponent(Toggle).isChecked) {
                _this3.m_targetType = _this3.CheckTarget();
              } else {
                _this3.m_targetType = [];
              }

              _this3.SavePanelData();
            });
          }

          this.m_cancelBtn.node.on("click", function (event) {
            if (_this3.m_confirmBtn) {
              if (_this3.m_targetCheckNode.getComponent(Toggle).isChecked) {
                _this3.m_targetType = _this3.CheckTarget();
              } else {
                _this3.m_targetType = [];
              }

              _this3.SavePanelData();
            }
          });
        };

        _proto.CheckTarget = function CheckTarget() {
          var target = [];

          for (var i = 0; i < this.m_targetTypeNode.length; i++) {
            if (this.m_targetTypeNode[i].getComponent(Toggle).isChecked) {
              target.push(i);
            }
          }

          return target;
        };

        _proto.Init = function Init(aid, apiid, gameid, bottombarView) {
          _AutoPlaySetting.prototype.Init.call(this, aid, apiid, gameid, bottombarView);

          this.LoadPanelDataFromLocal();
        } // 非共用選項
        ;

        _proto.OthersInfo = function OthersInfo(isWiseAutoPlay) {
          var data = new AutoplayType();

          if (isWiseAutoPlay) {
            data.isCheckTatget = this.m_targetCheckNode.getComponent(Toggle).isChecked;
            data.targetType = this.CheckTarget();
            data.isCheckFree = this.m_freeCheckNode.getComponent(Toggle).isChecked;
            this.SavePanelData();

            if (data.isCheckTatget) {
              // FB編號=data.freeType
              this.SetUseWisePlay(true);
              this.m_isCheckTarget = "1"; // ConnectionManager.getInstance().SendBtnClickEvent( Tools.FormBtnClickParams( this.m_aid, this.m_apiid, Number( this.m_gameid ), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.WISEAUTO_FGSTOP_OTHER, data.freeType, this.m_isLandscape ) )
            } else {
              this.SetUseWisePlay(false);
              this.m_isCheckTarget = "-";
            }

            if (data.isCheckFree) {
              this.SetUseWisePlay(true);
              this.m_isCheckFree = "1"; // 自定義特色遊戲編號
              // ConnectionManager.getInstance().SendBtnClickEvent( Tools.FormBtnClickParams( this.m_aid, this.m_apiid, Number( this.m_gameid ), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.WISEAUTO_FGSTOP_OTHER, 1, this.m_isLandscape ) )
            } else {
              this.SetUseWisePlay(false);
              this.m_isCheckFree = "-";
            }
          } else {
            this.SavePanelData();
            this.ClearPanel();
            data.isCheckTatget = false;
            data.targetType = [];
            data.isCheckFree = false;
          }

          return JSON.stringify(data);
        } // 設定FreeGameString
        ;

        _proto.SetFreeGameString = function SetFreeGameString(strKey1, strKey2, strKey3) {
          if (strKey1 != null) {
            this.m_freeGameString1 = strKey1;
            var freeCheckTxt = null;

            if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.TXT1)) {
              freeCheckTxt = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.TXT1);
            } else {
              freeCheckTxt = this.m_freeCheckTxt;
              Tools.SetFont(freeCheckTxt.getComponent(Label));
            }

            freeCheckTxt.getComponent(Label).string = this.GetString(strKey1);

            if (!freeCheckTxt.getComponent(Label).font) {
              freeCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }
          }

          if (strKey2 != null) {
            this.m_freeGameString2 = strKey2;
            var targetCheckTxt = null;

            if (this.m_targetCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.TXT1)) {
              targetCheckTxt = this.m_targetCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.TXT1);
            } else {
              targetCheckTxt = this.m_targetCheckTxt;
              Tools.SetFont(targetCheckTxt.getComponent(Label));
            }

            targetCheckTxt.getComponent(Label).string = this.GetString(strKey2);

            if (!targetCheckTxt.getComponent(Label).font) {
              targetCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }
          }
        } // 判斷有無選任何選項
        ;

        _proto.IsCheckAnyToggle = function IsCheckAnyToggle() {
          var result = _AutoPlaySetting.prototype.IsCheckAnyToggle.call(this);

          if (this.m_targetCheckNode.getComponent(Toggle).isChecked) {
            return true;
          }

          if (this.m_freeCheckNode.getComponent(Toggle).isChecked) {
            return true;
          }

          return result;
        } // 多語系
        ;

        _proto.SetTxt = function SetTxt() {
          _AutoPlaySetting.prototype.SetTxt.call(this);

          if (this.m_freeGameString1 != null) {
            var freeCheckTxt = null;

            if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.TXT1)) {
              freeCheckTxt = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.TXT1);
            } else {
              freeCheckTxt = this.m_freeCheckTxt;
              Tools.SetFont(freeCheckTxt.getComponent(Label));
            }

            freeCheckTxt.getComponent(Label).string = this.GetString(this.m_freeGameString1);

            if (!freeCheckTxt.getComponent(Label).font) {
              freeCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }
          }

          if (this.m_freeGameString2 != null) {
            var targetCheckTxt = null;

            if (this.m_targetCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.TXT1)) {
              targetCheckTxt = this.m_targetCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.TXT1);
            } else {
              targetCheckTxt = this.m_targetCheckTxt;
              Tools.SetFont(targetCheckTxt.getComponent(Label));
            }

            targetCheckTxt.getComponent(Label).string = this.GetString(this.m_freeGameString2);

            if (!targetCheckTxt.getComponent(Label).font) {
              targetCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }
          }
        };

        _proto.SetBallIcon = function SetBallIcon(icons) {
          var checkNode = this.node.getChildByName(AutoPlaySettingPanel_BS.UIName.CHECKBOX + 6);

          for (var j = 1; j <= 7; j++) {
            var targetCheckNode = null;

            if (checkNode) {
              targetCheckNode = checkNode.getChildByName(AutoPlaySettingPanel_BS.UIName.CHECKBOX + "_D" + j);
            } else {
              targetCheckNode = this.m_targetCheckNode;
            }

            if (!targetCheckNode) {
              continue;
            }

            var iconNode = targetCheckNode.getChildByName("D_icon");

            if (!iconNode) {
              iconNode = this.m_targetTypeSprite[j - 1];
            }

            if (Tools.Line === Define.LineSetting.street) {
              var sprite = iconNode.getComponent(Sprite);

              if (icons[j]) {
                sprite.spriteFrame = icons[j];
              }
            }
          }
        };

        _proto.ClearPanel = function ClearPanel() {
          _AutoPlaySetting.prototype.ClearPanel.call(this); // this.m_targetCheckNode.getComponent( Toggle ).uncheck();


          this.m_targetCheckNode.getComponent(Toggle).isChecked = false;

          if (this.m_targetCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.IMG_ON_BG)) {
            this.m_targetCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.IMG_ON_BG).active = false;
          } // this.m_freeCheckNode.getComponent( Toggle ).uncheck();


          this.m_freeCheckNode.getComponent(Toggle).isChecked = false;

          if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.IMG_ON_BG)) {
            this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.IMG_ON_BG).active = false;
          }
        };

        _proto.SavePanelData = function SavePanelData() {
          if (this.m_totalRoundCheckNode.getComponent(Toggle).isChecked) {
            var value = null;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.VALUE)) {
              value = this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.VALUE).getComponent(RichText);
            } else {
              value = this.m_infoValue[AutoplaySettingIndex.TotalRound];
            }

            this.m_panelData.TotalRound.isCheck = true;
            this.m_panelData.TotalRound.value = value.string;
          } else {
            this.m_panelData.TotalRound.isCheck = false;
            this.m_panelData.TotalRound.value = "100";
          }

          if (this.m_totalBetCheckNode.getComponent(Toggle).isChecked) {
            var _value = null;

            if (this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.VALUE)) {
              _value = this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.VALUE).getComponent(RichText);
            } else {
              _value = this.m_infoValue[AutoplaySettingIndex.TotalBet];
            }

            this.m_panelData.TotalBet.isCheck = true;

            var str = _value.string.replace(/<.*?>|[^0-9|.]/g, ""); // this.m_singleWin = this.m_bottombarView.GetRawValue( parseInt( str ) );


            this.m_singleWin = parseInt(str); // this.m_panelData.TotalBet.value = this.m_bottombarView.GetRawValue( parseInt( str ) ).toString();

            this.m_panelData.TotalBet.value = parseInt(str).toString();
          } else {
            this.m_panelData.TotalBet.isCheck = false;
          }

          if (this.m_chipLessCheckNode.getComponent(Toggle).isChecked) {
            var _value2 = null;

            if (this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.VALUE)) {
              _value2 = this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.VALUE).getComponent(RichText);
            } else {
              _value2 = this.m_infoValue[AutoplaySettingIndex.LessChip];
            }

            this.m_panelData.LessThan.isCheck = true;

            var _str = _value2.string.replace(/[^0-9|.]/g, "");

            this.m_panelData.LessThan.value = this.m_bottombarView.GetRawValue(parseInt(_str)).toString();
          } else {
            this.m_panelData.LessThan.isCheck = false;
          }

          if (this.m_chipGreatCheckNode.getComponent(Toggle).isChecked) {
            var _value3 = null;

            if (this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.VALUE)) {
              _value3 = this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.VALUE).getComponent(RichText);
            } else {
              _value3 = this.m_infoValue[AutoplaySettingIndex.GreatChip];
            }

            this.m_panelData.GreaterThan.isCheck = true;

            var _str2 = _value3.string.replace(/[^0-9|.]/g, "");

            this.m_panelData.GreaterThan.value = this.m_bottombarView.GetRawValue(parseInt(_str2)).toString();
          } else {
            this.m_panelData.GreaterThan.isCheck = false;
          }

          if (this.m_freeCheckNode.getComponent(Toggle).isChecked) {
            this.m_panelData.WhenFree.isCheck = true;
          } else {
            this.m_panelData.WhenFree.isCheck = false;
          }

          if (this.m_targetCheckNode.getComponent(Toggle).isChecked) {
            this.m_panelData.WhenTarget.isCheck = true;
            this.m_panelData.WhenTarget.value = this.m_targetType;
          } else {
            this.m_panelData.WhenTarget.isCheck = false;
            this.m_panelData.WhenTarget.value = [];
          }

          LocalStorageManager.SetObject(this.m_storageKey, this.m_panelData);
        };

        _proto.LoadPanelData = function LoadPanelData() {
          if (this.m_panelData.TotalRound.isCheck) {
            var _value4 = null;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.VALUE)) {
              _value4 = this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.VALUE).getComponent(RichText);
            } else {
              _value4 = this.m_infoValue[AutoplaySettingIndex.TotalRound];
            } // this.m_totalRoundCheckNode.getComponent( Toggle ).check();


            this.m_totalRoundCheckNode.getComponent(Toggle).isChecked = true;
            _value4.string = this.m_panelData.TotalRound.value;

            if (!isNaN(Number(this.m_panelData.TotalRound.value))) {
              this.m_settingInfoData[AutoplaySettingIndex.TotalRound] = Number(this.m_panelData.TotalRound.value);
            }
          } else if (LocalStorageManager.GetObject(this.m_storageKey)) {
            // this.m_totalRoundCheckNode.getComponent( Toggle ).uncheck();
            this.m_totalRoundCheckNode.getComponent(Toggle).isChecked = false;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.IMG_ON_BG)) {
              this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.IMG_ON_BG).active = false;
            }
          }

          var value = null;

          if (this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.VALUE)) {
            value = this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.VALUE).getComponent(RichText);
          } else {
            value = this.m_infoValue[AutoplaySettingIndex.TotalBet];
          }

          if (this.m_panelData.TotalBet.isCheck) {
            // this.m_totalBetCheckNode.getComponent( Toggle ).check();
            this.m_totalBetCheckNode.getComponent(Toggle).isChecked = true;
            var Num = parseInt(this.m_panelData.TotalBet.value);

            if (!isNaN(Number(Num))) {
              this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = Number(Num);
              this.m_singleWin = this.m_settingInfoData[AutoplaySettingIndex.TotalBet];
            }
          }

          if (this.m_nowBet != -1) {
            if (this.m_singleWin == -1
            /*|| this.m_tempBet != this.m_nowBet*/
            ) {
                // this.m_tempBet = this.m_nowBet;
                // let betBuff: number
                //     = this.m_bottombarView.GetDisplayValue( this.m_bottombarView.GetNowBetValue() * Define.AUTOPLAY_SINGLE_WIN_RATE );
                // value.string = Define.DollarSymbol +
                //     Tools.FormatNumberThousands( betBuff, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) +
                //     Define.DollarSymbolSuffix;
                value.string = "100X";
                value.fontFamily = Define.DollarFontFamily; // this.m_settingInfoData[ AutoplaySettingIndex.TotalBet ] = this.m_bottombarView.GetNowBetValue() * Define.AUTOPLAY_SINGLE_WIN_RATE;

                this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = 100;
                this.m_singleWin = 100;
              } else {
              // let win: number = this.m_bottombarView.GetDisplayValue( this.m_singleWin );
              // value.string = Define.DollarSymbol +
              //     Tools.FormatNumberThousands( win, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) +
              //     Define.DollarSymbolSuffix;
              // value.string = Tools.FormatNumberThousands( win, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) + "X";
              value.string = this.m_singleWin.toString() + "X";
              value.fontFamily = Define.DollarFontFamily;
              this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = this.m_singleWin;
            }
          }

          if (this.m_panelData.LessThan.isCheck) {
            var _value5 = null;

            if (this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.VALUE)) {
              _value5 = this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.VALUE).getComponent(RichText);
            } else {
              _value5 = this.m_infoValue[AutoplaySettingIndex.LessChip];
            } // this.m_chipLessCheckNode.getComponent( Toggle ).check();


            this.m_chipLessCheckNode.getComponent(Toggle).isChecked = true;

            var _Num = parseInt(this.m_panelData.LessThan.value);

            _value5.string = Define.DollarSymbol + Tools.FormatNumberThousands(this.m_bottombarView.GetDisplayValue(_Num), Tools.FORMAT_NUMBER_TYPE.NONE_DOT);
            _value5.fontFamily = Define.DollarFontFamily;

            if (!isNaN(Number(_Num))) {
              this.m_settingInfoData[AutoplaySettingIndex.LessChip] = Number(_Num);
            }
          }

          if (this.m_panelData.GreaterThan.isCheck) {
            var _value6 = null;

            if (this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.VALUE)) {
              _value6 = this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.VALUE).getComponent(RichText);
            } else {
              _value6 = this.m_infoValue[AutoplaySettingIndex.GreatChip];
            } // this.m_chipGreatCheckNode.getComponent( Toggle ).check();


            this.m_chipGreatCheckNode.getComponent(Toggle).isChecked = true;

            var _Num2 = parseInt(this.m_panelData.GreaterThan.value);

            _value6.string = Define.DollarSymbol + Tools.FormatNumberThousands(this.m_bottombarView.GetDisplayValue(_Num2), Tools.FORMAT_NUMBER_TYPE.NONE_DOT);
            _value6.fontFamily = Define.DollarFontFamily;

            if (!isNaN(Number(_Num2))) {
              this.m_settingInfoData[AutoplaySettingIndex.GreatChip] = Number(_Num2);
            }
          }

          if (this.m_panelData.WhenFree.isCheck) {
            // this.m_freeCheckNode.getComponent( Toggle ).check();
            this.m_freeCheckNode.getComponent(Toggle).isChecked = true;
          }

          if (this.m_panelData.WhenTarget.isCheck) {
            for (var i = 1; i <= 7; i++) {
              var targetNode = this.m_targetCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.CHECKBOX + "_D" + i);

              if (!targetNode) {
                targetNode = this.m_targetTypeNode[i - 1]; // continue;
              } // targetNode.getComponent( Toggle ).uncheck();


              targetNode.getComponent(Toggle).isChecked = false;
            }

            for (var _i = 0; _i < this.m_panelData.WhenTarget.value.length; _i++) {
              var _targetNode = this.m_targetCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.CHECKBOX + "_D" + (this.m_panelData.WhenTarget.value[_i] + 1));

              if (!_targetNode) {
                _targetNode = this.m_targetTypeNode[this.m_panelData.WhenTarget.value[_i]]; // continue;
              } // targetNode.getComponent( Toggle ).check();


              _targetNode.getComponent(Toggle).isChecked = true;
            }

            if (this.m_targetCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.IMG_MASK)) {
              this.m_targetCheckNode.getChildByName(AutoPlaySettingPanel_BS.UIName.IMG_MASK).active = false;
            } // this.m_targetCheckNode.getComponent( Toggle ).check();


            this.m_targetCheckNode.getComponent(Toggle).isChecked = true;
          }
        };

        _proto.LoadPanelDataFromLocal = function LoadPanelDataFromLocal() {
          var value = LocalStorageManager.GetObject(this.m_storageKey);

          if (value && value.WhenTarget) {
            this.m_panelData = value;
            this.m_panelData.TotalRound.value = '100';
            this.LoadPanelData();
          }
        };

        _proto.SumaryWiseAutoPlay = function SumaryWiseAutoPlay() {
          var sumStr = String(this.m_checkTotalRound) + "," + String(this.m_checkTotalBet) + "," + String(this.m_checkChipLessLimit) + "," + String(this.m_checkChipGreatLimit) + "," + String(this.m_isCheckTarget) + "," + String(this.m_isCheckFree);
          return sumStr;
        };

        _proto.CloseJPCheckBox = function CloseJPCheckBox() {
          this.m_isCloseJp = true;
        };

        _createClass(AutoPlaySettingPanel_BS, [{
          key: "PanelAniS",
          get: function get() {
            this.m_isLandscape = false; // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {
            //     return Auto_Play_Setting_Panel_Ani_S_TaDa;
            // }
            // if ( this.m_isCloseJp )
            // {
            //     return Auto_Play_Setting_Panel_Ani_NJP_S;
            // }
            // else
            // {

            if (Number(Define.NOW_GAME_ID) == Define.GAME_ID.BS) {
              return Auto_Play_Setting_Panel_Ani_S_BS;
            } else {
              return Auto_Play_Setting_Panel_Ani_S;
            } // }

          }
        }, {
          key: "PanelAniL",
          get: function get() {
            this.m_isLandscape = true; // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {
            //     return Auto_Play_Setting_Panel_Ani_L_TaDa;
            // }
            // if ( this.m_isCloseJp )
            // {
            //     return Auto_Play_Setting_Panel_Ani_NJP_L;
            // }
            // else
            // {

            if (Number(Define.NOW_GAME_ID) == Define.GAME_ID.BS) {
              return Auto_Play_Setting_Panel_Ani_L_BS;
            } else {
              return Auto_Play_Setting_Panel_Ani_L;
            } // }

          }
        }]);

        return AutoPlaySettingPanel_BS;
      }(AutoPlaySetting), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_targetCheckNode", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_targetCheckTxt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_freeCheckNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_freeCheckTxt", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_freeMask", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_freeMaskBtn", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_targetTypeNode", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_targetTypeSprite", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AutoPlaySettingPanel_DFI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './SoundManager.ts', './AutoPlaySetting.ts', './Tools.ts', './LocalStorageManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Toggle, Label, RichText, Define, SoundManager, AutoPlaySetting, Tools, LocalStorageManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Toggle = module.Toggle;
      Label = module.Label;
      RichText = module.RichText;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      AutoPlaySetting = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      LocalStorageManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "96bb6sHHn9Ib4WFYDMWCvRn", "AutoPlaySettingPanel_DFI", undefined);

      var AutoplayType = exports('AutoplayType', function AutoplayType() {
        this.isCheckFree = false;
        this.isCheckJp = false;
      });
      var AutoplaySettingIndex = {
        TotalRound: 0,
        TotalBet: 1,
        LessChip: 2,
        GreatChip: 3
      };
      var Auto_Play_Setting_Panel_Ani_S = "Clip_AutoPlayDFI_Portrait";
      var Auto_Play_Setting_Panel_Ani_L = "Clip_AutoPlayDFI_Landscape";
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AutoPlaySettingPanel_DFI = exports('default', (_dec = property(Node), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), ccclass(_class = (_class2 = /*#__PURE__*/function (_Autoplay) {
        _inheritsLoose(AutoPlaySettingPanel_DFI, _Autoplay);

        function AutoPlaySettingPanel_DFI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Autoplay.call.apply(_Autoplay, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_freeCheckNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_freeCheckTxt", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_jpCheckNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_jpCheckTxt", _descriptor4, _assertThisInitialized(_this));

          _this.m_panelData = {
            TotalRound: {
              isCheck: false,
              value: "100"
            },
            TotalBet: {
              isCheck: false,
              value: "50"
            },
            LessThan: {
              isCheck: false,
              value: ""
            },
            GreaterThan: {
              isCheck: false,
              value: ""
            },
            WhenFreeGame: {
              isCheck: false
            },
            WhenJp: {
              isCheck: false
            }
          };
          _this.m_freeGameString1 = null;
          _this.m_freeGameString2 = null;
          _this.m_isCheckFree = "-";
          _this.m_isCheckJp = "-";
          return _this;
        }

        var _proto = AutoPlaySettingPanel_DFI.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          _Autoplay.prototype.onLoad.call(this); //選擇設定


          var _loop = function _loop() {
            // 基本按鈕點擊事件
            var checkNode = _this2.node.getChildByName(AutoPlaySettingPanel_DFI.UIName.CHECKBOX + i);

            if (checkNode) {
              checkNode.on('toggle', function (event) {
                if (event.isChecked) {
                  event.node.getChildByName(AutoPlaySettingPanel_DFI.UIName.IMG_ON_BG).active = true;
                } else {
                  if (_this2.m_isInvert && (event.node.name == AutoPlaySettingPanel_DFI.UIName.CHECKBOX + "3" || event.node.name == AutoPlaySettingPanel_DFI.UIName.CHECKBOX + "4")) {
                    _this2.m_isInvert = false;
                  } else if (event.node.getChildByName(AutoPlaySettingPanel_DFI.UIName.IMG_ON_BG).active) ;

                  event.node.getChildByName(AutoPlaySettingPanel_DFI.UIName.IMG_ON_BG).active = false;
                }
              });
            }

            var button = null;

            if (checkNode) {
              button = checkNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.BUTTON);
            }

            if (button) {
              button.on(Node.EventType.TOUCH_START, function (event) {
                // cc.log("touch start", event)
                // event.stopPropagationImmediate();
                // event.stopPropagation();
                event.propagationImmediateStopped = true;
                event.propagationStopped = true;

                if (_this2.m_currentTouchName == null) {
                  _this2.m_currentTouchName = event.target.name;
                } else {
                  if (event.target && event.target.active == false) {
                    _this2.m_currentTouchName = event.target.name;
                  }
                }
              }, _this2);
              button.on(Node.EventType.TOUCH_END, function (event) {
                if (_this2.m_currentTouchName != event.target.name) {
                  return;
                }

                _this2.m_currentTouchName = null;
                var toggle = checkNode.getComponent(Toggle);

                if (toggle.isChecked) {
                  SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_OFF); // toggle.uncheck();

                  toggle.isChecked = false;
                } else {
                  SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_ON); // toggle.check();

                  toggle.isChecked = true;
                }
              }, _this2);
              button.on(Node.EventType.TOUCH_CANCEL, function (event) {
                if (_this2.m_currentTouchName == event.target.name) {
                  _this2.m_currentTouchName = null;
                }

                _this2.m_currentTouchName = null;
              }, _this2);
            }
          };

          for (var i = 5; i <= 6; i++) {
            _loop();
          }
        };

        _proto.Init = function Init(aid, apiid, gameid, bottombarView) {
          _Autoplay.prototype.Init.call(this, aid, apiid, gameid, bottombarView);

          this.LoadPanelDataFromLocal();
        } // 非共用選項
        ;

        _proto.OthersInfo = function OthersInfo(isWiseAutoPlay) {
          var data = new AutoplayType();

          if (isWiseAutoPlay) {
            data.isCheckFree = this.m_freeCheckNode.getComponent(Toggle).isChecked;
            data.isCheckJp = this.m_jpCheckNode.getComponent(Toggle).isChecked;
            this.SavePanelData();

            if (data.isCheckFree) {
              this.SetUseWisePlay(true);
              this.m_isCheckFree = "1"; // ConnectionManager.getInstance().SendBtnClickEvent( Tools.FormBtnClickParams( this.m_aid, this.m_apiid, Number( this.m_gameid ), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.WISEAUTO_FGSTOP, Define.BTN_CLICK_STATUS.CLICK, this.m_isLandscape ) )
            } else {
              this.SetUseWisePlay(false);
              this.m_isCheckFree = "-";
            }

            if (data.isCheckJp) {
              this.SetUseWisePlay(true);
              this.m_isCheckJp = "1"; // 自定義特色遊戲編號
              // ConnectionManager.getInstance().SendBtnClickEvent( Tools.FormBtnClickParams( this.m_aid, this.m_apiid, Number( this.m_gameid ), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.WISEAUTO_FGSTOP_OTHER, Define.BTN_CLICK_STATUS.CLICK, this.m_isLandscape ) )
            } else {
              this.SetUseWisePlay(false);
              this.m_isCheckJp = "-";
            }
          } else {
            this.SavePanelData();
            this.ClearPanel();
            data.isCheckFree = false;
            data.isCheckJp = false;
          }

          return JSON.stringify(data);
        } // 設定FreeGameString
        ;

        _proto.SetFreeGameString = function SetFreeGameString(strKey1, strKey2) {
          if (strKey1 != null) {
            this.m_freeGameString1 = strKey1;
            var freeCheckTxt = null;

            if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.TXT1)) {
              freeCheckTxt = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.TXT1);
            } else {
              freeCheckTxt = this.m_freeCheckTxt;
              Tools.SetFont(freeCheckTxt.getComponent(Label));
            }

            freeCheckTxt.getComponent(Label).string = this.GetString(strKey1);

            if (!freeCheckTxt.getComponent(Label).font) {
              freeCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }
          }

          if (strKey2 != null) {
            this.m_freeGameString2 = strKey2;
            var jpCheckTxt = null;

            if (this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.TXT1)) {
              jpCheckTxt = this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.TXT1);
            } else {
              jpCheckTxt = this.m_jpCheckTxt;
              Tools.SetFont(jpCheckTxt.getComponent(Label));
            }

            jpCheckTxt.getComponent(Label).string = this.GetString(strKey2);

            if (!jpCheckTxt.getComponent(Label).font) {
              jpCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }
          }
        } // 判斷有無選任何選項
        ;

        _proto.IsCheckAnyToggle = function IsCheckAnyToggle() {
          var result = _Autoplay.prototype.IsCheckAnyToggle.call(this);

          if (this.m_freeCheckNode.getComponent(Toggle).isChecked) {
            return true;
          }

          if (this.m_jpCheckNode.getComponent(Toggle).isChecked) {
            return true;
          }

          return result;
        } // 多語系
        ;

        _proto.SetTxt = function SetTxt() {
          _Autoplay.prototype.SetTxt.call(this);

          if (this.m_freeGameString1 != null) {
            var freeCheckTxt = null;

            if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.TXT1)) {
              freeCheckTxt = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.TXT1);
            } else {
              freeCheckTxt = this.m_freeCheckTxt;
              Tools.SetFont(freeCheckTxt.getComponent(Label));
            }

            freeCheckTxt.getComponent(Label).string = this.GetString(this.m_freeGameString1);

            if (!freeCheckTxt.getComponent(Label).font) {
              freeCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }
          }

          if (this.m_freeGameString2 != null) {
            var jpCheckTxt = null;

            if (this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.TXT1)) {
              jpCheckTxt = this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.TXT1);
            } else {
              jpCheckTxt = this.m_jpCheckTxt;
              Tools.SetFont(jpCheckTxt.getComponent(Label));
            }

            jpCheckTxt.getComponent(Label).string = this.GetString(this.m_freeGameString2);

            if (!jpCheckTxt.getComponent(Label).font) {
              jpCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }
          }
        };

        _proto.ClearPanel = function ClearPanel() {
          _Autoplay.prototype.ClearPanel.call(this); // this.m_freeCheckNode.getComponent( Toggle ).uncheck();


          this.m_freeCheckNode.getComponent(Toggle).isChecked = false;

          if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.IMG_ON_BG)) {
            this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.IMG_ON_BG).active = false;
          } // this.m_jpCheckNode.getComponent( Toggle ).uncheck();


          this.m_jpCheckNode.getComponent(Toggle).isChecked = false;

          if (this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.IMG_ON_BG)) {
            this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.IMG_ON_BG).active = false;
          }
        };

        _proto.SavePanelData = function SavePanelData() {
          if (this.m_totalRoundCheckNode.getComponent(Toggle).isChecked) {
            var value = null;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.VALUE)) {
              value = this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.VALUE).getComponent(RichText);
            } else {
              value = this.m_infoValue[AutoplaySettingIndex.TotalRound];
            }

            this.m_panelData.TotalRound.isCheck = true;
            this.m_panelData.TotalRound.value = value.string;
          } else {
            this.m_panelData.TotalRound.isCheck = false;
            this.m_panelData.TotalRound.value = "100";
          }

          if (this.m_totalBetCheckNode.getComponent(Toggle).isChecked) {
            var _value = null;

            if (this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.VALUE)) {
              _value = this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.VALUE).getComponent(RichText);
            } else {
              _value = this.m_infoValue[AutoplaySettingIndex.TotalBet];
            }

            this.m_panelData.TotalBet.isCheck = true;

            var str = _value.string.replace(/<.*?>|[^0-9|.]/g, ""); // this.m_singleWin = this.m_bottombarView.GetRawValue( parseInt( str ) );


            this.m_singleWin = parseInt(str); // this.m_panelData.TotalBet.value = this.m_bottombarView.GetRawValue( parseInt( str ) ).toString();

            this.m_panelData.TotalBet.value = parseInt(str).toString();
          } else {
            this.m_panelData.TotalBet.isCheck = false;
          }

          if (this.m_chipLessCheckNode.getComponent(Toggle).isChecked) {
            var _value2 = null;

            if (this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.VALUE)) {
              _value2 = this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.VALUE).getComponent(RichText);
            } else {
              _value2 = this.m_infoValue[AutoplaySettingIndex.LessChip];
            }

            this.m_panelData.LessThan.isCheck = true;

            var _str = _value2.string.replace(/<.*?>|[^0-9|.]/g, "");

            this.m_panelData.LessThan.value = this.m_bottombarView.GetRawValue(parseInt(_str)).toString();
          } else {
            this.m_panelData.LessThan.isCheck = false;
          }

          if (this.m_chipGreatCheckNode.getComponent(Toggle).isChecked) {
            var _value3 = null;

            if (this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.VALUE)) {
              _value3 = this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.VALUE).getComponent(RichText);
            } else {
              _value3 = this.m_infoValue[AutoplaySettingIndex.GreatChip];
            }

            this.m_panelData.GreaterThan.isCheck = true;

            var _str2 = _value3.string.replace(/<.*?>|[^0-9|.]/g, "");

            this.m_panelData.GreaterThan.value = this.m_bottombarView.GetRawValue(parseInt(_str2)).toString();
          } else {
            this.m_panelData.GreaterThan.isCheck = false;
          }

          if (this.m_freeCheckNode.getComponent(Toggle).isChecked) {
            this.m_panelData.WhenFreeGame.isCheck = true;
          } else {
            this.m_panelData.WhenFreeGame.isCheck = false;
          }

          if (this.m_jpCheckNode.getComponent(Toggle).isChecked) {
            this.m_panelData.WhenJp.isCheck = true;
          } else {
            this.m_panelData.WhenJp.isCheck = false;
          }

          LocalStorageManager.SetObject(this.m_storageKey, this.m_panelData);
        };

        _proto.LoadPanelDataFromLocal = function LoadPanelDataFromLocal() {
          var value = LocalStorageManager.GetObject(this.m_storageKey);

          if (value) {
            this.m_panelData.TotalRound = value.TotalRound;
            this.m_panelData.TotalBet = value.TotalBet;
            this.m_panelData.LessThan = value.LessThan;
            this.m_panelData.GreaterThan = value.GreaterThan;
            this.m_panelData.WhenFreeGame = value.WhenFreeGame ? value.WhenFreeGame : {
              isCheck: false
            };
            this.m_panelData.WhenJp = value.WhenJp ? value.WhenJp : {
              isCheck: false
            };
            this.LoadPanelData();
          }
        };

        _proto.LoadPanelData = function LoadPanelData() {
          if (this.m_panelData.TotalRound.isCheck) {
            var _value4 = null;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.VALUE)) {
              _value4 = this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.VALUE).getComponent(RichText);
            } else {
              _value4 = this.m_infoValue[AutoplaySettingIndex.TotalRound];
            } // this.m_totalRoundCheckNode.getComponent( Toggle ).check();


            this.m_totalRoundCheckNode.getComponent(Toggle).isChecked = true;
            _value4.string = this.m_panelData.TotalRound.value;

            if (!isNaN(Number(this.m_panelData.TotalRound.value))) {
              this.m_settingInfoData[AutoplaySettingIndex.TotalRound] = Number(this.m_panelData.TotalRound.value);
            }
          } else if (LocalStorageManager.GetObject(this.m_storageKey)) {
            // this.m_totalRoundCheckNode.getComponent( Toggle ).uncheck();
            this.m_totalRoundCheckNode.getComponent(Toggle).isChecked = false;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.IMG_ON_BG)) {
              this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.IMG_ON_BG).active = false;
            }
          }

          var value = null;

          if (this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.VALUE)) {
            value = this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.VALUE).getComponent(RichText);
          } else {
            value = this.m_infoValue[AutoplaySettingIndex.TotalBet];
          }

          if (this.m_panelData.TotalBet.isCheck) {
            // this.m_totalBetCheckNode.getComponent( Toggle ).check();
            this.m_totalBetCheckNode.getComponent(Toggle).isChecked = true;
            var Num = parseInt(this.m_panelData.TotalBet.value);

            if (!isNaN(Number(Num))) {
              this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = Number(Num);
              this.m_singleWin = this.m_settingInfoData[AutoplaySettingIndex.TotalBet];
            }
          }

          if (this.m_nowBet != -1) {
            if (this.m_singleWin == -1
            /*|| this.m_tempBet != this.m_nowBet*/
            ) {
                // this.m_tempBet = this.m_nowBet;
                // let betBuff: number
                //     = this.m_bottombarView.GetDisplayValue( this.m_bottombarView.GetNowBetValue() * Define.AUTOPLAY_SINGLE_WIN_RATE );
                // value.string = Define.DollarSymbol +
                //     Tools.FormatNumberThousands( betBuff, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) +
                //     Define.DollarSymbolSuffix;
                value.string = "100X";
                value.fontFamily = Define.DollarFontFamily; // this.m_settingInfoData[ AutoplaySettingIndex.TotalBet ] = this.m_bottombarView.GetNowBetValue() * Define.AUTOPLAY_SINGLE_WIN_RATE;

                this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = 100;
                this.m_singleWin = 100;
              } else {
              // let win: number = this.m_bottombarView.GetDisplayValue( this.m_singleWin );
              // value.string = Define.DollarSymbol +
              //     Tools.FormatNumberThousands( win, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) +
              //     Define.DollarSymbolSuffix;
              // value.string = Tools.FormatNumberThousands( win, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) + "X";
              value.string = this.m_singleWin.toString() + "X";
              value.fontFamily = Define.DollarFontFamily;
              this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = this.m_singleWin;
            }
          }

          if (this.m_panelData.LessThan.isCheck) {
            var _value5 = null;

            if (this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.VALUE)) {
              _value5 = this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.VALUE).getComponent(RichText);
            } else {
              _value5 = this.m_infoValue[AutoplaySettingIndex.LessChip];
            } // this.m_chipLessCheckNode.getComponent( Toggle ).check();


            this.m_chipLessCheckNode.getComponent(Toggle).isChecked = true;

            var _Num = parseInt(this.m_panelData.LessThan.value);

            _value5.string = Define.DollarSymbol + Tools.FormatNumberThousands(this.m_bottombarView.GetDisplayValue(_Num), Tools.FORMAT_NUMBER_TYPE.NONE_DOT) + Define.DollarSymbolSuffix;
            _value5.fontFamily = Define.DollarFontFamily;

            if (!isNaN(Number(_Num))) {
              this.m_settingInfoData[AutoplaySettingIndex.LessChip] = Number(_Num);
            }
          }

          if (this.m_panelData.GreaterThan.isCheck) {
            var _value6 = null;

            if (this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.VALUE)) {
              _value6 = this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_DFI.UIName.VALUE).getComponent(RichText);
            } else {
              _value6 = this.m_infoValue[AutoplaySettingIndex.GreatChip];
            } // this.m_chipGreatCheckNode.getComponent( Toggle ).check();


            this.m_chipGreatCheckNode.getComponent(Toggle).isChecked = true;

            var _Num2 = parseInt(this.m_panelData.GreaterThan.value);

            _value6.string = Define.DollarSymbol + Tools.FormatNumberThousands(this.m_bottombarView.GetDisplayValue(_Num2), Tools.FORMAT_NUMBER_TYPE.NONE_DOT) + Define.DollarSymbolSuffix;
            _value6.fontFamily = Define.DollarFontFamily;

            if (!isNaN(Number(_Num2))) {
              this.m_settingInfoData[AutoplaySettingIndex.GreatChip] = Number(_Num2);
            }
          }

          if (this.m_panelData.WhenFreeGame && this.m_panelData.WhenFreeGame.isCheck) {
            // this.m_freeCheckNode.getComponent( Toggle ).check();
            this.m_freeCheckNode.getComponent(Toggle).isChecked = true;
          }

          if (this.m_panelData.WhenJp && this.m_panelData.WhenJp.isCheck) {
            // this.m_jpCheckNode.getComponent( Toggle ).check();
            this.m_jpCheckNode.getComponent(Toggle).isChecked = true;
          }
        };

        _proto.SumaryWiseAutoPlay = function SumaryWiseAutoPlay() {
          var sumStr = String(this.m_checkTotalRound) + "," + String(this.m_checkTotalBet) + "," + String(this.m_checkChipLessLimit) + "," + String(this.m_checkChipGreatLimit) + "," + String(this.m_isCheckFree) + "," + String(this.m_isCheckJp);
          return sumStr;
        };

        _proto.CloseJPCheckBox = function CloseJPCheckBox() {
          this.m_jpCheckNode.active = false;
        };

        _createClass(AutoPlaySettingPanel_DFI, [{
          key: "IsCheckFree",
          get: function get() {
            return this.m_freeCheckNode.getComponent(Toggle).isChecked;
          }
        }, {
          key: "IsCheckJp",
          get: function get() {
            return this.m_jpCheckNode.getComponent(Toggle).isChecked;
          }
        }, {
          key: "PanelAniS",
          get: function get() {
            this.m_isLandscape = false;
            return Auto_Play_Setting_Panel_Ani_S;
          }
        }, {
          key: "PanelAniL",
          get: function get() {
            this.m_isLandscape = true;
            return Auto_Play_Setting_Panel_Ani_L;
          }
        }]);

        return AutoPlaySettingPanel_DFI;
      }(AutoPlaySetting), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_freeCheckNode", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_freeCheckTxt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_jpCheckNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_jpCheckTxt", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AutoPlaySettingPanel_DFIII.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './SoundManager.ts', './AutoPlaySetting.ts', './Tools.ts', './LocalStorageManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Toggle, Label, RichText, Define, SoundManager, AutoPlaySetting, PanelData, Tools, LocalStorageManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Toggle = module.Toggle;
      Label = module.Label;
      RichText = module.RichText;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      AutoPlaySetting = module.default;
      PanelData = module.PanelData;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      LocalStorageManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "2db0c7JOxRH/6VNV6pLRe4/", "AutoPlaySettingPanel_DFIII", undefined);

      var AutoplayType = exports('AutoplayType', function AutoplayType() {
        this.isCheckFree = false;
        this.isCheckJp = false;
        this.freeType = 0;
      });
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AutoplaySettingIndex = {
        TotalRound: 0,
        TotalBet: 1,
        LessChip: 2,
        GreatChip: 3,
        FreeType: 4
      };
      var Auto_Play_Setting_Panel_Ani_S = "Clip_AutoPlayMS_Portrait";
      var Auto_Play_Setting_Panel_Ani_L = "Clip_AutoPlayMS_Landscape";

      var AutoPlayData = /*#__PURE__*/function (_PanelData) {
        _inheritsLoose(AutoPlayData, _PanelData);

        function AutoPlayData() {
          var _this;

          _this = _PanelData.call(this) || this;
          _this.WhenJp = {
            isCheck: false
          };
          _this.WhenFreeGame = {
            isCheck: false,
            value: 0
          };
          return _this;
        }

        return AutoPlayData;
      }(PanelData);

      var AutoPlaySettingPanel_DFIII = exports('default', (_dec = property(Node), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), ccclass(_class = (_class2 = /*#__PURE__*/function (_Autoplay) {
        _inheritsLoose(AutoPlaySettingPanel_DFIII, _Autoplay);

        function AutoPlaySettingPanel_DFIII() {
          var _this2;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this2 = _Autoplay.call.apply(_Autoplay, [this].concat(args)) || this;

          _initializerDefineProperty(_this2, "m_freeCheckNode", _descriptor, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeCheckTxt", _descriptor2, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_jpCheckNode", _descriptor3, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_jpCheckTxt", _descriptor4, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeMask", _descriptor5, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeTypeNode", _descriptor6, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeTypeTxt", _descriptor7, _assertThisInitialized(_this2));

          _this2.m_panelData = new AutoPlayData();
          _this2.m_freeGameString1 = null;
          _this2.m_freeGameString2 = null;
          _this2.m_freeGameString3 = void 0;
          _this2.m_freeType = 0;
          _this2.m_isCloseJp = false;
          _this2.m_isCheckFree = "-";
          _this2.m_isCheckJp = "-";
          return _this2;
        }

        var _proto = AutoPlaySettingPanel_DFIII.prototype;

        _proto.onLoad = function onLoad() {
          var _this3 = this;

          _Autoplay.prototype.onLoad.call(this);

          this.m_settingInfoData.push(0); //選擇設定

          var _loop = function _loop() {
            // 基本按鈕點擊事件
            var checkNode = _this3.node.getChildByName(AutoPlaySettingPanel_DFIII.UIName.CHECKBOX + i);

            if (checkNode) {
              checkNode.on('toggle', function (event) {
                if (event.node.name == AutoPlaySettingPanel_DFIII.UIName.CHECKBOX + "6") {
                  _this3.m_freeMask.active = !event.isChecked;
                }

                if (event.isChecked) {
                  event.node.getChildByName(AutoPlaySettingPanel_DFIII.UIName.IMG_ON_BG).active = true;
                } else {
                  if (_this3.m_isInvert && (event.node.name == AutoPlaySettingPanel_DFIII.UIName.CHECKBOX + "3" || event.node.name == AutoPlaySettingPanel_DFIII.UIName.CHECKBOX + "4")) {
                    _this3.m_isInvert = false;
                  } else if (event.node.getChildByName(AutoPlaySettingPanel_DFIII.UIName.IMG_ON_BG).active) ;

                  event.node.getChildByName(AutoPlaySettingPanel_DFIII.UIName.IMG_ON_BG).active = false;
                }
              });
            }

            var button = null;

            if (checkNode) {
              button = checkNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.BUTTON);
            }

            if (button) {
              button.on(Node.EventType.TOUCH_START, function (event) {
                // cc.log("touch start", event)
                // event.stopPropagationImmediate();
                // event.stopPropagation();
                event.propagationImmediateStopped = true;
                event.propagationStopped = true;

                if (_this3.m_currentTouchName == null) {
                  _this3.m_currentTouchName = event.target.name;
                } else {
                  if (event.target && event.target.active == false) {
                    _this3.m_currentTouchName = event.target.name;
                  }
                }
              }, _this3);
              button.on(Node.EventType.TOUCH_END, function (event) {
                if (_this3.m_currentTouchName != event.target.name) {
                  return;
                }

                _this3.m_currentTouchName = null;
                var toggle = checkNode.getComponent(Toggle);

                if (toggle.isChecked) {
                  SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_OFF); // toggle.uncheck();

                  toggle.isChecked = false;
                } else {
                  SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_ON); // toggle.check();

                  toggle.isChecked = true;
                }
              }, _this3);
              button.on(Node.EventType.TOUCH_CANCEL, function (event) {
                if (_this3.m_currentTouchName == event.target.name) {
                  _this3.m_currentTouchName = null;
                }

                _this3.m_currentTouchName = null;
              }, _this3);
            } // freeGame選擇事件


            if (i == 6) {
              for (j = 1; j <= 3; j++) {
                var freeCheckNode = null;

                if (checkNode) {
                  freeCheckNode = checkNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.CHECKBOX + j);
                } else {
                  freeCheckNode = _this3.m_freeTypeNode[j - 1];
                }

                freeCheckNode.on('click', function (event) {
                  // var index = Number( event.node.name.split( AutoPlaySettingPanel_DFIII.UIName.CHECKBOX )[ 1 ] ) - 1;
                  var index = j - 1;

                  if (!_this3.m_freeMask.active) {
                    for (var k = 0; k < _this3.m_freeTypeNode.length; k++) {
                      var freeTypeCheck = _this3.m_freeTypeNode[k].getComponent(Toggle); // freeTypeCheck.uncheck();


                      freeTypeCheck.isChecked = false;
                    }
                  }

                  SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_ON);
                  _this3.m_settingInfoData[AutoplaySettingIndex.FreeType] = index;
                }, _this3);
              }

              _this3.m_freeCheckNode.on('toggle', function (event) {
                var toggle = _this3.m_freeCheckNode.getComponent(Toggle);

                if (toggle.isChecked) {
                  _this3.m_freeMask.active = false;
                } else {
                  _this3.m_freeMask.active = true;
                }
              }, _this3);
            }
          };

          for (var i = 5; i <= 6; i++) {
            var j;

            _loop();
          }

          if (this.m_confirmBtn) {
            this.m_confirmBtn.node.on("click", function (event) {
              _this3.m_freeType = _this3.m_settingInfoData[AutoplaySettingIndex.FreeType] || 0;

              _this3.SavePanelData();
            });
          }

          this.m_cancelBtn.node.on("click", function (event) {
            if (_this3.m_confirmBtn) {
              _this3.m_freeType = _this3.m_settingInfoData[AutoplaySettingIndex.FreeType] || 0;

              _this3.SavePanelData();
            }
          });
        };

        _proto.Init = function Init(aid, apiid, gameid, bottombarView) {
          _Autoplay.prototype.Init.call(this, aid, apiid, gameid, bottombarView);

          this.LoadPanelDataFromLocal();
        } // 非共用選項
        ;

        _proto.OthersInfo = function OthersInfo(isWiseAutoPlay) {
          var data = new AutoplayType();

          if (isWiseAutoPlay) {
            data.isCheckFree = this.m_freeCheckNode.getComponent(Toggle).isChecked;
            data.freeType = this.m_settingInfoData[AutoplaySettingIndex.FreeType];
            data.isCheckJp = this.m_jpCheckNode.getComponent(Toggle).isChecked;
            this.SavePanelData();

            if (data.isCheckFree) {
              // FB編號=data.freeType
              this.SetUseWisePlay(true);
              this.m_isCheckFree = "1"; // ConnectionManager.getInstance().SendBtnClickEvent( Tools.FormBtnClickParams( this.m_aid, this.m_apiid, Number( this.m_gameid ), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.WISEAUTO_FGSTOP_OTHER, data.freeType, this.m_isLandscape ) )
            } else {
              this.SetUseWisePlay(false);
              this.m_isCheckFree = "-";
            }

            if (data.isCheckJp) {
              this.SetUseWisePlay(true);
              this.m_isCheckJp = "1"; // 自定義特色遊戲編號
              // ConnectionManager.getInstance().SendBtnClickEvent( Tools.FormBtnClickParams( this.m_aid, this.m_apiid, Number( this.m_gameid ), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.WISEAUTO_FGSTOP_OTHER, 1, this.m_isLandscape ) )
            } else {
              this.SetUseWisePlay(false);
              this.m_isCheckJp = "-";
            }
          } else {
            this.SavePanelData();
            this.ClearPanel();
            data.isCheckFree = false;
            data.freeType = -1;
            data.isCheckJp = false;
          }

          return JSON.stringify(data);
        } // 設定FreeGameString
        ;

        _proto.SetFreeGameString = function SetFreeGameString(strKey1, strKey2, strKey3) {
          if (strKey1 != null) {
            this.m_freeGameString1 = strKey1;
            var freeCheckTxt = null;

            if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.TXT1)) {
              freeCheckTxt = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.TXT1);
            } else {
              freeCheckTxt = this.m_freeCheckTxt;
              Tools.SetFont(freeCheckTxt.getComponent(Label));
            }

            freeCheckTxt.getComponent(Label).string = this.GetString(strKey1);

            if (!freeCheckTxt.getComponent(Label).font) {
              freeCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }

            if (strKey3 != null) {
              this.m_freeGameString3 = strKey3;
              var select1 = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.CHECKBOX + "1");
              var select2 = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.CHECKBOX + "2");
              var select3 = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.CHECKBOX + "3");
              var txt1 = null;
              var txt2 = null;
              var txt3 = null;

              if (select1 && select2) {
                txt1 = select1.getChildByName(AutoPlaySettingPanel_DFIII.UIName.TXT1);
                txt2 = select2.getChildByName(AutoPlaySettingPanel_DFIII.UIName.TXT1);
                txt3 = select3.getChildByName(AutoPlaySettingPanel_DFIII.UIName.TXT1);
              } else {
                txt1 = this.m_freeTypeTxt[0];
                txt2 = this.m_freeTypeTxt[1];
                txt3 = this.m_freeTypeTxt[2];
              }

              txt1.getComponent(Label).string = this.GetString(strKey3[0]);

              if (!txt1.getComponent(Label).font) {
                txt1.getComponent(Label).font = Define.DefaultFont;
              }

              txt2.getComponent(Label).string = this.GetString(strKey3[1]);

              if (!txt2.getComponent(Label).font) {
                txt2.getComponent(Label).font = Define.DefaultFont;
              }

              txt3.getComponent(Label).string = this.GetString(strKey3[2]);

              if (!txt3.getComponent(Label).font) {
                txt3.getComponent(Label).font = Define.DefaultFont;
              }
            }
          }

          if (strKey2 != null) {
            this.m_freeGameString2 = strKey2;
            var jpCheckTxt = null;

            if (this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.TXT1)) {
              jpCheckTxt = this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.TXT1);
            } else {
              jpCheckTxt = this.m_jpCheckTxt;
              Tools.SetFont(jpCheckTxt.getComponent(Label));
            }

            jpCheckTxt.getComponent(Label).string = this.GetString(strKey2);

            if (!jpCheckTxt.getComponent(Label).font) {
              jpCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }
          }
        } // 判斷有無選任何選項
        ;

        _proto.IsCheckAnyToggle = function IsCheckAnyToggle() {
          var result = _Autoplay.prototype.IsCheckAnyToggle.call(this);

          if (this.m_freeCheckNode.getComponent(Toggle).isChecked) {
            return true;
          }

          if (this.m_jpCheckNode.getComponent(Toggle).isChecked) {
            return true;
          }

          return result;
        } // 多語系
        ;

        _proto.SetTxt = function SetTxt() {
          _Autoplay.prototype.SetTxt.call(this);

          if (this.m_freeGameString1 != null) {
            var freeCheckTxt = null;

            if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.TXT1)) {
              freeCheckTxt = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.TXT1);
            } else {
              freeCheckTxt = this.m_freeCheckTxt;
              Tools.SetFont(freeCheckTxt.getComponent(Label));
            }

            freeCheckTxt.getComponent(Label).string = this.GetString(this.m_freeGameString1);

            if (!freeCheckTxt.getComponent(Label).font) {
              freeCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }

            if (this.m_freeGameString3 != null) {
              var select1 = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.CHECKBOX + "1");
              var select2 = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.CHECKBOX + "2");
              var select3 = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.CHECKBOX + "3");
              var txt1 = null;
              var txt2 = null;
              var txt3 = null;

              if (select1 && select2) {
                txt1 = select1.getChildByName(AutoPlaySettingPanel_DFIII.UIName.TXT1);
                txt2 = select2.getChildByName(AutoPlaySettingPanel_DFIII.UIName.TXT1);
                txt3 = select3.getChildByName(AutoPlaySettingPanel_DFIII.UIName.TXT1);
              } else {
                txt1 = this.m_freeTypeTxt[0];
                txt2 = this.m_freeTypeTxt[1];
                txt3 = this.m_freeTypeTxt[2];
              }

              txt1.getComponent(Label).string = this.GetString(this.m_freeGameString3[0]);

              if (!txt1.getComponent(Label).font) {
                txt1.getComponent(Label).font = Define.DefaultFont;
              }

              txt2.getComponent(Label).string = this.GetString(this.m_freeGameString3[1]);

              if (!txt2.getComponent(Label).font) {
                txt2.getComponent(Label).font = Define.DefaultFont;
              }

              txt3.getComponent(Label).string = this.GetString(this.m_freeGameString3[2]);

              if (!txt3.getComponent(Label).font) {
                txt3.getComponent(Label).font = Define.DefaultFont;
              }
            }
          }

          if (this.m_freeGameString2 != null) {
            var jpCheckTxt = null;

            if (this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.TXT1)) {
              jpCheckTxt = this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.TXT1);
            } else {
              jpCheckTxt = this.m_jpCheckTxt;
              Tools.SetFont(jpCheckTxt.getComponent(Label));
            }

            jpCheckTxt.getComponent(Label).string = this.GetString(this.m_freeGameString2);

            if (!jpCheckTxt.getComponent(Label).font) {
              jpCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }
          }
        };

        _proto.ClearPanel = function ClearPanel() {
          _Autoplay.prototype.ClearPanel.call(this); // this.m_freeCheckNode.getComponent( Toggle ).uncheck();


          this.m_freeCheckNode.getComponent(Toggle).isChecked = false;

          if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.IMG_ON_BG)) {
            this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.IMG_ON_BG).active = false;
          } // this.m_jpCheckNode.getComponent( Toggle ).uncheck();


          this.m_jpCheckNode.getComponent(Toggle).isChecked = false;

          if (this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.IMG_ON_BG)) {
            this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.IMG_ON_BG).active = false;
          }
        };

        _proto.SavePanelData = function SavePanelData() {
          if (this.m_totalRoundCheckNode.getComponent(Toggle).isChecked) {
            var value = null;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.VALUE)) {
              value = this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.VALUE).getComponent(RichText);
            } else {
              value = this.m_infoValue[AutoplaySettingIndex.TotalRound];
            }

            this.m_panelData.TotalRound.isCheck = true;
            this.m_panelData.TotalRound.value = value.string;
          } else {
            this.m_panelData.TotalRound.isCheck = false;
            this.m_panelData.TotalRound.value = "100";
          }

          if (this.m_totalBetCheckNode.getComponent(Toggle).isChecked) {
            var _value = null;

            if (this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.VALUE)) {
              _value = this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.VALUE).getComponent(RichText);
            } else {
              _value = this.m_infoValue[AutoplaySettingIndex.TotalBet];
            }

            this.m_panelData.TotalBet.isCheck = true;

            var str = _value.string.replace(/<.*?>|[^0-9|.]/g, ""); // this.m_singleWin = this.m_bottombarView.GetRawValue( parseInt( str ) );


            this.m_singleWin = parseInt(str); // this.m_panelData.TotalBet.value = this.m_bottombarView.GetRawValue( parseInt( str ) ).toString();

            this.m_panelData.TotalBet.value = parseInt(str).toString();
          } else {
            this.m_panelData.TotalBet.isCheck = false;
          }

          if (this.m_chipLessCheckNode.getComponent(Toggle).isChecked) {
            var _value2 = null;

            if (this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.VALUE)) {
              _value2 = this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.VALUE).getComponent(RichText);
            } else {
              _value2 = this.m_infoValue[AutoplaySettingIndex.LessChip];
            }

            this.m_panelData.LessThan.isCheck = true;

            var _str = _value2.string.replace(/<.*?>|[^0-9|.]/g, "");

            this.m_panelData.LessThan.value = this.m_bottombarView.GetRawValue(parseInt(_str)).toString();
          } else {
            this.m_panelData.LessThan.isCheck = false;
          }

          if (this.m_chipGreatCheckNode.getComponent(Toggle).isChecked) {
            var _value3 = null;

            if (this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.VALUE)) {
              _value3 = this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.VALUE).getComponent(RichText);
            } else {
              _value3 = this.m_infoValue[AutoplaySettingIndex.GreatChip];
            }

            this.m_panelData.GreaterThan.isCheck = true;

            var _str2 = _value3.string.replace(/<.*?>|[^0-9|.]/g, "");

            this.m_panelData.GreaterThan.value = this.m_bottombarView.GetRawValue(parseInt(_str2)).toString();
          } else {
            this.m_panelData.GreaterThan.isCheck = false;
          }

          if (this.m_jpCheckNode.getComponent(Toggle).isChecked) {
            this.m_panelData.WhenJp.isCheck = true;
          } else {
            this.m_panelData.WhenJp.isCheck = false;
          }

          if (this.m_freeCheckNode.getComponent(Toggle).isChecked) {
            this.m_panelData.WhenFreeGame.isCheck = true;
            this.m_panelData.WhenFreeGame.value = this.m_freeType;
          } else {
            this.m_panelData.WhenFreeGame.isCheck = false;
            this.m_panelData.WhenFreeGame.value = 0;
          }

          LocalStorageManager.SetObject(this.m_storageKey, this.m_panelData);
        };

        _proto.LoadPanelData = function LoadPanelData() {
          if (this.m_panelData.TotalRound.isCheck) {
            var _value4 = null;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.VALUE)) {
              _value4 = this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.VALUE).getComponent(RichText);
            } else {
              _value4 = this.m_infoValue[AutoplaySettingIndex.TotalRound];
            } // this.m_totalRoundCheckNode.getComponent( Toggle ).check();


            this.m_totalRoundCheckNode.getComponent(Toggle).isChecked = true;
            _value4.string = this.m_panelData.TotalRound.value;

            if (!isNaN(Number(this.m_panelData.TotalRound.value))) {
              this.m_settingInfoData[AutoplaySettingIndex.TotalRound] = Number(this.m_panelData.TotalRound.value);
            }
          } else if (LocalStorageManager.GetObject(this.m_storageKey)) {
            // this.m_totalRoundCheckNode.getComponent( Toggle ).uncheck();
            this.m_totalRoundCheckNode.getComponent(Toggle).isChecked = false;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.IMG_ON_BG)) {
              this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.IMG_ON_BG).active = false;
            }
          }

          var value = null;

          if (this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.VALUE)) {
            value = this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.VALUE).getComponent(RichText);
          } else {
            value = this.m_infoValue[AutoplaySettingIndex.TotalBet];
          }

          if (this.m_panelData.TotalBet.isCheck) {
            // this.m_totalBetCheckNode.getComponent( Toggle ).check();
            this.m_totalBetCheckNode.getComponent(Toggle).isChecked = true;
            var Num = parseInt(this.m_panelData.TotalBet.value);

            if (!isNaN(Number(Num))) {
              this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = Number(Num);
              this.m_singleWin = this.m_settingInfoData[AutoplaySettingIndex.TotalBet];
            }
          }

          if (this.m_nowBet != -1) {
            if (this.m_singleWin == -1
            /*|| this.m_tempBet != this.m_nowBet*/
            ) {
                // this.m_tempBet = this.m_nowBet;
                // let betBuff: number
                //     = this.m_bottombarView.GetDisplayValue( this.m_bottombarView.GetNowBetValue() * Define.AUTOPLAY_SINGLE_WIN_RATE );
                // value.string = Define.DollarSymbol +
                //     Tools.FormatNumberThousands( betBuff, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) +
                //     Define.DollarSymbolSuffix;
                value.string = "100X";
                value.fontFamily = Define.DollarFontFamily; // this.m_settingInfoData[ AutoplaySettingIndex.TotalBet ] = this.m_bottombarView.GetNowBetValue() * Define.AUTOPLAY_SINGLE_WIN_RATE;

                this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = 100;
                this.m_singleWin = 100;
              } else {
              // let win: number = this.m_bottombarView.GetDisplayValue( this.m_singleWin );
              // value.string = Define.DollarSymbol +
              //     Tools.FormatNumberThousands( win, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) +
              //     Define.DollarSymbolSuffix;
              // value.string = Tools.FormatNumberThousands( win, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) + "X";
              value.string = this.m_singleWin.toString() + "X";
              value.fontFamily = Define.DollarFontFamily;
              this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = this.m_singleWin;
            }
          }

          if (this.m_panelData.LessThan.isCheck) {
            var _value5 = null;

            if (this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.VALUE)) {
              _value5 = this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.VALUE).getComponent(RichText);
            } else {
              _value5 = this.m_infoValue[AutoplaySettingIndex.LessChip];
            } // this.m_chipLessCheckNode.getComponent( Toggle ).check();


            this.m_chipLessCheckNode.getComponent(Toggle).isChecked = true;

            var _Num = parseInt(this.m_panelData.LessThan.value);

            _value5.string = Define.DollarSymbol + Tools.FormatNumberThousands(this.m_bottombarView.GetDisplayValue(_Num), Tools.FORMAT_NUMBER_TYPE.NONE_DOT) + Define.DollarSymbolSuffix;
            _value5.fontFamily = Define.DollarFontFamily;

            if (!isNaN(Number(_Num))) {
              this.m_settingInfoData[AutoplaySettingIndex.LessChip] = Number(_Num);
            }
          }

          if (this.m_panelData.GreaterThan.isCheck) {
            var _value6 = null;

            if (this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.VALUE)) {
              _value6 = this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.VALUE).getComponent(RichText);
            } else {
              _value6 = this.m_infoValue[AutoplaySettingIndex.GreatChip];
            } // this.m_chipGreatCheckNode.getComponent( Toggle ).check();


            this.m_chipGreatCheckNode.getComponent(Toggle).isChecked = true;

            var _Num2 = parseInt(this.m_panelData.GreaterThan.value);

            _value6.string = Define.DollarSymbol + Tools.FormatNumberThousands(this.m_bottombarView.GetDisplayValue(_Num2), Tools.FORMAT_NUMBER_TYPE.NONE_DOT) + Define.DollarSymbolSuffix;
            _value6.fontFamily = Define.DollarFontFamily;

            if (!isNaN(Number(_Num2))) {
              this.m_settingInfoData[AutoplaySettingIndex.GreatChip] = Number(_Num2);
            }
          }

          if (this.m_panelData.WhenJp && this.m_panelData.WhenJp.isCheck) {
            // this.m_jpCheckNode.getComponent( Toggle ).check();
            this.m_jpCheckNode.getComponent(Toggle).isChecked = true;
          }

          if (this.m_panelData.WhenFreeGame && this.m_panelData.WhenFreeGame.isCheck) {
            var _value7 = this.m_panelData.WhenFreeGame.value + 1;

            this.m_settingInfoData[AutoplaySettingIndex.FreeType] = this.m_panelData.WhenFreeGame.value;
            this.m_freeType = this.m_settingInfoData[AutoplaySettingIndex.FreeType] || 0;

            if (_value7 == null || _value7 == undefined) {
              _value7 = 1;
            }

            for (var i = 1; i <= 3; i++) {
              var _freeCheckNode = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.CHECKBOX + i);

              if (!_freeCheckNode) {
                _freeCheckNode = this.m_freeTypeNode[i - 1];
              } // freeCheckNode.getComponent( Toggle ).uncheck();


              _freeCheckNode.getComponent(Toggle).isChecked = false;
            }

            var freeCheckNode = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.CHECKBOX + _value7);

            if (!freeCheckNode) {
              freeCheckNode = this.m_freeTypeNode[_value7 - 1];
            }

            if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.IMG_MASK)) {
              this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_DFIII.UIName.IMG_MASK).active = false;
            } // this.m_freeCheckNode.getComponent( Toggle ).check();
            // freeCheckNode.getComponent( Toggle ).check();


            this.m_freeCheckNode.getComponent(Toggle).isChecked = true;
            freeCheckNode.getComponent(Toggle).isChecked = true;
          }
        };

        _proto.LoadPanelDataFromLocal = function LoadPanelDataFromLocal() {
          var value = LocalStorageManager.GetObject(this.m_storageKey);

          if (value) {
            this.m_panelData = value;
            this.m_panelData.TotalRound.value = '100';
            this.LoadPanelData();
          }
        };

        _proto.SumaryWiseAutoPlay = function SumaryWiseAutoPlay() {
          var sumStr = String(this.m_checkTotalRound) + "," + String(this.m_checkTotalBet) + "," + String(this.m_checkChipLessLimit) + "," + String(this.m_checkChipGreatLimit) + "," + String(this.m_isCheckFree) + "," + String(this.m_isCheckJp);
          return sumStr;
        };

        _proto.CloseJPCheckBox = function CloseJPCheckBox() {
          this.m_isCloseJp = true;
        };

        _createClass(AutoPlaySettingPanel_DFIII, [{
          key: "IsCheckFree",
          get: function get() {
            return this.m_freeCheckNode.getComponent(Toggle).isChecked;
          }
        }, {
          key: "IsCheckJp",
          get: function get() {
            return this.m_jpCheckNode.getComponent(Toggle).isChecked;
          }
        }, {
          key: "PanelAniS",
          get: function get() {
            this.m_isLandscape = false; // if ( this.m_isCloseJp )
            // {
            //     return Auto_Play_Setting_Panel_Ani_NJP_S;
            // }
            // else
            // {

            return Auto_Play_Setting_Panel_Ani_S; // }
          }
        }, {
          key: "PanelAniL",
          get: function get() {
            this.m_isLandscape = true; // if ( this.m_isCloseJp )
            // {
            //     return Auto_Play_Setting_Panel_Ani_NJP_L;
            // }
            // else
            // {

            return Auto_Play_Setting_Panel_Ani_L; // }
          }
        }]);

        return AutoPlaySettingPanel_DFIII;
      }(AutoPlaySetting), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_freeCheckNode", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_freeCheckTxt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_jpCheckNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_jpCheckTxt", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_freeMask", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_freeTypeNode", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_freeTypeTxt", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AutoPlaySettingPanel_FD.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AutoPlaySetting.ts', './Define.ts', './SoundManager.ts', './LocalStorageManager.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Toggle, Label, RichText, Sprite, AutoPlaySetting, PanelData, Define, SoundManager, LocalStorageManager, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Toggle = module.Toggle;
      Label = module.Label;
      RichText = module.RichText;
      Sprite = module.Sprite;
    }, function (module) {
      AutoPlaySetting = module.default;
      PanelData = module.PanelData;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      LocalStorageManager = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "d8fb6c7EnRDU7Z6hkTzo86r", "AutoPlaySettingPanel_FD", undefined);

      var AutoplayType = exports('AutoplayType', function AutoplayType() {
        this.isCheckFree = false;
        this.isCheckJp = false;
        this.freeType = 0;
      });
      var AutoplaySettingIndex = {
        TotalRound: 0,
        TotalBet: 1,
        LessChip: 2,
        GreatChip: 3,
        FreeType: 4
      };
      var Auto_Play_Setting_Panel_Ani_S = "Clip_AutoPlayFD_Portrait";
      var Auto_Play_Setting_Panel_Ani_L = "Clip_AutoPlayFD_Landscape";

      var AutoPlayData = /*#__PURE__*/function (_PanelData) {
        _inheritsLoose(AutoPlayData, _PanelData);

        function AutoPlayData() {
          var _this;

          _this = _PanelData.call(this) || this;
          _this.WhenFreeGame = {
            isCheck: false,
            value: 0
          };
          return _this;
        }

        return AutoPlayData;
      }(PanelData);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AutoPlaySettingPanel_FD = exports('default', (_dec = property(Node), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), ccclass(_class = (_class2 = /*#__PURE__*/function (_AutoPlaySetting) {
        _inheritsLoose(AutoPlaySettingPanel_FD, _AutoPlaySetting);

        function AutoPlaySettingPanel_FD() {
          var _this2;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this2 = _AutoPlaySetting.call.apply(_AutoPlaySetting, [this].concat(args)) || this;

          _initializerDefineProperty(_this2, "m_freeCheckNode", _descriptor, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeCheckTxt", _descriptor2, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeMask", _descriptor3, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeTypeNodes", _descriptor4, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeTypeTxt", _descriptor5, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeTypeSprite", _descriptor6, _assertThisInitialized(_this2));

          _this2.m_panelData = new AutoPlayData();
          _this2.m_freeGameString1 = null;
          _this2.m_freeGameString2 = null;
          _this2.m_freeGameString3 = void 0;
          _this2.m_freeType = 0;
          _this2.m_isCloseJp = false;
          _this2.m_isCheckFree = "-";
          _this2.m_isCheckJp = "-";
          return _this2;
        }

        var _proto = AutoPlaySettingPanel_FD.prototype;

        _proto.onLoad = function onLoad() {
          var _this3 = this;

          _AutoPlaySetting.prototype.onLoad.call(this);

          this.m_settingInfoData.push(4); //選擇設定

          var _loop = function _loop() {
            // 基本按鈕點擊事件
            var checkNode = _this3.node.getChildByName(AutoPlaySettingPanel_FD.UIName.CHECKBOX + i);

            if (checkNode) {
              checkNode.on('toggle', function (event) {
                if (event.node.name == AutoPlaySettingPanel_FD.UIName.CHECKBOX + "6") {
                  _this3.m_freeMask.active = !event.isChecked;
                }

                if (event.isChecked) {
                  event.node.getChildByName(AutoPlaySettingPanel_FD.UIName.IMG_ON_BG).active = true; // SoundManager.getInstance().Play( Define.AudioClips.COMMON_BTN, false );
                } else {
                  if (_this3.m_isInvert && (event.node.name == AutoPlaySettingPanel_FD.UIName.CHECKBOX + "3" || event.node.name == AutoPlaySettingPanel_FD.UIName.CHECKBOX + "4")) {
                    _this3.m_isInvert = false;
                  } else if (event.node.getChildByName(AutoPlaySettingPanel_FD.UIName.IMG_ON_BG).active) ;

                  event.node.getChildByName(AutoPlaySettingPanel_FD.UIName.IMG_ON_BG).active = false;
                }
              });
            }

            var button = null;

            if (checkNode) {
              button = checkNode.getChildByName(AutoPlaySettingPanel_FD.UIName.BUTTON);
            }

            if (button) {
              button.on(Node.EventType.TOUCH_START, function (event) {
                // cc.log("touch start", event)
                // event.stopPropagationImmediate();
                // event.stopPropagation();
                event.propagationImmediateStopped = true;
                event.propagationStopped = true;

                if (_this3.m_currentTouchName == null) {
                  _this3.m_currentTouchName = event.target.name;
                } else {
                  if (event.target && event.target.active == false) {
                    _this3.m_currentTouchName = event.target.name;
                  }
                }
              }, _this3);
              button.on(Node.EventType.TOUCH_END, function (event) {
                if (_this3.m_currentTouchName != event.target.name) {
                  return;
                }

                _this3.m_currentTouchName = null;
                var toggle = checkNode.getComponent(Toggle);

                if (toggle.isChecked) {
                  SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_OFF); // toggle.uncheck();

                  toggle.isChecked = false;
                } else {
                  SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_ON); // toggle.check();

                  toggle.isChecked = true;
                }
              }, _this3);
              button.on(Node.EventType.TOUCH_CANCEL, function (event) {
                if (_this3.m_currentTouchName == event.target.name) {
                  _this3.m_currentTouchName = null;
                }

                _this3.m_currentTouchName = null;
              }, _this3);
            } // freeGame選擇事件


            if (i == 6) {
              for (j = 1; j <= 5; j++) {
                var freeCheckNode = null;

                if (checkNode) {
                  freeCheckNode = checkNode.getChildByName(AutoPlaySettingPanel_FD.UIName.CHECKBOX + "_D" + j);
                } else {
                  freeCheckNode = _this3.m_freeTypeNodes[j - 1];
                }

                freeCheckNode.on('click', function (event) {
                  // var index = Number( event.node.name.split( AutoPlaySettingPanel_FD.UIName.CHECKBOX + "_D" )[ 1 ] ) - 1;
                  var index = j - 1;

                  if (!_this3.m_freeMask.active) {
                    for (var k = 0; k < _this3.m_freeTypeNodes.length; k++) {
                      var freeTypeCheck = _this3.m_freeTypeNodes[k].getComponent(Toggle); // freeTypeCheck.uncheck();


                      freeTypeCheck.isChecked = false;
                    }
                  }

                  SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_ON);
                  _this3.m_settingInfoData[AutoplaySettingIndex.FreeType] = index;
                }, _this3);
              }

              _this3.m_freeCheckNode.on('toggle', function (event) {
                var toggle = _this3.m_freeCheckNode.getComponent(Toggle);

                if (toggle.isChecked) {
                  _this3.m_freeMask.active = false;
                } else {
                  _this3.m_freeMask.active = true;
                }
              }, _this3);
            }
          };

          for (var i = 5; i <= 6; i++) {
            var j;

            _loop();
          }

          if (this.m_confirmBtn) {
            this.m_confirmBtn.node.on("click", function (event) {
              _this3.m_freeType = _this3.m_settingInfoData[AutoplaySettingIndex.FreeType] || 0;

              _this3.SavePanelData();
            });
          }

          this.m_cancelBtn.node.on("click", function (event) {
            if (_this3.m_confirmBtn) {
              _this3.m_freeType = _this3.m_settingInfoData[AutoplaySettingIndex.FreeType] || 0;

              _this3.SavePanelData();
            }
          });
        };

        _proto.Init = function Init(aid, apiid, gameid, bottombarView) {
          _AutoPlaySetting.prototype.Init.call(this, aid, apiid, gameid, bottombarView);

          this.LoadPanelDataFromLocal();
        } // 非共用選項
        ;

        _proto.OthersInfo = function OthersInfo(isWiseAutoPlay) {
          var data = new AutoplayType();

          if (isWiseAutoPlay) {
            data.isCheckFree = this.m_freeCheckNode.getComponent(Toggle).isChecked;
            data.freeType = this.m_settingInfoData[AutoplaySettingIndex.FreeType];
            data.isCheckJp = false;
            this.SavePanelData();

            if (data.isCheckFree) {
              // FB編號=data.freeType
              this.SetUseWisePlay(true);
              this.m_isCheckFree = "1"; // ConnectionManager.getInstance().SendBtnClickEvent( Tools.FormBtnClickParams( this.m_aid, this.m_apiid, Number( this.m_gameid ), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.WISEAUTO_FGSTOP_OTHER, data.freeType, this.m_isLandscape ) )
            } else {
              this.SetUseWisePlay(false);
              this.m_isCheckFree = "-";
            }

            if (data.isCheckJp) {
              this.SetUseWisePlay(true);
              this.m_isCheckJp = "1"; // 自定義特色遊戲編號
              // ConnectionManager.getInstance().SendBtnClickEvent( Tools.FormBtnClickParams( this.m_aid, this.m_apiid, Number( this.m_gameid ), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.WISEAUTO_FGSTOP_OTHER, 1, this.m_isLandscape ) )
            } else {
              this.SetUseWisePlay(false);
              this.m_isCheckJp = "-";
            }
          } else {
            this.SavePanelData();
            this.ClearPanel();
            data.isCheckFree = false;
            data.freeType = -1;
            data.isCheckJp = false;
          }

          return JSON.stringify(data);
        } // 設定FreeGameString
        ;

        _proto.SetFreeGameString = function SetFreeGameString(strKey1, strKey2, strKey3) {
          if (strKey1 != null) {
            this.m_freeGameString1 = strKey1;
            var freeCheckTxt = null;

            if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.TXT1)) {
              freeCheckTxt = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.TXT1);
            } else {
              freeCheckTxt = this.m_freeCheckTxt;
              Tools.SetFont(freeCheckTxt.getComponent(Label));
            }

            freeCheckTxt.getComponent(Label).string = this.GetString(strKey1);

            if (!freeCheckTxt.getComponent(Label).font) {
              freeCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }

            if (strKey3 != null) {
              this.m_freeGameString3 = strKey3;
              var select1 = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.CHECKBOX + "_D1");
              var select2 = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.CHECKBOX + "_D2");
              var select3 = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.CHECKBOX + "_D3");
              var txt1 = null;
              var txt2 = null;
              var txt3 = null;

              if (select1 && select2 && select3) {
                txt1 = select1.getChildByName(AutoPlaySettingPanel_FD.UIName.TXT1);
                txt2 = select2.getChildByName(AutoPlaySettingPanel_FD.UIName.TXT1);
                txt3 = select3.getChildByName(AutoPlaySettingPanel_FD.UIName.TXT1);
              } else {
                txt1 = this.m_freeTypeTxt[0];
                txt2 = this.m_freeTypeTxt[1];
                txt3 = this.m_freeTypeTxt[2];
              }

              txt1.getComponent(Label).string = this.GetString(strKey3[0]);

              if (!txt1.getComponent(Label).font) {
                txt1.getComponent(Label).font = Define.DefaultFont;
              }

              txt2.getComponent(Label).string = this.GetString(strKey3[1]);

              if (!txt2.getComponent(Label).font) {
                txt2.getComponent(Label).font = Define.DefaultFont;
              }

              txt3.getComponent(Label).string = this.GetString(strKey3[2]);

              if (!txt3.getComponent(Label).font) {
                txt3.getComponent(Label).font = Define.DefaultFont;
              }
            }
          } // if ( strKey2 != null )
          // {
          //     this.m_freeGameString2 = strKey2;
          //     this.m_jpCheckNode.getChildByName( AutoPlaySettingPanel_FD.UIName.TXT1 ).getComponent( cc.Label ).string = this.GetString( strKey2 );
          // }

        } // 判斷有無選任何選項
        ;

        _proto.IsCheckAnyToggle = function IsCheckAnyToggle() {
          var result = _AutoPlaySetting.prototype.IsCheckAnyToggle.call(this);

          if (this.m_freeCheckNode.getComponent(Toggle).isChecked) {
            return true;
          } // if ( this.m_jpCheckNode.getComponent( cc.Toggle ).isChecked )
          // {
          //     return true;
          // }


          return result;
        } // 多語系
        ;

        _proto.SetTxt = function SetTxt() {
          _AutoPlaySetting.prototype.SetTxt.call(this);

          if (this.m_freeGameString1 != null) {
            var freeCheckTxt = null;

            if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.TXT1)) {
              freeCheckTxt = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.TXT1);
            } else {
              freeCheckTxt = this.m_freeCheckTxt;
              Tools.SetFont(freeCheckTxt.getComponent(Label));
            }

            freeCheckTxt.getComponent(Label).string = this.GetString(this.m_freeGameString1);

            if (!freeCheckTxt.getComponent(Label).font) {
              freeCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }

            if (this.m_freeGameString3 != null) {
              var select1 = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.CHECKBOX + "_D1");
              var select2 = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.CHECKBOX + "_D2");
              var select3 = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.CHECKBOX + "_D3");
              var txt1 = null;
              var txt2 = null;
              var txt3 = null;

              if (select1 && select2 && select3) {
                txt1 = select1.getChildByName(AutoPlaySettingPanel_FD.UIName.TXT1);
                txt2 = select2.getChildByName(AutoPlaySettingPanel_FD.UIName.TXT1);
                txt3 = select3.getChildByName(AutoPlaySettingPanel_FD.UIName.TXT1);
              } else {
                txt1 = this.m_freeTypeTxt[0];
                txt2 = this.m_freeTypeTxt[1];
                txt3 = this.m_freeTypeTxt[2];
              }

              txt1.getComponent(Label).string = this.GetString(this.m_freeGameString3[0]);

              if (!txt1.getComponent(Label).font) {
                txt1.getComponent(Label).font = Define.DefaultFont;
              }

              txt2.getComponent(Label).string = this.GetString(this.m_freeGameString3[1]);

              if (!txt2.getComponent(Label).font) {
                txt2.getComponent(Label).font = Define.DefaultFont;
              }

              txt3.getComponent(Label).string = this.GetString(this.m_freeGameString3[2]);

              if (!txt3.getComponent(Label).font) {
                txt3.getComponent(Label).font = Define.DefaultFont;
              }
            }
          } // if ( this.m_freeGameString2 != null )
          // {
          //     this.m_jpCheckNode.getChildByName( AutoPlaySettingPanel_FD.UIName.TXT1 ).getComponent( cc.Label ).string = this.GetString( this.m_freeGameString2 );
          // }

        };

        _proto.ClearPanel = function ClearPanel() {
          _AutoPlaySetting.prototype.ClearPanel.call(this); // this.m_freeCheckNode.getComponent( Toggle ).uncheck();


          this.m_freeCheckNode.getComponent(Toggle).isChecked = false;

          if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.IMG_ON_BG)) {
            this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.IMG_ON_BG).active = false;
          } // this.m_jpCheckNode.getComponent( cc.Toggle ).uncheck();
          // this.m_jpCheckNode.getChildByName( AutoPlaySettingPanel_FD.UIName.IMG_ON_BG ).active = false;

        };

        _proto.SavePanelData = function SavePanelData() {
          if (this.m_totalRoundCheckNode.getComponent(Toggle).isChecked) {
            var value = null;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.VALUE)) {
              value = this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.VALUE).getComponent(RichText);
            } else {
              value = this.m_infoValue[AutoplaySettingIndex.TotalRound];
            }

            this.m_panelData.TotalRound.isCheck = true;
            this.m_panelData.TotalRound.value = value.string;
          } else {
            this.m_panelData.TotalRound.isCheck = false;
            this.m_panelData.TotalRound.value = "100";
          }

          if (this.m_totalBetCheckNode.getComponent(Toggle).isChecked) {
            var _value = null;

            if (this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.VALUE)) {
              _value = this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.VALUE).getComponent(RichText);
            } else {
              _value = this.m_infoValue[AutoplaySettingIndex.TotalBet];
            }

            this.m_panelData.TotalBet.isCheck = true;

            var str = _value.string.replace(/<.*?>|[^0-9|.]/g, ""); // this.m_singleWin = this.m_bottombarView.GetRawValue( parseInt( str ) );


            this.m_singleWin = parseInt(str); // this.m_panelData.TotalBet.value = this.m_bottombarView.GetRawValue( parseInt( str ) ).toString();

            this.m_panelData.TotalBet.value = parseInt(str).toString();
          } else {
            this.m_panelData.TotalBet.isCheck = false;
          }

          if (this.m_chipLessCheckNode.getComponent(Toggle).isChecked) {
            var _value2 = null;

            if (this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.VALUE)) {
              _value2 = this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.VALUE).getComponent(RichText);
            } else {
              _value2 = this.m_infoValue[AutoplaySettingIndex.LessChip];
            }

            this.m_panelData.LessThan.isCheck = true;

            var _str = _value2.string.replace(/[^0-9|.]/g, "");

            this.m_panelData.LessThan.value = this.m_bottombarView.GetRawValue(parseInt(_str)).toString();
          } else {
            this.m_panelData.LessThan.isCheck = false;
          }

          if (this.m_chipGreatCheckNode.getComponent(Toggle).isChecked) {
            var _value3 = null;

            if (this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.VALUE)) {
              _value3 = this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.VALUE).getComponent(RichText);
            } else {
              _value3 = this.m_infoValue[AutoplaySettingIndex.GreatChip];
            }

            this.m_panelData.GreaterThan.isCheck = true;

            var _str2 = _value3.string.replace(/[^0-9|.]/g, "");

            this.m_panelData.GreaterThan.value = this.m_bottombarView.GetRawValue(parseInt(_str2)).toString();
          } else {
            this.m_panelData.GreaterThan.isCheck = false;
          } // if ( this.m_jpCheckNode.getComponent( cc.Toggle ).isChecked )
          // {
          //     this.m_panelData.WhenJp.isCheck = true;
          // }
          // else
          // {
          //     this.m_panelData.WhenJp.isCheck = false;
          // }


          if (this.m_freeCheckNode.getComponent(Toggle).isChecked) {
            this.m_panelData.WhenFreeGame.isCheck = true;
            this.m_panelData.WhenFreeGame.value = this.m_freeType;
          } else {
            this.m_panelData.WhenFreeGame.isCheck = false;
            this.m_panelData.WhenFreeGame.value = 0;
          }

          LocalStorageManager.SetObject(this.m_storageKey, this.m_panelData);
        };

        _proto.LoadPanelData = function LoadPanelData() {
          if (this.m_panelData.TotalRound.isCheck) {
            var _value4 = null;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.VALUE)) {
              _value4 = this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.VALUE).getComponent(RichText);
            } else {
              _value4 = this.m_infoValue[AutoplaySettingIndex.TotalRound];
            } // this.m_totalRoundCheckNode.getComponent( Toggle ).check();


            this.m_totalRoundCheckNode.getComponent(Toggle).isChecked = true;
            _value4.string = this.m_panelData.TotalRound.value;

            if (!isNaN(Number(this.m_panelData.TotalRound.value))) {
              this.m_settingInfoData[AutoplaySettingIndex.TotalRound] = Number(this.m_panelData.TotalRound.value);
            }
          } else if (LocalStorageManager.GetObject(this.m_storageKey)) {
            // this.m_totalRoundCheckNode.getComponent( Toggle ).uncheck();
            this.m_totalRoundCheckNode.getComponent(Toggle).isChecked = false;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.IMG_ON_BG)) {
              this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.IMG_ON_BG).active = false;
            }
          }

          var value = null;

          if (this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.VALUE)) {
            value = this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.VALUE).getComponent(RichText);
          } else {
            value = this.m_infoValue[AutoplaySettingIndex.TotalBet];
          }

          if (this.m_panelData.TotalBet.isCheck) {
            // this.m_totalBetCheckNode.getComponent( Toggle ).check();
            this.m_totalBetCheckNode.getComponent(Toggle).isChecked = true;
            var Num = parseInt(this.m_panelData.TotalBet.value);

            if (!isNaN(Number(Num))) {
              this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = Number(Num);
              this.m_singleWin = this.m_settingInfoData[AutoplaySettingIndex.TotalBet];
            }
          }

          if (this.m_nowBet != -1) {
            if (this.m_singleWin == -1
            /*|| this.m_tempBet != this.m_nowBet*/
            ) {
                // this.m_tempBet = this.m_nowBet;
                // let betBuff: number
                //     = this.m_bottombarView.GetDisplayValue( this.m_bottombarView.GetNowBetValue() * Define.AUTOPLAY_SINGLE_WIN_RATE );
                // value.string = Define.DollarSymbol +
                //     Tools.FormatNumberThousands( betBuff, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) +
                //     Define.DollarSymbolSuffix;
                value.string = "100X";
                value.fontFamily = Define.DollarFontFamily; // this.m_settingInfoData[ AutoplaySettingIndex.TotalBet ] = this.m_bottombarView.GetNowBetValue() * Define.AUTOPLAY_SINGLE_WIN_RATE;

                this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = 100;
                this.m_singleWin = 100;
              } else {
              // let win: number = this.m_bottombarView.GetDisplayValue( this.m_singleWin );
              // value.string = Define.DollarSymbol +
              //     Tools.FormatNumberThousands( win, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) +
              //     Define.DollarSymbolSuffix;
              // value.string = Tools.FormatNumberThousands( win, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) + "X";
              value.string = this.m_singleWin.toString() + "X";
              value.fontFamily = Define.DollarFontFamily;
              this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = this.m_singleWin;
            }
          }

          if (this.m_panelData.LessThan.isCheck) {
            var _value5 = null;

            if (this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.VALUE)) {
              _value5 = this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.VALUE).getComponent(RichText);
            } else {
              _value5 = this.m_infoValue[AutoplaySettingIndex.LessChip];
            } // this.m_chipLessCheckNode.getComponent( Toggle ).check();


            this.m_chipLessCheckNode.getComponent(Toggle).isChecked = true;

            var _Num = parseInt(this.m_panelData.LessThan.value);

            _value5.string = Define.DollarSymbol + Tools.FormatNumberThousands(this.m_bottombarView.GetDisplayValue(_Num), Tools.FORMAT_NUMBER_TYPE.NONE_DOT);
            _value5.fontFamily = Define.DollarFontFamily;

            if (!isNaN(Number(_Num))) {
              this.m_settingInfoData[AutoplaySettingIndex.LessChip] = Number(_Num);
            }
          }

          if (this.m_panelData.GreaterThan.isCheck) {
            var _value6 = null;

            if (this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.VALUE)) {
              _value6 = this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.VALUE).getComponent(RichText);
            } else {
              _value6 = this.m_infoValue[AutoplaySettingIndex.GreatChip];
            } // this.m_chipGreatCheckNode.getComponent( Toggle ).check();


            this.m_chipGreatCheckNode.getComponent(Toggle).isChecked = true;

            var _Num2 = parseInt(this.m_panelData.GreaterThan.value);

            _value6.string = Define.DollarSymbol + Tools.FormatNumberThousands(this.m_bottombarView.GetDisplayValue(_Num2), Tools.FORMAT_NUMBER_TYPE.NONE_DOT);
            _value6.fontFamily = Define.DollarFontFamily;

            if (!isNaN(Number(_Num2))) {
              this.m_settingInfoData[AutoplaySettingIndex.GreatChip] = Number(_Num2);
            }
          } // if ( this.m_panelData.WhenJp.isCheck )
          // {
          //     this.m_jpCheckNode.getComponent( cc.Toggle ).check();
          // }


          if (this.m_panelData.WhenFreeGame.isCheck) {
            var _value7 = this.m_panelData.WhenFreeGame.value + 1;

            this.m_settingInfoData[AutoplaySettingIndex.FreeType] = this.m_panelData.WhenFreeGame.value;
            this.m_freeType = this.m_settingInfoData[AutoplaySettingIndex.FreeType] || 0;

            if (_value7 == null || _value7 == undefined) {
              _value7 = 1;
            }

            for (var i = 1; i <= 5; i++) {
              var _freeCheckNode = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.CHECKBOX + "_D" + i);

              if (!_freeCheckNode) {
                _freeCheckNode = this.m_freeTypeNodes[i - 1];
              } // freeCheckNode.getComponent( Toggle ).uncheck();


              _freeCheckNode.getComponent(Toggle).isChecked = false;
            }

            var freeCheckNode = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.CHECKBOX + "_D" + _value7);

            if (!freeCheckNode) {
              freeCheckNode = this.m_freeTypeNodes[_value7 - 1];
            }

            if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.IMG_MASK)) {
              this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_FD.UIName.IMG_MASK).active = false;
            } // this.m_freeCheckNode.getComponent( Toggle ).check();
            // freeCheckNode.getComponent( Toggle ).check();


            this.m_freeCheckNode.getComponent(Toggle).isChecked = true;
            freeCheckNode.getComponent(Toggle).isChecked = true;
          }
        };

        _proto.LoadPanelDataFromLocal = function LoadPanelDataFromLocal() {
          var value = LocalStorageManager.GetObject(this.m_storageKey);

          if (value) {
            this.m_panelData = value;
            this.m_panelData.TotalRound.value = '100';
            this.LoadPanelData();
          }
        };

        _proto.SumaryWiseAutoPlay = function SumaryWiseAutoPlay() {
          var sumStr = String(this.m_checkTotalRound) + "," + String(this.m_checkTotalBet) + "," + String(this.m_checkChipLessLimit) + "," + String(this.m_checkChipGreatLimit) + "," + String(this.m_isCheckFree) + "," + String(this.m_isCheckJp);
          return sumStr;
        };

        _proto.CloseJPCheckBox = function CloseJPCheckBox() {
          this.m_isCloseJp = true;
        };

        _proto.SetFreeGameSelectSprites = function SetFreeGameSelectSprites(spriteFrames, rounds) {
          // if ( Tools.Line !== Define.LineSetting.americas )
          // {
          if (this.m_freeTypeNodes.length === spriteFrames.length) {
            for (var i = 0; i < this.m_freeTypeNodes.length; i++) {
              var iconNode = this.m_freeTypeNodes[i].getChildByName("D_icon");

              if (!iconNode) {
                iconNode = this.m_freeTypeSprite[i];
              }

              var sprite = iconNode.getComponent(Sprite);

              if (!sprite) {
                sprite = iconNode.addComponent(Sprite);
              }

              sprite.spriteFrame = spriteFrames[i];
            }
          } // }


          if (this.m_freeTypeNodes.length === rounds.length) {
            for (var _i = 0; _i < this.m_freeTypeNodes.length; _i++) {
              var labelNode = this.m_freeTypeNodes[_i].getChildByName("label");

              if (!labelNode) {
                labelNode = this.m_freeTypeTxt[_i];
              }

              labelNode.active = true;
              var label = labelNode.getComponent(Label);

              if (!label) {
                label = labelNode.addComponent(Label);
              }

              label.string = Tools.strip(rounds[_i]).toString();

              if (!label.font) {
                label.font = Define.DefaultFont;
              }
            }
          } else {
            for (var _i2 = 0; _i2 < this.m_freeTypeNodes.length; _i2++) {
              var _labelNode = this.m_freeTypeNodes[_i2].getChildByName("label");

              if (!_labelNode) {
                _labelNode = this.m_freeTypeTxt[_i2];
              }

              _labelNode.active = false;
            }
          }
        };

        _createClass(AutoPlaySettingPanel_FD, [{
          key: "IsCheckFree",
          get: function get() {
            return this.m_freeCheckNode.getComponent(Toggle).isChecked;
          }
        }, {
          key: "IsCheckJp",
          get: function get() {
            return false;
          }
        }, {
          key: "PanelAniS",
          get: function get() {
            this.m_isLandscape = false; // if ( this.m_isCloseJp )
            // {
            //     return Auto_Play_Setting_Panel_Ani_NJP_S;
            // }
            // else
            // {

            return Auto_Play_Setting_Panel_Ani_S; // }
          }
        }, {
          key: "PanelAniL",
          get: function get() {
            this.m_isLandscape = true; // if ( this.m_isCloseJp )
            // {
            //     return Auto_Play_Setting_Panel_Ani_NJP_L;
            // }
            // else
            // {

            return Auto_Play_Setting_Panel_Ani_L; // }
          }
        }]);

        return AutoPlaySettingPanel_FD;
      }(AutoPlaySetting), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_freeCheckNode", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_freeCheckTxt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_freeMask", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_freeTypeNodes", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_freeTypeTxt", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_freeTypeSprite", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AutoPlaySettingPanel_MS.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AutoPlaySetting.ts', './Define.ts', './SoundManager.ts', './LocalStorageManager.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Toggle, Label, RichText, AutoPlaySetting, PanelData, Define, SoundManager, LocalStorageManager, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Toggle = module.Toggle;
      Label = module.Label;
      RichText = module.RichText;
    }, function (module) {
      AutoPlaySetting = module.default;
      PanelData = module.PanelData;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      LocalStorageManager = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "d5a43bGslBKerIVJhF2PcP+", "AutoPlaySettingPanel_MS", undefined);

      var AutoplayType = exports('AutoplayType', function AutoplayType() {
        this.isCheckFree = false;
        this.isCheckJp = false;
        this.freeType = 1;
      });
      var AutoplaySettingIndex = {
        TotalRound: 0,
        TotalBet: 1,
        LessChip: 2,
        GreatChip: 3,
        FreeType: 4
      };
      var Auto_Play_Setting_Panel_Ani_S = "Clip_AutoPlayMS_Portrait";
      var Auto_Play_Setting_Panel_Ani_L = "Clip_AutoPlayMS_Landscape";

      var AutoPlayData = /*#__PURE__*/function (_PanelData) {
        _inheritsLoose(AutoPlayData, _PanelData);

        function AutoPlayData() {
          var _this;

          _this = _PanelData.call(this) || this;
          _this.WhenJp = {
            isCheck: false
          };
          _this.WhenFreeGame = {
            isCheck: false,
            value: 0
          };
          return _this;
        }

        return AutoPlayData;
      }(PanelData);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AutoPlaySettingPanel_MS = exports('default', (_dec = property(Node), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), ccclass(_class = (_class2 = /*#__PURE__*/function (_AutoPlaySetting) {
        _inheritsLoose(AutoPlaySettingPanel_MS, _AutoPlaySetting);

        function AutoPlaySettingPanel_MS() {
          var _this2;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this2 = _AutoPlaySetting.call.apply(_AutoPlaySetting, [this].concat(args)) || this;

          _initializerDefineProperty(_this2, "m_freeCheckNode", _descriptor, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeCheckTxt", _descriptor2, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_jpCheckNode", _descriptor3, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_jpCheckTxt", _descriptor4, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeMask", _descriptor5, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeTypeNodes", _descriptor6, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeTypeTxt", _descriptor7, _assertThisInitialized(_this2));

          _this2.m_panelData = new AutoPlayData();
          _this2.m_freeGameString1 = null;
          _this2.m_freeGameString2 = null;
          _this2.m_freeGameString3 = void 0;
          _this2.m_freeType = 0;
          _this2.m_isCloseJp = false;
          _this2.m_isCheckFree = "-";
          _this2.m_isCheckJp = "-";
          return _this2;
        }

        var _proto = AutoPlaySettingPanel_MS.prototype;

        _proto.onLoad = function onLoad() {
          var _this3 = this;

          _AutoPlaySetting.prototype.onLoad.call(this);

          this.m_settingInfoData.push(1); //選擇設定

          var _loop = function _loop(i) {
            // 基本按鈕點擊事件
            var checkNode = _this3.node.getChildByName(AutoPlaySettingPanel_MS.UIName.CHECKBOX + i);

            if (checkNode) {
              checkNode.on('toggle', function (event) {
                if (event.node.name == AutoPlaySettingPanel_MS.UIName.CHECKBOX + "6") {
                  if (_this3.m_freeMask) {
                    _this3.m_freeMask.active = !event.isChecked;
                  }
                }

                if (event.isChecked) {
                  event.node.getChildByName(AutoPlaySettingPanel_MS.UIName.IMG_ON_BG).active = true; // SoundManager.getInstance().Play( Define.AudioClips.COMMON_BTN, false );
                } else {
                  if (_this3.m_isInvert && (event.node.name == AutoPlaySettingPanel_MS.UIName.CHECKBOX + "3" || event.node.name == AutoPlaySettingPanel_MS.UIName.CHECKBOX + "4")) {
                    _this3.m_isInvert = false;
                  } else if (event.node.getChildByName(AutoPlaySettingPanel_MS.UIName.IMG_ON_BG).active) ;

                  event.node.getChildByName(AutoPlaySettingPanel_MS.UIName.IMG_ON_BG).active = false;
                }
              });
            }

            var button = null;

            if (checkNode) {
              button = checkNode.getChildByName(AutoPlaySettingPanel_MS.UIName.BUTTON);
            }

            if (button) {
              button.on(Node.EventType.TOUCH_START, function (event) {
                // cc.log("touch start", event)
                // event.stopPropagationImmediate();
                // event.stopPropagation();
                event.propagationImmediateStopped = true;
                event.propagationStopped = true;

                if (_this3.m_currentTouchName == null) {
                  _this3.m_currentTouchName = event.target.name;
                } else {
                  if (event.target && event.target.active == false) {
                    _this3.m_currentTouchName = event.target.name;
                  }
                }
              }, _this3);
              button.on(Node.EventType.TOUCH_END, function (event) {
                if (_this3.m_currentTouchName != event.target.name) {
                  return;
                }

                _this3.m_currentTouchName = null;
                var toggle = checkNode.getComponent(Toggle);

                if (toggle.isChecked) {
                  SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_OFF); // toggle.uncheck();

                  toggle.isChecked = false;
                } else {
                  SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_ON); // toggle.check();

                  toggle.isChecked = true;
                }

                if (checkNode.name == AutoPlaySettingPanel_MS.UIName.CHECKBOX + "6") {
                  if (_this3.m_freeMask) {
                    _this3.m_freeMask.active = !toggle.isChecked;
                  }
                }
              }, _this3);
              button.on(Node.EventType.TOUCH_CANCEL, function (event) {
                if (_this3.m_currentTouchName == event.target.name) {
                  _this3.m_currentTouchName = null;
                }

                _this3.m_currentTouchName = null;
              }, _this3);
            } // freeGame選擇事件


            if (i == 6) {
              var _loop2 = function _loop2(j) {
                // let freeCheckNode = checkNode.getChildByName( AutoPlaySettingPanel_MS.UIName.CHECKBOX + j );
                var freeCheckNode = null;

                if (checkNode) {
                  freeCheckNode = checkNode.getChildByName(AutoPlaySettingPanel_MS.UIName.CHECKBOX + j);
                } else {
                  freeCheckNode = _this3.m_freeTypeNodes[j - 1];
                }

                freeCheckNode.on('click', function (event) {
                  // let index = Number( event.node.name.split( AutoPlaySettingPanel_MS.UIName.CHECKBOX )[ 1 ] );
                  var index = j;

                  if (!_this3.m_freeMask.active) {
                    if (checkNode) {
                      checkNode.getComponent(Toggle).isChecked = true;
                    } else {
                      _this3.m_freeCheckNode.getComponent(Toggle).isChecked = true;
                    }

                    for (var k = 0; k < _this3.m_freeTypeNodes.length; k++) {
                      var freeTypeCheck = _this3.m_freeTypeNodes[k].getComponent(Toggle); // freeTypeCheck.uncheck();


                      freeTypeCheck.isChecked = false;
                    }
                  }

                  SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_ON);
                  _this3.m_settingInfoData[AutoplaySettingIndex.FreeType] = index;
                }, _this3);
              }; // let checkNode = this.node.getChildByName( AutoPlaySettingPanel_MS.UIName.CHECKBOX + i );


              for (var j = 1; j <= 2; j++) {
                _loop2(j);
              }

              _this3.m_freeCheckNode.on('toggle', function (event) {
                var toggle = _this3.m_freeCheckNode.getComponent(Toggle);

                if (toggle.isChecked) {
                  _this3.m_freeMask.active = false;
                } else {
                  _this3.m_freeMask.active = true;
                }
              }, _this3);
            }
          };

          for (var i = 5; i <= 6; i++) {
            _loop(i);
          }

          if (this.m_confirmBtn) {
            this.m_confirmBtn.node.on("click", function (event) {
              _this3.m_freeType = _this3.m_settingInfoData[AutoplaySettingIndex.FreeType] || 0;

              _this3.SavePanelData();
            });
          }

          if (this.m_cancelBtn) {
            this.m_cancelBtn.node.on("click", function (event) {
              if (_this3.m_confirmBtn) {
                _this3.m_freeType = _this3.m_settingInfoData[AutoplaySettingIndex.FreeType] || 0;

                _this3.SavePanelData();
              }
            });
          }
        };

        _proto.Init = function Init(aid, apiid, gameid, bottombarView) {
          _AutoPlaySetting.prototype.Init.call(this, aid, apiid, gameid, bottombarView);

          this.LoadPanelDataFromLocal();
        } // 非共用選項
        ;

        _proto.OthersInfo = function OthersInfo(isWiseAutoPlay) {
          var data = new AutoplayType();

          if (isWiseAutoPlay) {
            data.isCheckFree = this.m_freeCheckNode.getComponent(Toggle).isChecked;
            data.freeType = this.m_settingInfoData[AutoplaySettingIndex.FreeType];
            data.isCheckJp = this.m_jpCheckNode.getComponent(Toggle).isChecked;
            this.SavePanelData();

            if (data.isCheckFree) {
              // FB編號=data.freeType
              this.SetUseWisePlay(true);
              this.m_isCheckFree = "1"; // ConnectionManager.getInstance().SendBtnClickEvent( Tools.FormBtnClickParams( this.m_aid, this.m_apiid, Number( this.m_gameid ), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.WISEAUTO_FGSTOP_OTHER, data.freeType, this.m_isLandscape ) )
            } else {
              this.SetUseWisePlay(false);
              this.m_isCheckFree = "-";
            }

            if (data.isCheckJp) {
              this.SetUseWisePlay(true);
              this.m_isCheckJp = "1"; // 自定義特色遊戲編號
              // ConnectionManager.getInstance().SendBtnClickEvent( Tools.FormBtnClickParams( this.m_aid, this.m_apiid, Number( this.m_gameid ), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.WISEAUTO_FGSTOP_OTHER, 1, this.m_isLandscape ) )
            } else {
              this.SetUseWisePlay(false);
              this.m_isCheckJp = "-";
            }
          } else {
            this.SavePanelData();
            this.ClearPanel();
            data.isCheckFree = false;
            data.freeType = -1;
            data.isCheckJp = false;
          }

          return JSON.stringify(data);
        } // 設定FreeGameString
        ;

        _proto.SetFreeGameString = function SetFreeGameString(strKey1, strKey2, strKey3) {
          if (strKey1 != null) {
            this.m_freeGameString1 = strKey1;
            var freeCheckTxt = null;

            if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.TXT1)) {
              freeCheckTxt = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.TXT1);
            } else {
              freeCheckTxt = this.m_freeCheckTxt;
              Tools.SetFont(freeCheckTxt.getComponent(Label));
            }

            freeCheckTxt.getComponent(Label).string = this.GetString(strKey1);

            if (!freeCheckTxt.getComponent(Label).font) {
              freeCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }

            if (strKey3 != null) {
              this.m_freeGameString3 = strKey3;
              var select1 = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.CHECKBOX + "1");
              var select2 = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.CHECKBOX + "2");
              var txt1 = null;
              var txt2 = null;

              if (select1 && select2) {
                txt1 = select1.getChildByName(AutoPlaySettingPanel_MS.UIName.TXT1);
                txt2 = select2.getChildByName(AutoPlaySettingPanel_MS.UIName.TXT2);
              } else {
                txt1 = this.m_freeTypeTxt[0];
                txt2 = this.m_freeTypeTxt[1];
              }

              txt1.getComponent(Label).string = this.GetString(strKey3[0]);

              if (!txt1.getComponent(Label).font) {
                txt1.getComponent(Label).font = Define.DefaultFont;
              }

              txt2.getComponent(Label).string = this.GetString(strKey3[1]);

              if (!txt2.getComponent(Label).font) {
                txt2.getComponent(Label).font = Define.DefaultFont;
              }
            }
          }

          if (strKey2 != null) {
            this.m_freeGameString2 = strKey2;
            var jpCheckTxt = null;

            if (this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.TXT1)) {
              jpCheckTxt = this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.TXT1);
            } else {
              jpCheckTxt = this.m_jpCheckTxt;
              Tools.SetFont(jpCheckTxt.getComponent(Label));
            }

            jpCheckTxt.getComponent(Label).string = this.GetString(strKey2);

            if (!jpCheckTxt.getComponent(Label).font) {
              jpCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }
          }
        } // 判斷有無選任何選項
        ;

        _proto.IsCheckAnyToggle = function IsCheckAnyToggle() {
          var result = _AutoPlaySetting.prototype.IsCheckAnyToggle.call(this);

          if (this.m_freeCheckNode.getComponent(Toggle).isChecked) {
            return true;
          }

          if (this.m_jpCheckNode.getComponent(Toggle).isChecked) {
            return true;
          }

          return result;
        } // 多語系
        ;

        _proto.SetTxt = function SetTxt() {
          _AutoPlaySetting.prototype.SetTxt.call(this);

          if (this.m_freeGameString1 != null) {
            var freeCheckTxt = null;

            if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.TXT1)) {
              freeCheckTxt = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.TXT1);
            } else {
              freeCheckTxt = this.m_freeCheckTxt;
              Tools.SetFont(freeCheckTxt.getComponent(Label));
            }

            freeCheckTxt.getComponent(Label).string = this.GetString(this.m_freeGameString1);

            if (!freeCheckTxt.getComponent(Label).font) {
              freeCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }

            if (this.m_freeGameString3 != null) {
              var select1 = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.CHECKBOX + "1");
              var select2 = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.CHECKBOX + "2");
              var txt1 = null;
              var txt2 = null;

              if (select1 && select2) {
                txt1 = select1.getChildByName(AutoPlaySettingPanel_MS.UIName.TXT1);
                txt2 = select2.getChildByName(AutoPlaySettingPanel_MS.UIName.TXT2);
              } else {
                txt1 = this.m_freeTypeTxt[0];
                txt2 = this.m_freeTypeTxt[1];
              }

              txt1.getComponent(Label).string = this.GetString(this.m_freeGameString3[0]);

              if (!txt1.getComponent(Label).font) {
                txt1.getComponent(Label).font = Define.DefaultFont;
              }

              txt2.getComponent(Label).string = this.GetString(this.m_freeGameString3[1]);

              if (!txt2.getComponent(Label).font) {
                txt2.getComponent(Label).font = Define.DefaultFont;
              }
            }
          }

          if (this.m_freeGameString2 != null) {
            var jpCheckTxt = null;

            if (this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.TXT1)) {
              jpCheckTxt = this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.TXT1);
            } else {
              jpCheckTxt = this.m_jpCheckTxt;
              Tools.SetFont(jpCheckTxt.getComponent(Label));
            }

            jpCheckTxt.getComponent(Label).string = this.GetString(this.m_freeGameString2);

            if (!jpCheckTxt.getComponent(Label).font) {
              jpCheckTxt.getComponent(Label).font = Define.DefaultFont;
            }
          }
        };

        _proto.ClearPanel = function ClearPanel() {
          _AutoPlaySetting.prototype.ClearPanel.call(this); // this.m_freeCheckNode.getComponent( Toggle ).uncheck();


          this.m_freeCheckNode.getComponent(Toggle).isChecked = false;

          if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.IMG_ON_BG)) {
            this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.IMG_ON_BG).active = false;
          } // this.m_jpCheckNode.getComponent( Toggle ).uncheck();


          this.m_jpCheckNode.getComponent(Toggle).isChecked = false;

          if (this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.IMG_ON_BG)) {
            this.m_jpCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.IMG_ON_BG).active = false;
          }
        };

        _proto.SavePanelData = function SavePanelData() {
          if (this.m_totalRoundCheckNode.getComponent(Toggle).isChecked) {
            var value = null;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.VALUE)) {
              value = this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.VALUE).getComponent(RichText);
            } else {
              value = this.m_infoValue[AutoplaySettingIndex.TotalRound];
            }

            this.m_panelData.TotalRound.isCheck = true;
            this.m_panelData.TotalRound.value = value.string;
          } else {
            this.m_panelData.TotalRound.isCheck = false;
            this.m_panelData.TotalRound.value = "100";
          }

          if (this.m_totalBetCheckNode.getComponent(Toggle).isChecked) {
            var _value = null;

            if (this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.VALUE)) {
              _value = this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.VALUE).getComponent(RichText);
            } else {
              _value = this.m_infoValue[AutoplaySettingIndex.TotalBet];
            }

            this.m_panelData.TotalBet.isCheck = true;

            var str = _value.string.replace(/<.*?>|[^0-9|.]/g, ""); // this.m_singleWin = this.m_bottombarView.GetRawValue( parseInt( str ) );


            this.m_singleWin = parseInt(str); // this.m_panelData.TotalBet.value = this.m_bottombarView.GetRawValue( parseInt( str ) ).toString();

            this.m_panelData.TotalBet.value = parseInt(str).toString();
          } else {
            this.m_panelData.TotalBet.isCheck = false;
          }

          if (this.m_chipLessCheckNode.getComponent(Toggle).isChecked) {
            var _value2 = null;

            if (this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.VALUE)) {
              _value2 = this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.VALUE).getComponent(RichText);
            } else {
              _value2 = this.m_infoValue[AutoplaySettingIndex.LessChip];
            }

            this.m_panelData.LessThan.isCheck = true;

            var _str = _value2.string.replace(/[^0-9|.]/g, "");

            this.m_panelData.LessThan.value = this.m_bottombarView.GetRawValue(parseInt(_str)).toString();
          } else {
            this.m_panelData.LessThan.isCheck = false;
          }

          if (this.m_chipGreatCheckNode.getComponent(Toggle).isChecked) {
            var _value3 = null;

            if (this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.VALUE)) {
              _value3 = this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.VALUE).getComponent(RichText);
            } else {
              _value3 = this.m_infoValue[AutoplaySettingIndex.GreatChip];
            }

            this.m_panelData.GreaterThan.isCheck = true;

            var _str2 = _value3.string.replace(/[^0-9|.]/g, "");

            this.m_panelData.GreaterThan.value = this.m_bottombarView.GetRawValue(parseInt(_str2)).toString();
          } else {
            this.m_panelData.GreaterThan.isCheck = false;
          }

          if (this.m_jpCheckNode.getComponent(Toggle).isChecked) {
            this.m_panelData.WhenJp.isCheck = true;
          } else {
            this.m_panelData.WhenJp.isCheck = false;
          }

          if (this.m_freeCheckNode.getComponent(Toggle).isChecked) {
            this.m_panelData.WhenFreeGame.isCheck = true;
            this.m_panelData.WhenFreeGame.value = this.m_freeType;
          } else {
            this.m_panelData.WhenFreeGame.isCheck = false;
            this.m_panelData.WhenFreeGame.value = 1;
          }

          LocalStorageManager.SetObject(this.m_storageKey, this.m_panelData);
        };

        _proto.LoadPanelData = function LoadPanelData() {
          if (this.m_panelData.TotalRound.isCheck) {
            var _value4 = null;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.VALUE)) {
              _value4 = this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.VALUE).getComponent(RichText);
            } else {
              _value4 = this.m_infoValue[AutoplaySettingIndex.TotalRound];
            } // this.m_totalRoundCheckNode.getComponent( Toggle ).check();


            this.m_totalRoundCheckNode.getComponent(Toggle).isChecked = true;
            _value4.string = this.m_panelData.TotalRound.value;

            if (!isNaN(Number(this.m_panelData.TotalRound.value))) {
              this.m_settingInfoData[AutoplaySettingIndex.TotalRound] = Number(this.m_panelData.TotalRound.value);
            }
          } else if (LocalStorageManager.GetObject(this.m_storageKey)) {
            // this.m_totalRoundCheckNode.getComponent( Toggle ).uncheck();
            this.m_totalRoundCheckNode.getComponent(Toggle).isChecked = false;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.IMG_ON_BG)) {
              this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.IMG_ON_BG).active = false;
            }
          }

          var value = null;

          if (this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.VALUE)) {
            value = this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.VALUE).getComponent(RichText);
          } else {
            value = this.m_infoValue[AutoplaySettingIndex.TotalBet];
          }

          if (this.m_panelData.TotalBet.isCheck) {
            // this.m_totalBetCheckNode.getComponent( Toggle ).check();
            this.m_totalBetCheckNode.getComponent(Toggle).isChecked = true;
            var Num = parseInt(this.m_panelData.TotalBet.value);

            if (!isNaN(Number(Num))) {
              this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = Number(Num);
              this.m_singleWin = this.m_settingInfoData[AutoplaySettingIndex.TotalBet];
            }
          }

          if (this.m_nowBet != -1) {
            if (this.m_singleWin == -1
            /*|| this.m_tempBet != this.m_nowBet*/
            ) {
                // this.m_tempBet = this.m_nowBet;
                // let betBuff: number
                //     = this.m_bottombarView.GetDisplayValue( this.m_bottombarView.GetNowBetValue() * Define.AUTOPLAY_SINGLE_WIN_RATE );
                // value.string = Define.DollarSymbol +
                //     Tools.FormatNumberThousands( betBuff, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) +
                //     Define.DollarSymbolSuffix;
                value.string = "100X";
                value.fontFamily = Define.DollarFontFamily; // this.m_settingInfoData[ AutoplaySettingIndex.TotalBet ] = this.m_bottombarView.GetNowBetValue() * Define.AUTOPLAY_SINGLE_WIN_RATE;

                this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = 100;
                this.m_singleWin = 100;
              } else {
              // let win: number = this.m_bottombarView.GetDisplayValue( this.m_singleWin );
              // value.string = Define.DollarSymbol +
              //     Tools.FormatNumberThousands( win, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) +
              //     Define.DollarSymbolSuffix;
              // value.string = Tools.FormatNumberThousands( win, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) + "X";
              value.string = this.m_singleWin.toString() + "X";
              value.fontFamily = Define.DollarFontFamily;
              this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = this.m_singleWin;
            }
          }

          if (this.m_panelData.LessThan.isCheck) {
            var _value5 = null;

            if (this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.VALUE)) {
              _value5 = this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.VALUE).getComponent(RichText);
            } else {
              _value5 = this.m_infoValue[AutoplaySettingIndex.LessChip];
            } // this.m_chipLessCheckNode.getComponent( Toggle ).check();


            this.m_chipLessCheckNode.getComponent(Toggle).isChecked = true;

            var _Num = parseInt(this.m_panelData.LessThan.value);

            _value5.string = Define.DollarSymbol + Tools.FormatNumberThousands(this.m_bottombarView.GetDisplayValue(_Num), Tools.FORMAT_NUMBER_TYPE.NONE_DOT);
            _value5.fontFamily = Define.DollarFontFamily;

            if (!isNaN(Number(_Num))) {
              this.m_settingInfoData[AutoplaySettingIndex.LessChip] = Number(_Num);
            }
          }

          if (this.m_panelData.GreaterThan.isCheck) {
            var _value6 = null;

            if (this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.VALUE)) {
              _value6 = this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.VALUE).getComponent(RichText);
            } else {
              _value6 = this.m_infoValue[AutoplaySettingIndex.GreatChip];
            } // this.m_chipGreatCheckNode.getComponent( Toggle ).check();


            this.m_chipGreatCheckNode.getComponent(Toggle).isChecked = true;

            var _Num2 = parseInt(this.m_panelData.GreaterThan.value);

            _value6.string = Define.DollarSymbol + Tools.FormatNumberThousands(this.m_bottombarView.GetDisplayValue(_Num2), Tools.FORMAT_NUMBER_TYPE.NONE_DOT);
            _value6.fontFamily = Define.DollarFontFamily;

            if (!isNaN(Number(_Num2))) {
              this.m_settingInfoData[AutoplaySettingIndex.GreatChip] = Number(_Num2);
            }
          }

          if (this.m_panelData.WhenJp && this.m_panelData.WhenJp.isCheck) {
            // this.m_jpCheckNode.getComponent( Toggle ).check();
            this.m_jpCheckNode.getComponent(Toggle).isChecked = true;
          }

          if (this.m_panelData.WhenFreeGame && this.m_panelData.WhenFreeGame.isCheck) {
            var _value7 = this.m_panelData.WhenFreeGame.value;
            this.m_settingInfoData[AutoplaySettingIndex.FreeType] = this.m_panelData.WhenFreeGame.value;
            this.m_freeType = this.m_settingInfoData[AutoplaySettingIndex.FreeType] || 0;

            if (_value7 == null || _value7 == undefined) {
              _value7 = 1;
            }

            for (var i = 1; i <= 2; i++) {
              var _freeCheckNode = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.CHECKBOX + i);

              if (!_freeCheckNode) {
                _freeCheckNode = this.m_freeTypeNodes[i - 1];
              } // freeCheckNode.getComponent( Toggle ).uncheck();


              _freeCheckNode.getComponent(Toggle).isChecked = false;
            }

            var freeCheckNode = this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.CHECKBOX + _value7);

            if (!freeCheckNode) {
              freeCheckNode = this.m_freeTypeNodes[_value7 - 1];
            }

            if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.IMG_MASK)) {
              this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel_MS.UIName.IMG_MASK).active = false;
            } // this.m_freeCheckNode.getComponent( Toggle ).check();
            // freeCheckNode.getComponent( Toggle ).check();


            this.m_freeCheckNode.getComponent(Toggle).isChecked = true;
            freeCheckNode.getComponent(Toggle).isChecked = true;
          }
        };

        _proto.LoadPanelDataFromLocal = function LoadPanelDataFromLocal() {
          var value = LocalStorageManager.GetObject(this.m_storageKey);

          if (value) {
            this.m_panelData = value;
            this.m_panelData.TotalRound.value = '100';
            this.LoadPanelData();
          }
        };

        _proto.SumaryWiseAutoPlay = function SumaryWiseAutoPlay() {
          var sumStr = String(this.m_checkTotalRound) + "," + String(this.m_checkTotalBet) + "," + String(this.m_checkChipLessLimit) + "," + String(this.m_checkChipGreatLimit) + "," + String(this.m_isCheckFree) + "," + String(this.m_isCheckJp);
          return sumStr;
        };

        _proto.CloseJPCheckBox = function CloseJPCheckBox() {
          this.m_isCloseJp = true;
        };

        _createClass(AutoPlaySettingPanel_MS, [{
          key: "IsCheckFree",
          get: function get() {
            return this.m_freeCheckNode.getComponent(Toggle).isChecked;
          }
        }, {
          key: "IsCheckJp",
          get: function get() {
            return this.m_jpCheckNode.getComponent(Toggle).isChecked;
          }
        }, {
          key: "PanelAniS",
          get: function get() {
            this.m_isLandscape = false; // if ( Tools.Line == Define.LineSetting.americas )
            // {
            //     return Auto_Play_Setting_Panel_Ani_S_America;
            // }
            // else if ( this.m_isCloseJp )
            // {
            //     return Auto_Play_Setting_Panel_Ani_NJP_S;
            // }
            // else
            // {

            return Auto_Play_Setting_Panel_Ani_S; // }
          }
        }, {
          key: "PanelAniL",
          get: function get() {
            this.m_isLandscape = true; // if ( Tools.Line == Define.LineSetting.americas )
            // {
            //     return Auto_Play_Setting_Panel_Ani_L_America;
            // }
            // else if ( this.m_isCloseJp )
            // {
            //     return Auto_Play_Setting_Panel_Ani_NJP_L;
            // }
            // else
            // {

            return Auto_Play_Setting_Panel_Ani_L; // }
          }
        }]);

        return AutoPlaySettingPanel_MS;
      }(AutoPlaySetting), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_freeCheckNode", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_freeCheckTxt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_jpCheckNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_jpCheckTxt", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_freeMask", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_freeTypeNodes", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_freeTypeTxt", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AutoPlaySettingPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './SoundManager.ts', './AutoPlaySetting.ts', './Tools.ts', './LocalStorageManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Label, Toggle, RichText, Define, SoundManager, AutoPlaySetting, AutoplaySettingIndex, PanelData, Tools, LocalStorageManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Toggle = module.Toggle;
      RichText = module.RichText;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      AutoPlaySetting = module.default;
      AutoplaySettingIndex = module.AutoplaySettingIndex;
      PanelData = module.PanelData;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      LocalStorageManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "7750dQEOpdIyLzTa9nQpCPu", "AutoPlaySettingPanel", undefined);

      var AutoplayType = exports('AutoplayType', function AutoplayType() {
        this.isCheckFree = false;
        this.isCheckJp = false;
      });
      var Auto_Play_Setting_Panel_Ani_S = "Clip_AutoPlayDFI_Portrait";
      var Auto_Play_Setting_Panel_Ani_L = "Clip_AutoPlayDFI_Landscape";

      var AutoPlayData = /*#__PURE__*/function (_PanelData) {
        _inheritsLoose(AutoPlayData, _PanelData);

        function AutoPlayData() {
          var _this;

          _this = _PanelData.call(this) || this;
          _this.WhenFreeGame = {
            isCheck: false
          };
          return _this;
        }

        return AutoPlayData;
      }(PanelData);

      var DISABLE_FREE_SELECT = [Define.GAME_ID.TWKS, Define.GAME_ID.OLS, Define.GAME_ID.GEM2, Define.GAME_ID.PP, Define.GAME_ID.XYY, Define.GAME_ID.MC, Define.GAME_ID.MP, Define.GAME_ID.IFFF, Define.GAME_ID.SR, Define.GAME_ID.FG, Define.GAME_ID.TW, Define.GAME_ID.USA_FG, Define.GAME_ID.USA_MC, Define.GAME_ID.CAI, Define.GAME_ID.FG2, Define.GAME_ID.MC2, Define.GAME_ID.GJ, Define.GAME_ID.FGP, Define.GAME_ID.MP2, Define.GAME_ID.USA_GJ, Define.GAME_ID.FG3, Define.GAME_ID.JPJ, Define.GAME_ID.PW];
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AutoPlaySettingPanel = exports('default', (_dec = property(Node), _dec2 = property(Label), ccclass(_class = (_class2 = /*#__PURE__*/function (_AutoPlaySetting) {
        _inheritsLoose(AutoPlaySettingPanel, _AutoPlaySetting);

        function AutoPlaySettingPanel() {
          var _this2;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this2 = _AutoPlaySetting.call.apply(_AutoPlaySetting, [this].concat(args)) || this;

          _initializerDefineProperty(_this2, "m_freeCheckNode", _descriptor, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "m_freeCheckTxt", _descriptor2, _assertThisInitialized(_this2));

          _this2.m_freeGameString1 = null;
          _this2.m_isCheckFree = "-";
          _this2.m_panelData = new AutoPlayData();
          return _this2;
        }

        var _proto = AutoPlaySettingPanel.prototype;

        _proto.onLoad = function onLoad() {
          var _this3 = this;

          _AutoPlaySetting.prototype.onLoad.call(this); // let checkNode = this.node.getChildByName( AutoPlaySetting.UIName.CHECKBOX + i );


          this.m_freeCheckNode.on('toggle', function (event) {
            var toggle = event.target.getComponent(Toggle);

            if (event.target.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG)) {
              if (toggle.isChecked) {
                event.target.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG).active = true;
              } else {
                event.target.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG).active = false;
              }
            }
          }, this);
          var button = this.m_freeCheckNode.getChildByName(AutoPlaySetting.UIName.BUTTON);

          if (button) {
            button.on(Node.EventType.TOUCH_START, function (event) {
              // event.stopPropagationImmediate();
              // event.stopPropagation();
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this3.m_currentTouchName == null) {
                _this3.m_currentTouchName = event.target.name;
              } else {
                if (event.target && event.target.active == false) {
                  _this3.m_currentTouchName = event.target.name;
                }
              }
            }, this);
            button.on(Node.EventType.TOUCH_END, function (event) {
              if (_this3.m_currentTouchName != event.target.name) {
                return;
              }

              _this3.m_currentTouchName = null;

              var toggle = _this3.m_freeCheckNode.getComponent(Toggle);

              if (toggle.isChecked) {
                SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_OFF); // toggle.uncheck();

                toggle.isChecked = false;
              } else {
                SoundManager.getInstance().Play(Define.AudioClips.COMMON_CHECKBOX_ON); // toggle.check();

                toggle.isChecked = true;
              }
            }, this);
            button.on(Node.EventType.TOUCH_CANCEL, function (event) {
              if (_this3.m_currentTouchName == event.target.name) {
                _this3.m_currentTouchName = null;
              }

              _this3.m_currentTouchName = null;
            }, this);
          }
        };

        _proto.Init = function Init(aid, apiid, gameid, bottombarView) {
          _AutoPlaySetting.prototype.Init.call(this, aid, apiid, gameid, bottombarView);

          for (var i = 0; i < DISABLE_FREE_SELECT.length; i++) {
            if (this.m_gameid == DISABLE_FREE_SELECT[i]) {
              this.m_freeCheckNode.active = false;

              if (this.m_freeCheckTxt) {
                this.m_freeCheckTxt.node.active = false;
              }

              break;
            }
          }

          this.LoadPanelDataFromLocal();
        } // 非共用選項
        ;

        _proto.OthersInfo = function OthersInfo(isWiseAutoPlay) {
          var data = new AutoplayType();

          if (isWiseAutoPlay) {
            data.isCheckFree = this.m_freeCheckNode.getComponent(Toggle).isChecked;
            this.SavePanelData();

            if (data.isCheckFree) {
              this.SetUseWisePlay(true);
              this.m_isCheckFree = "1"; // ConnectionManager.getInstance().SendBtnClickEvent( Tools.FormBtnClickParams( this.m_aid, this.m_apiid, Number( this.m_gameid ), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.WISEAUTO_FGSTOP, Define.BTN_CLICK_STATUS.CLICK, this.m_isLandscape ) )
            } else {
              this.SetUseWisePlay(false);
              this.m_isCheckFree = "-";
            }
          } else {
            this.SavePanelData();
            this.ClearPanel();
            data.isCheckFree = false;
          }

          return JSON.stringify(data);
        } // 設定FreeGameString
        ;

        _proto.SetFreeGameString = function SetFreeGameString(strKey1, strKey2) {
          if (strKey1 != null) {
            this.m_freeGameString1 = strKey1;

            if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel.UIName.TXT1)) {
              this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel.UIName.TXT1).getComponent(Label).string = this.GetString(strKey1);

              if (!this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel.UIName.TXT1).getComponent(Label).font) {
                this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel.UIName.TXT1).getComponent(Label).font = Define.DefaultFont;
              }
            } else {
              this.m_freeCheckTxt.string = this.GetString(strKey1);
            }
          }
        };

        _proto.IsCheckAnyToggle = function IsCheckAnyToggle() {
          var result = _AutoPlaySetting.prototype.IsCheckAnyToggle.call(this);

          if (this.m_freeCheckNode.getComponent(Toggle).isChecked) {
            return true;
          }

          return result;
        };

        _proto.SetTxt = function SetTxt() {
          _AutoPlaySetting.prototype.SetTxt.call(this);

          if (this.m_freeGameString1 != null) {
            if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel.UIName.TXT1)) {
              this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel.UIName.TXT1).getComponent(Label).string = this.GetString(this.m_freeGameString1);

              if (!this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel.UIName.TXT1).getComponent(Label).font) {
                this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel.UIName.TXT1).getComponent(Label).font = Define.DefaultFont;
              }
            } else {
              this.m_freeCheckTxt.string = this.GetString(this.m_freeGameString1);
              Tools.SetFont(this.m_freeCheckTxt);
            }
          }
        };

        _proto.ClearPanel = function ClearPanel() {
          _AutoPlaySetting.prototype.ClearPanel.call(this); // this.m_freeCheckNode.getComponent( Toggle ).uncheck();


          this.m_freeCheckNode.getComponent(Toggle).isChecked = false;

          if (this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel.UIName.IMG_ON_BG)) {
            this.m_freeCheckNode.getChildByName(AutoPlaySettingPanel.UIName.IMG_ON_BG).active = false;
          }
        };

        _proto.SavePanelData = function SavePanelData() {
          if (this.m_totalRoundCheckNode.getComponent(Toggle).isChecked) {
            var value = null;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel.UIName.VALUE)) {
              value = this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel.UIName.VALUE).getComponent(RichText);
            } else {
              value = this.m_infoValue[AutoplaySettingIndex.TotalRound];
            }

            this.m_panelData.TotalRound.isCheck = true;
            this.m_panelData.TotalRound.value = value.string;
          } else {
            this.m_panelData.TotalRound.isCheck = false;
            this.m_panelData.TotalRound.value = "100";
          }

          if (this.m_totalBetCheckNode.getComponent(Toggle).isChecked) {
            var _value = null;

            if (this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel.UIName.VALUE)) {
              _value = this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel.UIName.VALUE).getComponent(RichText);
            } else {
              _value = this.m_infoValue[AutoplaySettingIndex.TotalBet];
            }

            this.m_panelData.TotalBet.isCheck = true;

            var str = _value.string.replace(/<.*?>|[^0-9|.]/g, ""); // this.m_singleWin = this.m_bottombarView.GetRawValue( parseInt( str ) );


            this.m_singleWin = parseInt(str); // this.m_panelData.TotalBet.value = this.m_bottombarView.GetRawValue( parseInt( str ) ).toString();

            this.m_panelData.TotalBet.value = parseInt(str).toString();
          } else {
            this.m_panelData.TotalBet.isCheck = false;
          }

          if (this.m_chipLessCheckNode.getComponent(Toggle).isChecked) {
            var _value2 = null;

            if (this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel.UIName.VALUE)) {
              _value2 = this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel.UIName.VALUE).getComponent(RichText);
            } else {
              _value2 = this.m_infoValue[AutoplaySettingIndex.LessChip];
            }

            this.m_panelData.LessThan.isCheck = true;

            var _str = _value2.string.replace(/<.*?>|[^0-9|.]/g, "");

            this.m_panelData.LessThan.value = this.m_bottombarView.GetRawValue(parseInt(_str)).toString();
          } else {
            this.m_panelData.LessThan.isCheck = false;
          }

          if (this.m_chipGreatCheckNode.getComponent(Toggle).isChecked) {
            var _value3 = null;

            if (this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel.UIName.VALUE)) {
              _value3 = this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel.UIName.VALUE).getComponent(RichText);
            } else {
              _value3 = this.m_infoValue[AutoplaySettingIndex.GreatChip];
            }

            this.m_panelData.GreaterThan.isCheck = true;

            var _str2 = _value3.string.replace(/<.*?>|[^0-9|.]/g, "");

            this.m_panelData.GreaterThan.value = this.m_bottombarView.GetRawValue(parseInt(_str2)).toString();
          } else {
            this.m_panelData.GreaterThan.isCheck = false;
          }

          if (this.m_freeCheckNode.getComponent(Toggle).isChecked) {
            this.m_panelData.WhenFreeGame.isCheck = true;
          } else {
            this.m_panelData.WhenFreeGame.isCheck = false;
          }

          LocalStorageManager.SetObject(this.m_storageKey, this.m_panelData);
        };

        _proto.LoadPanelData = function LoadPanelData() {
          if (this.m_panelData.TotalRound.isCheck) {
            var _value4 = null;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel.UIName.VALUE)) {
              _value4 = this.m_totalRoundCheckNode.getChildByName(AutoPlaySettingPanel.UIName.VALUE).getComponent(RichText);
            } else {
              _value4 = this.m_infoValue[AutoplaySettingIndex.TotalRound];
            } // this.m_totalRoundCheckNode.getComponent( Toggle ).check();


            this.m_totalRoundCheckNode.getComponent(Toggle).isChecked = true;
            _value4.string = this.m_panelData.TotalRound.value;

            if (!isNaN(Number(this.m_panelData.TotalRound.value))) {
              this.m_settingInfoData[AutoplaySettingIndex.TotalRound] = Number(this.m_panelData.TotalRound.value);
            }
          } else if (LocalStorageManager.GetObject(this.m_storageKey)) {
            // this.m_totalRoundCheckNode.getComponent( Toggle ).uncheck();
            this.m_totalRoundCheckNode.getComponent(Toggle).isChecked = false;

            if (this.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG)) {
              this.m_totalRoundCheckNode.getChildByName(AutoPlaySetting.UIName.IMG_ON_BG).active = false;
            }
          }

          var value = null;

          if (this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel.UIName.VALUE)) {
            value = this.m_totalBetCheckNode.getChildByName(AutoPlaySettingPanel.UIName.VALUE).getComponent(RichText);
          } else {
            value = this.m_infoValue[AutoplaySettingIndex.TotalBet];
          }

          if (this.m_panelData.TotalBet.isCheck) {
            // this.m_totalBetCheckNode.getComponent( Toggle ).check();
            this.m_totalBetCheckNode.getComponent(Toggle).isChecked = true;
            var Num = parseInt(this.m_panelData.TotalBet.value);

            if (!isNaN(Number(Num))) {
              this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = Number(Num);
              this.m_singleWin = this.m_settingInfoData[AutoplaySettingIndex.TotalBet];
            }
          }

          if (this.m_nowBet != -1) {
            if (this.m_singleWin == -1
            /*|| this.m_tempBet != this.m_nowBet*/
            ) {
                // this.m_tempBet = this.m_nowBet;
                // let betBuff: number
                //     = this.m_bottombarView.GetDisplayValue( this.m_bottombarView.GetNowBetValue() * Define.AUTOPLAY_SINGLE_WIN_RATE );
                // value.string = Define.DollarSymbol +
                //     Tools.FormatNumberThousands( betBuff, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) +
                //     Define.DollarSymbolSuffix;
                value.string = "100X";
                value.fontFamily = Define.DollarFontFamily; // this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = this.m_bottombarView.GetNowBetValue() * Define.AUTOPLAY_SINGLE_WIN_RATE;

                this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = 100;
                this.m_singleWin = 100;
              } else {
              // let win: number = this.m_bottombarView.GetDisplayValue( this.m_singleWin );
              // value.string = Define.DollarSymbol +
              //     Tools.FormatNumberThousands( win, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) +
              //     Define.DollarSymbolSuffix;
              // value.string = Tools.FormatNumberThousands( win, Tools.FORMAT_NUMBER_TYPE.NONE_DOT ) + "X";
              value.string = this.m_singleWin.toString() + "X";
              value.fontFamily = Define.DollarFontFamily;
              this.m_settingInfoData[AutoplaySettingIndex.TotalBet] = this.m_singleWin;
            }
          }

          if (this.m_panelData.LessThan.isCheck) {
            var _value5 = null;

            if (this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel.UIName.VALUE)) {
              _value5 = this.m_chipLessCheckNode.getChildByName(AutoPlaySettingPanel.UIName.VALUE).getComponent(RichText);
            } else {
              _value5 = this.m_infoValue[AutoplaySettingIndex.LessChip];
            } // this.m_chipLessCheckNode.getComponent( Toggle ).check();


            this.m_chipLessCheckNode.getComponent(Toggle).isChecked = true;

            var _Num = parseInt(this.m_panelData.LessThan.value);

            _value5.string = Define.DollarSymbol + Tools.FormatNumberThousands(this.m_bottombarView.GetDisplayValue(_Num), Tools.FORMAT_NUMBER_TYPE.NONE_DOT) + Define.DollarSymbolSuffix;
            _value5.fontFamily = Define.DollarFontFamily;

            if (!isNaN(Number(_Num))) {
              this.m_settingInfoData[AutoplaySettingIndex.LessChip] = Number(_Num);
            }
          }

          if (this.m_panelData.GreaterThan.isCheck) {
            var _value6 = null;

            if (this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel.UIName.VALUE)) {
              _value6 = this.m_chipGreatCheckNode.getChildByName(AutoPlaySettingPanel.UIName.VALUE).getComponent(RichText);
            } else {
              _value6 = this.m_infoValue[AutoplaySettingIndex.GreatChip];
            } // this.m_chipGreatCheckNode.getComponent( Toggle ).check();


            this.m_chipGreatCheckNode.getComponent(Toggle).isChecked = true;

            var _Num2 = parseInt(this.m_panelData.GreaterThan.value);

            _value6.string = Define.DollarSymbol + Tools.FormatNumberThousands(this.m_bottombarView.GetDisplayValue(_Num2), Tools.FORMAT_NUMBER_TYPE.NONE_DOT) + Define.DollarSymbolSuffix;
            _value6.fontFamily = Define.DollarFontFamily;

            if (!isNaN(Number(_Num2))) {
              this.m_settingInfoData[AutoplaySettingIndex.GreatChip] = Number(_Num2);
            }
          }

          if (this.m_panelData.WhenFreeGame && this.m_panelData.WhenFreeGame.isCheck) {
            // this.m_freeCheckNode.getComponent( Toggle ).check();
            this.m_freeCheckNode.getComponent(Toggle).isChecked = true;
          }
        };

        _proto.LoadPanelDataFromLocal = function LoadPanelDataFromLocal() {
          var value = LocalStorageManager.GetObject(this.m_storageKey);

          if (value) {
            this.m_panelData = value;
            this.m_panelData.TotalRound.value = '100';
            this.LoadPanelData();
          }
        };

        _proto.SumaryWiseAutoPlay = function SumaryWiseAutoPlay() {
          var sumStr = String(this.m_checkTotalRound) + "," + String(this.m_checkTotalBet) + "," + String(this.m_checkChipLessLimit) + "," + String(this.m_checkChipGreatLimit) + "," + String(this.m_isCheckFree) + ",";
          return sumStr;
        };

        _proto.CloseJPCheckBox = function CloseJPCheckBox() {};

        _createClass(AutoPlaySettingPanel, [{
          key: "IsCheckFree",
          get: function get() {
            return this.m_freeCheckNode.getComponent(Toggle).isChecked;
          }
        }, {
          key: "PanelAniS",
          get: function get() {
            this.m_isLandscape = false;
            return Auto_Play_Setting_Panel_Ani_S;
          }
        }, {
          key: "PanelAniL",
          get: function get() {
            this.m_isLandscape = true;
            return Auto_Play_Setting_Panel_Ani_L;
          }
        }]);

        return AutoPlaySettingPanel;
      }(AutoPlaySetting), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_freeCheckNode", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_freeCheckTxt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AutoShowManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createClass, cclegacy;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "090c0Ac2bVF7J9GZO2B0JHH", "AutoShowManager", undefined);

      function CbSortFunc(a, b) {
        return a.order - b.order;
      }

      var AutoShowManager = exports('default', /*#__PURE__*/function () {
        AutoShowManager.GetInstance = function GetInstance() {
          if (!this._instance) {
            this._instance = new AutoShowManager();
          }

          return AutoShowManager._instance;
        };

        AutoShowManager.OnExit = function OnExit() {
          delete this._instance;
          this._instance = null;
        };

        function AutoShowManager() {
          this.m_autoShowCb = new Array();
          this.m_isIntorViewOpen = true;
          this.m_nowShowIdx = 0;
          this.m_showOver = false;
          this.m_hasGameIntro = false;
          this.m_canShowNext = false;
          this.m_isStart = false;
          this.m_isFeaturesDemoMode = false;
          this.m_isInTrail = false;
        }

        var _proto = AutoShowManager.prototype;

        _proto.CheckIntroViewClose = function CheckIntroViewClose() {
          this.m_isIntorViewOpen = false;
        };

        _proto.GetIntroViewClose = function GetIntroViewClose() {
          return this.m_isIntorViewOpen;
        };

        _proto.SetIsFeaturesDemoMode = function SetIsFeaturesDemoMode(b) {
          this.m_isFeaturesDemoMode = b;
        };

        _proto.SetIsInTrial = function SetIsInTrial(b) {
          this.m_isInTrail = b;
        }
        /**添加自動秀出CB,order使用Define.AutoShowOrder */
        ;

        _proto.AddAutoShowCb = function AddAutoShowCb(cb, order) {
          var temp = {
            order: order,
            cb: cb
          };
          this.m_autoShowCb.push(temp);
          this.m_autoShowCb.sort(CbSortFunc);
        };

        _proto.StartAutoShow = function StartAutoShow() {
          if (!this.m_isStart && !this.m_isIntorViewOpen && !this.m_showOver && !this.m_isInTrail && !this.m_isFeaturesDemoMode && this.m_autoShowCb[this.m_nowShowIdx]) {
            this.m_isStart = true;
            this.m_autoShowCb[this.m_nowShowIdx].cb();
          }
        };

        _proto.AutoShowNext = function AutoShowNext() {
          if (this.m_isStart && !this.m_showOver) {
            this.m_nowShowIdx++;

            if (this.m_nowShowIdx == this.m_autoShowCb.length) {
              // 自動SHOW全部結束
              this.m_showOver = true;
            } else if (this.m_nowShowIdx < this.m_autoShowCb.length) {
              this.m_autoShowCb[this.m_nowShowIdx].cb();
            }
          }
        };

        _proto.CheckShowOver = function CheckShowOver() {
          if (this.m_autoShowCb.length == 0) {
            this.m_showOver = true;
          }

          return this.m_showOver;
        };

        _createClass(AutoShowManager, [{
          key: "IsIntorViewOpen",
          get: function get() {
            return this.m_isIntorViewOpen;
          }
        }]);

        return AutoShowManager;
      }());
      AutoShowManager._instance = new AutoShowManager();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AwardCell.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Label, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "7e3da11kY1JI4gIrIg0HrIT", "AwardCell", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AwardCell = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "獎勵圖"
      }), _dec2 = property({
        type: Label,
        tooltip: "數量"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AwardCell, _Component);

        function AwardCell() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_awardSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_numLabel", _descriptor2, _assertThisInitialized(_this));

          _this.m_baseNum = 0;
          return _this;
        }

        var _proto = AwardCell.prototype;

        _proto.Init = function Init(award, num) {
          this.m_awardSprite.spriteFrame = award;
          this.m_numLabel.string = "X" + num;
          this.m_baseNum = num;
        };

        _proto.UpdateNum = function UpdateNum(num) {
          this.m_numLabel.string = "X" + this.m_baseNum * num;
        };

        return AwardCell;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_awardSprite", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_numLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Backpack.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Protocol.ts', './Define.ts', './SoundManager.ts', './MsgBox.ts', './LocaleStringManager.ts', './Tools.ts', './TimeBool.ts', './ItemList.ts', './ExtraManager.ts', './NotificationManager.ts', './AppManager.ts', './LoadRemotePlist.ts', './GameItems.ts', './OtherGames.ts', './ItemDetail.ts', './ItemSystemMsgs.ts', './ItemUse.ts', './ItemEnd.ts', './SpinEft.ts', './env', './itemproto.mjs_cjs=&original=.js', './BackpackManager.ts', './BottombarManager.ts', './BuffManager.ts', './itemproto.js'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Label, SpriteFrame, Prefab, Sprite, instantiate, sys, UITransform, v3, tween, js, Animation, UIOpacity, error, log, SpriteAtlas, Component, Button, BackpackProtocol, Define, SoundManager, MsgBox, LocaleStringManager, Tools, TimeBool, ItemList, ExtraManager, NotificationManager, AppManager, LoadRemotePlist, GameItems, OtherGames, ItemDetail, ItemSystemMsgs, ItemUse, ItemEnd, SpinEft, PREVIEW, backpackManager, BottombarManager, BuffManager, _cjsExports;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      SpriteFrame = module.SpriteFrame;
      Prefab = module.Prefab;
      Sprite = module.Sprite;
      instantiate = module.instantiate;
      sys = module.sys;
      UITransform = module.UITransform;
      v3 = module.v3;
      tween = module.tween;
      js = module.js;
      Animation = module.Animation;
      UIOpacity = module.UIOpacity;
      error = module.error;
      log = module.log;
      SpriteAtlas = module.SpriteAtlas;
      Component = module.Component;
      Button = module.Button;
    }, function (module) {
      BackpackProtocol = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      TimeBool = module.default;
    }, function (module) {
      ItemList = module.default;
    }, function (module) {
      ExtraManager = module.default;
    }, function (module) {
      NotificationManager = module.default;
    }, function (module) {
      AppManager = module.default;
    }, function (module) {
      LoadRemotePlist = module.default;
    }, function (module) {
      GameItems = module.default;
    }, function (module) {
      OtherGames = module.default;
    }, function (module) {
      ItemDetail = module.default;
    }, function (module) {
      ItemSystemMsgs = module.default;
    }, function (module) {
      ItemUse = module.default;
    }, function (module) {
      ItemEnd = module.default;
    }, function (module) {
      SpinEft = module.default;
    }, function (module) {
      PREVIEW = module.PREVIEW;
    }, null, function (module) {
      backpackManager = module.backpackManager;
    }, function (module) {
      BottombarManager = module.default;
    }, function (module) {
      BuffManager = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23;

      cclegacy._RF.push({}, "db61fQBL6xGa6NM86faOrgn", "Backpack", undefined);

      var ITEM_PATH = "/smallicon/ItemCards/{gameid}_{lang}.plist";
      var REAL_ITEM_PATH = "Astt/%s/backpack/GiftCards/{lang}/GiftCards";
      var Ani3 = {
        Landscape: "Clip_Common_TagFrame_Landscape",
        Portrait: "Clip_Common_TagFrame_Portrait"
      };
      var Tab = {
        Game: 0,
        All: 1,
        Msg: 2
      };
      /**@ch 左側頁籤文字字串(含多語系、亮/暗) */

      var TabName = ["Backpack_ThisGame", "Backpack_OtherGame", "Backpack_Message"];
      var VendorSource = exports('VendorSource', 14);
      var SETTING_MIN = 1;
      var SETTING_MAX = 1;
      var HOLD_SPEED = [1, 3, 5, 10, 50];
      var HOLD_INTERVEL = 0.05;
      var CLICK_INTERVEL = 0.2;
      var PRESS_INTERVEL = 0.05;
      var HOLD_TIME_THRESHOLD = 1;
      var CLICK_BUFFER_TYPE = {
        FEATURES: 0,
        RATIO: 1,
        HISTORY: 2,
        WISEAUTO: 3,
        BACKPACK: 4,
        BACKPACK_GAME: 5,
        BACKPACK_ALL: 6,
        BACKPACK_MSG: 7
      };
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Backpack = exports('default', (_dec = property({
        type: Node,
        tooltip: "道具卡遮罩"
      }), _dec2 = property({
        type: Label,
        tooltip: "道具卡阻擋提示"
      }), _dec3 = property({
        type: SpriteFrame,
        tooltip: "廠商icon"
      }), _dec4 = property({
        type: Node,
        tooltip: "背景遮罩"
      }), _dec5 = property({
        type: Node,
        tooltip: "內容"
      }), _dec6 = property({
        type: Prefab,
        tooltip: "道具卡"
      }), _dec7 = property({
        type: Prefab,
        tooltip: "道具卡資訊"
      }), _dec8 = property({
        type: Prefab,
        tooltip: "全遊戲"
      }), _dec9 = property({
        type: Prefab,
        tooltip: "個人訊息"
      }), _dec10 = property({
        type: Node,
        tooltip: "亮起的頁簽"
      }), _dec11 = property({
        type: Node,
        tooltip: "紅點"
      }), _dec12 = property({
        type: Sprite,
        tooltip: "標題"
      }), _dec13 = property({
        type: Sprite,
        tooltip: "頁簽標題-暗"
      }), _dec14 = property({
        type: Sprite,
        tooltip: "頁簽標題-亮"
      }), _dec15 = property({
        type: Prefab,
        tooltip: "使用道具卡"
      }), _dec16 = property({
        type: Prefab,
        tooltip: "使用道具卡結束"
      }), _dec17 = property({
        type: Prefab,
        tooltip: "押注轉換特效"
      }), _dec18 = property({
        type: Prefab,
        tooltip: "道具卡效果"
      }), _dec19 = property({
        type: Prefab,
        tooltip: "使用道具卡特效"
      }), _dec20 = property({
        type: Prefab,
        tooltip: "SPIN特效"
      }), _dec21 = property({
        type: Node,
        tooltip: "Logo"
      }), _dec22 = property({
        type: Node,
        tooltip: "Other Logo"
      }), _dec23 = property({
        type: Node,
        tooltip: "TaDa Casino"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Backpack, _Component);

        function Backpack() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_blockNodes", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_blockLabels", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_vendorIconSpriteFrame", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_bgMaskNode", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentNode", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_itemPagePrefab", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_detailPagePrefab", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_allPagePrefab", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_msgPagePrefab", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lightPageNodes", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_redPointNodes", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_titleSprite", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_darkTabTitleSprites", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lightTabTitleSprites", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_itemUseAniPrefab", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_itemEndAniPrefab", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betAniPrefab", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_iconFXPrefab", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_usingCardEftPrefab", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_spinBtnEftPrefab", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_logoNode", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_otherLogoNode", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tadaCasinoLogoNode", _descriptor23, _assertThisInitialized(_this));

          _this.m_controller = null;
          _this.m_currentTouchName = null;
          _this.m_curItemCellCountL = 30;
          _this.m_curItemCellCountS = 30;
          _this.m_curMsgCellCountL = 0;
          _this.m_curMsgCellCountS = 0;
          _this.m_curAllCellCountL = 0;
          _this.m_curAllCellCountS = 0;
          _this.m_isLandscape = null;
          _this.m_isSmall = void 0;
          _this.m_isOnLoad = true;
          _this.m_itemList = void 0;
          _this.m_itemPlist = void 0;
          _this.m_realItemPlist = void 0;
          _this.m_itemEft = void 0;
          _this.m_itemsCellL = void 0;
          _this.m_itemsCellS = void 0;
          _this.m_msgCell = void 0;
          _this.m_allCell = void 0;
          _this.m_spinBtnEft = void 0;
          _this.m_usingCardEft = null;
          _this.m_itemsNodeL = [];
          _this.m_itemsNumL = [];
          _this.m_itemsHintL = [];
          _this.m_itemsNodeS = [];
          _this.m_itemsNumS = [];
          _this.m_itemsHintS = [];
          _this.m_msgNodeL = [];
          _this.m_msgNodeS = [];
          _this.m_allNodeL = [];
          _this.m_allNodeS = [];
          _this.m_usingCard = void 0;
          _this.m_usingCardNum = void 0;
          _this.m_usingCardIcon = void 0;
          _this.m_bottomRp = void 0;
          _this.m_hasReqItem = false;
          _this.m_hasReqBuff = false;
          _this.m_hasReqMsg = false;
          _this.m_hasReqUseItem = false;
          _this.m_hasReqUseBuff = false;
          _this.m_hasReqAll = false;
          _this.m_curDescL = null;
          _this.m_curDescS = null;
          _this.m_reqDataFunc = void 0;
          _this.m_reqUseFunc = void 0;
          _this.m_reqMsgFunc = void 0;
          _this.m_reqCleanMsgFunc = void 0;
          _this.m_reqAlltabDataFunc = void 0;
          _this.m_curItemID = null;
          _this.m_curItemIdx = null;
          _this.m_onUseItemID = null;
          _this.m_isPlayingAni = false;
          _this.m_isPlayingShowAni = false;
          _this.m_msgList = void 0;
          _this.m_allList = void 0;
          _this.m_isRead = true;
          _this.m_oldBet = 0;
          _this.m_countTarget = null;
          _this.m_isCountStart = false;
          _this.m_increaseOrDecrease = 1;
          _this.m_holdTime = 0;
          _this.m_timer = HOLD_INTERVEL;
          _this.m_holdIncreaseStep = 0;
          _this.m_totalTime = 0;
          _this.m_loadTimer = void 0;
          _this.m_lastitemLength = 0;
          _this.m_lastimsgLength = 0;
          _this.m_lastiallLength = 0;
          _this.m_curTab = 0;
          _this.m_curStartTime = void 0;
          _this.m_curEndTime = void 0;
          _this.m_isLockNumControl = false;
          _this.m_smallIconCb = {};
          _this.m_fstTouchT = 0;
          _this.m_secTouchT = 0;
          _this.m_fstTouchB = 0;
          _this.m_secTouchB = 0;
          _this.m_isAutoShowEnd = false;
          _this.m_gameItems = null;
          _this.m_itemDetail = null;
          _this.m_otherGames = null;
          _this.m_itemSystemMsgs = null;
          return _this;
        }

        var _proto = Backpack.prototype;

        _proto.onLoad = function onLoad() {
          backpackManager.OnLoad(this);
        };

        _proto.onDestroy = function onDestroy() {
          backpackManager.OnDestroy();
        };

        _proto.start = function start() {}
        /**
        * 初始化背包
        * @param bottombar 地bar
        * @param plistPath 遊戲道具卡的plist
        * @param usingCard 使用中道具卡小圖示
        * @param usingCardNum 使用中道具卡小圖示的道具卡數量
        * @param redPoint 小紅點
        * @param reqDataFunc 取得背包道具卡的req
        * @param reqUseFunc 使用道具卡的req
        */
        ;

        _proto.Init = function Init(bottombar, plistPath, usingCard, redPoint, reqDataFunc, reqUseFunc, reqMsgFunc, reqCleanMsgFunc, reqAlltabDataFunc) {
          var _this2 = this;

          this.m_controller = bottombar;
          this.m_bottomRp = redPoint;
          this.m_usingCard = usingCard;
          this.m_reqDataFunc = reqDataFunc;
          this.m_reqUseFunc = reqUseFunc;
          this.m_reqMsgFunc = reqMsgFunc;
          this.m_reqCleanMsgFunc = reqCleanMsgFunc;
          this.m_reqAlltabDataFunc = reqAlltabDataFunc;
          this.m_loadTimer = new TimeBool();
          this.m_loadTimer.UseDT(true);

          if (this.m_contentNode) {
            //道具卡
            var itemNode = instantiate(this.m_itemPagePrefab);
            this.m_contentNode.addChild(itemNode);
            this.m_gameItems = itemNode.getComponent(GameItems);
            this.m_gameItems.Init(function (idx, bIdx) {
              if (bIdx === void 0) {
                bIdx = -1;
              }

              if (idx == -1 && bIdx != -1) {
                _this2.ShowBuffCard(bIdx);
              } else if (_this2.m_itemList && _this2.m_itemList[idx]) {
                _this2.ShowItemCard(idx);
              }
            }); //卡片資訊

            var detailNode = instantiate(this.m_detailPagePrefab);
            this.node.addChild(detailNode);
            detailNode.active = false;
            this.m_itemDetail = detailNode.getComponent(ItemDetail);
            this.m_itemDetail.Init(this.m_controller, this, function (itemID, itemIdx, num) {
              _this2.ReqUseItemCard(itemID, itemIdx, num);
            }, function (buffID, buffIdx) {
              _this2.ReqUseBuffCard(buffID, buffIdx
              /*, num*/
              );
            }); //其他遊戲

            var gameNode = instantiate(this.m_allPagePrefab);
            this.m_contentNode.addChild(gameNode);
            gameNode.active = false;
            this.m_otherGames = gameNode.getComponent(OtherGames); //個人訊息

            var msgNode = instantiate(this.m_msgPagePrefab);
            this.m_contentNode.addChild(msgNode);
            msgNode.active = false;
            this.m_itemSystemMsgs = msgNode.getComponent(ItemSystemMsgs);
          }

          this.LoadRes();

          if (LocaleStringManager.GetInstance().IsBackpackStringLoaded()) {
            this.SetTxtByLocale();
          } else {
            LocaleStringManager.GetInstance().RegisterOnBackpackStringLoadedCb(function () {
              _this2.SetTxtByLocale();
            });
          } //監聽


          ItemList.GetInstance().AddListener("AutoShow", function () {
            if (!_this2.m_isAutoShowEnd) {
              _this2.AutoShow();
            }
          });
          this.SetLogoIcon();
        }
        /**@ch 設定道具卡頁面左上LOGO */
        ;

        _proto.SetLogoIcon = function SetLogoIcon() {
          Tools.LoadIcon(LocaleStringManager.CurrLang, Number(Define.NOW_GAME_ID), null);

          if (!this.m_logoNode) {
            return;
          }

          if (Tools.Line != Define.LineSetting.americas && Tools.Line != Define.LineSetting.americas_str) {
            var spriteFrame = Tools.UsingLogoSpriteFrame();

            if (spriteFrame) {
              if (Tools.OtherLogo && this.m_otherLogoNode) {
                this.m_otherLogoNode.active = true;
                this.m_logoNode.active = false;
                this.m_otherLogoNode.getComponent(Sprite).spriteFrame = spriteFrame;
              } else {
                this.m_logoNode.active = true; // this.m_logoNode.getComponent( cc.Sprite ).spriteFrame = spriteFrame;
              }
            } else {
              this.m_logoNode.active = false;
            }
          } else {
            //TaDa
            if (Tools.IsTadaCasino && this.m_tadaCasinoLogoNode) {
              this.m_logoNode.active = false;
              this.m_tadaCasinoLogoNode.active = true;
            }
          }
        }
        /**@ch 選擇左側頁籤*/
        ;

        _proto.OnSelectTab = function OnSelectTab(event, eventData) {
          var idx = Number(eventData);

          if (isNaN(idx)) {
            return;
          }

          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN); // 調整發光頁籤

          for (var i = 0; i < this.m_lightPageNodes.length; i++) {
            this.m_lightPageNodes[i].active = idx == i;
          }

          this.m_redPointNodes[idx].active = false; // 開啟、關閉對應頁籤

          this.m_gameItems.node.active = idx == Tab.Game;
          this.m_otherGames.node.active = idx == Tab.All;
          this.m_itemSystemMsgs.node.active = idx == Tab.Msg;

          switch (idx) {
            case Tab.Game:
              this.m_gameItems.ScrollToTop();
              this.ShowGameRedpoint(false);
              break;

            case Tab.All:
              this.m_otherGames.ScrollToTop();
              this.ShowAllRedpoint(false);
              break;

            case Tab.Msg:
              this.m_itemSystemMsgs.ScrollToTop();
              this.ShowMsgRedpoint(false);
              this.ReqMsgCleanData();
              break;
          }

          this.ShowRedpoint(false);
          this.OnRotation(this.m_isLandscape);
        } //關閉按鈕呼叫
        ;

        _proto.OnClose = function OnClose() {
          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
          this.Hide();
        };

        _proto.AutoShow = function AutoShow() {
          if (!this.m_itemPlist || this.m_isLandscape === null || !LocaleStringManager.GetInstance().IsBackpackStringLoaded() || !ItemList.GetInstance().GetGameSpriteAtlas() || !this.m_itemList || !this.CheckRes()) {
            return;
          }

          this.m_isAutoShowEnd = true;
          var itemIdx = window.location.search.split("itemIdx=")[1];

          if (sys.isNative || AppManager.LobbyData) {
            var info = AppManager.BackPackInfo;

            if (info && this.m_itemList) {
              var _itemIdx = info.itemindex;

              for (var i = 0; i < this.m_itemList.length; i++) {
                if (_itemIdx == this.m_itemList[i].itemindex) {
                  this.Show(this.m_isLandscape);
                  this.ShowItemCard(i);
                }
              }
            }
          } else if (itemIdx && this.m_itemList) {
            var index = parseInt(itemIdx, 10);

            for (var _i = 0; _i < this.m_itemList.length; _i++) {
              if (index == this.m_itemList[_i].itemindex) {
                this.Show(this.m_isLandscape);
                this.ShowItemCard(_i);
              }
            }
          }
        }
        /**@ch 按下背包要做的事(出現背包表演) */
        ;

        _proto.Show = function Show(isLandscape) {
          var _this3 = this;

          if (!LocaleStringManager.GetInstance().IsBackpackStringLoaded()) {
            MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_ONLOADING);
            return;
          }

          if (this.m_isPlayingShowAni) {
            return;
          }

          this.m_isPlayingShowAni = true;
          this.node.active = true;
          this.ResetUI();
          this.OnRotation(isLandscape, this.m_isSmall);
          var mdd = Tools.DiffPos(this.m_controller.node.getComponent(UITransform).anchorPoint, this.m_isLandscape);

          if (this.m_isLandscape) {
            mdd = v3(0, 320);
          } else {
            mdd = v3(0, 568);
          }

          var node_backpack = this.m_controller.BackPackBtnNode.getChildByName(ExtraManager.UIName.IMG_BACKPACKNODE);

          if (!node_backpack) {
            node_backpack = this.m_controller.BackPackBtnNode;
          }

          var pos = node_backpack.parent.getComponent(UITransform).convertToWorldSpaceAR(node_backpack.getPosition());
          var backpackPos = this.m_controller.node.getComponent(UITransform).convertToNodeSpaceAR(pos);
          this.node.position = v3(backpackPos.x, backpackPos.y);
          this.node.setScale(v3(0.1, 0.1, 1));
          this.m_bgMaskNode.active = false;
          tween(this.node).to(0.2, {
            position: v3(mdd.x, mdd.y),
            scale: v3(1, 1, 1)
          }).call(function () {
            _this3.ResetUI();

            _this3.m_loadTimer.Start(10000);

            _this3.ReqItemData();

            _this3.ReqBuffData();

            if (!_this3.m_onUseItemID) {
              _this3.ReqMsgData();
            }

            _this3.ReqAlltabData();

            _this3.ShowGameRedpoint(false);

            _this3.ShowRedpoint(false);

            _this3.m_bgMaskNode.active = true;
          }).delay(0.1).call(function () {
            _this3.m_isPlayingShowAni = false;
          }).start();
        }
        /**@ch 關閉背包 */
        ;

        _proto.Hide = function Hide() {
          var _this4 = this;

          if (this.m_isPlayingShowAni) {
            return;
          }

          this.m_isPlayingShowAni = true;
          this.m_bgMaskNode.active = false;
          var node_backpack = this.m_controller.BackPackBtnNode.getChildByName(ExtraManager.UIName.IMG_BACKPACKNODE);

          if (!node_backpack) {
            node_backpack = this.m_controller.BackPackBtnNode;
          }

          var pos = node_backpack.parent.getComponent(UITransform).convertToWorldSpaceAR(node_backpack.getPosition());
          var mdd = this.m_controller.node.getComponent(UITransform).convertToNodeSpaceAR(pos);
          tween(this.node).to(0.3, {
            position: v3(mdd.x, mdd.y),
            scale: v3(0.1, 0.1, 1)
          }).call(function () {
            _this4.m_bgMaskNode.active = true;

            _this4.m_controller.SetBackpackBtnAniTimer(_this4.CheckCanUseItem());

            _this4.m_isPlayingShowAni = false;
            _this4.node.active = false;
          }).start();
          this.CloseInfo();

          if (this.m_itemDetail) {
            this.m_itemDetail.OnClose();
          }
        }
        /**@ch 顯示背包中的道具卡資訊(按下某張道具卡) */
        ;

        _proto.ShowItemCard = function ShowItemCard(num) {
          if (this.m_itemList[num].gameid === Define.GAME_ID.ENTITY) {
            // 實體道具卡說明固定為 ITEM_DESC_308
            var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.ITEM_DESC + "308");
            str = str.replace("{PH}", LocaleStringManager.GetInstance().GetString(Define.StringKey.PH_IPHONE));
            var title = LocaleStringManager.GetInstance().GetString(Define.StringKey.GF_GIFTCARD);
            var itemTitle = LocaleStringManager.GetInstance().GetString(Define.StringKey.PH_IPHONE);
            var bottomBar = this.m_controller.getComponent(BottombarManager);
            var spriteFrame = this.m_realItemPlist.getSpriteFrame(this.m_itemList[num].itemid.toString());
            bottomBar.OpenCommonText(title, LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_TXT_INFO) + "\n" + str, itemTitle, spriteFrame, this.m_itemList[num].amount);
          } else {
            this.m_itemDetail.ShowItemDetail(this.m_itemList[num], this.m_itemPlist, this.m_itemEft, this.m_vendorIconSpriteFrame, this.m_realItemPlist);
          }

          this.OnRotation(this.m_isLandscape);
        }
        /**@ch 顯示背包中的BUFF卡資訊(按下某張BUFF卡) */
        ;

        _proto.ShowBuffCard = function ShowBuffCard(num) {
          if (BuffManager.GetInstance().BuffCardDatas.length > 0) {
            var info = BuffManager.GetInstance().BuffCardDatas[num];
            this.m_itemDetail.ShowBuffDetail(info);
            this.OnRotation(this.m_isLandscape);
          }
        }
        /**
         * 
         * @param timestamp server給的數值
         */
        ;

        _proto.GetTimeString = function GetTimeString(timestamp) {
          timestamp = timestamp * 1000;
          var nowDate = new Date(timestamp);
          var year = nowDate.getFullYear();
          var month = nowDate.getMonth() + 1;
          var date = nowDate.getDate();
          var hour = nowDate.getHours();
          var min = nowDate.getMinutes();
          var str = "%s/%s/%s %s:%s";
          str = js.formatStr(str, year, month < 10 ? "0" + month : month, date < 10 ? "0" + date : date, hour < 10 ? "0" + hour : hour, min < 10 ? "0" + min : min);
          return str;
        };

        _proto.SetLockNumControl = function SetLockNumControl(isLock) {
          this.m_isLockNumControl = isLock;
        };

        _proto.CloseInfo = function CloseInfo() {
          this.m_curDescL = null;
          this.m_curDescS = null;
          this.m_curItemID = null;
          this.m_curItemIdx = null; //:

          this.ShowNumControl(false);
        };

        _proto.ReloadItemData = function ReloadItemData() {
          this.m_gameItems.SetItemInfo(this.m_itemList, this.m_itemPlist, this.m_itemEft, this.m_realItemPlist);
        };

        _proto.ReloadMsgData = function ReloadMsgData() {
          this.m_itemSystemMsgs.SetMsgs(this.m_msgList);
        };

        _proto.ReloadAllTabData = function ReloadAllTabData() {
          this.m_otherGames.SetInfo(this.m_allList);
        }
        /**
        * 取得道具卡資訊(如玩家沒有該卡會回傳null)
        * @param itemID 道具卡ID
        */
        ;

        _proto.GetItemInfo = function GetItemInfo(itemID) {
          for (var i = 0; i < this.m_itemList.length; i++) {
            if (this.m_itemList[i].itemid == itemID) {
              return this.m_itemList[i];
            }
          }

          return null;
        };

        _proto.CheckAmount = function CheckAmount(itemID) {
          var amount = 0;
          this.m_itemList.forEach(function (item) {
            if (item.itemid == itemID) {
              amount += item.amount;
            }
          });
          return amount;
        }
        /**@ch 確認是否有道具卡可使用 */
        ;

        _proto.CheckCanUseItem = function CheckCanUseItem() {
          if (this.m_itemList) {
            for (var i = 0; i < this.m_itemList.length; i++) {
              if (this.m_itemList[i] && this.m_itemList[i].banreason == 0) {
                return true;
              }
            }
          }

          return false;
        }
        /**
        * 是否顯示複數使用按鈕
        */
        ;

        _proto.ShowNumControl = function ShowNumControl(isShow) {//:
        }
        /**
        * 道具卡使用結束動畫
        * @param award 贏分(累計)
        */
        ;

        _proto.ShowAward = function ShowAward(award, cb, isAutoLock, isRevertBet) {
          var _this5 = this;

          if (isAutoLock === void 0) {
            isAutoLock = false;
          }

          if (isRevertBet === void 0) {
            isRevertBet = true;
          }

          var endNode = instantiate(this.m_itemEndAniPrefab);
          var betEft = instantiate(this.m_betAniPrefab);
          var label = endNode.getComponent(ItemEnd).Label;
          var str = Tools.StringFormat(this.GetString(Define.StringKey.BACKPACK_AWARD), Tools.FormatNumberThousands(this.m_controller.GetDisplayValue(Tools.strip(award)), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT));
          str = Tools.CustomStringFormat(str, {
            symbol: "<p>" + Define.DollarSymbol + " </p>"
          });
          label.string = str;
          label.fontFamily = Define.DollarFontFamily;
          Tools.SetFont(label);
          endNode.setPosition(v3(-30, endNode.position.y));
          var betButton = this.m_controller.BetBtn.node;
          var pos2 = betButton.position;
          betEft.position = pos2;
          betEft.active = false;
          this.m_onUseItemID = null;
          this.m_usingCard.addChild(endNode);
          this.m_controller.node.addChild(betEft);
          Tools.SetZIndex(betEft, Define.ZOrder.BACKPACK + 1);
          this.m_isPlayingAni = true;
          endNode.getComponent(Animation).play("Clip_Backpack_ItemCard_End");
          endNode.getComponent(Animation).once(Animation.EventType.FINISHED, function () {
            tween(_this5.m_usingCard).to(0.2, {
              scale: v3(0, 0, 1)
            }).call(function () {
              betEft.active = true;
              betEft.getComponent(Animation).play("Clip_Backpack_ItemCard_Bet");
            }).delay(0.5).call(function () {
              if (isRevertBet) {
                if (_this5.m_oldBet != 0) {
                  _this5.m_controller.SetNowBet(_this5.m_oldBet);

                  _this5.m_oldBet = 0;
                }
              }

              _this5.m_controller.SetItemBetSprite(Define.BetMode.Normal);

              if (cb) {
                cb();
              }

              _this5.m_spinBtnEft.removeFromParent();

              _this5.m_spinBtnEft.destroy();

              _this5.m_spinBtnEft = null;

              _this5.m_usingCardEft.getComponent(Animation).stop();

              _this5.m_isPlayingAni = false;

              _this5.SetUsingCard(false);

              endNode.removeFromParent();
              endNode.destroy();
              betEft.removeFromParent();
              betEft.destroy();

              _this5.m_controller.SetLeaveFree(isAutoLock);
            }).start();

            if (_this5.m_spinBtnEft) {
              tween(_this5.m_spinBtnEft.getComponent(UIOpacity)).to(0.2, {
                opacity: 0
              }).delay(0.5).call(function () {
                if (_this5.m_spinBtnEft) {
                  _this5.m_spinBtnEft.removeFromParent();

                  _this5.m_spinBtnEft.destroy();

                  _this5.m_spinBtnEft = null;
                }
              }).start();
            }

            _this5.ShowMsgRedpoint(true);

            _this5.ShowRedpoint(true);
          });
          /*if ( isRevertBet )
          {
              if ( this.m_oldBet != 0 )
              {
                  this.m_controller.SetNowBet( this.m_oldBet );
                  this.m_oldBet = 0;
              }
          }*/

          this.ReqItemData();
        }
        /* -------------------- Req -------------------- */

        /**
        * 要求使用道具卡
        */
        ;

        _proto.ReqUseItemCard = function ReqUseItemCard(itemID, itemIdx, num) {
          if (!this.m_hasReqUseItem) {
            this.m_hasReqUseItem = true;
            this.m_reqUseFunc(itemID, itemIdx, num);
          }
        }
        /**
        * 要求使用道具卡
        */
        ;

        _proto.ReqUseBuffCard = function ReqUseBuffCard(buffID, buffIdx) {
          if (!this.m_hasReqUseBuff) {
            this.m_hasReqUseBuff = true;
            AppManager.UseBuff(buffID, buffIdx);
            this.Hide();
          }
        }
        /**
        * 要求背包資料
        */
        ;

        _proto.ReqItemData = function ReqItemData() {
          error("ReqItemData", this.m_hasReqItem);

          if (this.m_hasReqItem) {
            return;
          }

          this.m_hasReqItem = true;
          this.m_reqDataFunc();
          {
            NotificationManager.GetInstance().CleanBackpackNotify();
          }
        }
        /**
        * 要求BUFF資料
        */
        ;

        _proto.ReqBuffData = function ReqBuffData() {
          // if ( !this.m_hasReqBuff )
          // {
          this.m_hasReqBuff = true;

          var SetBuffCardDatasCb = function SetBuffCardDatasCb(cardDatas) {
            BuffManager.GetInstance().BuffCardDatas = cardDatas;
          };

          AppManager.GetBuffCardData(SetBuffCardDatasCb); // console.error( '●●●●●Backpack GetBuffBack', JSON.stringify( BuffManager.GetInstance().BuffCardDatas ) )
          // }
        }
        /**
        * 要求個人訊息
        */
        ;

        _proto.ReqMsgData = function ReqMsgData() {
          if (!this.m_hasReqMsg) {
            this.m_hasReqMsg = true;
            this.m_reqMsgFunc();
          }
        }
        /**
        * 要求已讀個人訊息
        */
        ;

        _proto.ReqMsgCleanData = function ReqMsgCleanData() {
          if (!this.m_isRead) {
            this.m_reqCleanMsgFunc();
          }
        }
        /**
        * 要求所有分頁資訊
        */
        ;

        _proto.ReqAlltabData = function ReqAlltabData() {
          if (!this.m_hasReqAll) {
            this.m_hasReqAll = true;
            this.m_reqAlltabDataFunc();
          }
        }
        /* -------------------- Recv -------------------- */

        /**
        *所有分頁訊息資料的cb
        * @param ack game server轉傳item server的ack
        */
        ;

        _proto.OnRevAllTabDataAck = function OnRevAllTabDataAck(ack) {
          log(ack);
          var info = null;
          var ret = null;
          var result = null;

          if (ack instanceof _cjsExports.itemprotocol.ListAllGameInfo) {
            info = {
              result: ack.result,
              canuseitem: ack.canuseitem
            };
            ret = BackpackProtocol.Ret.SERVER_SUCCESS;
            result = info.result;
          } else {
            info = ack.info;
            ret = ack.ret;
            result = info.result;
          }

          this.m_hasReqAll = false;

          if (ret == BackpackProtocol.Ret.SERVER_SUCCESS) {
            if (result == BackpackProtocol.ItemAck.ITEM_USESUCCESS) {
              this.m_allList = info.canuseitem ? info.canuseitem : [];
              this.PreloadSmallIcon();
              this.ReloadAllTabData();
            }
          }
        }
        /**
        * 已讀個人訊息資料的cb，不用處理回應
        * @param ack game server轉傳item server的ack MARK 沒在使用?
        */
        ;

        _proto.OnRevMsgCleanDataAck = function OnRevMsgCleanDataAck(ack) {
          log(ack); // const info = ack.info;
          // const ret = ack.ret;
          // const result = info.result;
          // if ( ret == BackpackProtocol.Ret.SERVER_SUCCESS )
          // {
          //     if ( result == BackpackProtocol.ItemAck.ITEM_USESUCCESS )
          //     {
          //         cc.log( "已讀成功" );
          //     }
          // }
          // else
          // {
          //     // MsgBox.getInstance().ShowMessageBox( Define.StringKey.MSGBOX_RESYNC, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, this.Hide );
          // }
        }
        /**
        * 個人訊息資料的cb
        * @param ack game server轉傳item server的ack
        */
        ;

        _proto.OnRevMsgDataAck = function OnRevMsgDataAck(ack) {
          log(ack);
          var info = null;
          var ret = null;
          var result = null;

          if (ack instanceof _cjsExports.itemprotocol.GetMailAck) {
            info = {
              result: ack.result,
              isread: ack.isread,
              usermailackdata: ack.usermailackdata
            };
            ret = BackpackProtocol.Ret.SERVER_SUCCESS;
            result = info.result;
          } else {
            info = ack.info;
            ret = ack.ret;
            result = info.result;
          }

          this.m_hasReqMsg = false;

          if (ret == BackpackProtocol.Ret.SERVER_SUCCESS) {
            if (result == BackpackProtocol.ItemAck.ITEM_USESUCCESS) {
              this.m_msgList = info.usermailackdata ? info.usermailackdata : [];
              this.ReloadMsgData(); // if ( info.isread == 0 )
              // {
              //     this.m_isRead = false;
              //     this.ShowMsgRedpoint( true );
              //     this.ShowRedpoint( true );
              // }
            } else if (this.m_msgList) {
              this.ReloadMsgData();
            }
          }
        }
        /**
        * 背包資料的cb
        * @param ack game server轉傳item server的ack
        */
        ;

        _proto.OnRevItemDataAck = function OnRevItemDataAck(ack) {
          var _this6 = this;

          var info = null;
          var ret = null;
          var result = null;

          if (ack instanceof _cjsExports.itemprotocol.ListInfo) {
            info = {
              result: ack.result,
              playeritemdata: ack.playeritemdata
            };
            ret = BackpackProtocol.Ret.SERVER_SUCCESS;
            result = ack.result;
          } else {
            info = ack.info;
            ret = ack.ret;
            result = info.result;
          }

          this.m_hasReqItem = false;
          this.m_hasReqUseItem = false;
          this.m_hasReqUseBuff = false;
          this.m_loadTimer.Clear();

          if (ret == BackpackProtocol.Ret.SERVER_SUCCESS) {
            if (result == BackpackProtocol.ItemAck.ITEM_USESUCCESS) {
              for (var i = 0; i < this.m_blockNodes.length; i++) {
                this.m_blockNodes[i].active = false;
              }

              this.m_itemList = info.playeritemdata ? info.playeritemdata : [];

              if (this.node.active != true && !PREVIEW) {
                NotificationManager.GetInstance().UpdateBackpackNotify(this.m_itemList);
              }

              this.CheckItemData(this.m_itemList.length);
              this.ReloadItemData();
              this.m_controller.SetBackpackBtnAniTimer(this.CheckCanUseItem());

              if (!this.m_isAutoShowEnd) {
                this.AutoShow();
              }
            } else if (result == BackpackProtocol.ItemAck.ITEM_RTPFAIL) {
              for (var _i2 = 0; _i2 < this.m_blockNodes.length; _i2++) {
                this.m_blockNodes[_i2].active = true;
              }
            }

            if (!this.m_isAutoShowEnd) {
              this.AutoShow();
            }
          } else {
            MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_RESYNC, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, function () {
              _this6.Hide();
            });
          }
        }
        /**
        * 使用道具卡的cb
        * @param isSuccess 是否使用成功
        * @param itemID 道具卡ID
        * @param itemNum 道具卡使用數量
        * @param bet 押注額
        * @param icon 道具卡圖編號
        * @param isAutoLock 是否有自動玩鎖
        * @param cb cb會在特效後call
        */
        ;

        _proto.OnRevUseItemCardAck = function OnRevUseItemCardAck(isSuccess, itemID, bet, icon, itemNum, isAutoLock, cb) {
          var _this7 = this;

          if (isAutoLock === void 0) {
            isAutoLock = false;
          }

          if (isSuccess) {
            console.error("Why");
            this.m_onUseItemID = itemID;
            var betButton = this.m_controller.BetBtn.node;
            var ani = instantiate(this.m_itemUseAniPrefab);
            var ani2 = instantiate(this.m_betAniPrefab);
            var ani3 = instantiate(this.m_iconFXPrefab);
            var node = this.m_itemDetail.IconSprite.node;
            var pos = this.m_controller.node.getComponent(UITransform).convertToNodeSpaceAR(node.parent.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0)));
            var pos2 = betButton.position;
            var pos3 = this.m_controller.node.getComponent(UITransform).convertToNodeSpaceAR(this.m_usingCard.parent.getComponent(UITransform).convertToWorldSpaceAR(this.m_usingCard.position));
            ani.position = pos;
            ani2.position = pos2;
            ani3.position = pos3;
            var move = ani.getComponent(ItemUse).MoveNode;
            var iconSprite = ani.getComponent(ItemUse).IconNode;
            var amount = ani.getComponent(ItemUse).NumNode;
            var mdd = this.m_controller.node.getComponent(UITransform).convertToNodeSpaceAR(this.m_usingCard.parent.getComponent(UITransform).convertToWorldSpaceAR(this.m_usingCard.position));
            mdd = ani.getComponent(UITransform).convertToNodeSpaceAR(mdd);
            var betPos = betButton.position;
            betPos = ani.getComponent(UITransform).convertToNodeSpaceAR(betPos); // byVent

            iconSprite.getComponent(Sprite).spriteFrame = this.m_itemPlist ? ItemList.GetInstance().GetItemIcon(icon) : this.m_itemEft.getSpriteFrame("common_card");
            amount.getComponent(Label).string = itemNum.toString();
            this.m_controller.node.addChild(ani);
            Tools.SetZIndex(ani, Define.ZOrder.BACKPACK + 1);
            this.m_controller.node.addChild(ani2);
            Tools.SetZIndex(ani2, Define.ZOrder.BACKPACK + 1);
            this.m_controller.node.addChild(ani3);
            Tools.SetZIndex(ani3, Define.ZOrder.BACKPACK + 1);
            ani2.active = false;
            this.m_oldBet = this.m_controller.GetNowBetValue(); //this.m_controller.SetNowBet( Tools.strip( bet ), true );

            if (!this.m_usingCardEft) {
              this.m_usingCardEft = instantiate(this.m_usingCardEftPrefab);
              this.m_usingCard.addChild(this.m_usingCardEft);
              var _icon = this.m_usingCardEft.getComponent(ItemUse).IconNode;
              var num = this.m_usingCardEft.getComponent(ItemUse).NumNode;
              this.m_usingCardIcon = _icon.getComponent(Sprite);
              this.m_usingCardNum = num.getComponent(Label);
            }

            this.m_controller.SetEnterFree(isAutoLock);
            this.Hide();
            var bottomBar = this.m_controller.getComponent(BottombarManager);
            bottomBar.SetGiftCodeBtnState();
            SoundManager.getInstance().Play(Define.AudioClips.ITEM_CARD_USE);
            ani.getComponent(Animation).play("Clip_Backpack_ItemCard_Use");
            ani.getComponent(Animation).once(Animation.EventType.FINISHED, function () {
              tween(move).to(0.25, {
                position: v3(betPos.x, betPos.y),
                scale: v3(0.4, 0.4, 1)
              }).call(function () {
                ani2.active = true;
                ani2.getComponent(Animation).play("Clip_Backpack_ItemCard_Bet");
                move.getComponent(UIOpacity).opacity = 0;

                _this7.m_controller.SetNowBet(Tools.strip(bet), true);

                _this7.m_controller.SetItemBetSprite(Define.BetMode.Item);
              }).delay(0.1).call(function () {
                ani3.getComponent(Animation).play("Clip_Backpack_ItemCard_IconFX");
                ani3.getComponent(Animation).once(Animation.EventType.FINISHED, function () {
                  move.getComponent(UIOpacity).opacity = 255;
                  move.setPosition(mdd.x, mdd.y);
                });
              }).delay(0.5).call(function () {
                _this7.SetUsingCard(true, itemID, icon, itemNum);

                _this7.m_isPlayingAni = false;
                ani.removeFromParent();
                ani.destroy();
                ani2.removeFromParent();
                ani2.destroy();
                ani3.removeFromParent();
                ani3.destroy();

                if (cb) {
                  cb();
                }
              }).start();
            });
            this.m_isPlayingAni = true;
            this.m_spinBtnEft = instantiate(this.m_spinBtnEftPrefab);
            var spinEft = this.m_spinBtnEft.getComponent(SpinEft);

            if (spinEft) {
              spinEft.SetState();
            }

            var spin = Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str ? this.m_controller.SpinBtn.node : this.m_controller.SpinBtn.node.parent;
            spin.addChild(this.m_spinBtnEft);
          } else {
            MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_RESYNC);
          }

          this.m_hasReqUseItem = false;
        }
        /* -------------------- set -------------------- */

        /**
        * 最外層背包紅點
        */
        ;

        _proto.ShowRedpoint = function ShowRedpoint(isShow) {
          if (!isShow) {
            var canHide = true;

            for (var i = 0; i < this.m_redPointNodes.length; i++) {
              if (this.m_redPointNodes[i].active) {
                canHide = false;
                break;
              }
            }

            if (canHide) {
              this.m_bottomRp.active = false;
              this.m_controller.SetBackpackBtnAniTimer(false);
            }
          } else {
            this.m_bottomRp.active = true;
            this.m_controller.SetBackpackBtnAniTimer(true);
          }
        }
        /**
        * 道具卡分頁紅點
        */
        ;

        _proto.ShowGameRedpoint = function ShowGameRedpoint(isShow) {
          this.m_redPointNodes[Tab.Game].active = isShow;
        }
        /**
        * 所有分頁紅點
        */
        ;

        _proto.ShowAllRedpoint = function ShowAllRedpoint(isShow) {
          this.m_redPointNodes[Tab.All].active = isShow;
        }
        /**
        * 個人訊息分頁紅點
        */
        ;

        _proto.ShowMsgRedpoint = function ShowMsgRedpoint(isShow) {
          this.m_redPointNodes[Tab.Msg].active = isShow;
        }
        /**
        * 開關使用中道具卡小圖示
        * @param isShow 是否打開
        * @param itemID 道具卡ID
        * @param icon 道具卡圖編號
        * @param itemNum 使用的道具卡數量
        */
        ;

        _proto.SetUsingCard = function SetUsingCard(isShow, itemID, icon, itemNum) {
          if (isShow && itemID && icon && itemNum) {
            this.m_usingCardIcon.spriteFrame = this.m_itemPlist ? ItemList.GetInstance().GetItemIcon(icon) : this.m_itemEft.getSpriteFrame("common_card");
            this.m_usingCardNum.string = itemNum.toString();
            tween(this.m_usingCard).to(0.016, {
              scale: v3(1, 1, 1)
            }).start(); // this.m_usingCard.setScale( v3( 1, 1, 1 ) );
            // this.m_usingCard.active = true;

            if (this.m_usingCardEft) {
              this.m_usingCardEft.active = true;
            }
          } else {
            // this.m_usingCard.active = false;
            if (this.m_usingCardEft) {
              this.m_usingCardEft.active = false;
            }

            this.m_usingCardIcon.getComponent(Sprite).spriteFrame = null;
          }
        }
        /**
        * 設定道具卡小圖示的道具卡數量
        * @param itemNum 剩餘道具卡數量
        * @param isEft spin特效，spin set值的時候須帶true
        */
        ;

        _proto.SetUsingCardNum = function SetUsingCardNum(itemNum, isEft) {
          this.m_usingCardNum.string = itemNum.toString();

          if (isEft) {
            this.m_usingCardEft.getComponent(Animation).play(); // let eft = this.m_usingCard.node.getChildByName( "Item_card_using" );
            // eft.getComponent( Animation ).play();
          }
        }
        /* -------------------- other -------------------- */
        //MARK 沒在使用?
        ;

        _proto.RestUsingState = function RestUsingState() {
          this.m_usingCardEft.getComponent(Animation).stop();
          this.m_isPlayingAni = false;
          this.SetUsingCard(false);
          this.m_onUseItemID = null;
          this.m_controller.SetLeaveFree(true);
          this.m_controller.SetItemBetSprite(Define.BetMode.Normal);
        }
        /**@ch 開啟背包時預設顯示最上層 */
        ;

        _proto.ResetUI = function ResetUI() {
          this.m_curTab = Tab.Game;
          this.OnSelectTab(null, Tab.Game.toString());
          this.m_gameItems.ScrollToTop();
        }
        /**@ch 背包的多語系 */
        ;

        _proto.SetTxtByLocale = function SetTxtByLocale() {
          var plist = LocaleStringManager.GetInstance().GetCommonAtlas();
          var lang = LocaleStringManager.CurrLang;
          var font = lang === Define.Lang.MM ? Define.DefaultFont : null; // if ( lang === Define.Lang.MM )
          // {
          //     font = Define.DefaultFont;
          // }

          if (LocaleStringManager.CurrLang !== Define.Lang.EN) {
            var atlas = LocaleStringManager.GetInstance().GetCommonAtlas();
            this.m_titleSprite.spriteFrame = atlas.getSpriteFrame("Backpack_Title");

            for (var i = 0; i < this.m_darkTabTitleSprites.length; i++) {
              this.m_darkTabTitleSprites[i].spriteFrame = atlas.getSpriteFrame(TabName[i]);
              this.m_lightTabTitleSprites[i].spriteFrame = atlas.getSpriteFrame(TabName[i] + "_On");
            }
          }

          this.m_gameItems.SetTxt();
          this.m_itemDetail.SetTxt();
          this.m_otherGames.SetTxt();
          this.m_itemSystemMsgs.SetTxt(); // 將阻擋提示都設為"資源加載中"

          if (this.m_blockLabels) {
            var blockString = this.GetString(Define.StringKey.MSGBOX_ONLOADING);

            for (var _i3 = 0; _i3 < this.m_blockLabels.length; _i3++) {
              this.m_blockLabels[_i3].string = blockString;
              Tools.SetFont(this.m_blockLabels[_i3]);
            }
          }
        }
        /** */
        ;

        _proto.GetString = function GetString(key) {
          return LocaleStringManager.GetInstance().GetString(key);
        };

        _proto.OnRotation = function OnRotation(isLandscape, isSmall) {
          this.m_isLandscape = isLandscape;

          if (isSmall !== undefined) {
            this.m_isSmall = isSmall;
          }

          if (this.m_isLandscape) {
            this.node.getComponent(Animation).play(Ani3.Landscape);
          } else {
            this.node.getComponent(Animation).play(Ani3.Portrait);
          }

          this.m_gameItems.OnRotation(isLandscape);
          this.m_itemDetail.OnRotation(isLandscape);
          this.m_otherGames.OnRotation(isLandscape);
          this.m_itemSystemMsgs.OnRotation(isLandscape);

          if (!this.m_isAutoShowEnd) {
            this.AutoShow();
          }
        }
        /** 判斷是否需要加道具卡格子 (舊版,不用了)*/
        ;

        _proto.CheckItemData = function CheckItemData(length) {
          if (length > this.m_curItemCellCountL) {
            var addL = Math.ceil((length - this.m_curItemCellCountL) / 5);
            this.m_curItemCellCountL += 5 * addL;

            for (var i = 0; i < addL; i++) {
              this.AddItemCell(true);
            }
          }

          if (length > this.m_curItemCellCountS) {
            var addS = Math.ceil((length - this.m_curItemCellCountS) / 3);
            this.m_curItemCellCountS += 3 * addS;

            for (var j = 0; j < addS; j++) {
              this.AddItemCell(false);
            }
          }
        }
        /** 增加道具卡格子 */
        ;

        _proto.AddItemCell = function AddItemCell(isLandscape) {
          var _this8 = this; // 直橫版


          var targetNode = this.m_itemsCellS;
          var targetParent = this.m_itemsNodeS;
          var targetNums = this.m_itemsNumS;

          if (isLandscape) {
            targetNode = this.m_itemsCellL;
            targetParent = this.m_itemsNodeL;
            targetNums = this.m_itemsNumL;
          }

          if (!targetNode) {
            return;
          } // 新增道具卡


          var cell = instantiate(targetNode);
          cell.name = "items" + targetParent.length;
          cell.children.forEach(function (item) {
            if (item.name == "item") {
              item.name = targetParent.length.toString();
              var vendorIcon = item.getChildByName("HintIcon");

              if (vendorIcon) {
                vendorIcon.getComponent(Sprite).spriteFrame = _this8.m_vendorIconSpriteFrame;
              }

              targetParent.push(item);
            } else if (item.name == "num") {
              item.name = targetNums.length.toString();
              targetNums.push(item);
            }
          });
          this.SetItemTouchEvent(cell.children);
        }
        /** 判斷是否需要加msg格子 */
        ;

        _proto.CheckMsgData = function CheckMsgData(length) {
          if (length > this.m_curMsgCellCountL) {
            var addL = length - this.m_curMsgCellCountL;
            this.m_curMsgCellCountL += addL;

            for (var i = 0; i < addL; i++) {
              this.AddMsgCell(true);
            }
          }

          if (length > this.m_curMsgCellCountS) {
            var addS = length - this.m_curMsgCellCountS;
            this.m_curMsgCellCountS += addS;

            for (var j = 0; j < addS; j++) {
              this.AddMsgCell(false);
            }
          }
        }
        /** 增加msg格子 */
        ;

        _proto.AddMsgCell = function AddMsgCell(isLandscape) {
          if (!this.m_msgCell) {
            return;
          }

          var cell = instantiate(this.m_msgCell);
          var targetMsgNode = isLandscape ? this.m_msgNodeL : this.m_msgNodeS;
          cell.name = targetMsgNode.length.toString();
          targetMsgNode.push(cell);
        }
        /** 判斷是否需要加All格子 */
        ;

        _proto.CheckAllData = function CheckAllData(length) {
          if (length > this.m_curAllCellCountL) {
            var addL = length - this.m_curAllCellCountL;
            this.m_curAllCellCountL += addL;

            for (var i = 0; i < addL; i++) {
              this.AddAllCell(true);
            }
          }

          if (length > this.m_curAllCellCountS) {
            var addS = length - this.m_curAllCellCountS;
            this.m_curAllCellCountS += addS;

            for (var j = 0; j < addS; j++) {
              this.AddAllCell(false);
            }
          }
        }
        /** 增加All格子 */
        ;

        _proto.AddAllCell = function AddAllCell(isLandscape) {
          if (!this.m_allCell) {
            return;
          }

          var targetAllNode = isLandscape ? this.m_allNodeL : this.m_allNodeS;
          var cell = instantiate(this.m_allCell);
          cell.name = targetAllNode.length.toString();
          targetAllNode.push(cell);
        };

        _proto.PreloadSmallIcon = function PreloadSmallIcon() {
          var _this9 = this;

          var isLoadedThisGame = false;

          var _loop = function _loop(i) {
            var gameID = _this9.m_allList[i].gameid;

            if (Tools.Icons[gameID]) {
              return "continue";
            }

            ItemList.GetInstance().GetSmallIcon(gameID, function (spriteFrame) {
              Tools.Icons[gameID] = spriteFrame;

              if (_this9.m_smallIconCb[gameID] && _this9.m_smallIconCb[gameID].length > 0) {
                while (_this9.m_smallIconCb[gameID].length > 0) {
                  _this9.m_smallIconCb[gameID].shift()();
                }

                _this9.m_smallIconCb[gameID] = [];
              }
            });

            if (gameID == Number(Define.NOW_GAME_ID)) {
              isLoadedThisGame = true;
            }
          };

          for (var i = 0; i < this.m_allList.length; i++) {
            var _ret = _loop(i);

            if (_ret === "continue") continue;
          }

          if (!isLoadedThisGame) {
            ItemList.GetInstance().GetSmallIcon(Number(Define.NOW_GAME_ID), function (spriteFrame) {
              Tools.Icons[Define.NOW_GAME_ID] = spriteFrame;
            });
          }
        }
        /**@ch 按下道具卡的CallBack */
        ;

        _proto.SetItemTouchEvent = function SetItemTouchEvent(items) {
          var _this10 = this;

          var _loop2 = function _loop2(i) {
            var btn = items[i].getComponent(Button);

            if (!btn) {
              return {
                v: void 0
              };
            }

            btn.node.on(Node.EventType.TOUCH_START, function (event) {
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this10.m_currentTouchName == null && btn.interactable) {
                _this10.m_currentTouchName = event.target.name;
              } else {
                if (event.target && event.target.active == false) {
                  _this10.m_currentTouchName = event.target.name;
                }
              }
            });
            btn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              if (_this10.m_currentTouchName == event.target.name) {
                _this10.m_currentTouchName = null;
              }
            });
            btn.node.on(Node.EventType.TOUCH_END, function (event) {
              if (_this10.m_currentTouchName != event.target.name) {
                return;
              }

              var name = Number(event.target.name);

              if (_this10.m_itemList && _this10.m_itemList[name]) {
                _this10.ShowItemCard(name);
              }

              _this10.m_currentTouchName = null;
            });
          };

          for (var i = 0; i < items.length; i++) {
            var _ret2 = _loop2(i);

            if (typeof _ret2 === "object") return _ret2.v;
          }
        };

        _proto.OnClickChange = function OnClickChange(tagert, step, increaseOrDecrease, minus, maximum) {
          var string = this.m_countTarget.string.replace(/<.*?>|[^0-9|.]/g, "");
          var value;

          if (!isNaN(Number(string))) {
            value = Number(string);
          }

          value = Tools.plus(value, Tools.times(step, increaseOrDecrease));

          if (value <= minus) {
            value = minus;
          } else if (value > maximum) {
            value = maximum;
          }

          tagert.string = Tools.FormatNumberThousands(value, Tools.FORMAT_NUMBER_TYPE.NONE_DOT);
          return value;
        };

        _proto.update = function update(dt) {
          var _this11 = this;

          if (this.m_loadTimer) {
            this.m_loadTimer.Update(dt * 1000);

            if (this.m_loadTimer.ToBool()) {
              this.m_loadTimer.Clear();
              MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_RESYNC, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, function () {
                _this11.Hide();
              });
            }
          }

          if (this.m_isCountStart) {
            this.m_totalTime += dt;

            if (this.m_totalTime >= HOLD_TIME_THRESHOLD) {
              HOLD_INTERVEL = PRESS_INTERVEL;
            } else {
              HOLD_INTERVEL = CLICK_INTERVEL;
            }

            if (this.m_timer < 0) {
              this.m_holdTime += HOLD_INTERVEL;
              var holdIncreaseStep = 0;

              if (this.m_holdTime > 6) {
                holdIncreaseStep = HOLD_SPEED[4];
              } else if (this.m_holdTime > 4.5) {
                holdIncreaseStep = HOLD_SPEED[3];
              } else if (this.m_holdTime > 3) {
                holdIncreaseStep = HOLD_SPEED[2];
              } else if (this.m_holdTime > 1) {
                holdIncreaseStep = HOLD_SPEED[1];
              } else {
                holdIncreaseStep = HOLD_SPEED[0];
              }

              this.m_holdIncreaseStep = Tools.plus(this.m_holdIncreaseStep, holdIncreaseStep);
              var string = this.m_countTarget.string.replace(/<.*?>|[^0-9|.]/g, "");
              var value;

              if (!isNaN(Number(string))) {
                value = Number(string);
              }

              var step = Tools.plus(this.m_holdIncreaseStep, 1);
              value = Tools.plus(value, Tools.times(step, this.m_increaseOrDecrease)); // log(value)

              if (value < SETTING_MIN) {
                value = SETTING_MIN;
              } else if (value > SETTING_MAX) {
                value = SETTING_MAX;
              }

              this.m_countTarget.string = Tools.FormatNumberThousands(value, Tools.FORMAT_NUMBER_TYPE.NONE_DOT);
              this.m_timer = HOLD_INTERVEL;
            } else {
              this.m_timer -= dt;
            }
          }
        };

        _proto.ShowTab = function ShowTab(tab) {
          this.m_curTab = tab;

          switch (tab) {
            case Tab.Game:
              this.SetTabRotate(Tab.Game);
              this.ShowGameRedpoint(false);
              this.ShowRedpoint(false);
              this.m_controller.PushClickToBuffer(CLICK_BUFFER_TYPE.BACKPACK_GAME);
              break;

            case Tab.All:
              this.SetTabRotate(Tab.All);
              this.ShowAllRedpoint(false);
              this.ShowRedpoint(false);
              this.m_controller.PushClickToBuffer(CLICK_BUFFER_TYPE.BACKPACK_ALL);
              break;

            case Tab.Msg:
              this.SetTabRotate(Tab.Msg);
              this.ShowMsgRedpoint(false);
              this.ShowRedpoint(false);
              this.m_controller.PushClickToBuffer(CLICK_BUFFER_TYPE.BACKPACK_MSG);
              this.ReqMsgCleanData();
              break;
          }
        };

        _proto.SetTabRotate = function SetTabRotate(tab) {};

        _proto.LoadRes = function LoadRes() {
          var _this12 = this;

          var lang = LocaleStringManager.CurrLang;

          if (lang !== Define.Lang.CN && lang !== Define.Lang.EN) {
            lang = Define.Lang.EN;
          }

          var url = ITEM_PATH;
          url = url.replace("{gameid}", Define.NOW_GAME_ID);
          url = url.replace("{lang}", lang);

          if (sys.isNative || AppManager.LobbyData) {
            try {
              var appUrl = AppManager.GetUrl();
              var reg = /\.com/g;
              url = appUrl.slice(0, appUrl.search(reg) + 4) + url;

              if (url === "") {
                error("No URL!");
              }
            } catch (error) {
              error(JSON.stringify(error));
            }
          }

          var checkAutoShow = function checkAutoShow() {
            if (_this12.CheckRes()) {
              _this12.m_reqDataFunc();

              _this12.m_reqMsgFunc();

              _this12.m_reqAlltabDataFunc();
            }

            if (!_this12.m_isAutoShowEnd) {
              _this12.AutoShow();
            }
          };

          {
            LoadRemotePlist(url, function (err, plist) {
              if (err) {
                error('err, url', err, url);
                return;
              }

              ItemList.GetInstance().SetGameSpriteAtlas(plist);
              _this12.m_itemPlist = plist;
              checkAutoShow();
            });
            var realGiftPath = REAL_ITEM_PATH;
            realGiftPath = realGiftPath.replace("{lang}", lang);
            realGiftPath = Tools.GetFilePath(realGiftPath);
            Define.CommonBundle.load(realGiftPath, SpriteAtlas, function (err, spriteAtlas) {
              if (err) {
                console.error(err.message || err);
                return;
              }

              ItemList.GetInstance().SetRealItemSpriteAtlas(spriteAtlas);
              _this12.m_realItemPlist = spriteAtlas;
              checkAutoShow();
            }); // LoadRemotePlist( realGiftURL, ( err, plist: SpriteAtlas ) =>
            // {
            //     if ( err )
            //     {
            //         error( 'err, realGiftURL', err, realGiftURL );
            //         return;
            //     }
            //     ItemList.GetInstance().SetGameSpriteAtlas( plist );
            //     this.m_realItemPlist = plist;
            //     checkAutoShow();
            // } );
          }
          this.m_controller.LoadCommonItem(Define.CbKey.Backpack, function (spriteAtlas) {
            ItemList.GetInstance().SetCommonSpriteAtlas(spriteAtlas);
            _this12.m_itemEft = spriteAtlas;
            checkAutoShow();
          });
        };

        _proto.CheckRes = function CheckRes() {
          if (!this.m_itemPlist || !this.m_itemEft) {
            return false;
          }

          return true;
        };

        _createClass(Backpack, [{
          key: "ItemPlist",
          get: function get() {
            return this.m_itemPlist;
          }
          /**@ch 實體卡合圖*/

        }, {
          key: "RealItemPlist",
          get: function get() {
            return this.m_realItemPlist;
          }
        }, {
          key: "ItemEft",
          get: function get() {
            return this.m_itemEft;
          }
        }, {
          key: "OnUseItemID",
          get: function get() {
            return this.m_onUseItemID;
          }
        }, {
          key: "IsPlayingAni",
          get: function get() {
            return this.m_isPlayingAni;
          }
        }, {
          key: "IsPlayingShowAni",
          get: function get() {
            return this.m_isPlayingShowAni;
          }
        }, {
          key: "IsLockNumControl",
          get: function get() {
            return this.m_isLockNumControl;
          }
        }]);

        return Backpack;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_blockNodes", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_blockLabels", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_vendorIconSpriteFrame", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_bgMaskNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_contentNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_itemPagePrefab", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_detailPagePrefab", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_allPagePrefab", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_msgPagePrefab", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_lightPageNodes", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_redPointNodes", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_titleSprite", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_darkTabTitleSprites", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_lightTabTitleSprites", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_itemUseAniPrefab", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_itemEndAniPrefab", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "m_betAniPrefab", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "m_iconFXPrefab", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "m_usingCardEftPrefab", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "m_spinBtnEftPrefab", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "m_logoNode", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "m_otherLogoNode", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "m_tadaCasinoLogoNode", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BackpackComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Node, Button, Label, ScrollView, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Node = module.Node;
      Button = module.Button;
      Label = module.Label;
      ScrollView = module.ScrollView;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _dec46, _dec47, _dec48, _dec49, _dec50, _dec51, _dec52, _dec53, _dec54, _dec55, _dec56, _dec57, _dec58, _dec59, _dec60, _dec61, _dec62, _dec63, _dec64, _dec65, _dec66, _dec67, _dec68, _dec69, _dec70, _dec71, _dec72, _dec73, _dec74, _dec75, _dec76, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _descriptor41, _descriptor42, _descriptor43, _descriptor44, _descriptor45, _descriptor46, _descriptor47, _descriptor48, _descriptor49, _descriptor50, _descriptor51, _descriptor52, _descriptor53, _descriptor54, _descriptor55, _descriptor56, _descriptor57, _descriptor58, _descriptor59, _descriptor60, _descriptor61, _descriptor62, _descriptor63, _descriptor64, _descriptor65, _descriptor66, _descriptor67, _descriptor68, _descriptor69, _descriptor70, _descriptor71, _descriptor72, _descriptor73, _descriptor74, _descriptor75, _descriptor76;

      cclegacy._RF.push({}, "deb57ES+JJGsZl/pI8jdxsT", "BackpackComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BackpackComponent = exports('default', (_dec = property(Sprite), _dec2 = property(Node), _dec3 = property({
        type: Button,
        tooltip: "關閉"
      }), _dec4 = property({
        type: Button,
        tooltip: "道具卡說明關閉"
      }), _dec5 = property({
        type: Node,
        tooltip: "分頁"
      }), _dec6 = property(Node), _dec7 = property(Button), _dec8 = property(Label), _dec9 = property(Node), _dec10 = property(Button), _dec11 = property(Label), _dec12 = property(Node), _dec13 = property(Button), _dec14 = property(Label), _dec15 = property(Node), _dec16 = property({
        type: ScrollView,
        tooltip: "橫版道具ScrollView"
      }), _dec17 = property({
        type: Node,
        tooltip: "橫版道具警告"
      }), _dec18 = property({
        type: Node,
        tooltip: "橫版道具"
      }), _dec19 = property({
        type: ScrollView,
        tooltip: "直版道具ScrollView"
      }), _dec20 = property({
        type: Node,
        tooltip: "直版道具警告"
      }), _dec21 = property({
        type: Node,
        tooltip: "直版道具"
      }), _dec22 = property({
        type: ScrollView,
        tooltip: "橫版個人訊息ScrollView"
      }), _dec23 = property({
        type: Node,
        tooltip: "橫版個人訊息"
      }), _dec24 = property({
        type: Node,
        tooltip: "橫版個人訊息警告"
      }), _dec25 = property({
        type: ScrollView,
        tooltip: "直版個人訊息ScrollView"
      }), _dec26 = property({
        type: Node,
        tooltip: "直版個人訊息"
      }), _dec27 = property({
        type: Node,
        tooltip: "直版個人訊息警告"
      }), _dec28 = property({
        type: ScrollView,
        tooltip: "橫版所有卡片ScrollView"
      }), _dec29 = property({
        type: Node,
        tooltip: "橫版所有卡片"
      }), _dec30 = property({
        type: Node,
        tooltip: "橫版所有卡片警告"
      }), _dec31 = property({
        type: ScrollView,
        tooltip: "直版所有卡片ScrollView"
      }), _dec32 = property({
        type: Node,
        tooltip: "直版所有卡片"
      }), _dec33 = property({
        type: Node,
        tooltip: "直版所有卡片警告"
      }), _dec34 = property({
        type: Node,
        tooltip: "道具卡說明頁"
      }), _dec35 = property({
        type: Label,
        tooltip: "道具卡說明標題"
      }), _dec36 = property({
        type: Sprite,
        tooltip: "道具卡說明圖片"
      }), _dec37 = property({
        type: Label,
        tooltip: "道具卡說明圖片數字"
      }), _dec38 = property({
        type: Node,
        tooltip: "道具卡說明對應遊戲"
      }), _dec39 = property(Label), _dec40 = property(Label), _dec41 = property({
        type: Node,
        tooltip: "道具卡說明押注"
      }), _dec42 = property(Label), _dec43 = property(Label), _dec44 = property({
        type: Node,
        tooltip: "道具卡說明圖vip"
      }), _dec45 = property(Label), _dec46 = property(Label), _dec47 = property({
        type: Node,
        tooltip: "道具卡說明圖財產限制"
      }), _dec48 = property(Node), _dec49 = property(Label), _dec50 = property(Label), _dec51 = property({
        type: Node,
        tooltip: "道具卡說明可使用日期"
      }), _dec52 = property(Node), _dec53 = property(Label), _dec54 = property(Label), _dec55 = property({
        type: Node,
        tooltip: "道具卡說明到期日期"
      }), _dec56 = property(Label), _dec57 = property(Label), _dec58 = property({
        type: Node,
        tooltip: "道具卡說明"
      }), _dec59 = property(Label), _dec60 = property(Label), _dec61 = property({
        type: Node,
        tooltip: "遮罩"
      }), _dec62 = property({
        type: Node,
        tooltip: "道具卡說明遮罩"
      }), _dec63 = property({
        type: Button,
        tooltip: "使用"
      }), _dec64 = property(Label), _dec65 = property({
        type: Node,
        tooltip: "限制原因"
      }), _dec66 = property(Label), _dec67 = property({
        type: Node,
        tooltip: "loading mask"
      }), _dec68 = property({
        type: Node,
        tooltip: "調整數量"
      }), _dec69 = property({
        type: Button,
        tooltip: "+"
      }), _dec70 = property({
        type: Button,
        tooltip: "-"
      }), _dec71 = property(Label), _dec72 = property(Node), _dec73 = property(Node), _dec74 = property(Node), _dec75 = property(Button), _dec76 = property(Button), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BackpackComponent, _Component);

        function BackpackComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_topTitle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_logo", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_close", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_close", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tabs", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tabs_bg", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tabs_game", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tabs_gameLabel", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tabs_gameRp", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tabs_all", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tabs_allLabel", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tabs_allRp", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tabs_msg", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tabs_msgLabel", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tabs_msgRp", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scrollViewGameL", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_warningGameL", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentGameL", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scrollViewGameS", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_warningGameS", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentGameS", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scrollViewMsgL", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentMsgL", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_warningMsgL", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scrollViewMsgS", _descriptor25, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentMsgS", _descriptor26, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_warningMsgS", _descriptor27, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scrollViewAllL", _descriptor28, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentAllL", _descriptor29, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_warningAllL", _descriptor30, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scrollViewAllS", _descriptor31, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentAllS", _descriptor32, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_warningAllS", _descriptor33, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info", _descriptor34, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_title", _descriptor35, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_img", _descriptor36, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_imgNum", _descriptor37, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_game", _descriptor38, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_gameTitle", _descriptor39, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_gameValue", _descriptor40, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_bet", _descriptor41, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_betTitle", _descriptor42, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_betValue", _descriptor43, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_vip", _descriptor44, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_vipTitle", _descriptor45, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_vipValue", _descriptor46, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_property", _descriptor47, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_propertyRefused", _descriptor48, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_propertyTitle", _descriptor49, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_propertyValue", _descriptor50, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_usage", _descriptor51, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_usageRefused", _descriptor52, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_usageTitle", _descriptor53, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_usageValue", _descriptor54, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_expire", _descriptor55, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_expireTitle", _descriptor56, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_expireValue", _descriptor57, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_content", _descriptor58, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_contentTitle", _descriptor59, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_contentValue", _descriptor60, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_mask", _descriptor61, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_mask", _descriptor62, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_use", _descriptor63, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_useValue", _descriptor64, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_refused", _descriptor65, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_info_refusedValue", _descriptor66, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_loadingMask", _descriptor67, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_numNode", _descriptor68, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_btn_plus", _descriptor69, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_btn_dec", _descriptor70, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_btn_num", _descriptor71, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_btn_bg", _descriptor72, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_btn_plusTxt", _descriptor73, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_btn_decTxt", _descriptor74, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scrollToTop", _descriptor75, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scrollToBot", _descriptor76, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(BackpackComponent, [{
          key: "TopTitle",
          get: function get() {
            return this.m_topTitle;
          }
        }, {
          key: "Logo",
          get: function get() {
            return this.m_logo;
          }
        }, {
          key: "Close",
          get: function get() {
            return this.m_close;
          }
        }, {
          key: "InfoClose",
          get: function get() {
            return this.m_info_close;
          }
        }, {
          key: "Tabs",
          get: function get() {
            return this.m_tabs;
          }
        }, {
          key: "TabsBg",
          get: function get() {
            return this.m_tabs_bg;
          }
        }, {
          key: "TabsGame",
          get: function get() {
            return this.m_tabs_game;
          }
        }, {
          key: "TabsGameLabel",
          get: function get() {
            return this.m_tabs_gameLabel;
          }
        }, {
          key: "TabsGameRedpoint",
          get: function get() {
            return this.m_tabs_gameRp;
          }
        }, {
          key: "TabsAll",
          get: function get() {
            return this.m_tabs_all;
          }
        }, {
          key: "TabsAllLabel",
          get: function get() {
            return this.m_tabs_allLabel;
          }
        }, {
          key: "TabsAllRedpoint",
          get: function get() {
            return this.m_tabs_allRp;
          }
        }, {
          key: "TabsMsg",
          get: function get() {
            return this.m_tabs_msg;
          }
        }, {
          key: "TabsMsgLabel",
          get: function get() {
            return this.m_tabs_msgLabel;
          }
        }, {
          key: "TabsMsgRedpoint",
          get: function get() {
            return this.m_tabs_msgRp;
          }
        }, {
          key: "ScrollViewGameL",
          get: function get() {
            return this.m_scrollViewGameL;
          }
        }, {
          key: "WarningGameL",
          get: function get() {
            return this.m_warningGameL;
          }
        }, {
          key: "ContentGameL",
          get: function get() {
            return this.m_contentGameL;
          }
        }, {
          key: "ScrollViewGameS",
          get: function get() {
            return this.m_scrollViewGameS;
          }
        }, {
          key: "WarningGameS",
          get: function get() {
            return this.m_warningGameS;
          }
        }, {
          key: "ContentGameS",
          get: function get() {
            return this.m_contentGameS;
          }
        }, {
          key: "ScrollViewMsgL",
          get: function get() {
            return this.m_scrollViewMsgL;
          }
        }, {
          key: "ContentMsgL",
          get: function get() {
            return this.m_contentMsgL;
          }
        }, {
          key: "WarningMsgL",
          get: function get() {
            return this.m_warningMsgL;
          }
        }, {
          key: "ScrollViewMsgS",
          get: function get() {
            return this.m_scrollViewMsgS;
          }
        }, {
          key: "ContentMsgS",
          get: function get() {
            return this.m_contentMsgS;
          }
        }, {
          key: "WarningMsgS",
          get: function get() {
            return this.m_warningMsgS;
          }
        }, {
          key: "ScrollViewAllL",
          get: function get() {
            return this.m_scrollViewAllL;
          }
        }, {
          key: "ContentAllL",
          get: function get() {
            return this.m_contentAllL;
          }
        }, {
          key: "WarningAllL",
          get: function get() {
            return this.m_warningAllL;
          }
        }, {
          key: "ScrollViewAllS",
          get: function get() {
            return this.m_scrollViewAllS;
          }
        }, {
          key: "ContentAllS",
          get: function get() {
            return this.m_contentAllS;
          }
        }, {
          key: "WarningAllS",
          get: function get() {
            return this.m_warningAllS;
          }
        }, {
          key: "Info",
          get: function get() {
            return this.m_info;
          }
        }, {
          key: "InfoTitle",
          get: function get() {
            return this.m_info_title;
          }
        }, {
          key: "InfoImg",
          get: function get() {
            return this.m_info_img;
          }
        }, {
          key: "InfoImgNum",
          get: function get() {
            return this.m_info_imgNum;
          }
        }, {
          key: "InfoGame",
          get: function get() {
            return this.m_info_game;
          }
        }, {
          key: "InfoGameTitle",
          get: function get() {
            return this.m_info_gameTitle;
          }
        }, {
          key: "InfoGameValue",
          get: function get() {
            return this.m_info_gameValue;
          }
        }, {
          key: "InfoBet",
          get: function get() {
            return this.m_info_bet;
          }
        }, {
          key: "InfoBetTitle",
          get: function get() {
            return this.m_info_betTitle;
          }
        }, {
          key: "InfoBetValue",
          get: function get() {
            return this.m_info_betValue;
          }
        }, {
          key: "InfoVip",
          get: function get() {
            return this.m_info_vip;
          }
        }, {
          key: "InfoVipTitle",
          get: function get() {
            return this.m_info_vipTitle;
          }
        }, {
          key: "InfoVipValue",
          get: function get() {
            return this.m_info_vipValue;
          }
        }, {
          key: "InfoProperty",
          get: function get() {
            return this.m_info_property;
          }
        }, {
          key: "InfoPropertyRefused",
          get: function get() {
            return this.m_info_propertyRefused;
          }
        }, {
          key: "InfoPropertyTitle",
          get: function get() {
            return this.m_info_propertyTitle;
          }
        }, {
          key: "InfoPropertyValue",
          get: function get() {
            return this.m_info_propertyValue;
          }
        }, {
          key: "InfoUsage",
          get: function get() {
            return this.m_info_usage;
          }
        }, {
          key: "InfoUsageRefused",
          get: function get() {
            return this.m_info_usageRefused;
          }
        }, {
          key: "InfoUsageTitle",
          get: function get() {
            return this.m_info_usageTitle;
          }
        }, {
          key: "InfoUsageValue",
          get: function get() {
            return this.m_info_usageValue;
          }
        }, {
          key: "InfoExpire",
          get: function get() {
            return this.m_info_expire;
          }
        }, {
          key: "InfoExpireTitle",
          get: function get() {
            return this.m_info_expireTitle;
          }
        }, {
          key: "InfoExpireValue",
          get: function get() {
            return this.m_info_expireValue;
          }
        }, {
          key: "InfoContent",
          get: function get() {
            return this.m_info_content;
          }
        }, {
          key: "InfoContentTitle",
          get: function get() {
            return this.m_info_contentTitle;
          }
        }, {
          key: "InfoContentValue",
          get: function get() {
            return this.m_info_contentValue;
          }
        }, {
          key: "Mask",
          get: function get() {
            return this.m_mask;
          }
        }, {
          key: "InfoMask",
          get: function get() {
            return this.m_info_mask;
          }
        }, {
          key: "InfoUse",
          get: function get() {
            return this.m_info_use;
          }
        }, {
          key: "InfoUseValue",
          get: function get() {
            return this.m_info_useValue;
          }
        }, {
          key: "InfoRefused",
          get: function get() {
            return this.m_info_refused;
          }
        }, {
          key: "InfoRefusedValue",
          get: function get() {
            return this.m_info_refusedValue;
          }
        }, {
          key: "LoadingMask",
          get: function get() {
            return this.m_loadingMask;
          }
        }, {
          key: "NumNode",
          get: function get() {
            return this.m_numNode;
          }
        }, {
          key: "InfoPlus",
          get: function get() {
            return this.m_btn_plus;
          }
        }, {
          key: "InfoDec",
          get: function get() {
            return this.m_btn_dec;
          }
        }, {
          key: "InfoBtnNum",
          get: function get() {
            return this.m_btn_num;
          }
        }, {
          key: "InfoBtnBg",
          get: function get() {
            return this.m_btn_bg;
          }
        }, {
          key: "InfoPlusTxt",
          get: function get() {
            return this.m_btn_plusTxt;
          }
        }, {
          key: "InfoDecTxt",
          get: function get() {
            return this.m_btn_decTxt;
          }
        }, {
          key: "ScrollToTop",
          get: function get() {
            return this.m_scrollToTop;
          }
        }, {
          key: "ScrollToBot",
          get: function get() {
            return this.m_scrollToBot;
          }
        }]);

        return BackpackComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_topTitle", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_logo", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_close", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_info_close", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_tabs", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_tabs_bg", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_tabs_game", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_tabs_gameLabel", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_tabs_gameRp", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_tabs_all", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_tabs_allLabel", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_tabs_allRp", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_tabs_msg", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_tabs_msgLabel", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_tabs_msgRp", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_scrollViewGameL", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "m_warningGameL", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "m_contentGameL", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "m_scrollViewGameS", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "m_warningGameS", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "m_contentGameS", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "m_scrollViewMsgL", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "m_contentMsgL", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "m_warningMsgL", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "m_scrollViewMsgS", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "m_contentMsgS", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "m_warningMsgS", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "m_scrollViewAllL", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "m_contentAllL", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "m_warningAllL", [_dec30], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor31 = _applyDecoratedDescriptor(_class2.prototype, "m_scrollViewAllS", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor32 = _applyDecoratedDescriptor(_class2.prototype, "m_contentAllS", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor33 = _applyDecoratedDescriptor(_class2.prototype, "m_warningAllS", [_dec33], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor34 = _applyDecoratedDescriptor(_class2.prototype, "m_info", [_dec34], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor35 = _applyDecoratedDescriptor(_class2.prototype, "m_info_title", [_dec35], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor36 = _applyDecoratedDescriptor(_class2.prototype, "m_info_img", [_dec36], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor37 = _applyDecoratedDescriptor(_class2.prototype, "m_info_imgNum", [_dec37], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor38 = _applyDecoratedDescriptor(_class2.prototype, "m_info_game", [_dec38], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor39 = _applyDecoratedDescriptor(_class2.prototype, "m_info_gameTitle", [_dec39], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor40 = _applyDecoratedDescriptor(_class2.prototype, "m_info_gameValue", [_dec40], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor41 = _applyDecoratedDescriptor(_class2.prototype, "m_info_bet", [_dec41], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor42 = _applyDecoratedDescriptor(_class2.prototype, "m_info_betTitle", [_dec42], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor43 = _applyDecoratedDescriptor(_class2.prototype, "m_info_betValue", [_dec43], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor44 = _applyDecoratedDescriptor(_class2.prototype, "m_info_vip", [_dec44], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor45 = _applyDecoratedDescriptor(_class2.prototype, "m_info_vipTitle", [_dec45], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor46 = _applyDecoratedDescriptor(_class2.prototype, "m_info_vipValue", [_dec46], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor47 = _applyDecoratedDescriptor(_class2.prototype, "m_info_property", [_dec47], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor48 = _applyDecoratedDescriptor(_class2.prototype, "m_info_propertyRefused", [_dec48], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor49 = _applyDecoratedDescriptor(_class2.prototype, "m_info_propertyTitle", [_dec49], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor50 = _applyDecoratedDescriptor(_class2.prototype, "m_info_propertyValue", [_dec50], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor51 = _applyDecoratedDescriptor(_class2.prototype, "m_info_usage", [_dec51], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor52 = _applyDecoratedDescriptor(_class2.prototype, "m_info_usageRefused", [_dec52], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor53 = _applyDecoratedDescriptor(_class2.prototype, "m_info_usageTitle", [_dec53], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor54 = _applyDecoratedDescriptor(_class2.prototype, "m_info_usageValue", [_dec54], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor55 = _applyDecoratedDescriptor(_class2.prototype, "m_info_expire", [_dec55], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor56 = _applyDecoratedDescriptor(_class2.prototype, "m_info_expireTitle", [_dec56], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor57 = _applyDecoratedDescriptor(_class2.prototype, "m_info_expireValue", [_dec57], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor58 = _applyDecoratedDescriptor(_class2.prototype, "m_info_content", [_dec58], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor59 = _applyDecoratedDescriptor(_class2.prototype, "m_info_contentTitle", [_dec59], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor60 = _applyDecoratedDescriptor(_class2.prototype, "m_info_contentValue", [_dec60], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor61 = _applyDecoratedDescriptor(_class2.prototype, "m_mask", [_dec61], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor62 = _applyDecoratedDescriptor(_class2.prototype, "m_info_mask", [_dec62], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor63 = _applyDecoratedDescriptor(_class2.prototype, "m_info_use", [_dec63], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor64 = _applyDecoratedDescriptor(_class2.prototype, "m_info_useValue", [_dec64], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor65 = _applyDecoratedDescriptor(_class2.prototype, "m_info_refused", [_dec65], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor66 = _applyDecoratedDescriptor(_class2.prototype, "m_info_refusedValue", [_dec66], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor67 = _applyDecoratedDescriptor(_class2.prototype, "m_loadingMask", [_dec67], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor68 = _applyDecoratedDescriptor(_class2.prototype, "m_numNode", [_dec68], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor69 = _applyDecoratedDescriptor(_class2.prototype, "m_btn_plus", [_dec69], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor70 = _applyDecoratedDescriptor(_class2.prototype, "m_btn_dec", [_dec70], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor71 = _applyDecoratedDescriptor(_class2.prototype, "m_btn_num", [_dec71], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor72 = _applyDecoratedDescriptor(_class2.prototype, "m_btn_bg", [_dec72], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor73 = _applyDecoratedDescriptor(_class2.prototype, "m_btn_plusTxt", [_dec73], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor74 = _applyDecoratedDescriptor(_class2.prototype, "m_btn_decTxt", [_dec74], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor75 = _applyDecoratedDescriptor(_class2.prototype, "m_scrollToTop", [_dec75], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor76 = _applyDecoratedDescriptor(_class2.prototype, "m_scrollToBot", [_dec76], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BackpackManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './Protocol.ts', './ConnectManager.ts', './LocaleStringManager.ts', './Wallet.ts', './gaiaProto.mjs_cjs=&original=.js', './itemproto.mjs_cjs=&original=.js', './GaiaManager.ts', './itemproto.js', './gaiaProto.js'], function (exports) {
  'use strict';

  var _createClass, cclegacy, Define, ItemReqData, BackpackProtocol, ConnectManager, LocaleStringManager, walletManger, gaiaManager, _cjsExports, _cjsExports$1;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      ItemReqData = module.ItemReqData;
      BackpackProtocol = module.default;
    }, function (module) {
      ConnectManager = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      walletManger = module.walletManger;
    }, null, null, function (module) {
      gaiaManager = module.gaiaManager;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      _cjsExports$1 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b575cOkgaVB5IqEVkoBXBFv", "BackpackManager", undefined);

      var ItemCommandType = {
        PROTOCOL_TYPE_ITEM_ITMELIST: 21,
        PROTOCOL_TYPE_ITEM_USECARD: 22,
        PROTOCOL_TYPE_ITEM_CHECKNEW: 23,
        PROTOCOL_TYPE_ITEM_GETMAIL: 24,
        PROTOCOL_TYPE_ITEM_SETREAD: 25,
        PROTOCOL_TYPE_ITEM_ALLITMELIST: 26
      };

      var BackpackManager = /*#__PURE__*/function () {
        function BackpackManager() {
          this.m_backpack = null;
          this.m_createViewCb = null;
          this.m_useCardCb = null;
          this.m_isAutoLock = false;
          this.m_recvUseCardEndCb = null;
        }

        var _proto = BackpackManager.prototype;

        _proto.OnLoad = function OnLoad(backpack) {
          this.m_backpack = backpack;
        };

        _proto.OnDestroy = function OnDestroy() {
          this.m_backpack = null;
        };

        _proto.Init = function Init(extraManager, plistPath, usingCard, redPoint, reqDataFunc, reqUseFunc, reqMsgFunc, reqCleanMsgFunc, reqAlltabDataFunc) {
          var _this$m_backpack;

          (_this$m_backpack = this.m_backpack) == null ? void 0 : _this$m_backpack.Init(extraManager, plistPath, usingCard, redPoint, reqDataFunc, reqUseFunc, reqMsgFunc, reqCleanMsgFunc, reqAlltabDataFunc);
        };

        _proto.NewInit = function NewInit(useCardCb, isAutoLock, cb) {
          var _this = this;

          if (isAutoLock === void 0) {
            isAutoLock = false;
          }

          if (cb === void 0) {
            cb = null;
          } // if ( Tools.CheckSwitchOff( Define.SwitchOffKeyDefine.CloseSideFeatures ) )
          // {
          //     return;
          // }


          this.m_useCardCb = useCardCb;
          this.m_isAutoLock = isAutoLock;
          this.m_recvUseCardEndCb = cb;

          var reqUse = function reqUse(itemID, itemIdx, num) {
            if (Define.APP) {
              var data = new _cjsExports$1.gaiaProto.ItemUseCardReq();
              data.aid = Number(Define.APP.GetAID());
              data.token = Define.APP.GetAToken();
              data.itemindex = itemIdx.toString();
              data.itemid = itemID.toString();
              data.amount = num.toString();

              if (walletManger.HasWallet) {
                data.currencynumber = walletManger.CurencyID;
              }

              var req = new ItemReqData.ItemUseReq();
              req.reqData = _cjsExports$1.gaiaProto.ItemUseCardReq.encode(data).finish();
              ConnectManager.GetInstance().SendCommand(req, function (ack) {
                gaiaManager.CheckAck(ack, function (type, data) {
                  _this.OnRecvAck(type, data);
                });
              }, false, true);
            } // else
            // {
            //     this.OnRecvAck( ItemCommandType.PROTOCOL_TYPE_ITEM_USECARD );
            // }

          };

          var reqData = function reqData() {
            if (Define.APP) {
              var data = new _cjsExports$1.gaiaProto.ItemListReq();
              data.aid = Number(Define.APP.GetAID());
              data.token = Define.APP.GetAToken();
              data.lang = BackpackProtocol.Language[LocaleStringManager.CurrLang];

              if (walletManger.HasWallet) {
                data.currencynumber = walletManger.CurencyID;
              }

              var req = new ItemReqData.ItemDataReq();
              req.reqData = _cjsExports$1.gaiaProto.ItemListReq.encode(data).finish();
              ConnectManager.GetInstance().SendCommand(req, function (ack) {
                gaiaManager.CheckAck(ack, function (type, data) {
                  _this.OnRecvAck(type, data);
                });
              }, false, true);
            } // else
            // {
            //     this.OnRecvAck( ItemCommandType.PROTOCOL_TYPE_ITEM_ITMELIST );
            // }

          };

          var reqMsg = function reqMsg() {
            if (Define.APP) {
              var data = new _cjsExports$1.gaiaProto.ItemGetMailReq();
              data.aid = Number(Define.APP.GetAID());
              data.token = Define.APP.GetAToken();

              if (walletManger.HasWallet) {
                data.currencynumber = walletManger.CurencyID;
              }

              var req = new ItemReqData.GetItemMail();
              req.reqData = _cjsExports$1.gaiaProto.ItemGetMailReq.encode(data).finish();
              ConnectManager.GetInstance().SendCommand(req, function (ack) {
                gaiaManager.CheckAck(ack, function (type, data) {
                  _this.OnRecvAck(type, data);
                });
              }, false, true);
            } // else
            // {
            //     this.OnRecvAck( ItemCommandType.PROTOCOL_TYPE_ITEM_GETMAIL );
            // }

          };

          var reqCleanMsg = function reqCleanMsg() {// let reqMailread = new ItemReqData.GetItemMailRead();
            // reqMailread.info.aid = Number( Define.APP.GetAID() );
            // reqMailread.info.token = Define.APP.GetAToken();
            // if ( walletManger )
            // {
            //     reqMailread.info.currencynumber = walletManger.CurencyID;
            // }
            // ConnectManager.GetInstance().SendCommand( reqMailread, ( ack ) =>
            // {
            //     //Done
            //     backpackManager.OnRevMsgCleanDataAck( ack );
            // }, false );
          };

          var reqAllGameData = function reqAllGameData() {
            if (Define.APP) {
              var data = new _cjsExports$1.gaiaProto.ItemAllGameReq();
              data.aid = Number(Define.APP.GetAID());
              data.token = Define.APP.GetAToken();
              data.lang = BackpackProtocol.Language[LocaleStringManager.CurrLang];

              if (walletManger.HasWallet) {
                data.currencynumber = walletManger.CurencyID;
              }

              var req = new ItemReqData.ItemAllGameDateReq();
              req.reqData = _cjsExports$1.gaiaProto.ItemAllGameReq.encode(data).finish();
              ConnectManager.GetInstance().SendCommand(req, function (ack) {
                gaiaManager.CheckAck(ack, function (type, data) {
                  _this.OnRecvAck(type, data);
                });
              }, false, true);
            } // else
            // {
            //     this.OnRecvAck( ItemCommandType.PROTOCOL_TYPE_ITEM_ALLITMELIST );
            // }

          }; // 要設定背包的合圖再哪裡
          // path 設定在 GameBundle 底下   ver2.4.3


          this.m_createViewCb("", reqData, reqUse, reqMsg, reqCleanMsg, reqAllGameData);
        };

        _proto.OnRecvAck = function OnRecvAck(type, data) {
          switch (type) {
            case ItemCommandType.PROTOCOL_TYPE_ITEM_ITMELIST:
              {
                var _this$m_backpack2;

                var info = _cjsExports.itemprotocol.ListInfo.decode(data);

                (_this$m_backpack2 = this.m_backpack) == null ? void 0 : _this$m_backpack2.OnRevItemDataAck(info);
                break;
              }

            case ItemCommandType.PROTOCOL_TYPE_ITEM_USECARD:
              {
                var _this$m_backpack3;

                var _info = _cjsExports.itemprotocol.UseCardAck.decode(data);

                var _isSuccess = false;

                if (_info.result == 0 || !_info.result) {
                  var _this$m_useCardCb;

                  _isSuccess = true;
                  (_this$m_useCardCb = this.m_useCardCb) == null ? void 0 : _this$m_useCardCb.call(this, _info.itemid, _info.amount, _info.bet);
                }

                (_this$m_backpack3 = this.m_backpack) == null ? void 0 : _this$m_backpack3.OnRevUseItemCardAck(_isSuccess, _info.itemid, _info.bet, _info.icon, _info.amount, this.m_isAutoLock, this.m_recvUseCardEndCb);
                break;
              }

            case ItemCommandType.PROTOCOL_TYPE_ITEM_GETMAIL:
              {
                var _this$m_backpack4;

                var _info2 = _cjsExports.itemprotocol.GetMailAck.decode(data);

                (_this$m_backpack4 = this.m_backpack) == null ? void 0 : _this$m_backpack4.OnRevMsgDataAck(_info2);
                break;
              }

            case ItemCommandType.PROTOCOL_TYPE_ITEM_SETREAD:
              {
                // let info: backpackProto.itemprotocol.ListInfo = backpackProto.itemprotocol.ListInfo.decode( data );
                // log( "ItemList", info );
                // this.m_backpack?.OnRevMsgCleanDataAck( info );
                break;
              }

            case ItemCommandType.PROTOCOL_TYPE_ITEM_ALLITMELIST:
              {
                var _this$m_backpack5;

                var _info3 = _cjsExports.itemprotocol.ListAllGameInfo.decode(data);

                (_this$m_backpack5 = this.m_backpack) == null ? void 0 : _this$m_backpack5.OnRevAllTabDataAck(_info3);
                break;
              }
          }
        };

        _proto.AutoShow = function AutoShow() {
          var _this$m_backpack6;

          (_this$m_backpack6 = this.m_backpack) == null ? void 0 : _this$m_backpack6.AutoShow();
        };

        _proto.Show = function Show(isLandscape) {
          var _this$m_backpack7;

          (_this$m_backpack7 = this.m_backpack) == null ? void 0 : _this$m_backpack7.Show(isLandscape);
        };

        _proto.SetLockNumControl = function SetLockNumControl(isLock) {
          var _this$m_backpack8;

          (_this$m_backpack8 = this.m_backpack) == null ? void 0 : _this$m_backpack8.SetLockNumControl(isLock);
        };

        _proto.ShowAward = function ShowAward(award, cb, isAutoLock, isRevertBet) {
          var _this$m_backpack9;

          if (isAutoLock === void 0) {
            isAutoLock = false;
          }

          if (isRevertBet === void 0) {
            isRevertBet = true;
          }

          (_this$m_backpack9 = this.m_backpack) == null ? void 0 : _this$m_backpack9.ShowAward(award, cb, isAutoLock, isRevertBet);
        };

        _proto.OnRevAllTabDataAck = function OnRevAllTabDataAck(ack) {
          var _this$m_backpack10;

          (_this$m_backpack10 = this.m_backpack) == null ? void 0 : _this$m_backpack10.OnRevAllTabDataAck(ack);
        };

        _proto.OnRevMsgDataAck = function OnRevMsgDataAck(ack) {
          var _this$m_backpack11;

          (_this$m_backpack11 = this.m_backpack) == null ? void 0 : _this$m_backpack11.OnRevMsgDataAck(ack);
        };

        _proto.OnRevItemDataAck = function OnRevItemDataAck(ack) {
          var _this$m_backpack12;

          (_this$m_backpack12 = this.m_backpack) == null ? void 0 : _this$m_backpack12.OnRevItemDataAck(ack);
        };

        _proto.OnRevUseItemCardAck = function OnRevUseItemCardAck(isSuccess, itemID, bet, icon, itemNum, isAutoLock, cb) {
          var _this$m_backpack13;

          if (isAutoLock === void 0) {
            isAutoLock = false;
          }

          (_this$m_backpack13 = this.m_backpack) == null ? void 0 : _this$m_backpack13.OnRevUseItemCardAck(isSuccess, itemID, bet, icon, itemNum, isAutoLock, cb);
        };

        _proto.ShowRedpoint = function ShowRedpoint(isShow) {
          var _this$m_backpack14;

          (_this$m_backpack14 = this.m_backpack) == null ? void 0 : _this$m_backpack14.ShowRedpoint(isShow);
        };

        _proto.ShowGameRedpoint = function ShowGameRedpoint(isShow) {
          var _this$m_backpack15;

          (_this$m_backpack15 = this.m_backpack) == null ? void 0 : _this$m_backpack15.ShowGameRedpoint(isShow);
        };

        _proto.SetUsingCardNum = function SetUsingCardNum(itemNum, isEft) {
          var _this$m_backpack16;

          (_this$m_backpack16 = this.m_backpack) == null ? void 0 : _this$m_backpack16.SetUsingCardNum(itemNum, isEft);
        };

        _proto.OnRotation = function OnRotation(isLandscape, isSmall) {
          var _this$m_backpack17;

          (_this$m_backpack17 = this.m_backpack) == null ? void 0 : _this$m_backpack17.OnRotation(isLandscape, isSmall);
        };

        _createClass(BackpackManager, [{
          key: "CreateViewCb",
          set: function set(v) {
            this.m_createViewCb = v;
          }
        }, {
          key: "IsPlayingAni",
          get: function get() {
            if (this.m_backpack) {
              return this.m_backpack.IsPlayingAni;
            }

            return false;
          }
        }, {
          key: "OnUseItemID",
          get: function get() {
            return this.m_backpack ? this.m_backpack.OnUseItemID : null;
          }
        }, {
          key: "HasBackpack",
          get: function get() {
            return !!this.m_backpack;
          }
        }, {
          key: "ItemPlist",
          get: function get() {
            return this.m_backpack ? this.m_backpack.ItemPlist : null;
          }
        }]);

        return BackpackManager;
      }();

      var backpackManager = exports('backpackManager', new BackpackManager());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BarBodyComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Animation, Sprite, Button, Label, RichText, Node, Widget, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Sprite = module.Sprite;
      Button = module.Button;
      Label = module.Label;
      RichText = module.RichText;
      Node = module.Node;
      Widget = module.Widget;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _dec46, _dec47, _dec48, _dec49, _dec50, _dec51, _dec52, _dec53, _dec54, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _descriptor41, _descriptor42, _descriptor43, _descriptor44, _descriptor45, _descriptor46, _descriptor47, _descriptor48, _descriptor49, _descriptor50, _descriptor51, _descriptor52, _descriptor53, _descriptor54;

      cclegacy._RF.push({}, "9661aSWZHFKO7J7m9SCRitz", "BarBodyComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BarBodyComponent = exports('default', (_dec = property({
        type: Animation,
        tooltip: "連線提示動畫"
      }), _dec2 = property({
        type: Sprite,
        tooltip: "連線狀態"
      }), _dec3 = property({
        type: Button,
        tooltip: "Spin按鈕"
      }), _dec4 = property({
        type: Button,
        tooltip: "Stop Spin按鈕"
      }), _dec5 = property({
        type: Button,
        tooltip: "自動玩按鈕"
      }), _dec6 = property({
        type: Button,
        tooltip: "停止自動玩按鈕"
      }), _dec7 = property({
        type: Button,
        tooltip: "停止計數自動玩按鈕"
      }), _dec8 = property({
        type: Button,
        tooltip: "快停按鈕"
      }), _dec9 = property({
        type: Button,
        tooltip: "多幣別按鈕"
      }), _dec10 = property({
        type: Button,
        tooltip: "Bet按鈕"
      }), _dec11 = property({
        type: Button,
        tooltip: "功能列按鈕"
      }), _dec12 = property({
        type: Sprite,
        tooltip: "功能列按鈕圖示"
      }), _dec13 = property({
        type: Button,
        tooltip: "功能列裡智能託管按鈕"
      }), _dec14 = property({
        type: Button,
        tooltip: "功能列裡歷程按鈕"
      }), _dec15 = property({
        type: Button,
        tooltip: "功能列裡說明按鈕"
      }), _dec16 = property({
        type: Button,
        tooltip: "遊戲說明按鈕 for BMM"
      }), _dec17 = property({
        type: Button,
        tooltip: "返回大廳按鈕"
      }), _dec18 = property({
        type: Label,
        tooltip: "智能託管按鈕局數"
      }), _dec19 = property({
        type: RichText,
        tooltip: "贏分數字"
      }), _dec20 = property({
        type: RichText,
        tooltip: "使用中押注數字"
      }), _dec21 = property({
        type: RichText,
        tooltip: "財產數字"
      }), _dec22 = property({
        type: Label,
        tooltip: "局號"
      }), _dec23 = property({
        type: Label,
        tooltip: "版號"
      }), _dec24 = property({
        type: Label,
        tooltip: "時間"
      }), _dec25 = property({
        type: Node,
        tooltip: "時間Layout節點"
      }), _dec26 = property({
        type: Label,
        tooltip: "平台版號"
      }), _dec27 = property({
        type: Node,
        tooltip: "押注根結點"
      }), _dec28 = property({
        type: Node,
        tooltip: "押注板結點"
      }), _dec29 = property({
        type: Node,
        tooltip: "額外bet板結點"
      }), _dec30 = property({
        type: Node,
        tooltip: "功能列"
      }), _dec31 = property({
        type: Button,
        tooltip: "音效開關鈕"
      }), _dec32 = property({
        type: Sprite,
        tooltip: "Spin按鈕圖"
      }), _dec33 = property({
        type: Sprite,
        tooltip: "Stop Spin按鈕圖"
      }), _dec34 = property({
        type: Sprite,
        tooltip: "自動玩按鈕圖"
      }), _dec35 = property({
        type: Sprite,
        tooltip: "停止自動玩按鈕圖"
      }), _dec36 = property({
        type: Sprite,
        tooltip: "停止計數自動玩按鈕圖"
      }), _dec37 = property({
        type: Label,
        tooltip: "自動玩提示"
      }), _dec38 = property({
        type: Node,
        tooltip: "自動玩提示"
      }), _dec39 = property({
        type: Label,
        tooltip: "加速按鈕提示"
      }), _dec40 = property({
        type: Label,
        tooltip: "贏分文字"
      }), _dec41 = property({
        type: Label,
        tooltip: "財產文字"
      }), _dec42 = property({
        type: Label,
        tooltip: "vip用的財產文字"
      }), _dec43 = property({
        type: Sprite,
        tooltip: "vip 提示"
      }), _dec44 = property({
        type: Node,
        tooltip: "vip押注遮罩"
      }), _dec45 = property({
        type: Node,
        tooltip: "vip提示"
      }), _dec46 = property({
        type: Node,
        tooltip: "vip解鎖"
      }), _dec47 = property({
        type: Sprite,
        tooltip: "解鎖的VIP提示"
      }), _dec48 = property({
        type: Sprite,
        tooltip: "vip鎖提示文字"
      }), _dec49 = property({
        type: Node,
        tooltip: "遮罩"
      }), _dec50 = property({
        type: Node,
        tooltip: "EX BET按鈕根節點"
      }), _dec51 = property({
        type: Label,
        tooltip: "押注金額文字"
      }), _dec52 = property({
        type: Button,
        tooltip: "背包按鈕"
      }), _dec53 = property({
        type: Node,
        tooltip: "背包紅點"
      }), _dec54 = property({
        type: Sprite,
        tooltip: "背包圖示"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BarBodyComponent, _Component);

        function BarBodyComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_connectAnim", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_connectSprite", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_spinBtn", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_stopSpinBtn", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_autoBtn", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_stopAutoBtn", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_stopAutoCountBtn", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_speedButton", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_currencyBtn", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betBtn", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_commBtn", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_commSprite", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_wiseAutoBtn", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_historyBtn", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_ratioBtn", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_BMMratioBtn", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_homeBtn", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_stopRoundLabel", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_winLabel", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_nowBetLabel", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_balanceLabel", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_logIndex", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_version", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_timeLabel", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_timeLayoutNode", _descriptor25, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_platVerLabel", _descriptor26, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betRootNode", _descriptor27, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betViewNode", _descriptor28, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_extraBetView", _descriptor29, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_commView", _descriptor30, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_soundBtn", _descriptor31, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_spinSprite", _descriptor32, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_spinStopSprite", _descriptor33, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_autoSprite", _descriptor34, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_autoStopSprite", _descriptor35, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_autoCountStopSprite", _descriptor36, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_autoHintLabel", _descriptor37, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_autoHintEffect", _descriptor38, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_speedHintLabel", _descriptor39, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_barWinLabel", _descriptor40, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_barBalanceLabel", _descriptor41, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_vipBalanceLabel", _descriptor42, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_vipSprite", _descriptor43, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_vipLockNode", _descriptor44, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_vipHintNode", _descriptor45, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_unLockVipNode", _descriptor46, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_unlockVIPSprite", _descriptor47, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lockHintSprite", _descriptor48, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_vipMaskNodes", _descriptor49, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_extraBtnNode", _descriptor50, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betLabel", _descriptor51, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_backpackBtn", _descriptor52, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_backpackRp", _descriptor53, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_backpackSprite", _descriptor54, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = BarBodyComponent.prototype;

        _proto.ResetComponent = function ResetComponent(bottomBar, extraManager, target) {
          //先把widget的目標節點還回去
          this.m_backpackBtn.getComponent(Widget).target = target; //BottombarManager

          bottomBar.ConnectAnim = this.m_connectAnim;
          bottomBar.ConnectSprite = this.m_connectSprite;
          bottomBar.SpinBtn = this.m_spinBtn;
          bottomBar.StopSpinBtn = this.m_stopSpinBtn;
          bottomBar.AutoBtn = this.m_autoBtn;
          bottomBar.StopAutoBtn = this.m_stopAutoBtn;
          bottomBar.StopAutoCountBtn = this.m_stopAutoCountBtn;
          bottomBar.SpeedButton = this.m_speedButton;
          bottomBar.CurrencyBtn = this.m_currencyBtn;
          bottomBar.BetBtn = this.m_betBtn;
          bottomBar.CommBtn = this.m_commBtn;
          bottomBar.CommSprite = this.m_commSprite;
          bottomBar.WiseAutoBtn = this.m_wiseAutoBtn;
          bottomBar.HistoryBtn = this.m_historyBtn;
          bottomBar.RatioBtn = this.m_ratioBtn;
          bottomBar.BMMratioBtn = this.m_BMMratioBtn;
          bottomBar.HomeBtn = this.m_homeBtn;
          bottomBar.StopRoundLabel = this.m_stopRoundLabel;
          bottomBar.WinLabel = this.m_winLabel;
          bottomBar.NowBetLabel = this.m_nowBetLabel;
          bottomBar.BalanceLabel = this.m_balanceLabel;
          bottomBar.LogIndex = this.m_logIndex;
          bottomBar.Version = this.m_version;
          bottomBar.TimeLabel = this.m_timeLabel;
          bottomBar.TimeLayoutNode = this.m_timeLayoutNode;
          bottomBar.PlatVerLabel = this.m_platVerLabel;
          bottomBar.BetRootNode = this.m_betRootNode;
          bottomBar.BetViewNode = this.m_betViewNode;
          bottomBar.ExtraBetView = this.m_extraBetView;
          bottomBar.CommView = this.m_commView;
          bottomBar.SoundBtn = this.m_soundBtn;
          bottomBar.SpinSprite = this.m_spinSprite;
          bottomBar.SpinStopSprite = this.m_spinStopSprite;
          bottomBar.AutoSprite = this.m_autoSprite;
          bottomBar.AutoStopSprite = this.m_autoStopSprite;
          bottomBar.AutoCountStopSprite = this.m_autoCountStopSprite;
          bottomBar.AutoHintLabel = this.m_autoHintLabel;
          bottomBar.AutoHintEffect = this.m_autoHintEffect;
          bottomBar.SpeedHintLabel = this.m_speedHintLabel;
          bottomBar.BarWinLabel = this.m_barWinLabel;
          bottomBar.BarBalanceLabel = this.m_barBalanceLabel;
          bottomBar.VipBalanceLabel = this.m_vipBalanceLabel;
          bottomBar.VipSprite = this.m_vipSprite;
          bottomBar.VipLockNode = this.m_vipLockNode;
          bottomBar.VipHintNode = this.m_vipHintNode;
          bottomBar.UnLockVipNode = this.m_unLockVipNode;
          bottomBar.UnlockVIPSprite = this.m_unlockVIPSprite;
          bottomBar.LockHintSprite = this.m_lockHintSprite;
          bottomBar.VipMaskNodes = this.m_vipMaskNodes;
          bottomBar.ExtraBtnNode = this.m_extraBtnNode; //ExtraManager

          extraManager.BetLabel = this.m_betLabel;
          extraManager.BackPackBtn = this.m_backpackBtn;
          extraManager.BackpackRp = this.m_backpackRp;
          extraManager.BackpackSprite = this.m_backpackSprite;
        };

        return BarBodyComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_connectAnim", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_connectSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_spinBtn", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_stopSpinBtn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_autoBtn", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_stopAutoBtn", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_stopAutoCountBtn", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_speedButton", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_currencyBtn", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_betBtn", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_commBtn", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_commSprite", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_wiseAutoBtn", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_historyBtn", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_ratioBtn", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_BMMratioBtn", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "m_homeBtn", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "m_stopRoundLabel", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "m_winLabel", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "m_nowBetLabel", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "m_balanceLabel", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "m_logIndex", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "m_version", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "m_timeLabel", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "m_timeLayoutNode", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "m_platVerLabel", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "m_betRootNode", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "m_betViewNode", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "m_extraBetView", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "m_commView", [_dec30], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor31 = _applyDecoratedDescriptor(_class2.prototype, "m_soundBtn", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor32 = _applyDecoratedDescriptor(_class2.prototype, "m_spinSprite", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor33 = _applyDecoratedDescriptor(_class2.prototype, "m_spinStopSprite", [_dec33], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor34 = _applyDecoratedDescriptor(_class2.prototype, "m_autoSprite", [_dec34], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor35 = _applyDecoratedDescriptor(_class2.prototype, "m_autoStopSprite", [_dec35], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor36 = _applyDecoratedDescriptor(_class2.prototype, "m_autoCountStopSprite", [_dec36], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor37 = _applyDecoratedDescriptor(_class2.prototype, "m_autoHintLabel", [_dec37], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor38 = _applyDecoratedDescriptor(_class2.prototype, "m_autoHintEffect", [_dec38], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor39 = _applyDecoratedDescriptor(_class2.prototype, "m_speedHintLabel", [_dec39], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor40 = _applyDecoratedDescriptor(_class2.prototype, "m_barWinLabel", [_dec40], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor41 = _applyDecoratedDescriptor(_class2.prototype, "m_barBalanceLabel", [_dec41], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor42 = _applyDecoratedDescriptor(_class2.prototype, "m_vipBalanceLabel", [_dec42], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor43 = _applyDecoratedDescriptor(_class2.prototype, "m_vipSprite", [_dec43], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor44 = _applyDecoratedDescriptor(_class2.prototype, "m_vipLockNode", [_dec44], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor45 = _applyDecoratedDescriptor(_class2.prototype, "m_vipHintNode", [_dec45], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor46 = _applyDecoratedDescriptor(_class2.prototype, "m_unLockVipNode", [_dec46], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor47 = _applyDecoratedDescriptor(_class2.prototype, "m_unlockVIPSprite", [_dec47], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor48 = _applyDecoratedDescriptor(_class2.prototype, "m_lockHintSprite", [_dec48], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor49 = _applyDecoratedDescriptor(_class2.prototype, "m_vipMaskNodes", [_dec49], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor50 = _applyDecoratedDescriptor(_class2.prototype, "m_extraBtnNode", [_dec50], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor51 = _applyDecoratedDescriptor(_class2.prototype, "m_betLabel", [_dec51], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor52 = _applyDecoratedDescriptor(_class2.prototype, "m_backpackBtn", [_dec52], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor53 = _applyDecoratedDescriptor(_class2.prototype, "m_backpackRp", [_dec53], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor54 = _applyDecoratedDescriptor(_class2.prototype, "m_backpackSprite", [_dec54], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseState.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9c1e2Kfqt9CI5VbeEyOqvHK", "BaseState", undefined);

      var BaseState = exports('BaseState', function BaseState() {});

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BasicSpineController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, log, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      log = module.log;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "246b78WKUlOga5EXi65CLme", "BasicSpineController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      function AnimationMixing(skeleton, mixAnim, mixTime) {
        if (skeleton && mixAnim && mixAnim.length > 1) {
          for (var i = 0; i < mixAnim.length - 1; i++) {
            var anim1 = mixAnim[i];

            for (var j = i + 1; j < mixAnim.length; j++) {
              var anim2 = mixAnim[j];
              skeleton.setMix(anim1, anim2, mixTime);
              skeleton.setMix(anim2, anim1, mixTime);
            }
          }
        }
      }

      var mixAnim = ["walk", "run", "jump"];
      var BasicController = exports('default', (_dec = ccclass('BasicSpineController'), _dec2 = property({
        type: sp.Skeleton,
        displayName: "Skeleton"
      }), _dec3 = property({
        displayName: "Mixing Time",
        tooltip: "動畫1轉換至動畫2的動作漸變時間"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BasicController, _Component);

        function BasicController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.m_hasStop = false;

          _initializerDefineProperty(_this, "m_skeleton", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_mixTime", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = BasicController.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          AnimationMixing(this.m_skeleton, mixAnim, this.m_mixTime);
          this.m_skeleton.setStartListener(function (trackEntry) {
            var animationName = trackEntry.animation ? trackEntry.animation.name : "";
            log("[track %s][animation %s] start.", trackEntry.trackIndex, animationName);
          });
          this.m_skeleton.setInterruptListener(function (trackEntry) {
            var animationName = trackEntry.animation ? trackEntry.animation.name : "";
            log("[track %s][animation %s] interrupt.", trackEntry.trackIndex, animationName);
          });
          this.m_skeleton.setEndListener(function (trackEntry) {
            var animationName = trackEntry.animation ? trackEntry.animation.name : "";
            log("[track %s][animation %s] end.", trackEntry.trackIndex, animationName);
          });
          this.m_skeleton.setDisposeListener(function (trackEntry) {
            var animationName = trackEntry.animation ? trackEntry.animation.name : "";
            log("[track %s][animation %s] will be disposed.", trackEntry.trackIndex, animationName);
          });
          this.m_skeleton.setCompleteListener(function (trackEntry) {
            var animationName = trackEntry.animation ? trackEntry.animation.name : "";

            if (animationName === 'shoot') {
              _this2.Action("clearTrack", 1);
            }

            var loopCount = Math.floor(trackEntry.trackTime / trackEntry.animationEnd);
            log("[track %s][animation %s] complete: %s", trackEntry.trackIndex, animationName, loopCount);
          });
          this.m_skeleton.setEventListener(function (trackEntry, event) {
            var animationName = trackEntry.animation ? trackEntry.animation.name : ""; //log("[track %s][animation %s] event: %s, %s, %s, %s", trackEntry.trackIndex, animationName, event.data.name, event.intValue, event.floatValue, event.stringValue);
          });
        };

        _proto.Stop = function Stop() {
          this.Action("clearTrack", 0);
          this.m_hasStop = true;
        };

        _proto.Walk = function Walk() {
          this.Action("setAnimation", 0, 'walk', true);
          this.m_hasStop = false;
        };

        _proto.Run = function Run() {
          this.Action("setAnimation", 0, 'run', true);
          this.m_hasStop = false;
        };

        _proto.Jump = function Jump() {
          var oldAnim = this.m_skeleton.animation;
          this.Action("setAnimation", 0, 'jump', false);

          if (oldAnim && !this.m_hasStop) {
            this.Action("addAnimation", 0, oldAnim === 'run' ? 'run' : 'walk', true, 0);
          }
        };

        _proto.Shoot = function Shoot() {
          this.Action("setAnimation", 1, 'shoot', false);
        };

        _proto.Action = function Action(funcName) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          this.m_skeleton[funcName].apply(this.m_skeleton, args);
        };

        _proto.ToggleDebugSlots = function ToggleDebugSlots() {
          this.m_skeleton.debugSlots = !this.m_skeleton.debugSlots;
        };

        _proto.ToggleDebugBones = function ToggleDebugBones() {
          this.m_skeleton.debugBones = !this.m_skeleton.debugBones;
        };

        _proto.ToggleTimeScale = function ToggleTimeScale() {
          if (this.m_skeleton.timeScale === 1.0) {
            this.m_skeleton.timeScale = 0.3;
          } else {
            this.m_skeleton.timeScale = 1.0;
          }
        };

        return BasicController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_skeleton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_mixTime", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      })), _class2)) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import SkeletonSync from "../../../SkeletonSync"
      // 
      // function AnimationMixing(skeleton:sp.Skeleton, mixAnim:string[], mixTime:number) {
      //     if (skeleton && mixAnim && mixAnim.length > 1) {
      //         for (let i = 0; i < mixAnim.length-1; i++) {
      //             let anim1:string = mixAnim[i];
      //             for (let j = i+1; j < mixAnim.length; j++) {
      //                 let anim2:string = mixAnim[j];
      //                 skeleton.setMix(anim1, anim2, mixTime);
      //                 skeleton.setMix(anim2, anim1, mixTime);        
      //             }
      //         }
      //     }
      // }
      // 
      // const {ccclass, property} = _decorator;
      // const mixAnim:string[] = ["walk", "run", "jump"];
      // 
      // @ccclass
      // export default class BasicController extends Component {
      //     private m_hasStop:boolean = false;
      // 
      //     @property({
      //         type:sp.Skeleton,
      //         displayName: "Skeleton"
      //     })
      //     private m_skeleton:sp.Skeleton = null;
      // 
      //     @property({
      //         displayName: "Mixing Time",
      //         tooltip: "動畫1轉換至動畫2的動作漸變時間"
      //     })
      //     private m_mixTime: number = 0.2;
      // 
      //     public onLoad() {
      //         AnimationMixing(this.m_skeleton, mixAnim, this.m_mixTime);
      // 
      //         this.m_skeleton.setStartListener(trackEntry => {
      //             var animationName = trackEntry.animation ? trackEntry.animation.name : "";
      //             log("[track %s][animation %s] start.", trackEntry.trackIndex, animationName);
      //         });
      //         this.m_skeleton.setInterruptListener(trackEntry => {
      //             var animationName = trackEntry.animation ? trackEntry.animation.name : "";
      //             log("[track %s][animation %s] interrupt.", trackEntry.trackIndex, animationName);
      //         });
      //         this.m_skeleton.setEndListener(trackEntry => {
      //             var animationName = trackEntry.animation ? trackEntry.animation.name : "";
      //             log("[track %s][animation %s] end.", trackEntry.trackIndex, animationName);
      //         });
      //         this.m_skeleton.setDisposeListener(trackEntry => {
      //             var animationName = trackEntry.animation ? trackEntry.animation.name : "";
      //             log("[track %s][animation %s] will be disposed.", trackEntry.trackIndex, animationName);
      //         });
      //         this.m_skeleton.setCompleteListener((trackEntry) => {
      //             var animationName = trackEntry.animation ? trackEntry.animation.name : "";
      //             if (animationName === 'shoot') {
      //                 this.Action("clearTrack", 1);
      //             }
      //             var loopCount = Math.floor(trackEntry.trackTime / trackEntry.animationEnd); 
      //             log("[track %s][animation %s] complete: %s", trackEntry.trackIndex, animationName, loopCount);
      //         });
      //         this.m_skeleton.setEventListener((trackEntry, event) => {
      //             var animationName = trackEntry.animation ? trackEntry.animation.name : "";
      //             log("[track %s][animation %s] event: %s, %s, %s, %s", trackEntry.trackIndex, animationName, event.data.name, event.intValue, event.floatValue, event.stringValue);
      //         });
      //     }
      // 
      //     public Stop () {
      //         this.Action("clearTrack", 0)
      //         this.m_hasStop = true;
      //     }
      // 
      //     public Walk () {
      //         this.Action("setAnimation", 0, 'walk', true)
      //         this.m_hasStop = false;
      //     }
      //     
      //     public Run () {
      //         this.Action("setAnimation", 0, 'run', true)
      //         this.m_hasStop = false;
      //     }
      //     
      //     public Jump () {
      //         var oldAnim = this.m_skeleton.animation;
      //         this.Action("setAnimation", 0, 'jump', false)
      //         if (oldAnim && !this.m_hasStop) {
      //             this.Action("addAnimation", 0, oldAnim === 'run' ? 'run' : 'walk', true, 0)
      //         }
      //     }
      //     
      //     public Shoot () {
      //         this.Action("setAnimation", 1, 'shoot', false)
      //     }
      // 
      //     private Action(funcName:string, ...args) {
      //         this.m_skeleton[funcName].apply(this.m_skeleton, args);
      //     }
      // 
      //     public ToggleDebugSlots () {
      //         this.m_skeleton.debugSlots = !this.m_skeleton.debugSlots;
      //     }
      //     
      //     public ToggleDebugBones () {
      //         this.m_skeleton.debugBones = !this.m_skeleton.debugBones;
      //     }
      //     
      //     public ToggleTimeScale () {
      //         if (this.m_skeleton.timeScale === 1.0) {
      //             this.m_skeleton.timeScale = 0.3;
      //         }
      //         else {
      //             this.m_skeleton.timeScale = 1.0;
      //         }
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BigFavorHint.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './IconTemplate.ts', './LocaleStringManager.ts', './Define.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Button, Node, js, Component, IconTemplate, LocaleStringManager, Define;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Button = module.Button;
      Node = module.Node;
      js = module.js;
      Component = module.Component;
    }, function (module) {
      IconTemplate = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Define = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "934d3liAUlAw7lHZqdg+0qd", "BigFavorHint", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BigFavorHint = exports('default', (_dec = property({
        type: Label,
        tooltip: "標題"
      }), _dec2 = property({
        type: Label,
        tooltip: "說明"
      }), _dec3 = property({
        type: IconTemplate,
        tooltip: "遊戲icon節點"
      }), _dec4 = property({
        type: Button,
        tooltip: "關閉按鈕"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BigFavorHint, _Component);

        function BigFavorHint() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_titleLabel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_descLabel", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_iconTemplate", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_closeBtn", _descriptor4, _assertThisInitialized(_this));

          _this.m_currentTouchName = null;
          return _this;
        }

        var _proto = BigFavorHint.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.m_closeBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this2.m_currentTouchName == null && _this2.m_closeBtn.node.active) {
              _this2.m_currentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this2.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_closeBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this2.m_currentTouchName == event.target.name) {
              _this2.m_currentTouchName = null;
            }
          });
          this.m_closeBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            if (_this2.m_currentTouchName != event.target.name) {
              return;
            }

            _this2.m_currentTouchName = null;
            _this2.node.active = false;
          });
        };

        _proto.SetIcon = function SetIcon(icon, gameId) {
          if (this.m_iconTemplate) {
            this.m_iconTemplate.SetIconSpriteFrame(icon, gameId);
          }

          this.m_titleLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO);

          if (!this.m_titleLabel.font) {
            this.m_titleLabel.font = Define.DefaultFont;
          }

          var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.FAVOR_BIG_DESC);
          var gameName = LocaleStringManager.GetInstance().GetGameName(gameId);
          this.m_descLabel.string = js.formatStr(str, gameName);

          if (!this.m_descLabel.font) {
            this.m_descLabel.font = Define.DefaultFont;
          }
        } // update (dt) {}
        ;

        return BigFavorHint;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_titleLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_descLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_iconTemplate", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_closeBtn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BigWinComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, sp, Label, Component, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _class3;

      cclegacy._RF.push({}, "77acaFcNgVDULwRQEtO5wYa", "BigWinComponent", undefined);

      var BigWinAnimName = exports('BigWinAnimName', {
        Big: {
          Start: "BigWin_Start",
          End: "BigWin_End"
        },
        Mega: {
          Start: "MegaWin_Start",
          End: "MegaWin_End"
        },
        Super: {
          Start: "SuperWin_Start",
          End: "SuperWin_End"
        }
      });
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BigWinComponent = exports('default', (_dec = property({
        type: sp.Skeleton,
        tooltip: "spine"
      }), _dec2 = property({
        type: sp.Skeleton,
        tooltip: "遮罩"
      }), _dec3 = property({
        type: Label,
        tooltip: "贏分"
      }), ccclass(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BigWinComponent, _Component);

        function BigWinComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_spine", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_maskSpine", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_winLabel", _descriptor3, _assertThisInitialized(_this));

          _this.m_isEnd = true;
          _this.m_isShowEnd = true;
          _this.m_isShowAward = false;
          _this.m_eventCb = null;
          _this.m_showValueCb = null;
          _this.m_lvl = 0;
          _this.m_cancelCb = null;
          _this.m_nowLvl = 0;
          _this.m_win = 0;
          _this.m_showWin = 0;
          _this.m_step = 0;
          return _this;
        }

        var _proto = BigWinComponent.prototype;

        _proto.update = function update(dt) {
          if (this.m_isShowAward) {
            this.m_showWin += this.m_step * dt;

            if (this.m_showWin >= this.m_win) {
              this.m_showWin = this.m_win;
              this.m_isShowAward = false;
            }

            this.m_winLabel.string = Tools.FormatNumberThousands(Tools.strip(this.m_showValueCb ? this.m_showValueCb(this.m_showWin) : this.m_showWin), Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT);
          }
        }
        /**
         * 初始化
         * @param eventCb 幀事件 
         * @param showValueCb 多幣別金額顯示調整
         */
        ;

        _proto.Init = function Init(eventCb, showValueCb) {
          this.m_eventCb = eventCb;
          this.m_showValueCb = showValueCb;

          if (this.m_maskSpine) {
            this.m_maskSpine.node.active = false;
          }
        }
        /**
         * 顯示big win
         * @param win 贏分
         * @param lvl 階段，使用Level內的定義
         */
        ;

        _proto.Show = function Show(win, lvl) {
          if (win > 0 && lvl > BigWinComponent.Level.NONE && lvl <= BigWinComponent.Level.SUPER) {
            this.m_isEnd = false;
            this.m_lvl = lvl;
            this.m_nowLvl = 0;
            this.m_win = win;
            this.m_showWin = 0;
            this.m_winLabel.string = "0";
            this.m_isShowEnd = false;
            var time = 0;

            for (var i = BigWinComponent.Level.BIG; i <= this.m_lvl; i++) {
              var _animName = "";
              var endName = "";

              switch (i) {
                case BigWinComponent.Level.BIG:
                  _animName = BigWinAnimName.Big.Start;
                  endName = BigWinAnimName.Big.End;
                  break;

                case BigWinComponent.Level.MEGA:
                  _animName = BigWinAnimName.Mega.Start;
                  endName = BigWinAnimName.Mega.End;
                  break;

                case BigWinComponent.Level.SUPER:
                  _animName = BigWinAnimName.Super.Start;
                  endName = BigWinAnimName.Super.End;
                  break;
              }

              if (_animName !== "" && endName !== "") {
                var anim = this.m_spine.findAnimation(_animName);

                if (anim) {
                  time += anim.duration;
                }
              }
            }

            this.m_step = Tools.divide(this.m_win, time ? time : 5);
            this.m_isShowAward = true;

            if (this.m_maskSpine) {
              this.m_maskSpine.node.active = true;
              this.PlayAnimation(this.m_maskSpine, "BigWin_Start");
            }

            this.ShowNext();
          }
        };

        _proto.Stop = function Stop() {
          if (!this.m_isShowEnd) {
            this.m_cancelCb && this.m_cancelCb();
            this.ShowEnd();
          }
        };

        _proto.SetSkin = function SetSkin(name) {
          this.m_spine.setSkin(name);
        };

        _proto.ShowNext = /*#__PURE__*/function () {
          var _ShowNext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var isCancel;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!(this.m_nowLvl === this.m_lvl)) {
                      _context.next = 4;
                      break;
                    }

                    this.ShowEnd();
                    _context.next = 22;
                    break;

                  case 4:
                    this.m_nowLvl++;
                    isCancel = false;
                    _context.t0 = this.m_nowLvl;
                    _context.next = _context.t0 === BigWinComponent.Level.BIG ? 9 : _context.t0 === BigWinComponent.Level.MEGA ? 13 : _context.t0 === BigWinComponent.Level.SUPER ? 17 : 21;
                    break;

                  case 9:
                    _context.next = 11;
                    return this.PlayAnimation(this.m_spine, BigWinAnimName.Big.Start);

                  case 11:
                    isCancel = _context.sent;
                    return _context.abrupt("break", 21);

                  case 13:
                    _context.next = 15;
                    return this.PlayAnimation(this.m_spine, BigWinAnimName.Mega.Start);

                  case 15:
                    isCancel = _context.sent;
                    return _context.abrupt("break", 21);

                  case 17:
                    _context.next = 19;
                    return this.PlayAnimation(this.m_spine, BigWinAnimName.Super.Start);

                  case 19:
                    isCancel = _context.sent;
                    return _context.abrupt("break", 21);

                  case 21:
                    if (!isCancel) {
                      this.ShowNext();
                    }

                  case 22:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function ShowNext() {
            return _ShowNext.apply(this, arguments);
          }

          return ShowNext;
        }();

        _proto.ShowEnd = /*#__PURE__*/function () {
          var _ShowEnd = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    if (!this.m_isShowEnd) {
                      _context2.next = 2;
                      break;
                    }

                    return _context2.abrupt("return");

                  case 2:
                    this.m_isShowEnd = true;
                    this.m_isShowAward = false;
                    this.m_winLabel.string = Tools.FormatNumberThousands(Tools.strip(this.m_showValueCb ? this.m_showValueCb(this.m_win) : this.m_win), Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT);

                    if (this.m_maskSpine) {
                      this.PlayAnimation(this.m_maskSpine, "BigWin_End");
                    }

                    _context2.t0 = this.m_lvl;
                    _context2.next = _context2.t0 === BigWinComponent.Level.BIG ? 9 : _context2.t0 === BigWinComponent.Level.MEGA ? 12 : _context2.t0 === BigWinComponent.Level.SUPER ? 15 : 18;
                    break;

                  case 9:
                    _context2.next = 11;
                    return this.PlayAnimation(this.m_spine, BigWinAnimName.Big.End);

                  case 11:
                    return _context2.abrupt("break", 18);

                  case 12:
                    _context2.next = 14;
                    return this.PlayAnimation(this.m_spine, BigWinAnimName.Mega.End);

                  case 14:
                    return _context2.abrupt("break", 18);

                  case 15:
                    _context2.next = 17;
                    return this.PlayAnimation(this.m_spine, BigWinAnimName.Super.End);

                  case 17:
                    return _context2.abrupt("break", 18);

                  case 18:
                    if (this.m_maskSpine) {
                      this.m_maskSpine.node.active = false;
                    }

                    this.m_isEnd = true;

                  case 20:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function ShowEnd() {
            return _ShowEnd.apply(this, arguments);
          }

          return ShowEnd;
        }();

        _proto.PlayAnimation = function PlayAnimation(spine, animName, isLoop, track) {
          var _this2 = this;

          if (isLoop === void 0) {
            isLoop = false;
          }

          if (track === void 0) {
            track = 0;
          }

          return new Promise(function (resolve) {
            var isCancel = false;

            _this2.m_cancelCb = function () {
              isCancel = true;
              resolve(isCancel);
            };

            spine.clearTrack(track);
            spine.setToSetupPose();
            var trackEntry = spine.setAnimation(track, animName, isLoop);

            var completeCb = function completeCb() {
              _this2.m_cancelCb = null;
              resolve(isCancel);
            };

            if (trackEntry) {
              spine.setTrackEventListener(trackEntry, function (trackEntry, event) {
                var name = event.data.name;
                var strValue = event.stringValue;
                _this2.m_eventCb && _this2.m_eventCb(name, strValue, animName);
              });
              spine.setTrackCompleteListener(trackEntry, function () {
                spine.setTrackCompleteListener(trackEntry, function () {});
                completeCb();
              });
            } else {
              spine.setCompleteListener(function () {
                spine.setCompleteListener(null);
                completeCb();
              });
            }
          });
        };

        _createClass(BigWinComponent, [{
          key: "IsEnd",
          get: function get() {
            return this.m_isEnd;
          },
          set: function set(check) {
            this.m_isEnd = check;
          }
        }]);

        return BigWinComponent;
      }(Component), _class3.Level = {
        NONE: 0,
        BIG: 1,
        MEGA: 2,
        SUPER: 3
      }, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_spine", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_maskSpine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_winLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BigWinReplay.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './ViewTemplate.ts', './TimeBool.ts', './Tools.ts', './MsgBox.ts', './LocaleStringManager.ts', './PlayerInfo.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Toggle, Prefab, Node, instantiate, Animation, Define, ViewTemplate, TimeBool, Tools, MsgBox, LocaleStringManager, PlayerInfo;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Toggle = module.Toggle;
      Prefab = module.Prefab;
      Node = module.Node;
      instantiate = module.instantiate;
      Animation = module.Animation;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      ViewTemplate = module.default;
    }, function (module) {
      TimeBool = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      PlayerInfo = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "a50d4CJix5En5AQVIQ8aJmZ", "BigWinReplay", undefined);

      var LIST_TYPE;

      (function (LIST_TYPE) {
        LIST_TYPE[LIST_TYPE["DRAGON"] = 0] = "DRAGON";
        LIST_TYPE[LIST_TYPE["TIGER"] = 1] = "TIGER";
      })(LIST_TYPE || (LIST_TYPE = {}));

      var UPDATE_INTERVAL = 120;
      var SCROLL_COUNT = 2;
      var RANK_COUNT = 10;
      var INFO_ACK_TRANSFER = [[3, 1], [2, 0]]; // [ 倍率, 贏分 ]

      var PLAYER_INFO_SHOW_ANI = ["replayer_username_odds", "replayer_username"];
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BigWinReplay = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "排名標題文字"
      }), _dec2 = property({
        type: Sprite,
        tooltip: "全體排名標題文字"
      }), _dec3 = property({
        type: Sprite,
        tooltip: "我的紀錄標題文字"
      }), _dec4 = property({
        type: Toggle,
        tooltip: "龍榜虎榜按鈕"
      }), _dec5 = property({
        type: Sprite,
        tooltip: "倍率榜Txt"
      }), _dec6 = property({
        type: Sprite,
        tooltip: "贏分榜Txt"
      }), _dec7 = property({
        type: Prefab,
        tooltip: "玩家資訊樣板"
      }), _dec8 = property({
        type: Node,
        tooltip: "橫版內容存放位置"
      }), _dec9 = property({
        type: Node,
        tooltip: "直版內容存放位置"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_ViewTemplate) {
        _inheritsLoose(BigWinReplay, _ViewTemplate);

        function BigWinReplay() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _ViewTemplate.call.apply(_ViewTemplate, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_rankTxt", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_allRecordTxt", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_myRecordTxt", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_typeBtn", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rateBtnTxt", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_winBtnTxt", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_playerInfoPrefab", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentNodeL", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentNodeS", _descriptor9, _assertThisInitialized(_this));

          _this.m_playerInfos = [];
          _this.m_listType = LIST_TYPE.DRAGON;
          _this.m_selectCb = null;
          _this.m_infoReqFunc = null;
          _this.m_roundIndex = [[], []];
          _this.m_dollarSignIndex = [[], []];
          _this.m_unitIndex = [[], []];
          _this.m_currency = [[], []];
          _this.m_infoAid = [[], []];
          _this.m_infoName = [[], []];
          _this.m_infoScore = [[], []];
          _this.m_infoScoreAdjust = [[], []];
          _this.m_infoBet = [[], []];
          _this.m_replayBtns = [[], []];
          _this.m_controller = null;
          _this.m_timer = null;
          _this.m_localeSpriteAtlas = null;
          _this.m_info = null;
          _this.m_bottomBar = null;
          _this.m_isLandscape = false;
          return _this;
        }

        var _proto = BigWinReplay.prototype;

        _proto.Init = function Init(discount, isLandscape, bottomBar, reqBigWinReplayInfoFunc, bigWinReplayFunc, initEndCb) {
          var _this2 = this;

          this.m_controller = discount;
          this.m_bottomBar = bottomBar;
          this.m_infoReqFunc = reqBigWinReplayInfoFunc;
          this.m_selectCb = bigWinReplayFunc;
          this.m_timer = new TimeBool();
          this.m_timer.UseDT(true);
          this.m_timer.Clear();
          this.m_timer.Start(UPDATE_INTERVAL * 1000); //初始化

          for (var i = 0; i < 2; i++) {
            for (var j = 0; j < RANK_COUNT; j++) {
              this.m_roundIndex[i].push("");
              this.m_dollarSignIndex[i].push("");
              this.m_infoAid[i].push("");
              this.m_infoName[i].push("");
              this.m_unitIndex[i].push(0);
              this.m_currency[i].push(0);
              this.m_infoScore[i].push(0);
              this.m_infoScoreAdjust[i].push(0);
              this.m_infoBet[i].push(0);
            }
          }

          var contentNode = isLandscape ? this.m_contentNodeL : this.m_contentNodeS;

          for (var _i = 0; _i < RANK_COUNT; _i++) {
            var node = instantiate(this.m_playerInfoPrefab);
            contentNode.addChild(node);
            var playerInfo = node.getComponent(PlayerInfo);
            playerInfo.SetRank(_i + 1);
            this.m_playerInfos.push(playerInfo);
            this.m_replayBtns[0].push(playerInfo.AllReplayBtn);
            this.m_replayBtns[1].push(playerInfo.MyReplayBtn);
          }

          var _loop = function _loop(_i2) {
            var _loop3 = function _loop3(_j) {
              _this2.m_replayBtns[_i2][_j].node.on("click", function () {
                if (_this2.m_bottomBar.CanShowReplay) {
                  if (_this2.m_roundIndex[_i2][_j] != "") {
                    // 關掉百寶箱
                    _this2.m_controller.CloseDiscountView();

                    _this2.m_bottomBar.SendClickEvent(Define.BTN_CLICK_EVENT.BIG_WIN_REPLAY, _this2.m_listType + "-" + _i2 + "-" + (_j + 1));

                    _this2.m_bottomBar.PlayReplayStartAni(_this2.m_infoBet[_i2][_j], function () {
                      _this2.m_selectCb(_this2.m_roundIndex[_i2][_j]);
                    });

                    _this2.m_bottomBar.ReplayAndChangeDollarSign(_this2.m_dollarSignIndex[_i2][_j]);

                    _this2.m_bottomBar.ReplayAndChangeUnit(_this2.m_unitIndex[_i2][_j]);
                  }
                } else {
                  // 這裡要告訴玩家不能使用
                  MsgBox.getInstance().ShowMessageBox(Define.StringKey.TRIAL_REFUSED_REASON + "1", Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO);
                }
              });
            };

            for (var _j = 0; _j < _this2.m_replayBtns[_i2].length; _j++) {
              _loop3(_j);
            }
          };

          for (var _i2 = 0; _i2 < this.m_replayBtns.length; _i2++) {
            _loop(_i2);
          }

          var _loop2 = function _loop2(_i3) {
            _this2.m_typeBtn[_i3].node.on("click", function () {
              _this2.ChangeListType(_i3);
            });
          };

          for (var _i3 = 0; _i3 < this.m_typeBtn.length; _i3++) {
            _loop2(_i3);
          }

          this.ReqInfo();
          this.m_controller.ShowMask();
          initEndCb();
          this.OnRotation(isLandscape);
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          this.m_isLandscape = isLandscape;

          if (this.m_isLandscape) {
            this.node.getComponent(Animation).play("replayer_username_L");

            for (var i = 0; i < this.m_playerInfos.length; i++) {
              this.m_playerInfos[i].node.removeFromParent();
              this.m_contentNodeL.addChild(this.m_playerInfos[i].node);
            }
          } else {
            this.node.getComponent(Animation).play("replayer_username_S");

            for (var _i4 = 0; _i4 < this.m_playerInfos.length; _i4++) {
              this.m_playerInfos[_i4].node.removeFromParent();

              this.m_contentNodeS.addChild(this.m_playerInfos[_i4].node);
            }
          }

          for (var _i5 = 0; _i5 < this.m_playerInfos.length; _i5++) {
            this.m_playerInfos[_i5].OnRotation(this.m_isLandscape);
          }
        };

        _proto.ReqInfo = function ReqInfo() {
          if (this.m_infoReqFunc) {
            this.m_infoReqFunc();
          }
        };

        _proto.ChangeListType = function ChangeListType(listType) {
          if (listType != this.m_listType) {
            this.m_controller.ShowMask();
            this.m_listType = listType;

            for (var i = 0; i < this.m_playerInfos.length; i++) {
              this.m_playerInfos[i].PlayAnim(PLAYER_INFO_SHOW_ANI[listType]);
            }

            if (this.m_info) {
              this.SetInfo(this.m_info);
            }
          }
        };

        _proto.SetPlayButtonState = function SetPlayButtonState(idx1, idx2, isVisible) {
          this.m_replayBtns[idx1][idx2].node.active = isVisible;
        };

        _proto.SetInfo = function SetInfo(ack) {
          // 存入 logIndex
          for (var i = 0; i < this.m_roundIndex.length; i++) {
            for (var j = 0; j < this.m_roundIndex[i].length; j++) {
              if (ack.info.list && ack.info.list[INFO_ACK_TRANSFER[this.m_listType][i]] && ack.info.list[INFO_ACK_TRANSFER[this.m_listType][i]][j]) {
                this.m_roundIndex[i][j] = ack.info.list[INFO_ACK_TRANSFER[this.m_listType][i]][j].index;
                this.m_dollarSignIndex[i][j] = ack.info.list[INFO_ACK_TRANSFER[this.m_listType][i]][j].currsymbol;
                this.m_unitIndex[i][j] = ack.info.list[INFO_ACK_TRANSFER[this.m_listType][i]][j].currunit;
                this.m_currency[i][j] = ack.info.list[INFO_ACK_TRANSFER[this.m_listType][i]][j].currency;
                this.SetPlayButtonState(i, j, true);
              } else {
                this.m_roundIndex[i][j] = "";
                this.m_dollarSignIndex[i][j] = "";
                this.m_unitIndex[i][j] = 1;
                this.SetPlayButtonState(i, j, false);
              }
            }
          } // 存入基本資料


          for (var _i6 = 0; _i6 < SCROLL_COUNT; _i6++) {
            for (var _j2 = 0; _j2 < RANK_COUNT; _j2++) {
              if (ack.info.list && ack.info.list[INFO_ACK_TRANSFER[this.m_listType][_i6]] && ack.info.list[INFO_ACK_TRANSFER[this.m_listType][_i6]][_j2]) {
                var info = ack.info.list[INFO_ACK_TRANSFER[this.m_listType][_i6]][_j2];
                this.m_infoAid[_i6][_j2] = info.account;
                this.m_infoName[_i6][_j2] = info.name;
                this.m_infoBet[_i6][_j2] = info.bet;

                if (this.m_listType == LIST_TYPE.DRAGON) {
                  this.m_infoScore[_i6][_j2] = info.odd;
                  this.m_infoScoreAdjust[_i6][_j2] = info.odd;
                } else if (this.m_listType == LIST_TYPE.TIGER) {
                  this.m_infoScore[_i6][_j2] = info.win;
                  this.m_infoScoreAdjust[_i6][_j2] = info.adjustwin;
                }
              } else {
                // m_t_RankBox m_m_RankBox 這裡可以關欄位
                this.m_infoAid[_i6][_j2] = "-";
                this.m_infoName[_i6][_j2] = "-";
                this.m_infoBet[_i6][_j2] = 0;

                if (this.m_listType == LIST_TYPE.DRAGON) {
                  this.m_infoScore[_i6][_j2] = 0;
                  this.m_infoScoreAdjust[_i6][_j2] = 0;
                } else if (this.m_listType == LIST_TYPE.TIGER) {
                  this.m_infoScore[_i6][_j2] = 0;
                  this.m_infoScoreAdjust[_i6][_j2] = 0;
                }
              }
            }
          }

          for (var _i7 = 0; _i7 < RANK_COUNT; _i7++) {
            this.m_playerInfos[_i7].AllMemberAccount = this.m_infoAid[0][_i7];
            this.m_playerInfos[_i7].AllMemberNickName = this.m_infoName[0][_i7];

            if (this.m_infoScore[0][_i7] == 0) {
              this.m_playerInfos[_i7].AllRate = "-";
              this.m_playerInfos[_i7].AllRateAdjust = "-";
            } else {
              var dollarS = "";
              var dollarSA = "";

              if (this.m_listType == LIST_TYPE.TIGER) {
                if (this.m_currency[0][_i7] == 0) {
                  dollarS = Define.DollarSymbol;
                } else {
                  dollarS = this.m_dollarSignIndex[0][_i7];
                }

                dollarSA = Define.DollarSymbol;
              }

              this.m_playerInfos[_i7].AllRate = dollarS + Tools.FormatNumberThousands(this.m_infoScore[0][_i7], Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT);
              this.m_playerInfos[_i7].AllRateAdjust = dollarSA + Tools.FormatNumberThousands(this.m_infoScoreAdjust[0][_i7], Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT);
            }
          }

          for (var _i8 = 0; _i8 < RANK_COUNT; _i8++) {
            if (this.m_infoScore[1][_i8] == 0) {
              this.m_playerInfos[_i8].MyRate = "-";
            } else {
              var _dollarS = "";

              if (this.m_listType == LIST_TYPE.TIGER) {
                _dollarS = Define.DollarSymbol;
              }

              this.m_playerInfos[_i8].MyRate = _dollarS + Tools.FormatNumberThousands(this.m_infoScore[1][_i8], Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT);
            }
          }

          this.m_controller.HideMask();
        };

        _proto.Process = function Process(dt) {
          if (this.m_timer) {
            this.m_timer.Update(dt * 1000);

            if (this.m_timer.ToBool()) {
              this.ReqInfo();
              this.m_timer.Clear();
              this.m_timer.Start(UPDATE_INTERVAL * 1000);
            }
          }
        };

        _proto.OnRecvBigWin = function OnRecvBigWin(ack) {
          this.m_info = ack;
          this.SetInfo(this.m_info);
        };

        _proto.SetTxt = function SetTxt(spriteAtlas) {
          this.m_localeSpriteAtlas = spriteAtlas;
          this.m_rankTxt.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame("bigwin_rank02_" + LocaleStringManager.CurrLang);
          this.m_allRecordTxt.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame("bigwin_rank_" + LocaleStringManager.CurrLang);
          this.m_myRecordTxt.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame("bigwin_myrecord_" + LocaleStringManager.CurrLang);
          this.m_rateBtnTxt.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame("bigwin_odds02_" + LocaleStringManager.CurrLang);
          this.m_winBtnTxt.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame("bigwin_win_" + LocaleStringManager.CurrLang);
        };

        return BigWinReplay;
      }(ViewTemplate), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_rankTxt", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_allRecordTxt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_myRecordTxt", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_typeBtn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_rateBtnTxt", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_winBtnTxt", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_playerInfoPrefab", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_contentNodeL", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_contentNodeS", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BoneFollow.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Enum, sp, Vec2, isValid, UITransform, v3, instantiate, Component, v2;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      sp = module.sp;
      Vec2 = module.Vec2;
      isValid = module.isValid;
      UITransform = module.UITransform;
      v3 = module.v3;
      instantiate = module.instantiate;
      Component = module.Component;
      v2 = module.v2;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _class3;

      cclegacy._RF.push({}, "18f47v83XtI64h+ISwRgq3A", "BoneFollow", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu;
      var DefaultTemp = {
        "None": 0
      };
      var DefaultEnum = Enum(DefaultTemp);
      var PI = 3.1415927;
      var degRad = PI / 180;
      var radDeg = 180 / PI;

      function cosDeg(degrees) {
        return Math.cos(degrees * degRad);
      }

      function sinDeg(degrees) {
        return Math.sin(degrees * degRad);
      }

      function localToWorldRotation(a, b, c, d, localRotation) {
        var sin = sinDeg(localRotation),
            cos = cosDeg(localRotation);
        return Math.atan2(cos * c + sin * d, cos * a + sin * b) * radDeg;
      }

      var BoneFollow = exports('default', (_dec = ccclass('BoneFollow'), _dec2 = menu("Chiron/Spine/BoneFollow"), _dec3 = property({
        type: sp.Skeleton,
        tooltip: "目標 Spine 骨架"
      }), _dec4 = property({
        tooltip: "目標同步骨骼名稱"
      }), _dec5 = property({
        tooltip: "是否快取旋轉及縮放的上層資料，預設開啟。如果父層以上會有動態調整旋轉及縮放則需取消勾選此選項，或是維持啟用狀態但於需要的時刻呼叫 CacheUpdate 方法"
      }), _dec6 = property({
        tooltip: "是否同步位置"
      }), _dec7 = property({
        tooltip: "是否同步旋轉"
      }), _dec8 = property({
        tooltip: "是否將目標旋轉角度轉換成區域旋轉角度"
      }), _dec9 = property({
        tooltip: "是否同步縮放"
      }), _dec10 = property({
        tooltip: "是否將目標縮放量轉換成區域縮放量"
      }), _dec11 = property({
        visible: false
      }), _dec12 = property({
        type: DefaultEnum,
        visible: true,
        displayName: 'Bone'
      }), _dec13 = property({
        visible: true,
        displayName: "Preview"
      }), _dec14 = property({
        displayName: "Cache Ancestors",
        tooltip: "是否快取旋轉及縮放的上層資料，預設開啟。如果父層以上會有動態調整旋轉及縮放則需取消勾選此選項，或是維持啟用狀態但於需要的時刻呼叫 CacheUpdate 方法"
      }), _dec15 = property({
        displayName: "Scale Factor",
        tooltip: "額外本體大小縮放",
        visible: function visible() {
          return this.m_isFollowScale;
        }
      }), _dec16 = property({
        type: Vec2,
        displayName: "Position Offset",
        tooltip: "額外本體位置偏移",
        visible: function visible() {
          return this.m_isFollowPosition;
        }
      }), _dec17 = property({
        displayName: "Rotation Factor",
        tooltip: "額外本體旋轉",
        visible: function visible() {
          return this.m_isFollowRotation;
        }
      }), _dec(_class = _dec2(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BoneFollow, _Component);

        function BoneFollow() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.editor = void 0;

          _initializerDefineProperty(_this, "m_spineSkeleton", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_boneName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_isCacheData", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_isFollowPosition", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_isFollowRotation", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_isRotationLocalization", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_isFollowScale", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_isScaleLocalization", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "__boneIndex", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_boneIndex", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_preview", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_cacheAncestors", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scaleFactor", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_positionOffset", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rotationFactor", _descriptor15, _assertThisInitialized(_this));

          _this._oldAngle = 0;
          _this._oldScaleX = 1;
          _this._oldScaleY = 1;
          _this._isCached = false;
          _this._cachedRotation = 0;
          _this._cachedScaleX = 1;
          _this._cachedScaleY = 1;
          return _this;
        }

        var _proto = BoneFollow.prototype; // /**
        // * 要求重新計算快取資料
        // */

        _proto.__preload = function __preload() {};

        _proto.onLoad = function onLoad() {
          this._oldAngle = this.node.angle;
          this._oldScaleX = this.node.scale.x;
          this._oldScaleY = this.node.scale.y;
        };

        _proto.update = function update() {
          if (this.m_spineSkeleton && this.m_boneName != "" && (this.m_isFollowPosition || this.m_isFollowRotation || this.m_isFollowScale)) {
            var bone = null;

            if (bone = this.m_spineSkeleton.findBone(this.m_boneName)) {
              var angleFactor = 0;
              var scaleXFactor = 1;
              var scaleYFactor = 1; // // 檢查是否已經 cache 過資料

              if (!this.m_cacheAncestors || !this._isCached) {
                // // [還沒 cache 資料] => 計算旋轉及縮放資料
                var spineAngle = 0;
                var selfAngle = 0;
                var spineScaleX = 1;
                var spineScaleY = 1;
                var selfScaleX = 1;
                var selfScaleY = 1; // // 同步目標對象的旋轉及縮放資料

                var parent = this.m_spineSkeleton.node;

                while (parent) {
                  spineScaleX *= parent.scale.x;
                  spineScaleY *= parent.scale.y;
                  spineAngle += parent.angle;
                  parent = parent.parent;
                } // // 自己的旋轉及縮放資料


                parent = this.node.parent;

                while (parent) {
                  selfScaleX *= parent.scale.x;
                  selfScaleY *= parent.scale.y;
                  selfAngle -= parent.angle;
                  parent = parent.parent;
                } // // 計算轉換成自己的旋轉及縮放


                this._cachedRotation = spineAngle + selfAngle;
                this._cachedScaleX = spineScaleX / selfScaleX;
                this._cachedScaleY = spineScaleY / selfScaleY; // // 標註 cache 完成

                this._isCached = true;
              } // // 取出旋轉及縮放資料


              angleFactor = this.m_isRotationLocalization ? this._cachedRotation : this._oldAngle;
              scaleXFactor = this.m_isScaleLocalization ? this._cachedScaleX : this._oldScaleX;
              scaleYFactor = this.m_isScaleLocalization ? this._cachedScaleY : this._oldScaleY; // // 檢查是否啟用旋轉同步

              if (this.m_isFollowRotation) {
                // // [啟用旋轉同步]
                var parentBone = bone.parent;
                var arotation = bone.arotation;
                this.node.angle = angleFactor + (!isValid(parentBone) ? bone.arotation : localToWorldRotation(parentBone.a, parentBone.b, parentBone.c, parentBone.d, arotation)) + this.m_rotationFactor;
              } // // 檢查是否啟用縮放同步


              if (this.m_isFollowScale) {
                // // [啟用縮放同步]
                this.node.setScale(scaleXFactor * bone.getWorldScaleX() * this.m_scaleFactor.x, scaleYFactor * bone.getWorldScaleY() * this.m_scaleFactor.y);
              } // // 檢查是否啟用位置同步


              if (this.m_isFollowPosition) {
                // // [啟用位置同步]
                var worldPos = this.m_spineSkeleton.node.getComponent(UITransform).convertToWorldSpaceAR(v3(bone.worldX, bone.worldY, 0));
                var localPos = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(worldPos); // // this.node.x = localPos.x;
                // // this.node.y = localPos.y;
                // // this.node.x += this.m_positionOffset.x;
                // // this.node.y += this.m_positionOffset.y;

                this.node.setPosition(v3(localPos.x + this.m_positionOffset.x, localPos.y + this.m_positionOffset.y));
              }
            }
          }
        };

        _proto.onDestroy = function onDestroy() {
          this._oldAngle = null;
          this._oldScaleX = null;
          this._oldScaleY = null;
          this._isCached = null;
          this._cachedRotation = null;
          this._cachedScaleX = null;
          this._cachedScaleY = null;
          this.m_spineSkeleton = null;
          this.m_boneName = null;
          this.m_cacheAncestors = null;
          this.m_isFollowPosition = null;
          this.m_isFollowRotation = null;
          this.m_isRotationLocalization = null;
          this.m_isFollowScale = null;
          this.m_isScaleLocalization = null;
        } // /**
        // * 要求重新計算快取資料
        // */
        ;

        _proto.CacheUpdate = function CacheUpdate() {
          this._isCached = false;
        } // /**
        // * 刷新編輯器屬性面板
        // */
        ;

        _proto._refreshInspector = function _refreshInspector() {
          this._updateBoneEnum(); //沒這屬性
          //Editor.Utils.refreshSelectedInspector( 'node', this.node.uuid );

        } // /**
        // * 取得骨骼資料並組成列舉物件
        // */
        ;

        _proto._boneEnum = function _boneEnum() {
          var boneEnum = instantiate(DefaultTemp);
          if (this.m_spineSkeleton) ;
          return boneEnum;
        } // /**
        // * 更新面板骨骼列舉屬性欄位
        // */
        ;

        _proto._updateBoneEnum = function _updateBoneEnum() {//目前沒這屬性

          /*let boneEnum = this._boneEnum();
          setEnumAttr( this, '_boneIndex', boneEnum || DefaultEnum );*/
        };

        return BoneFollow;
      }(Component), _class3.BoneFollow = "BoneFollow", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_spineSkeleton", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_boneName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_isCacheData", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_isFollowPosition", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_isFollowRotation", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_isRotationLocalization", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_isFollowScale", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_isScaleLocalization", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "__boneIndex", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "_boneIndex", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return DefaultEnum.None;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_preview", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_cacheAncestors", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_scaleFactor", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v2(1, 1);
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_positionOffset", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v2(0, 0);
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_rotationFactor", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // let DefaultTemp = { "None": 0 };
      // let DefaultEnum = Enum( DefaultTemp );
      //
      // function setEnumAttr( obj, propName, enumDef )
      // {
      //     let enumList = Enum.getList( enumDef ).reverse();
      //     cc.Class.Attr.setClassAttr( obj, propName, 'type', 'Enum' );
      //     cc.Class.Attr.setClassAttr( obj, propName, 'enumList', enumList );
      // }
      //
      // const PI = 3.1415927;
      // const degRad = PI / 180;
      // const radDeg = 180 / PI
      //
      // function cosDeg( degrees )
      // {
      //     return Math.cos( degrees * degRad );
      // };
      //
      // function sinDeg( degrees )
      // {
      //     return Math.sin( degrees * degRad );
      // };
      //
      // function localToWorldRotation( a, b, c, d, localRotation )
      // {
      //     let sin = sinDeg( localRotation ), cos = cosDeg( localRotation );
      //     return Math.atan2( cos * c + sin * d, cos * a + sin * b ) * radDeg;
      // }
      //
      // const { ccclass, property, menu } = _decorator;
      //
      // @ccclass
      // @menu( "Chiron/Spine/BoneFollow" )
      // export default class BoneFollow extends Component
      // {
      //     editor: {
      //         executeInEditMode: true,
      //         disallowMultiple: true
      //     };
      //     public static BoneFollow: string = "BoneFollow";
      //
      //     @property( {
      //         type: sp.Skeleton,
      //         tooltip: "目標 Spine 骨架"
      //     } )
      //     private m_spineSkeleton: sp.Skeleton = null;
      //
      //     @property( {
      //         tooltip: "目標同步骨骼名稱"
      //     } )
      //     private m_boneName: string = "";
      //
      //     @property( {
      //         tooltip: "是否快取旋轉及縮放的上層資料，預設開啟。如果父層以上會有動態調整旋轉及縮放則需取消勾選此選項，或是維持啟用狀態但於需要的時刻呼叫 CacheUpdate 方法"
      //     } )
      //     private m_isCacheData: boolean = false;
      //
      //     @property( {
      //         tooltip: "是否同步位置"
      //     } )
      //     private m_isFollowPosition: boolean = false;
      //
      //     @property( {
      //         tooltip: "是否同步旋轉"
      //     } )
      //     private m_isFollowRotation: boolean = false;
      //
      //     @property( {
      //         tooltip: "是否將目標旋轉角度轉換成區域旋轉角度"
      //     } )
      //     private m_isRotationLocalization: boolean = false;
      //
      //     @property( {
      //         tooltip: "是否同步縮放"
      //     } )
      //     private m_isFollowScale: boolean = false;
      //
      //     @property( {
      //         tooltip: "是否將目標縮放量轉換成區域縮放量"
      //     } )
      //     private m_isScaleLocalization: boolean = false;
      //
      //     @property( {
      //         visible: false
      //     } )
      //     private __boneIndex: number = 0;
      //
      //     @property( {
      //         type: DefaultEnum,
      //         visible: true,
      //         displayName: 'Bone'
      //     } )
      //     private _boneIndex: number = DefaultEnum.None;
      //
      //     @property( {
      //         visible: true,
      //         displayName: "Preview"
      //     } )
      //     private m_preview: boolean = true;
      //
      //     @property( {
      //         displayName: "Cache Ancestors",
      //         tooltip: "是否快取旋轉及縮放的上層資料，預設開啟。如果父層以上會有動態調整旋轉及縮放則需取消勾選此選項，或是維持啟用狀態但於需要的時刻呼叫 CacheUpdate 方法"
      //     } )
      //     private m_cacheAncestors: boolean = true;
      //
      //     @property( {
      //         displayName: "Scale Factor",
      //         tooltip: "額外本體大小縮放",
      //         visible: function ()
      //         {
      //             return this.m_isFollowScale;
      //         }
      //     } )
      //     private m_scaleFactor: Vec2 = v2( 1, 1 );
      //
      //     @property( {
      //         type: cc.ValueType,
      //         displayName: "Position Offset",
      //         tooltip: "額外本體位置偏移",
      //         visible: function ()
      //         {
      //             return this.m_isFollowPosition;
      //         }
      //     } )
      //     private m_positionOffset: Vec2 = v2( 0, 0 );
      //
      //     @property( {
      //         displayName: "Rotation Factor",
      //         tooltip: "額外本體旋轉",
      //         visible: function ()
      //         {
      //             return this.m_isFollowRotation;
      //         }
      //     } )
      //     private m_rotationFactor: number = 0;
      //
      //     private _oldAngle: number = 0;
      //     private _oldScaleX: number = 1;
      //     private _oldScaleY: number = 1;
      //     private _isCached: boolean = false;
      //     private _cachedRotation: number = 0;
      //     private _cachedScaleX: number = 1;
      //     private _cachedScaleY: number = 1;
      //
      //     /**
      //      * 要求重新計算快取資料
      //      */
      //     __preload()
      //     {
      //         if ( CC_EDITOR && this.m_spineSkeleton )
      //         {
      //             let enumList = this._boneEnum();
      //             let boneKeys = Object.keys( enumList ).reverse();
      //             let indexSelectBoneName = boneKeys[ this.__boneIndex ];
      //             if ( indexSelectBoneName != this.m_boneName )
      //             {
      //                 for ( let i = 0; i < boneKeys.length; i++ )
      //                 {
      //                     let eachBoneName = boneKeys[ i ];
      //                     if ( eachBoneName == this.m_boneName )
      //                     {
      //                         warn( "BoneFollowJS detects node (" + this.node.name + ") index selected (" + indexSelectBoneName + ") is not matched with bone name (" + this.m_boneName + "). Force syncing processed." );
      //                         this._boneIndex = i;
      //                         break;
      //                     }
      //                 }
      //             }
      //             this._refreshInspector();
      //         }
      //     }
      //
      //     onLoad()
      //     {
      //         if ( CC_EDITOR && !this.m_preview ) return;
      //         this._oldAngle = this.node.angle;
      //         this._oldScaleX = this.node.scaleX;
      //         this._oldScaleY = this.node.scaleY;
      //     }
      //
      //     update()
      //     {
      //         if ( CC_EDITOR && !this.m_preview ) return;
      //
      //         if ( this.m_spineSkeleton && this.m_boneName != "" && ( this.m_isFollowPosition || this.m_isFollowRotation || this.m_isFollowScale ) )
      //         {
      //             let bone = null;
      //             if ( bone = this.m_spineSkeleton.findBone( this.m_boneName ) )
      //             {
      //                 let angleFactor = 0;
      //                 let scaleXFactor = 1;
      //                 let scaleYFactor = 1;
      //
      //                 // 檢查是否已經 cache 過資料
      //                 if ( !this.m_cacheAncestors || !this._isCached )
      //                 {
      //                     // [還沒 cache 資料] => 計算旋轉及縮放資料
      //                     let spineAngle = 0;
      //                     let selfAngle = 0;
      //
      //                     let spineScaleX = 1;
      //                     let spineScaleY = 1;
      //                     let selfScaleX = 1;
      //                     let selfScaleY = 1;
      //
      //                     // 同步目標對象的旋轉及縮放資料
      //                     let parent = this.m_spineSkeleton.node;
      //                     while ( parent )
      //                     {
      //                         spineScaleX *= parent.scaleX;
      //                         spineScaleY *= parent.scaleY;
      //                         spineAngle += parent.angle;
      //                         parent = parent.parent;
      //                     }
      //
      //                     // 自己的旋轉及縮放資料
      //                     parent = this.node.parent;
      //                     while ( parent )
      //                     {
      //                         selfScaleX *= parent.scaleX;
      //                         selfScaleY *= parent.scaleY;
      //                         selfAngle -= parent.angle;
      //                         parent = parent.parent;
      //                     }
      //
      //                     // 計算轉換成自己的旋轉及縮放
      //                     this._cachedRotation = spineAngle + selfAngle;
      //                     this._cachedScaleX = spineScaleX / selfScaleX;
      //                     this._cachedScaleY = spineScaleY / selfScaleY;
      //
      //                     // 標註 cache 完成
      //                     this._isCached = true;
      //                 }
      //
      //                 // 取出旋轉及縮放資料
      //                 angleFactor = this.m_isRotationLocalization ? this._cachedRotation : this._oldAngle;
      //                 scaleXFactor = this.m_isScaleLocalization ? this._cachedScaleX : this._oldScaleX;
      //                 scaleYFactor = this.m_isScaleLocalization ? this._cachedScaleY : this._oldScaleY;
      //
      //                 // 檢查是否啟用旋轉同步
      //                 if ( this.m_isFollowRotation )
      //                 {
      //                     // [啟用旋轉同步]
      //                     let parentBone = bone.parent;
      //                     let arotation = CC_JSB ? bone.appliedRotation : bone.arotation;
      //                     this.node.angle = angleFactor +
      //                         (
      //                             !cc.isValid( parentBone ) ?
      //                                 bone.arotation :
      //                                 localToWorldRotation( parentBone.a, parentBone.b, parentBone.c, parentBone.d, arotation )
      //                         )
      //                         + this.m_rotationFactor;
      //                 }
      //
      //                 // 檢查是否啟用縮放同步
      //                 if ( this.m_isFollowScale )
      //                 {
      //                     // [啟用縮放同步]
      //                     this.node.scaleX = scaleXFactor * bone.getWorldScaleX() * this.m_scaleFactor.x;
      //                     this.node.scaleY = scaleYFactor * bone.getWorldScaleY() * this.m_scaleFactor.y;
      //                 }
      //
      //                 // 檢查是否啟用位置同步
      //                 if ( this.m_isFollowPosition )
      //                 {
      //                     // [啟用位置同步]
      //                     let worldPos = this.m_spineSkeleton.node.convertToWorldSpaceAR( v2( bone.worldX, bone.worldY ) );
      //                     let localPos = this.node.parent.convertToNodeSpaceAR( worldPos );
      //                     // this.node.x = localPos.x;
      //                     // this.node.y = localPos.y;
      //                     // this.node.x += this.m_positionOffset.x;
      //                     // this.node.y += this.m_positionOffset.y;
      //                     this.node.setPosition( v3( localPos.x + this.m_positionOffset.x, localPos.y + this.m_positionOffset.y ) );
      //                 }
      //             }
      //         }
      //     }
      //
      //     onDestroy()
      //     {
      //         this._oldAngle = null;
      //         this._oldScaleX = null;
      //         this._oldScaleY = null;
      //         this._isCached = null;
      //         this._cachedRotation = null;
      //         this._cachedScaleX = null;
      //         this._cachedScaleY = null;
      //         this.m_spineSkeleton = null;
      //         this.m_boneName = null;
      //         this.m_cacheAncestors = null;
      //         this.m_isFollowPosition = null;
      //         this.m_isFollowRotation = null;
      //         this.m_isRotationLocalization = null;
      //         this.m_isFollowScale = null;
      //         this.m_isScaleLocalization = null;
      //     }
      //
      //     /**
      //      * 要求重新計算快取資料
      //      */
      //     CacheUpdate()
      //     {
      //         this._isCached = false;
      //     }
      //
      //     /**
      //      * 刷新編輯器屬性面板
      //      */
      //     _refreshInspector()
      //     {
      //         this._updateBoneEnum();
      //         Editor.Utils.refreshSelectedInspector( 'node', this.node.uuid );
      //     }
      //
      //     /**
      //      * 取得骨骼資料並組成列舉物件
      //      */
      //     _boneEnum()
      //     {
      //         let boneEnum = instantiate( DefaultTemp );
      //
      //         if ( this.m_spineSkeleton )
      //         {
      //             boneEnum = {};
      //
      //             let bones = this.m_spineSkeleton.skeletonData.skeletonJson.bones;
      //             for ( let i = bones.length - 1; i >= 0; i-- )
      //             {
      //                 let eachBone = bones[ i ];
      //                 boneEnum[ eachBone.name ] = i;
      //             }
      //         }
      //
      //         return boneEnum;
      //     }
      //
      //     /**
      //      * 更新面板骨骼列舉屬性欄位
      //      */
      //     _updateBoneEnum()
      //     {
      //         let boneEnum = this._boneEnum();
      //         setEnumAttr( this, '_boneIndex', boneEnum || DefaultEnum );
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BottombarManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AutoPlaySetting.ts', './Tools.ts', './SoundManager.ts', './MsgBox.ts', './Define.ts', './LocalStorageManager.ts', './LocaleStringManager.ts', './ConnectionManager.ts', './TimeBool.ts', './LifeSocket.ts', './FloatView.ts', './CurrencyChange.ts', './Wallet.ts', './EffectWin.ts', './AppManager.ts', './NotificationManager.ts', './VolatilityManager.ts', './VipManager.ts', './EnvironmentConfig.ts', './ConnectionSpeed.ts', './JPManager.ts', './MHBManager.ts', './CommonTextManager.ts', './PlayReadyComponent.ts', './CommonWebPage.ts', './DailyMissionManager.ts', './GaiaManager.ts', './BuyBonusManager.ts', './IframeCommandManager.ts', './BuffManager.ts', './GiftCodeManager.ts', './BackpackManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, _createClass, cclegacy, v3, size, v2, color, _decorator, Prefab, Node, SpriteAtlas, Sprite, SpriteFrame, Animation, Button, Label, RichText, WebView, UIOpacity, Layout, instantiate, sys, error, UITransform, tween, view, screen, misc, Widget, EventTouch, UIRenderer, log, Vec2, Size, TweenSystem, Vec3, assetManager, js, Component, AutoPlaySetting, Tools, SoundManager, MsgBox, Define, LocalStorageManager, LocaleStringManager, ConnectionManager, TimeBool, LifeSocket, FloatView, CurrencyChange, walletManger, currencyNameOrder, walletInfo, EffectWin, AppManager, NotificationManager, VolatilityManager, VipManager, EnvironmentConfig, ConnectionSpeed, JPManager, MHBManager, CommonTextManager, PlayReadyComponent, CommonWebPage, missionManager, gaiaManager, buyBonusManager, iframeCommandManager, BuffManager, giftCodeManager, backpackManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      v3 = module.v3;
      size = module.size;
      v2 = module.v2;
      color = module.color;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      SpriteAtlas = module.SpriteAtlas;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      Animation = module.Animation;
      Button = module.Button;
      Label = module.Label;
      RichText = module.RichText;
      WebView = module.WebView;
      UIOpacity = module.UIOpacity;
      Layout = module.Layout;
      instantiate = module.instantiate;
      sys = module.sys;
      error = module.error;
      UITransform = module.UITransform;
      tween = module.tween;
      view = module.view;
      screen = module.screen;
      misc = module.misc;
      Widget = module.Widget;
      EventTouch = module.EventTouch;
      UIRenderer = module.UIRenderer;
      log = module.log;
      Vec2 = module.Vec2;
      Size = module.Size;
      TweenSystem = module.TweenSystem;
      Vec3 = module.Vec3;
      assetManager = module.assetManager;
      js = module.js;
      Component = module.Component;
    }, function (module) {
      AutoPlaySetting = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocalStorageManager = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      ConnectionManager = module.default;
    }, function (module) {
      TimeBool = module.default;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      FloatView = module.default;
    }, function (module) {
      CurrencyChange = module.default;
    }, function (module) {
      walletManger = module.walletManger;
      currencyNameOrder = module.currencyNameOrder;
      walletInfo = module.walletInfo;
    }, function (module) {
      EffectWin = module.default;
    }, function (module) {
      AppManager = module.default;
    }, function (module) {
      NotificationManager = module.default;
    }, function (module) {
      VolatilityManager = module.default;
    }, function (module) {
      VipManager = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      ConnectionSpeed = module.default;
    }, function (module) {
      JPManager = module.default;
    }, function (module) {
      MHBManager = module.default;
    }, function (module) {
      CommonTextManager = module.default;
    }, function (module) {
      PlayReadyComponent = module.default;
    }, function (module) {
      CommonWebPage = module.default;
    }, function (module) {
      missionManager = module.missionManager;
    }, function (module) {
      gaiaManager = module.gaiaManager;
    }, function (module) {
      buyBonusManager = module.buyBonusManager;
    }, function (module) {
      iframeCommandManager = module.iframeCommandManager;
    }, function (module) {
      BuffManager = module.default;
    }, function (module) {
      giftCodeManager = module.giftCodeManager;
    }, function (module) {
      backpackManager = module.backpackManager;
    }],
    execute: function () {
      exports('BarManager', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _dec46, _dec47, _dec48, _dec49, _dec50, _dec51, _dec52, _dec53, _dec54, _dec55, _dec56, _dec57, _dec58, _dec59, _dec60, _dec61, _dec62, _dec63, _dec64, _dec65, _dec66, _dec67, _dec68, _dec69, _dec70, _dec71, _dec72, _dec73, _dec74, _dec75, _dec76, _dec77, _dec78, _dec79, _dec80, _dec81, _dec82, _dec83, _dec84, _dec85, _dec86, _dec87, _dec88, _dec89, _dec90, _dec91, _dec92, _dec93, _dec94, _dec95, _dec96, _dec97, _dec98, _dec99, _dec100, _dec101, _dec102, _dec103, _dec104, _dec105, _dec106, _dec107, _dec108, _dec109, _dec110, _dec111, _dec112, _dec113, _dec114, _dec115, _dec116, _dec117, _dec118, _dec119, _dec120, _dec121, _dec122, _dec123, _dec124, _dec125, _dec126, _dec127, _dec128, _dec129, _dec130, _dec131, _dec132, _dec133, _dec134, _dec135, _dec136, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _descriptor41, _descriptor42, _descriptor43, _descriptor44, _descriptor45, _descriptor46, _descriptor47, _descriptor48, _descriptor49, _descriptor50, _descriptor51, _descriptor52, _descriptor53, _descriptor54, _descriptor55, _descriptor56, _descriptor57, _descriptor58, _descriptor59, _descriptor60, _descriptor61, _descriptor62, _descriptor63, _descriptor64, _descriptor65, _descriptor66, _descriptor67, _descriptor68, _descriptor69, _descriptor70, _descriptor71, _descriptor72, _descriptor73, _descriptor74, _descriptor75, _descriptor76, _descriptor77, _descriptor78, _descriptor79, _descriptor80, _descriptor81, _descriptor82, _descriptor83, _descriptor84, _descriptor85, _descriptor86, _descriptor87, _descriptor88, _descriptor89, _descriptor90, _descriptor91, _descriptor92, _descriptor93, _descriptor94, _descriptor95, _descriptor96, _descriptor97, _descriptor98, _descriptor99, _descriptor100, _descriptor101, _descriptor102, _descriptor103, _descriptor104, _descriptor105, _descriptor106, _descriptor107, _descriptor108, _descriptor109, _descriptor110, _descriptor111, _descriptor112, _descriptor113, _descriptor114, _descriptor115, _descriptor116, _descriptor117, _descriptor118, _descriptor119, _descriptor120, _descriptor121, _descriptor122, _descriptor123, _descriptor124, _descriptor125, _descriptor126, _descriptor127, _descriptor128, _descriptor129, _descriptor130, _descriptor131, _descriptor132, _descriptor133, _descriptor134, _descriptor135, _descriptor136, _class3;

      cclegacy._RF.push({}, "2ff17i2NCFHlLYdJZ7jCoAi", "BottombarManager", undefined);

      var LocaleImgName = {
        AutoPlay: "BottomBar_AutoSpin",
        AutoHint0: "BottomBar_Tap",
        AutoHint1: "BottomBar_Hold",
        Bet: "BottomBar_Bet",
        Spin: "BottomBar_Spin",
        SpinStop: "BottomBar_Stop",
        AutoStop: "BottomBar_AutoStop",
        AutoPlayTittle: "AutoPlay_Title",
        ItemBet: "",
        FreeSpins_01: "FreeSpins_01",
        Balance: "",
        SpinStop_b: "",
        Win: "",
        HostingAutoStop: "",
        FeaturesBtn: "",
        TrialBtn: "",
        TrialCoin: "",
        TrialBet: "",
        FeaturesDemo_btn: "",
        FeaturesDemo_Win: "",
        FeaturesDemo_bet: "",
        FeaturesDemoMode: "",
        FeaturesDemoReal: "",
        FeaturesDemoPlay: "",
        FeaturesGoRealDes: "",
        FeaturesMenuDes: "",
        DemoMode: "",
        ReplayStartSprite: "",
        ReplayEndSprite: "",
        ReplayMode: "",
        ReplayBalanceSprite: "",
        ReplayBetSprite: "",
        ReplayWinSprite: "",
        VipBetLock: "img_vipbet_ unlock",
        PrizeUpBtnTxt: "Btn_Bonus"
      };
      var LocaleImgName_TaDa = {
        AutoPlay: "BottomBar_AutoSpin",
        AutoHint0: "BottomBar_Tap",
        AutoHint1: "BottomBar_Hold",
        Bet: "BottomBar_Bet",
        Spin: "BottomBar_Spin",
        SpinStop: "BottomBar_Stop",
        AutoStop: "BottomBar_AutoStop",
        AutoPlayTittle: "AutoPlay_Title",
        ItemBet: "",
        FreeSpins_01: "FreeSpins_01",
        Balance: "",
        SpinStop_b: "",
        Win: "",
        HostingAutoStop: "",
        FeaturesBtn: "",
        TrialBtn: "",
        TrialCoin: "",
        TrialBet: "",
        FeaturesDemo_btn: "",
        FeaturesDemo_Win: "",
        FeaturesDemo_bet: "",
        FeaturesDemoMode: "",
        FeaturesDemoReal: "",
        FeaturesDemoPlay: "",
        FeaturesGoRealDes: "",
        FeaturesMenuDes: "",
        DemoMode: "",
        ReplayStartSprite: "",
        ReplayEndSprite: "",
        ReplayMode: "",
        ReplayBalanceSprite: "",
        ReplayBetSprite: "",
        ReplayWinSprite: "",
        VipBetLock: ""
      };
      var BarAnimName = {
        Landscape: "Clip_BottomBar_ScreenLandscape",
        Portrait: "Clip_BottomBar_ScreenPortrait",
        Portrait_Small: "Clip_BottomBar_ScreenPortrait",
        Portrait_Low: "Clip_BottomBar_ScreenPortrait"
      };
      var BarBodyAnimName = {
        Landscape: "Clip_BottomBar_BodyLandscape",
        Portrait: "Clip_BottomBar_BodyPortrait",
        APP_Landscape: "Clip_BottomBar_BodyLandscape_App",
        APP_Portrait: "Clip_BottomBar_BodyPortrait_App"
      };
      var SCALE_TIME = exports('SCALE_TIME', 0.05);
      var BET_BTN_POS = v3(0, 7.5);
      var BET_VIEW_HEIGHT_DIF = 14;
      var NoMultiCurrencyFontSize = 22; //30

      var NoMultiCurrencyFontSize_TaDa = 22;
      var Million = 1000000;
      var Kilo = 1000;
      var BUTTON_STATE = exports('BUTTON_STATE', {
        SPIN: 0,
        STOP: 1,
        AUTO: 2,
        STOP_AUTO: 3,
        STOP_AUTO_COUNT: 4
      });
      var CLICK_TIME = 10;
      var SPIN_CLICK_TIME = 20;
      var CLICK_SECONDS = 5000;
      var SpinHoldIntervalTime = 0.3;
      var BetLayoutSize = size(94, 340); //cc.size( 136, 310 );

      var BetLayoutSize_TaDa = size(110, 350);
      var BetViewDiff = 14;
      var BetType = [{
        GameId: Define.GAME_ID.MC,
        type: 5
      }, {
        GameId: Define.GAME_ID.SR,
        type: 20
      }];

      var FackEventTarget = /*#__PURE__*/function () {
        function FackEventTarget(name) {
          this.name = "";
          this.name = name;
        }

        var _proto = FackEventTarget.prototype;

        _proto.getName = function getName() {
          return this.name;
        };

        return FackEventTarget;
      }();

      var BigFavorUser = exports('BigFavorUser', {
        BigWin: 0,
        MayLike: 1
      });
      var BarManager;
      /**兩個遮罩的高度 */

      (function (_BarManager) {})(BarManager || (BarManager = exports('BarManager', {})));

      var MaskHeightSetting = {
        // old
        // 2: [ 186 ],
        // 3: [ 124 ],
        // 4: [ 310, 310, 62 ],
        // 5: [ 310, 310 ],
        // 7: [ 310, 186 ]
        // new
        2: [204],
        3: [136],
        4: [340, 340, 68],
        5: [340, 340],
        7: [340, 204]
      };
      var LockHeight = {
        2: v2(68, -60),
        3: v2(68, -24),
        4: v2(136, -110),
        5: v2(136, -110),
        7: v2(136, -60)
      };
      /**各api id的vip設定，沒有則當作沒限制*/

      var BetLockByApiId = {
        // "100": [ 4, 7 ],
        "105": [4, 7] // "106": [ 4, 7 ],
        // "107": [ 4, 7 ],

      };
      var MCBetLockByApiId = {
        // "100": [ 2, 3 ],
        "105": [2, 3] // "106": [ 2, 3 ],
        // "107": [ 2, 3 ],

      };
      /**偏移設定 */

      var DiffSettingByApiId = {
        100: [{
          VIP: 0,
          CN: 3,
          Coin: 400,
          Diff: 1
        }, {
          VIP: 0,
          CN: 8,
          Coin: 53,
          Diff: 1
        }],
        105: [{
          VIP: 0,
          CN: 3,
          Coin: 400,
          Diff: 1
        }, {
          VIP: 0,
          CN: 8,
          Coin: 53,
          Diff: 1
        }],
        106: [{
          VIP: 0,
          CN: 3,
          Coin: 400,
          Diff: 1
        }, {
          VIP: 0,
          CN: 8,
          Coin: 53,
          Diff: 1
        }]
      };
      var CoinImgName = {
        Silver: "app_icon_coin_silver",
        Gold: "app_icon_coin",
        40: "app_icon_coin_HI",
        41: "app_icon_coin_BN"
      };
      /**
       * [key:Api ID]:{
       *     CurrencyNumber:true,
       *     ...
       * }
       */

      var CanChange = {
        200: {
          40: true,
          41: true
        },
        201: {
          40: true,
          41: true
        }
      };
      /**
       * [key:CurrencyNumber]:除數
       */

      var ChangeDivisor = {
        40: 115,
        41: 100
      };
      var SilverCurrencyNumber = 43;
      var DiffStorageKey = "DiffInfo:AID:";
      var CustImgName = {
        Bg_Portrait: "BottomBar_Bg_Portrait",
        Bg_Landscape: "BottomBar_Bg_Landscape",
        Side_Btn: "BottomBar_Btn_S_02"
      };
      var BtnColor = {
        Dark: color(135, 126, 98),
        Light: color(255, 255, 255)
      };
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BottombarManager = exports('default', (_dec = property({
        type: Prefab,
        tooltip: "共用說明介面"
      }), _dec2 = property({
        type: Prefab,
        tooltip: "india共用說明介面"
      }), _dec3 = property({
        type: Node,
        tooltip: "Common Webview父節點"
      }), _dec4 = property({
        type: Prefab,
        tooltip: "共用開網頁"
      }), _dec5 = property({
        type: SpriteAtlas,
        tooltip: "地BAR合圖"
      }), _dec6 = property({
        type: Node,
        tooltip: "地BAR主體"
      }), _dec7 = property({
        type: Node,
        tooltip: "地BAR背景"
      }), _dec8 = property({
        type: Node,
        tooltip: "客製地BAR背景根節點"
      }), _dec9 = property({
        type: Sprite,
        tooltip: "客製地BAR背景"
      }), _dec10 = property({
        type: Sprite,
        tooltip: "金幣圖示"
      }), _dec11 = property({
        type: SpriteAtlas,
        tooltip: "金幣合圖"
      }), _dec12 = property({
        type: SpriteFrame,
        tooltip: "JILI logo"
      }), _dec13 = property({
        type: SpriteFrame,
        tooltip: "印度logo"
      }), _dec14 = property({
        type: SpriteFrame,
        tooltip: "TaDalogo"
      }), _dec15 = property({
        type: SpriteFrame,
        tooltip: "UFAlogo"
      }), _dec16 = property({
        type: SpriteFrame,
        tooltip: "JILI STAR logo"
      }), _dec17 = property({
        type: SpriteFrame,
        tooltip: "品牌Logo，依照Tools的BrandLogo排序"
      }), _dec18 = property({
        type: Animation,
        tooltip: "連線提示動畫"
      }), _dec19 = property({
        type: Sprite,
        tooltip: "連線狀態"
      }), _dec20 = property({
        type: SpriteAtlas,
        tooltip: "連線狀態"
      }), _dec21 = property(Button), _dec22 = property(Button), _dec23 = property(Button), _dec24 = property(Button), _dec25 = property(Button), _dec26 = property(Button), _dec27 = property({
        type: SpriteFrame,
        tooltip: "快停按鈕圖示"
      }), _dec28 = property(Button), _dec29 = property(Button), _dec30 = property(Sprite), _dec31 = property(Sprite), _dec32 = property(SpriteFrame), _dec33 = property(Button), _dec34 = property({
        type: Node,
        tooltip: "TadaApp押注紐總開關"
      }), _dec35 = property(Button), _dec36 = property(Button), _dec37 = property(Button), _dec38 = property(Button), _dec39 = property(Button), _dec40 = property(Sprite), _dec41 = property(Button), _dec42 = property(Button), _dec43 = property(Button), _dec44 = property({
        type: Button,
        tooltip: "遊戲說明鈕 for BMM"
      }), _dec45 = property({
        type: Button,
        tooltip: "返回大廳按鈕"
      }), _dec46 = property({
        type: Button,
        tooltip: "Gift Code"
      }), _dec47 = property(Button), _dec48 = property(Label), _dec49 = property(RichText), _dec50 = property(RichText), _dec51 = property(RichText), _dec52 = property(RichText), _dec53 = property(RichText), _dec54 = property(RichText), _dec55 = property(Label), _dec56 = property(Label), _dec57 = property({
        type: Label,
        tooltip: "時間"
      }), _dec58 = property({
        type: Node,
        tooltip: "時間Layout節點"
      }), _dec59 = property({
        type: Label,
        tooltip: "遊戲時數"
      }), _dec60 = property({
        type: Node,
        tooltip: "遊戲時數Layout節點"
      }), _dec61 = property({
        type: Label,
        tooltip: "平台版號"
      }), _dec62 = property(Node), _dec63 = property(Node), _dec64 = property(Node), _dec65 = property({
        type: Node,
        tooltip: "押注根結點"
      }), _dec66 = property(Node), _dec67 = property({
        type: Node,
        tooltip: "額外bet"
      }), _dec68 = property(Node), _dec69 = property(Node), _dec70 = property({
        type: Button,
        tooltip: "音效開關鈕"
      }), _dec71 = property({
        type: SpriteFrame,
        tooltip: "音效開關鈕:0開1關"
      }), _dec72 = property(Node), _dec73 = property(Node), _dec74 = property(Node), _dec75 = property(WebView), _dec76 = property(Button), _dec77 = property({
        type: Node,
        tooltip: "WebView的天bar"
      }), _dec78 = property(SpriteAtlas), _dec79 = property(SpriteFrame), _dec80 = property(SpriteFrame), _dec81 = property({
        type: SpriteAtlas,
        tooltip: "街機合圖，可不放"
      }), _dec82 = property({
        type: Sprite,
        tooltip: "Logo"
      }), _dec83 = property({
        type: Sprite,
        tooltip: "Logo(stop spin)"
      }), _dec84 = property({
        type: Sprite,
        tooltip: "Logo_Free"
      }), _dec85 = property({
        type: Sprite,
        tooltip: "Logo_Free(stop spin)"
      }), _dec86 = property(Sprite), _dec87 = property(Sprite), _dec88 = property(Sprite), _dec89 = property(Sprite), _dec90 = property(Sprite), _dec91 = property({
        type: Sprite,
        tooltip: "自動玩提示"
      }), _dec92 = property({
        type: Label,
        tooltip: "自動玩提示"
      }), _dec93 = property({
        type: Node,
        tooltip: "自動玩提示"
      }), _dec94 = property({
        type: Label,
        tooltip: "加速按鈕提示"
      }), _dec95 = property(Sprite), _dec96 = property(Label), _dec97 = property(Sprite), _dec98 = property(Label), _dec99 = property({
        type: Label,
        tooltip: "洗馬/免費贈金 balance"
      }), _dec100 = property({
        type: Sprite,
        tooltip: "vip用的"
      }), _dec101 = property({
        type: Label,
        tooltip: "vip用的"
      }), _dec102 = property(Prefab), _dec103 = property(Sprite), _dec104 = property(Label), _dec105 = property(Sprite), _dec106 = property(Node), _dec107 = property(Node), _dec108 = property(Node), _dec109 = property(Node), _dec110 = property(Node), _dec111 = property({
        type: Sprite,
        tooltip: "vip 提示"
      }), _dec112 = property({
        type: SpriteFrame,
        tooltip: "vip圖示"
      }), _dec113 = property({
        type: SpriteFrame,
        tooltip: "app vip圖示"
      }), _dec114 = property({
        type: Button,
        tooltip: "聯合彩金機制按鈕父節點"
      }), _dec115 = property({
        type: Button,
        tooltip: "滿額必開機制按鈕父節點"
      }), _dec116 = property({
        type: Node,
        tooltip: "vip押注遮罩"
      }), _dec117 = property({
        type: Node,
        tooltip: "vip提示"
      }), _dec118 = property({
        type: Node,
        tooltip: "vip解鎖"
      }), _dec119 = property({
        type: Sprite,
        tooltip: "解鎖的VIP提示"
      }), _dec120 = property({
        type: Sprite,
        tooltip: "vip鎖提示文字"
      }), _dec121 = property({
        type: Node,
        tooltip: "遮罩"
      }), _dec122 = property({
        type: Node,
        tooltip: "BET按鈕遮罩根"
      }), _dec123 = property({
        type: Prefab,
        tooltip: "BET按鈕遮罩"
      }), _dec124 = property({
        type: Node,
        tooltip: "Level Bet鎖遮罩layout"
      }), _dec125 = property({
        type: Node,
        tooltip: "EX BET按鈕根節點"
      }), _dec126 = property({
        type: Node,
        tooltip: "智慧訊息根節點"
      }), _dec127 = property({
        type: Prefab,
        tooltip: "前導遮罩"
      }), _dec128 = property({
        type: Node,
        tooltip: "使用道具卡"
      }), _dec129 = property({
        type: Prefab,
        tooltip: "使用freespin"
      }), _dec130 = property({
        type: Prefab,
        tooltip: "使用freespin結束"
      }), _dec131 = property({
        type: Prefab,
        tooltip: "freespin押注轉換特效"
      }), _dec132 = property({
        type: Prefab,
        tooltip: "SPIN特效"
      }), _dec133 = property({
        type: Label,
        tooltip: "Num_FreespinCounter" // Spin上的FreeSpin計算

      }), _dec134 = property({
        type: Animation,
        tooltip: "FreeSpins_Gain" // FreeSpin 新特效

      }), _dec135 = property({
        type: Label,
        tooltip: "Num_ItemCount" // FreeSpin 新特效 上的FreeSpin起始局數

      }), _dec136 = property({
        type: Sprite,
        tooltip: "FreeSpin 提示文字"
      }), ccclass(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BottombarManager, _Component);

        function BottombarManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_commonTextPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_commonTextPrefabID", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_commonWebviewParentNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_commonWebPagePrefab", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_barAtlas", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_barNode", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_barBgNode", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_barBgCustRoot", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_barBgCustSprite", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_coinIconSprite", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_coinIconSpriteAtlas", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_jiliLogoSpriteFrame", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_indiaLogoSpriteFrame", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_TaDaLogoSpriteFrame", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_UFALogoSpriteFrame", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_jiliStarLogoSpriteFrame", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_brandSpriteFrames", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_connectAnim", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_connectSprite", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_connectAtlas", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_spinBtn", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_stopSpinBtn", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_autoBtn", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_stopAutoBtn", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_stopAutoCountBtn", _descriptor25, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_speedButton", _descriptor26, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_speedSprite", _descriptor27, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_currencyBtn", _descriptor28, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betBtn", _descriptor29, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betBtnIcon", _descriptor30, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_BMMbetBtnIcon", _descriptor31, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betIcons", _descriptor32, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_BMMbetBtn", _descriptor33, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_appBetBg", _descriptor34, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_appBetBtn", _descriptor35, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_appBetPlusBtns", _descriptor36, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_appBetMinusBtns", _descriptor37, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betCloseBtn", _descriptor38, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_commBtn", _descriptor39, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_commSprite", _descriptor40, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_wiseAutoBtn", _descriptor41, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_historyBtn", _descriptor42, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_ratioBtn", _descriptor43, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_BMMratioBtn", _descriptor44, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_homeBtn", _descriptor45, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_giftCodeBtn", _descriptor46, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_notifyBtn", _descriptor47, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_stopRoundLabel", _descriptor48, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_winLabel", _descriptor49, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_netWinLabel", _descriptor50, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_nowBetLabel", _descriptor51, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_BMMnowBetLabel", _descriptor52, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_APPnowBetLabel", _descriptor53, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_balanceLabel", _descriptor54, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_logIndex", _descriptor55, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_version", _descriptor56, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_timeLabel", _descriptor57, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_timeLayoutNode", _descriptor58, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_playTimeLabel", _descriptor59, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_playTimeLayoutNode", _descriptor60, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_platVerLabel", _descriptor61, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_marqueeNodeL", _descriptor62, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_marqueeNodeS", _descriptor63, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lobbyMarqueeNode", _descriptor64, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betRootNode", _descriptor65, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betViewNode", _descriptor66, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_extraBetView", _descriptor67, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_autoplayMenuNode", _descriptor68, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_commView", _descriptor69, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_soundBtn", _descriptor70, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_soundBtnSprite", _descriptor71, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_txt_blessing", _descriptor72, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_img_win", _descriptor73, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_fullScreenMask", _descriptor74, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_webView", _descriptor75, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_webViewCloseBtn", _descriptor76, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_upBarNode", _descriptor77, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_commAtlas", _descriptor78, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betBack", _descriptor79, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_appBetBack", _descriptor80, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_streetAtlas", _descriptor81, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_logoSprite", _descriptor82, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_logoSpriteStop", _descriptor83, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_logoFreeSprite", _descriptor84, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_logoFreeStopSprite", _descriptor85, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_spinSprite", _descriptor86, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_spinStopSprite", _descriptor87, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_autoSprite", _descriptor88, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_autoStopSprite", _descriptor89, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_autoCountStopSprite", _descriptor90, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_autoHintSprite", _descriptor91, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_autoHintLabel", _descriptor92, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_autoHintEffect", _descriptor93, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_speedHintLabel", _descriptor94, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_winSprite", _descriptor95, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_barWinLabel", _descriptor96, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_balanceSprite", _descriptor97, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_barBalanceLabel", _descriptor98, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_barTrailBalanceLabel", _descriptor99, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_vipBalanceSprite", _descriptor100, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_vipBalanceLabel", _descriptor101, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betBtnPrefab", _descriptor102, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_speedPanel", _descriptor103, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_speedPanelLabel", _descriptor104, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_webViewTitleSprite", _descriptor105, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_marqueeBgL", _descriptor106, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_marqueeBgS", _descriptor107, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_marqueeMask", _descriptor108, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_volatilityParent", _descriptor109, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_floatView", _descriptor110, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_vipSprite", _descriptor111, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_vipSpriteFrames", _descriptor112, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_appVipSpriteFrames", _descriptor113, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_jackPotBtn", _descriptor114, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_mustHitByBtn", _descriptor115, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_vipLockNode", _descriptor116, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_vipHintNode", _descriptor117, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_unLockVipNode", _descriptor118, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_unlockVIPSprite", _descriptor119, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lockHintSprite", _descriptor120, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_vipMaskNodes", _descriptor121, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_levelBetLockRoot", _descriptor122, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betBtnMask", _descriptor123, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_levelBetLocks", _descriptor124, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_extraBtnNode", _descriptor125, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_notifyRoot", _descriptor126, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_playReadyPrefab", _descriptor127, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_usingCard", _descriptor128, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_freespinUseAniPrefab", _descriptor129, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_freespinEndAniPrefab", _descriptor130, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_freespinBetAniPrefab", _descriptor131, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_freespinBtnEftPrefab", _descriptor132, _assertThisInitialized(_this));

          _this.m_freespinBtnEft = null;

          _initializerDefineProperty(_this, "m_num_FreespinCounter", _descriptor133, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_freeSpins_Gain", _descriptor134, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_num_ItemCount", _descriptor135, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_freeSpinSprite", _descriptor136, _assertThisInitialized(_this));

          _this.m_gameEXnode = null;
          _this.m_IsFreeSpin = false;
          _this.m_betIcon = null;
          _this.m_betIconEX = null;
          _this.SlotBottomBarState = {
            IDLE: 0,
            CLICK_SPIN: 1,
            START_SPIN: 2,
            CLICK_STOP: 3,
            GET_AWARD: 4,
            CLICK_GET: 5,
            CLICK_AUTOPLAY: 6,
            CLICK_CANCEL: 7,
            IDLE_AGAIN: 8,
            SPIN_DISABLE: 9,
            CLICK_STOP_IN_AUTOPLAY: 10,
            SKIP_SMALL_FLASH: 11,
            SKIP_SMALL_FLASH_AUTOPLAY: 12,
            SKIP_BIG_FLASH: 13,
            CLICK_STOP_NO_AUTO: 14,
            // NO_AUTO: 不改動AUTO
            GET_AWARD_NO_AUTO: 15,
            CLICK_STOP_IN_AUTOPLAY_NO_AUTO: 16,
            SPIN_DISABLE_DISABLE_STOP: 17,
            AUTO_UNABLE: 18,
            AUTO_ABLE: 19,
            CLICK_AUTOPLAY_HARDSTOP: 20
          };
          _this.m_view = null;
          _this.m_betList = null;
          _this.m_betIndex = 0;
          _this.m_appBetLimit = null;
          _this.m_speedBtn = null;
          _this.m_speedImg = null;
          _this.m_speedBtnStatus = false;
          _this.m_soundBtnStatus = true;
          _this.m_autoplayConfirmCb = null;
          _this.m_isStartTouchAuto = false;
          _this.m_autoTouchTime = null;
          _this.m_btn_state = -1;
          _this.m_totalRound = -1;
          _this.m_singleWin = -1;
          _this.m_chipLessLimit = -1;
          _this.m_chipGreatLimit = -1;
          _this.m_chipCompareTypes = -1;
          _this.m_localeSpriteAtlas = null;
          _this.m_freeType = -1;
          _this.m_isHardStop = false;
          _this.m_oldState = _this.SlotBottomBarState.IDLE;
          _this.m_isLandscape = true;
          _this.m_isSmall = false;
          _this.m_showAward = 0;
          _this.m_step = 0;
          _this.m_totalAward = 0;
          _this.m_win = 0;
          _this.m_netWin = 0;
          _this.m_durTick = 0;
          _this.m_isShowAward = false;
          _this.m_originalWin = 0;
          _this.m_delay = 0;
          _this.m_autoplaySetting = null;
          _this.m_multiBetInfo = null;
          _this.m_multiBetPrefab = null;
          _this.m_isLow = false;
          _this.m_prefer = null;
          _this.m_webViewLock = false;
          _this.m_reelCount = 1;
          _this.m_currentTouchName = null;
          _this.m_autoplayPrefab = null;
          _this.m_currencyInfo = void 0;
          _this.m_cb = null;
          _this.m_clickCount = 0;
          _this.m_clickStartTime = 0;
          _this.m_isHintQuickMod = false;
          _this.m_betBtns = new Array();
          _this.m_betLabels = new Array();
          _this.m_betLayoutNodes = new Array();
          _this.m_btnLayoutNodes = new Array();
          _this.m_betNumLayoutNodes = new Array();
          _this.m_isChangePos = false;
          _this.m_ratioURL = null;
          _this.m_historyUrl = null;
          _this.m_backpackUrl = null;
          _this.m_memberUrl = null;
          _this.m_lockBetEnable = false;
          _this.m_lockAutoEnable = false;
          _this.m_lockWiseAutoEnable = false;
          _this.m_lockhistoryEnable = false;
          _this.m_lockInfoEnable = false;
          _this.m_fullScreenCheck = 0;
          _this.m_isWiseAutoPlay = false;
          _this.m_canFullScreen = false;
          _this.m_isSkipFlash = false;
          _this.m_timer = void 0;
          _this.m_marqueeTimer = void 0;
          _this.m_useSoundTimer = null;
          _this.m_soundTime = 0;
          _this.m_soundTimeFlag = false;
          _this.m_spinClickCount = 0;
          _this.m_isSpinCountFinished = false;
          _this.m_spinWithSpeed = 0;
          _this.m_spinWithAuto = 0;
          _this.m_clickBuffer = [0, 0, 0, 0, 0, 0, 0, 0];
          _this.CLICK_BUFFER_TYPE = {
            FEATURES: 0,
            RATIO: 1,
            HISTORY: 2,
            WISEAUTO: 3,
            BACKPACK: 4,
            BACKPACK_GAME: 5,
            BACKPACK_ALL: 6,
            BACKPACK_MSG: 7,
            RANKING: 8,
            DAILY_MISSION: 9,
            DEBRIS: 10,
            GIFT_CODE: 11
          };
          _this.CLICK_BUFFER_STATE = {
            ON: 1,
            OFF: 2
          };
          _this.m_haveStopSound = true;
          _this.m_canScaleWinValue = false;
          _this.m_imgTxt = null;
          _this.m_eftWin = null;
          _this.m_marqueeObj = null;
          _this.m_topLeftLabel = null;
          _this.m_isFirstSpin = true;
          _this.m_isSpinTurbo = false;
          _this.m_chips = 0;
          _this.m_touchCb = null;
          _this.m_isInitChips = false;
          _this.m_firstCheckChips = true;
          _this.m_initTimer = null;
          _this.m_oldExchangeChips = null;
          _this.m_shouldUpdateBetBtn = false;
          _this.m_spinHoldTimer = null;
          _this.m_isFirstSpinHold = false;
          _this.m_dollarSymbolSize = 25;
          _this.m_isOpenMall = 0;
          _this.m_trailBetNum = 0;
          _this.m_isGameIdle = false;
          _this.m_showGameSceneFromGame = false;
          _this.m_isSendBetViewOpen = false;
          _this.m_isSendBetChange = false;
          _this.m_commMenu = null;
          _this.m_itemBet = 0;
          _this.m_isItemBet = false;
          _this.m_buyBonusBet = 0;
          _this.m_isBuyBonusBet = false;
          _this.m_isFirstSetting = true;
          _this.m_multBetIdx = 0;
          _this.m_openBtnCbs = {};
          _this.m_closeBtnCbs = {};
          _this.m_isVipInit = false;
          _this.m_betLimit = null;
          _this.m_isLockConnectSprite = false;
          _this.m_betLayoutSize = BetLayoutSize;
          _this.m_commonText = null;
          _this.m_commonWebPage = null;
          _this.m_playReadyNode = null;
          _this.m_gameLogoNodes = null;
          _this.m_gaemLogoDiffs = null;
          _this.m_followNode = null;
          _this.m_followDiffs = null;
          _this.m_isCustomize = false;
          _this.m_volatilitySprite = null;
          _this.m_sec = 1;
          _this.m_betDollerSymbol = "";
          _this.m_playTimerStarted = false;
          _this.m_playTime_sec = 0;
          _this.m_playTime_min = 0;
          _this.m_playTime_hr = 0;
          _this.m_idleTime = 0;
          _this.m_realityCheckTime = 0;
          _this.m_levelBetMasks = null;
          _this.m_btn_spinstop_Sprite = null;
          _this.m_btn_spinstop_iconSprite = null;
          _this.m_btn_spin_Sprite = null;
          _this.m_btn_spin_iconSprite = null;
          _this.m_netTxt = "NET : ";
          return _this;
        }

        var _proto2 = BottombarManager.prototype;

        _proto2.SetLockBetEnable = function SetLockBetEnable(isEnable) {
          this.m_lockBetEnable = isEnable;
        };

        _proto2.onLoad = function onLoad() {
          var logoSpritFrames = [];

          if (this.m_jiliLogoSpriteFrame) {
            logoSpritFrames.push(this.m_jiliLogoSpriteFrame);
            logoSpritFrames.push(this.m_jiliLogoSpriteFrame);
          } else {
            logoSpritFrames.push(this.m_TaDaLogoSpriteFrame);
            logoSpritFrames.push(this.m_TaDaLogoSpriteFrame);
          }

          logoSpritFrames.push(this.m_indiaLogoSpriteFrame);
          logoSpritFrames.push(this.m_TaDaLogoSpriteFrame);
          logoSpritFrames.push(this.m_UFALogoSpriteFrame);
          logoSpritFrames.push(this.m_jiliStarLogoSpriteFrame);
          Tools.LogoSpriteFrames = this.m_brandSpriteFrames;

          if (this.m_logoSprite) {
            var spriteFrame = Tools.UsingLogoSpriteFrame();

            if (spriteFrame) {
              if (Tools.Line != Define.LineSetting.americas && Tools.Line != Define.LineSetting.americas_str) {
                this.m_logoSprite.spriteFrame = spriteFrame;

                if (this.m_logoSpriteStop) {
                  this.m_logoSpriteStop.spriteFrame = spriteFrame;
                }
              }

              this.m_logoSprite.node.active = true;

              if (this.m_logoSpriteStop) {
                this.m_logoSpriteStop.node.active = true;
              }
            } else {
              this.m_logoSprite.node.active = false;

              if (this.m_logoSpriteStop) {
                this.m_logoSpriteStop.node.active = false;
              }
            }
          }

          this.m_platVerLabel.node.active = Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.ShowPlateformVer);

          if (this.m_platVerLabel) {
            this.m_platVerLabel.string = Define.PLATFORM_VER;
          }

          this.m_timeLayoutNode.active = Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.ShowTime);
          this.m_playTimeLayoutNode.active = Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.ShowPlayTime);
          this.m_platVerLabel.node.active = Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.ShowPlateformVer); // this.m_webView.node.zIndex = Define.ZOrder.WEBVIEW;

          Tools.SetZIndex(this.m_webView.node, Define.ZOrder.WEBVIEW); // 確保loading完有被關掉
          // let webViewCb = () =>
          // {
          //     if ( sys.isNative ) { return; }
          //     let loadingMask = document.getElementById( "loadingBlock" );
          //     if ( loadingMask && loadingMask.style.visibility == "visible" )
          //     {
          //         loadingMask.style.visibility = "hidden";
          //     }
          // }
          // this.m_webView.node.on( 'loaded', webViewCb, this );

          if (this.m_logoFreeSprite) {
            this.m_logoFreeSprite.node.active = false;
          }

          if (this.m_logoFreeStopSprite) {
            this.m_logoFreeStopSprite.node.active = false;
          }

          this.m_speedPanel.node.active = false; // this.m_speedPanel.node.opacity = 0;

          this.m_speedPanel.node.getComponent(UIOpacity).opacity = 0; // this.m_speedPanel.node.zIndex = Define.ZOrder.HINT;

          Tools.SetZIndex(this.m_speedPanel.node, Define.ZOrder.HINT); // this.m_speedPanelLabel.node.zIndex = Define.ZOrder.HINT;

          Tools.SetZIndex(this.m_speedPanelLabel.node, Define.ZOrder.HINT + 1); // this.m_marqueeNodeL.zIndex = Define.ZOrder.MARQUEE;
          // this.m_marqueeNodeS.zIndex = Define.ZOrder.MARQUEE;
          // this.m_marqueeMask.zIndex = Define.ZOrder.MARQUEE;

          this.m_timer = new TimeBool();
          this.m_timer.Start(10 * 1000);
          this.m_marqueeTimer = new TimeBool();
          this.m_marqueeTimer.Start(5 * 1000);
          this.m_useSoundTimer = new TimeBool();
          this.m_imgTxt = this.node.getChildByName("img_txt");
          this.m_initTimer = new TimeBool();
          this.m_initTimer.UseDT(true); // this.m_topLeftLabel = new IconSorter( [ "mission", "ranking" ], this.m_topLeftLables );

          this.m_commMenu = this.m_homeBtn.node.parent.getComponent(Layout);

          if (this.m_connectAnim) {
            this.m_connectAnim.node.active = true;
            this.m_connectAnim.play("Connect_Close");
          }

          if (this.m_commonTextPrefab || this.m_commonTextPrefabID) {
            var node = null;
            var apiid = parseInt(Define.API_ID);

            if (!isNaN(apiid) && apiid >= 200 && apiid < 300 && this.m_commonTextPrefabID) {
              node = instantiate(this.m_commonTextPrefabID);
            } else {
              node = instantiate(this.m_commonTextPrefab);
            }

            node.active = false;
            this.node.addChild(node);
            Tools.SetZIndex(node, Define.ZOrder.ITEMINFO);
            this.m_commonText = node.getComponent(CommonTextManager);
          }

          if (this.m_commonWebPagePrefab) {
            var _node = instantiate(this.m_commonWebPagePrefab);

            this.m_commonWebviewParentNode.addChild(_node);
            _node.active = false;
            Tools.SetZIndex(this.m_commonWebviewParentNode, Define.ZOrder.WEBVIEW);
            this.m_commonWebPage = _node.getComponent(CommonWebPage);
          }

          gaiaManager.BottomBar = this;
        };

        _proto2.start = function start() {
          var _this2 = this,
              _this$m_stopSpinBtn$n,
              _this$m_spinBtn$node$;

          if (Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str) {
            this.m_spinHoldTimer = new TimeBool();
            this.m_spinHoldTimer.UseDT(true);
          }

          if (sys.isNative) {
            // function JsCallBack( target: any, url: string )
            // {
            //     let str = url.replace( Define.SchemeKey + '://', '' );
            //     if ( str === Define.WebViewEvent.Close )
            //     {
            //         this.CloseWebView();
            //     }
            // }
            error(">>>>>>>>>> CloseWebView native");
            this.m_webView.setJavascriptInterfaceScheme(Define.SchemeKey); // this.m_webView.setJavascriptInterfaceScheme( "wv2g" );

            this.m_webView.setOnJSCallback(function (target, url) {
              error(">>>>>>>>>> CloseWebView a", url);
              var str = url.replace(Define.SchemeKey + "://", ""); // let str = url.replace( 'wv2g://', '' );

              error(">>>>>>>>>> CloseWebView b", str);

              if (str === Define.WebViewEvent.Close) {
                _this2.CloseWebView();
              }
            }); // this.m_webView.setOnJSCallback( JsCallBack as any );
          } else {
            var idx = EnvironmentConfig.HISTORY_URL.search(/\.com/g);
            var historyUrl = EnvironmentConfig.HISTORY_URL.slice(0, idx + 4);
            idx = EnvironmentConfig.RATIO_URL.search(/\.com/g);
            var ratioUrl = EnvironmentConfig.RATIO_URL.slice(0, idx + 4); //由IframeCommandManager處理

            iframeCommandManager.AddCb({
              CloseWebView: function CloseWebView(origin) {
                if (origin.search(historyUrl) !== -1 || origin.search(ratioUrl) !== -1) {
                  _this2.CloseWebView();
                }
              }
            });
          }

          if (this.m_webView) {
            this.m_webView.node.active = false;
          }

          LifeSocket.GetInstance().SyncBalanceCb = function (serverCoinInfos, autoStopCb, isFromWS) {
            _this2.SyncChips(serverCoinInfos, autoStopCb, false, isFromWS);
          };

          this.m_vipLockNode.active = false;
          VipManager.GetInstance().AddUpdateCb(Define.CbKey.BottomBar, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(info) {
            var vip, apiId, diff, storageNum, diffSetting, wallets, i, coin, _i, isFind, j, apiIdSetting, anim, _i2, height;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CloseVip)) {
                      _context.next = 2;
                      break;
                    }

                    return _context.abrupt("return");

                  case 2:
                    if (!_this2.m_isVipInit) {
                      _this2.m_isVipInit = true;

                      _this2.SetBalanceSprite(true);
                    }

                    vip = info.Lv;
                    apiId = Number(Define.API_ID);

                    if (apiId == 0) {
                      apiId = Number(Tools.GetLinkParameterByName("apiId"));
                    }

                    if (!(!isNaN(apiId) && apiId >= 100 && apiId < 500)) {
                      _context.next = 42;
                      break;
                    }

                    _this2.m_vipSprite.spriteFrame = _this2.m_appVipSpriteFrames[vip] ? _this2.m_appVipSpriteFrames[vip] : _this2.m_appVipSpriteFrames[_this2.m_appVipSpriteFrames.length - 1];
                    /**依vip鎖押注*/

                    diff = 0; //位移判定位置

                    storageNum = LocalStorageManager.GetInt(DiffStorageKey + Define.AID);

                    if (!storageNum) {
                      _context.next = 14;
                      break;
                    }

                    if (vip === 0) {
                      diff = storageNum;
                    }

                    _context.next = 37;
                    break;

                  case 14:
                    diffSetting = DiffSettingByApiId[apiId];

                    if (!(diffSetting && walletManger.HasWallet)) {
                      _context.next = 37;
                      break;
                    }

                    wallets = walletManger.GetWallet();

                    if (Define.SSO_CURRENCY_NUMBER.length == 0) {
                      //sso login回應內錢包的幣別
                      for (i = 0; i < wallets.length; i++) {
                        Define.SSO_CURRENCY_NUMBER.push(wallets[i].currencyNumber);
                      }
                    }

                    coin = _this2.GetChips();
                    _i = 0;

                  case 20:
                    if (!(_i < diffSetting.length)) {
                      _context.next = 37;
                      break;
                    }

                    isFind = false;
                    j = 0;

                  case 23:
                    if (!(j < Define.SSO_CURRENCY_NUMBER.length)) {
                      _context.next = 32;
                      break;
                    }

                    if (!(vip === diffSetting[_i].VIP && Define.SSO_CURRENCY_NUMBER[j] === diffSetting[_i].CN && coin >= diffSetting[_i].Coin)) {
                      _context.next = 29;
                      break;
                    }

                    diff = diffSetting[_i].Diff;
                    isFind = true;
                    LocalStorageManager.SetInt(DiffStorageKey + Define.AID, diff);
                    return _context.abrupt("break", 32);

                  case 29:
                    j++;
                    _context.next = 23;
                    break;

                  case 32:
                    if (!isFind) {
                      _context.next = 34;
                      break;
                    }

                    return _context.abrupt("break", 37);

                  case 34:
                    _i++;
                    _context.next = 20;
                    break;

                  case 37:
                    apiIdSetting = BetLockByApiId[apiId];

                    if (Define.NOW_GAME_ID == Define.GAME_ID.MC.toString()) {
                      apiIdSetting = MCBetLockByApiId[apiId];
                    }

                    if (apiIdSetting) {
                      _this2.m_betLimit = apiIdSetting[vip + diff];

                      if (_this2.m_betLimit && MaskHeightSetting[_this2.m_betLimit]) {
                        _this2.m_vipLockNode.active = true;
                        _this2.m_unlockVIPSprite.spriteFrame = _this2.m_appVipSpriteFrames[vip + 1];
                        anim = _this2.m_vipHintNode.getComponent(Animation);
                        anim.play("VipLock_" + _this2.m_betLimit.toString());

                        for (_i2 = 0; _i2 < _this2.m_vipMaskNodes.length; _i2++) {
                          height = MaskHeightSetting[_this2.m_betLimit][_i2];

                          if (height) {
                            _this2.m_vipMaskNodes[_i2].active = true; // this.m_vipMaskNodes[ i ].height = height;

                            _this2.m_vipMaskNodes[_i2].getComponent(UITransform).height = height;
                          } else {
                            _this2.m_vipMaskNodes[_i2].active = false;
                          }
                        }
                      } else {
                        _this2.m_vipLockNode.active = false;
                      }
                    } else {
                      _this2.m_vipLockNode.active = false;
                    }

                    _context.next = 43;
                    break;

                  case 42:
                    _this2.m_vipSprite.spriteFrame = _this2.m_vipSpriteFrames[vip] ? _this2.m_vipSpriteFrames[vip] : _this2.m_vipSpriteFrames[_this2.m_vipSpriteFrames.length - 1];

                  case 43:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          })));

          if (this.m_vipSprite) {
            // if ( this.IsGLIGames || this.IsBMMGames )
            if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CloseVip)) {
              this.m_vipSprite.node.active = false;
            } else {
              this.m_vipSprite.node.on(Node.EventType.TOUCH_START, function (event) {
                // event.stopPropagationImmediate();
                // event.stopPropagation();
                event.propagationImmediateStopped = true;
                event.propagationStopped = true;

                if (_this2.m_currentTouchName == null && _this2.m_vipSprite.node.active) {
                  _this2.m_currentTouchName = event.target.name;

                  _this2.SetScaleAction(_this2.m_vipSprite.node, true);
                } else {
                  if (event.target && event.target.active == false) {
                    _this2.m_currentTouchName = event.target.name;
                  }
                }
              });
              this.m_vipSprite.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
                _this2.SetScaleAction(_this2.m_vipSprite.node, false);

                if (_this2.m_currentTouchName == event.target.name) {
                  _this2.m_currentTouchName = null;
                }
              });
              this.m_vipSprite.node.on(Node.EventType.TOUCH_END, function (event) {
                _this2.SetScaleAction(_this2.m_vipSprite.node, false);

                if (_this2.m_currentTouchName != event.target.name) {
                  return;
                }

                _this2.m_currentTouchName = null;
                var url = EnvironmentConfig.WEB_URL.replace("{target}", "member/vip");

                _this2.OpenWebView(url, Define.StringKey.BOTTOM_BAR_BACK_GAME_HISTORY);

                ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.SIGN_IN_INFO_CLICK, 1));
              });
            }
          }

          if (this.m_connectSprite && this.m_connectAnim) {
            if (this.IsGLIGames || this.IsBMMGames) {
              this.m_connectSprite.node.active = false;
              this.m_connectAnim.node.active = false;
            } else {
              ConnectionSpeed.GetInstance().AddSpeedNotify(Define.CbKey.BottomBar, function (avgSpeed) {
                if (_this2.m_isLockConnectSprite) {
                  return;
                }

                _this2.UpdateConnectSprite(_this2.m_isLockConnectSprite);
              });
            }
          }

          if ((this.IsGLIGames || this.IsBMMGames) && this.m_imgTxt) {
            // GLI 文字要維持原來位置
            var pos = this.m_imgTxt.getChildByName("img_autotop_1").getPosition();
            this.m_imgTxt.getChildByName("img_autoplay").setPosition(pos.x, pos.y);
          } // btn_spinstop


          this.m_btn_spinstop_Sprite = this.m_stopSpinBtn.node.parent.getComponent(Sprite);
          this.m_btn_spinstop_iconSprite = (_this$m_stopSpinBtn$n = this.m_stopSpinBtn.node.parent.getChildByName("Icon")) == null ? void 0 : _this$m_stopSpinBtn$n.getComponent(Sprite); // btn_spin

          this.m_btn_spin_Sprite = this.m_spinBtn.node.parent.getComponent(Sprite);
          this.m_btn_spin_iconSprite = (_this$m_spinBtn$node$ = this.m_spinBtn.node.parent.getChildByName("Icon")) == null ? void 0 : _this$m_spinBtn$node$.getComponent(Sprite);
        }
        /**
         * 地BAR客製化,設定地BAR身體
         * @param barBody 地BAR身體prefab
         */
        ;

        _proto2.BarBodyCustomize = function BarBodyCustomize(barBody, bodyAtlas) {
          if (Tools.Line == Define.LineSetting.americas) {
            this.m_isCustomize = true; //換底板

            this.m_barBgNode.active = false;
            this.m_barBgCustRoot.active = true;

            if (bodyAtlas.getSpriteFrame(CustImgName.Bg_Portrait)) {
              this.m_barBgCustSprite[0].spriteFrame = bodyAtlas.getSpriteFrame(CustImgName.Bg_Portrait);
            }

            if (bodyAtlas.getSpriteFrame(CustImgName.Bg_Landscape)) {
              this.m_barBgCustSprite[1].spriteFrame = bodyAtlas.getSpriteFrame(CustImgName.Bg_Landscape);
            }

            if (bodyAtlas.getSpriteFrame(CustImgName.Side_Btn)) {
              this.m_volatilitySprite = bodyAtlas.getSpriteFrame(CustImgName.Side_Btn);
              this.m_notifyBtn.node.getComponent(Sprite).spriteFrame = bodyAtlas.getSpriteFrame(CustImgName.Side_Btn);
            }
          }
        }
        /**
         * 設定自適應性遊戲Logo，會把所有節點加到FloatView上
         * @param logo 節點的錨點的Y須設定成1
         * @param diffs 偏移才須設定，0:直版，1：橫版
         */
        ;

        _proto2.SetGameLogo = function SetGameLogo(logo, diffs) {
          var _this3 = this;

          this.m_gameLogoNodes = logo;
          this.m_gaemLogoDiffs = diffs;

          if (this.m_floatView) {
            this.m_gameLogoNodes.forEach(function (node) {
              node.removeFromParent();

              _this3.m_floatView.addChild(node);

              Tools.SetZIndex(node, -1);
            });
          }
        }
        /**
         * 地bar 消失與顯示
         * @param visialbe false消失 或 true顯示
         */
        ;

        _proto2.SetBarNodeVisiable = function SetBarNodeVisiable(visiable, time) {
          if (time === void 0) {
            time = 0;
          }

          var op = 0;

          if (visiable) {
            op = 255;
          }

          if (this.m_barNode) {
            var bgNode = this.m_isCustomize ? this.m_barBgCustRoot : this.m_barBgNode;
            this.m_barNode.active = visiable;
            bgNode.active = visiable;
            tween(this.m_barNode.getComponent(UIOpacity)).to(time, {
              opacity: op
            }).start();
            tween(bgNode.getComponent(UIOpacity)).to(time, {
              opacity: op
            }).start();
          }
        }
        /**
         * 設定跟隨地bar
         * @param node 要跟隨的節點座標要設定為(0,0)
         * @param diffs 偏移才須設定，0:直版，1：橫版
         */
        ;

        _proto2.SetFollowNode = function SetFollowNode(node, diffs) {
          this.m_followNode = node;
          this.m_followDiffs = diffs;

          if (this.m_followNode) {
            this.m_followNode.removeFromParent();
            this.m_floatView.addChild(this.m_followNode);
            Tools.SetZIndex(this.m_followNode, -2);
          }
        }
        /**
         * 直橫版切換
         */
        ;

        _proto2.ChangePos = function ChangePos(isLandscape, cb, isSmall, isLow) {
          this.m_cb = cb;
          this.m_isLandscape = isLandscape;

          if (isSmall) {
            this.m_isSmall = isSmall;
          }

          this.m_isChangePos = true;
          var designSize = view.getDesignResolutionSize();
          var size = screen.windowSize; //:只能在Web 平台?

          var h = size.height * designSize.width / size.width;
          var w = size.width * designSize.height / size.height;
          var animName = BarAnimName;

          if (!isLandscape) {
            if (isSmall) {
              if (isLow) {
                this.m_isLow = true;
                this.PlayAnim(animName.Portrait_Low);
              } else {
                this.PlayAnim(animName.Portrait_Small);
              }
            } else {
              this.PlayAnim(animName.Portrait);
            }

            if (this.m_barNode) {
              this.m_barNode.getComponentInChildren(Animation).play(BarBodyAnimName.Portrait);
            }

            if (this.m_autoplaySetting) {
              var anim = this.m_autoplaySetting.node.getComponent(Animation);

              if (anim) {
                anim.play(this.m_autoplaySetting.PanelAniS);
              }
            }

            h = misc.clampf(h, Define.DEFAULT_LANDSCAPE_SIZE.width, 1500);
            w = misc.clampf(w, Define.DEFAULT_LANDSCAPE_SIZE.height - 1, Define.DEFAULT_LANDSCAPE_SIZE.height);

            if (this.m_playReadyNode && this.m_playReadyNode.parent === this.node) {
              this.m_playReadyNode.setPosition(v3(0, 568));
            }

            if (this.m_num_FreespinCounter) {
              this.m_num_FreespinCounter.node.setPosition(v3(-2, 109));
            }

            if (this.m_logoFreeSprite) {
              this.m_logoFreeSprite.node.setPosition(v3(0, 10));
            }

            if (this.m_logoFreeStopSprite) {
              this.m_logoFreeStopSprite.node.setPosition(v3(0, 10));
            }
          } else {
            this.PlayAnim(animName.Landscape);

            if (this.m_barNode) {
              this.m_barNode.getComponentInChildren(Animation).play(BarBodyAnimName.Landscape);
            }

            if (this.m_autoplaySetting) {
              var anim = this.m_autoplaySetting.node.getComponent(Animation);

              if (anim) {
                anim.play(this.m_autoplaySetting.PanelAniL);
              }
            }

            h = misc.clampf(h, Define.DEFAULT_LANDSCAPE_SIZE.height - 1, Define.DEFAULT_LANDSCAPE_SIZE.height);
            w = misc.clampf(w, Define.DEFAULT_LANDSCAPE_SIZE.width, 1348);

            if (this.m_playReadyNode && this.m_playReadyNode.parent === this.node) {
              this.m_playReadyNode.setPosition(v3(0, 320));
            }

            if (this.m_num_FreespinCounter) {
              this.m_num_FreespinCounter.node.setPosition(v3(400, 69));
            }

            if (this.m_logoFreeSprite) {
              this.m_logoFreeSprite.node.setPosition(v3(0, 10));
            }

            if (this.m_logoFreeStopSprite) {
              this.m_logoFreeStopSprite.node.setPosition(v3(0, 10));
            }
          }

          if (this.m_floatView) {
            // this.m_floatView.setContentSize( w, h );
            this.m_floatView.getComponent(UITransform).setContentSize(w, h);
            this.m_floatView.children.forEach(function (node) {
              if (node.getComponent(FloatView)) {
                node.getComponent(FloatView).SetDiffPos();
              }
            });

            if (this.m_gameLogoNodes) {
              var diff = v3(0, 0);

              if (this.m_gaemLogoDiffs && this.m_gaemLogoDiffs[Number(isLandscape)]) {
                diff = this.m_gaemLogoDiffs[Number(isLandscape)];
              }

              this.m_gameLogoNodes.forEach(function (node) {
                node.setPosition(v3(0, h / 2).add(diff).add(Define.LOGO_BASE_DIFF[Number(isLandscape)]));
              });
            } // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {


            if (this.m_barNode) {
              var widget = this.m_barNode.getComponent(Widget);

              if (widget) {
                if (this.m_isLandscape || h === Define.DEFAULT_LANDSCAPE_SIZE.width) {
                  Define.BAR_DIFF_HEIGHT = 0;
                  widget.bottom = 0;
                } else {
                  Define.BAR_DIFF_HEIGHT = 10;
                  widget.bottom = Define.BAR_DIFF_HEIGHT;
                }
              }
            }

            if (this.m_barBgNode) {
              var _widget = this.m_barBgNode.getComponent(Widget);

              if (_widget) {
                if (this.m_isLandscape || h === Define.DEFAULT_LANDSCAPE_SIZE.width) {
                  _widget.bottom = Define.BAR_DIFF_HEIGHT;
                } else {
                  _widget.bottom = Define.BAR_DIFF_HEIGHT;
                }
              }
            }

            if (this.m_followNode) {
              var _diff = v3(0, 0);

              if (this.m_followDiffs && this.m_followDiffs[Number(isLandscape)]) {
                _diff = this.m_followDiffs[Number(isLandscape)];
              }

              if (this.m_isLandscape) {
                this.m_followNode.setPosition(v3(0, 0).add(_diff));
              } else {
                //只跟隨60%的位移
                var moveRate = 0.75;
                var base = v3(0, -45);

                if (Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str) {
                  base = v3(0, 0);
                  moveRate = 1;
                }

                var move = v3(0, (Define.DEFAULT_LANDSCAPE_SIZE.width - h) / 2 * moveRate + Define.BAR_DIFF_HEIGHT);
                this.m_followNode.setPosition(base.add(move).add(_diff));
              }
            } // }

          }

          this.ChangeWebViewSize(this.m_isLandscape);

          if (this.m_eftWin) {
            this.m_eftWin.OnRatation(isLandscape);
          }

          if (this.m_currencyInfo) {
            this.m_currencyInfo.OnRotation(isLandscape, isSmall);
          }

          var baseViewSize = this.m_floatView.getComponent(UITransform).contentSize;
          var extraWidthRange = (baseViewSize.width - Define.DEFAULT_LANDSCAPE_SIZE.width) / 2;
          extraWidthRange = extraWidthRange > 0 ? extraWidthRange : 0;
          var extraHeightRange = (baseViewSize.height - Define.DEFAULT_LANDSCAPE_SIZE.width) / 2;
          extraHeightRange = extraHeightRange > 0 ? extraHeightRange : 0;

          if (this.m_commBtn) {
            var _widget2 = this.m_commBtn.node.getComponent(Widget);

            if (_widget2) {
              if (isLandscape) {
                _widget2.isAlignBottom = true;
                _widget2.isAlignTop = false;
                _widget2.bottom = 32;
                _widget2.left = 4 + extraWidthRange;
              } else {
                _widget2.isAlignBottom = false;
                _widget2.isAlignTop = true;
                _widget2.top = 8;
                _widget2.left = 10;
              }
            }
          }

          if (this.m_commMenu) {
            // if ( Tools.Line != Define.LineSetting.americas &&
            //     Tools.Line != Define.LineSetting.americas_str )
            // {
            //     if ( this.m_homeBtn && this.m_homeBtn.node.active )
            //     {
            //         this.m_commMenu.spacingX = isLandscape ? 10 : 30;
            //     }
            //     else
            //     {
            //         this.m_commMenu.spacingX = isLandscape ? 40 : 55;
            //     }
            // }
            var _widget3 = this.m_commMenu.node.getComponent(Widget);

            if (_widget3) {
              if (isLandscape) {
                _widget3.isAlignBottom = true;
                _widget3.isAlignTop = false;
                _widget3.bottom = 62;
                _widget3.left = 50 + extraWidthRange;
              } else {
                _widget3.isAlignBottom = false;
                _widget3.isAlignTop = true;
                _widget3.top = -6;
                _widget3.left = 99;
              }
            }
          }

          if (this.m_speedBtn) {
            var _widget4 = this.m_speedBtn.node.getComponent(Widget);

            if (_widget4) {
              if (isLandscape) {
                _widget4.bottom = 191;
                _widget4.right = 24;
              } else {
                if (isSmall) {
                  if (isLow) {
                    _widget4.bottom = 246 + extraHeightRange - 52;
                  } else {
                    _widget4.bottom = 246 + extraHeightRange;
                  }
                } else {
                  _widget4.bottom = 283 + extraHeightRange;
                }

                _widget4.right = 14;
              }
            }
          }

          if (this.m_usingCard) {
            var _widget5 = this.m_usingCard.getComponent(Widget);

            if (_widget5) {
              if (isLandscape) {
                _widget5.bottom = 255;
                _widget5.right = 24;
              } else {
                if (Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str) {
                  _widget5.bottom = 244;
                  _widget5.right = 101;
                } else {
                  _widget5.bottom = 195;
                  _widget5.right = 92;
                }
              }
            }
          }

          if (this.m_notifyBtn) {
            var _widget6 = this.m_notifyBtn.node.getComponent(Widget);

            if (_widget6) {
              if (isLandscape) {
                // if ( Tools.Line === Define.LineSetting.americas ||
                //     Tools.Line === Define.LineSetting.americas_str )
                // {
                _widget6.bottom = 186;
                _widget6.left = 10.5; // }
                // else
                // {
                //     widget.bottom = 132.5;
                //     widget.left = 24;
                // }
              } else {
                _widget6.bottom = 38.5;
                _widget6.left = 24;

                if (Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str) {
                  _widget6.bottom = 430.5;
                  _widget6.left = 18;
                }
              }
            }
          }

          if (this.m_volatilityParent) {
            var _widget7 = this.m_volatilityParent.getComponent(Widget);

            if (_widget7) {
              // if ( Tools.Line === Define.LineSetting.americas ||
              //     Tools.Line === Define.LineSetting.americas_str )
              // {
              if (isLandscape) {
                _widget7.isAlignRight = false;
                _widget7.isAlignLeft = true;
                _widget7.bottom = 253;
                _widget7.left = 24;
              } else {
                _widget7.isAlignRight = true;
                _widget7.isAlignLeft = false;

                if (isSmall) {
                  // widget.bottom = 180 + extraHeightRange;
                  _widget7.bottom = 180;
                } else {
                  // widget.bottom = 180 + extraHeightRange;
                  _widget7.bottom = 180;
                }

                _widget7.right = 10;
              } // }
              // else
              // {
              //     if ( isLandscape )
              //     {
              //         widget.isAlignRight = false;
              //         widget.isAlignLeft = true;
              //         widget.bottom = 253;
              //         widget.left = 24;
              //     }
              //     else
              //     {
              //         widget.isAlignRight = true;
              //         widget.isAlignLeft = false;
              //         if ( isSmall )
              //         {
              //             widget.bottom = 246 + extraHeightRange;
              //         }
              //         else
              //         {
              //             widget.bottom = 283 + extraHeightRange;
              //         }
              //         widget.right = 93;
              //     }
              // }

            }
          }

          if (this.m_connectAnim) {
            var _widget8 = this.m_connectAnim.node.getComponent(Widget);

            if (_widget8) {
              if (sys.isNative) {
                // 為了lobbyback調整位置
                if (isLandscape) {
                  _widget8.isAlignBottom = false;
                  _widget8.isAlignTop = true;
                  _widget8.top = 30;
                  _widget8.left = 155;
                } else {
                  _widget8.isAlignBottom = true;
                  _widget8.isAlignTop = false;
                  _widget8.bottom = 107 + extraHeightRange;
                  _widget8.left = 130;
                }
              } else {
                if (isLandscape) {
                  _widget8.isAlignBottom = false;
                  _widget8.isAlignTop = true;
                  _widget8.top = 30;
                  _widget8.left = 155;
                } else {
                  _widget8.isAlignBottom = true;
                  _widget8.isAlignTop = false;

                  if (isLow) {
                    _widget8.bottom = 79 + extraHeightRange - 25;
                    _widget8.left = 600;
                  } else {
                    _widget8.bottom = 79 + extraHeightRange;
                    _widget8.left = 130;
                  }
                }
              }
            }
          }

          if (this.m_freeSpins_Gain) {
            if (isLandscape) {
              this.m_freeSpins_Gain.node.setScale(v3(1, 1, 1));
            } else {
              this.m_freeSpins_Gain.node.setScale(v3(0.7, 0.7, 0.7));
            }
          } // if ( !this.m_extraManager )
          // {
          //     this.m_extraManager = this.node.getComponent( ExtraManager );
          // }
          // this.m_extraManager.OnRotation( isLandscape, isSmall, isLow );


          if (this.m_commonText) {
            this.m_commonText.OnRotation(isLandscape);
          }

          if (this.m_commonWebPage) {
            this.m_commonWebPage.OnRotation(isLandscape);
          }

          this.RotateItemSpinBtn();

          if (!this.m_notifyRoot) {
            NotificationManager.GetInstance().OnRotation(isLandscape);
          }

          VolatilityManager.GetInstance().OnRotation(isLandscape);
          JPManager.GetInstance().Rotation(isLandscape);
          MHBManager.GetInstance().Rotation(isLandscape);

          if (this.m_lobbyMarqueeNode.getChildByName("lobbyMarquee_L") && this.m_lobbyMarqueeNode.getChildByName("lobbyMarquee_S")) {
            var lobbyMarquee_L = this.m_lobbyMarqueeNode.getChildByName("lobbyMarquee_L");
            lobbyMarquee_L.getComponent(UIOpacity).opacity = isLandscape ? 255 : 0;
            var lobbyMarquee_S = this.m_lobbyMarqueeNode.getChildByName("lobbyMarquee_S");
            lobbyMarquee_S.getComponent(UIOpacity).opacity = isLandscape ? 0 : 255; // this.m_lobbyMarqueeNode.getChildByName( "lobbyMarquee_S" ).y = baseViewSize.height / 2;

            var x = this.m_lobbyMarqueeNode.getChildByName("lobbyMarquee_S").position.x;
            this.m_lobbyMarqueeNode.getChildByName("lobbyMarquee_S").setPosition(x, baseViewSize.height / 2);
          }

          if (!sys.isNative) {
            // let loadingMask = document.getElementById( "loadingBlock" );
            // if ( loadingMask && loadingMask.style.visibility == "visible" )
            // {
            //     loadingMask.style.visibility = "hidden";
            //     // let container = document.getElementById( 'Cocos2dGameContainer' ).style
            //     // loadingMask.style.width = parseFloat( container.width ) + parseFloat( container.paddingLeft ) + parseFloat( container.paddingRight ) + "px";
            //     // tween( this.node )
            //     //     .delay( 0.05 )
            //     //     .call( () =>
            //     //     {
            //     //         let t: HTMLElement = document.getElementById( "OpenWeb" );
            //     //         t.click();
            //     //     } )
            //     //     .start();
            // }
            window.scrollTo(0, 0);
          } else {
            AppManager.ChangePos(isLandscape);
          }
        };

        _proto2.RotateItemSpinBtn = function RotateItemSpinBtn() {}
        /**
         *
         * @param title 介面標題
         * @param content 內容，有道具卡圖示時為道具卡描述
         * @param itemTilte 道具卡所屬的遊戲
         * @param itemIconSprite 道具卡icon
         */
        ;

        _proto2.OpenCommonText = function OpenCommonText(title, content, itemTilte, itemIconSprite, itemNum, textType) {
          if (this.m_commonText) {
            this.m_commonText.OpenCommonText(title, content, itemTilte, itemIconSprite, itemNum, textType);
          }
        }
        /* commonText 收藏客製化 */
        ;

        _proto2.InitFavorIcon = function InitFavorIcon(func) {
          if (func && this.m_commonText) {
            this.m_commonText.InitFavorIcon(func);
          }
        };

        _proto2.CloseCommonText = function CloseCommonText() {
          if (this.m_commonText) {
            this.m_commonText.CloseCommonText();
          }
        };

        _proto2.SetContentText_HorizontalAlign = function SetContentText_HorizontalAlign(align) {
          if (this.m_commonText) {
            this.m_commonText.SetContentText_HorizontalAlign(align);
          }
        }
        /* CommonWebPage webview客製化 */
        ;

        _proto2.OpenCommonWebPage = function OpenCommonWebPage(url, title, reload) {
          if (title === void 0) {
            title = "";
          }

          if (reload === void 0) {
            reload = false;
          }

          if (this.m_commonWebPage) {
            this.m_commonWebPage.SetTitle(title);
            this.m_commonWebPage.Show(url, this.m_isLandscape, reload);
          }
        };

        _proto2.CloseCommonWebPage = function CloseCommonWebPage() {
          if (this.m_commonWebPage) {
            this.m_commonWebPage.OnClose();
          }
        }
        /**
         * 監聽按鈕開關事件
         * @param name 註冊著名稱，在Define的CbKey增加自己的名稱，不要重複
         * @param openCb 按鈕開啟
         * @param closeCb 按鈕關閉
         */
        ;

        _proto2.AddOpenCloseBtnCb = function AddOpenCloseBtnCb(name, openCb, closeCb) {
          this.m_openBtnCbs[name] = openCb;
          this.m_closeBtnCbs[name] = closeCb;
        }
        /**
         * 開啟按鈕
         */
        ;

        _proto2.OpenAllBtn = function OpenAllBtn() {
          for (var key in this.m_openBtnCbs) {
            if (Object.prototype.hasOwnProperty.call(this.m_openBtnCbs, key)) {
              var element = this.m_openBtnCbs[key];
              element && element();
            }
          }
        }
        /**
         * 關閉按鈕
         */
        ;

        _proto2.CloseAllBtn = function CloseAllBtn() {
          for (var key in this.m_closeBtnCbs) {
            if (Object.prototype.hasOwnProperty.call(this.m_closeBtnCbs, key)) {
              var element = this.m_closeBtnCbs[key];
              element && element();
            }
          }
        };

        _proto2.ChangeWebViewSize = function ChangeWebViewSize(isLandscape) {
          var floatViewSize = this.m_floatView.getComponent(UITransform).contentSize;
          this.m_webView.node.getComponent(UITransform).setContentSize(size(floatViewSize.width, floatViewSize.height));
          return;
        } //直橫動畫結束的callback
        ;

        _proto2.ChangeEnd = function ChangeEnd() {
          this.SetSpinState(this.m_btn_state);

          if (this.m_cb) {
            this.m_cb();
            this.m_cb = null;
          }
        }
        /**
         * 直橫版切換動畫
         * @param animName 請從BarAnimName內擇一播放
         */
        ;

        _proto2.PlayAnim = function PlayAnim(animName) {
          var _this5 = this;

          var anim = this.getComponent(Animation);

          if (anim) {
            anim.play(animName);
            anim.once(Animation.EventType.FINISHED, function () {
              _this5.SetExtraBetView();
            });
          } else {
            this.SetExtraBetView();
          }
        };

        _proto2.SetScaleAction = function SetScaleAction(node, isPress, lowScale) {
          var holdingScale = v3(0.95, 0.95, 1);
          var normalScale = v3(1, 1, 1);

          if (isPress) {
            tween(node).to(SCALE_TIME, {
              scale: holdingScale
            }).start();
          } else {
            tween(node).to(SCALE_TIME, {
              scale: normalScale
            }).start();
          }
        };

        _proto2.SendReleaseSpinEvent = function SendReleaseSpinEvent() {
          if (this.m_touchCb) {
            var event = new EventTouch([], false, "");
            event.target = new FackEventTarget(BottombarManager.UIName.BTN_RELEASE_SPIN);
            this.m_touchCb(event);
          }
        }
        /**
         * 設定按鍵回應
         * @param touchCb 各按鍵透過此callback通知
         */
        ;

        _proto2.SetTouchEvet = function SetTouchEvet(touchCb) {
          var _this6 = this;

          this.m_touchCb = touchCb; // 快停

          if (!Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CloseSpeedUp)) {
            if (this.m_floatView.getChildByName(BottombarManager.UIName.BTN_SPEED)) {
              this.m_speedBtn = this.m_floatView.getChildByName(BottombarManager.UIName.BTN_SPEED).getComponent(Button);
            } else {
              this.m_speedBtn = this.m_speedButton;
            }

            this.m_speedImg = this.m_speedBtn.node.getChildByName(BottombarManager.UIName.IMG_SPEED);
            this.m_speedBtn.node.on(Node.EventType.TOUCH_START, function (event) {
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this6.m_currentTouchName == null && _this6.m_speedBtn.interactable) {
                _this6.m_currentTouchName = event.target.name;

                _this6.SetScaleAction(_this6.m_speedBtn.node, true, true);
              } else {
                if (event.target && event.target.active == false) {
                  _this6.m_currentTouchName = event.target.name;
                }
              }
            });
            this.m_speedBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              _this6.SetScaleAction(_this6.m_speedBtn.node, false, true);

              if (_this6.m_currentTouchName == event.target.name) {
                _this6.m_currentTouchName = null;
              }
            });
            this.m_speedBtn.node.on(Node.EventType.TOUCH_END, function (event) {
              _this6.SetScaleAction(_this6.m_speedBtn.node, false, true);

              if (_this6.m_currentTouchName != event.target.name) {
                return;
              }

              _this6.m_currentTouchName = null;

              _this6.ClickSpeedBtn();
            });
          } else {
            var speedNode;

            if (this.m_floatView.getChildByName(BottombarManager.UIName.BTN_SPEED)) {
              speedNode = this.m_floatView.getChildByName(BottombarManager.UIName.BTN_SPEED);
            } else {
              speedNode = this.m_speedButton.node;
            }

            var speedImg = speedNode.getChildByName(BottombarManager.UIName.IMG_SPEED);
            speedImg.active = false;
            speedNode.active = false;

            if (this.m_speedHintLabel) {
              this.m_speedHintLabel.node.active = false;
            }
          } // 聲音控制


          if (!this.m_soundBtn) {
            this.m_soundBtn = this.m_commView.getChildByName(BottombarManager.UIName.BTN_SOUND).getComponent(Button);
          }

          if (sys.isNative || AppManager.LobbyData) {
            try {
              if (AppManager.LobbyData.mute) {
                // 關
                this.m_soundBtnStatus = false;
                this.m_soundBtn.node.getComponent(Sprite).spriteFrame = this.m_soundBtnSprite[1];
                this.m_soundBtn.node.getComponent(UIRenderer).color = color(135, 126, 98);
                SoundManager.getInstance().SetAllMute(true);
                this.CheckSound();
                this.m_soundTime = 0;
                this.SendClickEvent(Define.BTN_CLICK_EVENT.SOUND_OFF, this.m_spinWithSpeed);
              } // 開
              else {
                  this.m_soundBtnStatus = true;
                  this.m_soundBtn.node.getComponent(Sprite).spriteFrame = this.m_soundBtnSprite[0];
                  this.m_soundBtn.node.getComponent(UIRenderer).color = color(255, 255, 255);
                  SoundManager.getInstance().SetAllMute(false);
                  this.CheckSound();
                  this.SendClickEvent(Define.BTN_CLICK_EVENT.SOUND_ON, this.m_spinWithSpeed);
                }
            } catch (error) {}
          }

          this.m_soundBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this6.m_currentTouchName == null && _this6.m_soundBtn.interactable) {
              _this6.m_currentTouchName = event.target.name;
              tween(_this6.m_soundBtn.node).to(SCALE_TIME, {
                scale: v3(0.9, 0.9, 1)
              }).start();
            } else {
              if (event.target && event.target.active == false) {
                _this6.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_soundBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            tween(_this6.m_soundBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName == event.target.name) {
              _this6.m_currentTouchName = null;
            }
          });
          this.m_soundBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            tween(_this6.m_soundBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName != event.target.name) {
              return;
            }

            _this6.m_currentTouchName = null;

            _this6.ClickSoundBtn();

            touchCb(event);
          }); // 設定選單

          this.m_commBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this6.m_currentTouchName == null && _this6.m_commBtn.interactable) {
              _this6.m_currentTouchName = event.target.name;
              tween(_this6.m_commBtn.node).to(SCALE_TIME, {
                scale: v3(0.9, 0.9, 1)
              }).start();
            } else {
              if (event.target && event.target.active == false) {
                _this6.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_commBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            tween(_this6.m_commBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName == event.target.name) {
              _this6.m_currentTouchName = null;
            }
          });
          this.m_commBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            tween(_this6.m_commBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName != event.target.name) {
              return;
            }

            _this6.m_currentTouchName = null;

            if (_this6.m_betRootNode.active) {
              _this6.m_betRootNode.active = false;

              if (_this6.m_extraBetView) {
                _this6.m_extraBetView.active = false;
              }

              if (_this6.m_touchCb && _this6.m_isSendBetViewOpen) {
                var cEvent = new EventTouch([], false, "");
                cEvent.target = new FackEventTarget(BottombarManager.BetViewState.Close);

                _this6.m_touchCb(cEvent);
              }
            }

            _this6.m_commView.active = !_this6.m_commView.active;

            if (_this6.m_commView.active) {
              if (Define.IS_DEMO || _this6.IsGLIGames || _this6.IsBMMGames || Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.GameHistory)) {
                // Demo 狀態下關閉歷程按鈕
                _this6.m_historyBtn.node.active = false;
              }

              if (_this6.IsGLIGames || _this6.IsBMMGames || Tools.KeepGLISetting) {
                // 關閉功能列中智能託管
                _this6.m_wiseAutoBtn.node.active = false;
              }
            }

            touchCb(event);
            SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
          }); // spin

          this.m_spinBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this6.m_currentTouchName == null && _this6.m_spinBtn.interactable) {
              _this6.m_currentTouchName = event.target.name;

              if (_this6.m_spinHoldTimer) {
                _this6.m_spinHoldTimer.Clear();

                _this6.m_spinHoldTimer.Start(SpinHoldIntervalTime * 1000);

                _this6.m_isFirstSpinHold = true;
              }
            } else {
              if (event.target && event.target.active == false) {
                _this6.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_spinBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this6.m_currentTouchName == event.target.name) {
              _this6.m_currentTouchName = null;
            }

            if (_this6.m_spinHoldTimer && _this6.m_spinHoldTimer.IsStarted()) {
              _this6.SendReleaseSpinEvent();

              _this6.m_spinHoldTimer.Clear();

              if (_this6.m_isFirstSpinHold) {
                _this6.m_isFirstSpinHold = false;
              } else {
                return;
              }
            }
          });
          this.m_spinBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            if (!_this6.m_isSpinTurbo && _this6.m_currentTouchName != event.target.name) {
              return;
            }

            _this6.m_currentTouchName = null;
            VolatilityManager.GetInstance().ShowVolatilityBtn(false);

            if (_this6.m_spinHoldTimer && _this6.m_spinHoldTimer.IsStarted()) {
              _this6.SendReleaseSpinEvent();

              _this6.m_spinHoldTimer.Clear();

              if (_this6.m_isFirstSpinHold) {
                _this6.m_isFirstSpinHold = false;
              } else {
                return;
              }
            }

            _this6.SendReleaseSpinEvent(); //連點SPIN / STOP，於5秒內達10次以上


            _this6.AddHardStopTipCount(event.target.name);

            if (_this6.m_isSpinTurbo || _this6.m_btn_state == _this6.SlotBottomBarState.IDLE && _this6.m_spinBtn.interactable || _this6.m_isSkipFlash) {
              _this6.CloseAllMenu();

              touchCb(event);

              _this6.SendSpinLog();
            }
          }); // stop

          this.m_stopSpinBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            // event.stopPropagationImmediate();
            // event.stopPropagation();
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this6.m_currentTouchName == null && _this6.m_stopSpinBtn.interactable) {
              _this6.m_currentTouchName = event.target.name;

              if (_this6.m_spinHoldTimer) {
                _this6.m_spinHoldTimer.Clear();

                _this6.m_spinHoldTimer.Start(SpinHoldIntervalTime * 1000);

                _this6.m_isFirstSpinHold = true;
              }
            } else {
              if (event.target && event.target.active == false) {
                _this6.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_stopSpinBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this6.m_currentTouchName == event.target.name) {
              _this6.m_currentTouchName = null;
            }

            if (_this6.m_spinHoldTimer && _this6.m_spinHoldTimer.IsStarted()) {
              _this6.SendReleaseSpinEvent();

              _this6.m_spinHoldTimer.Clear();

              if (_this6.m_isFirstSpinHold) {
                _this6.m_isFirstSpinHold = false;
              } else {
                return;
              }
            }
          });
          this.m_stopSpinBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            if (_this6.m_currentTouchName != event.target.name) {
              return;
            }

            _this6.m_currentTouchName = null;

            if (_this6.m_spinHoldTimer && _this6.m_spinHoldTimer.IsStarted()) {
              _this6.SendReleaseSpinEvent();

              _this6.m_spinHoldTimer.Clear();

              _this6.m_isFirstSpinHold = false;

              if (_this6.m_isFirstSpinHold) {
                _this6.m_isFirstSpinHold = false;
              } else {
                return;
              }
            }

            _this6.SendReleaseSpinEvent(); //連點SPIN / STOP，於5秒內達10次以上


            _this6.AddHardStopTipCount(event.target.name);

            if (_this6.m_stopSpinBtn.interactable) {
              _this6.CloseAllMenu();

              if (_this6.m_haveStopSound) {
                SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
              }

              touchCb(event);

              _this6.SendClickEvent(Define.BTN_CLICK_EVENT.STOP, _this6.m_spinWithSpeed);
            }
          }); // if ( !this.IsGLIGames && !this.IsBMMGames && !Tools.KeepGLISetting )

          if (!Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.ShowAutoSetting)) {
            // auto paly
            this.m_autoBtn.node.on(Node.EventType.TOUCH_START, function (event) {
              // event.stopPropagationImmediate();
              // event.stopPropagation();
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this6.m_currentTouchName == null && _this6.m_autoBtn.interactable) {
                _this6.m_currentTouchName = event.target.name;

                _this6.SetScaleAction(_this6.m_autoBtn.node, true);

                _this6.m_autoTouchTime = 0;
                _this6.m_isStartTouchAuto = true;
              } else {
                if (event.target && event.target.active == false) {
                  _this6.m_currentTouchName = event.target.name;
                }
              }
            });
            this.m_autoBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              _this6.SetScaleAction(_this6.m_autoBtn.node, false);

              if (_this6.m_currentTouchName == event.target.name) {
                _this6.m_currentTouchName = null;
                _this6.m_autoTouchTime = 0;
                _this6.m_isStartTouchAuto = false;
              }
            });
            this.m_autoBtn.node.on(Node.EventType.TOUCH_END, function (event) {
              _this6.SetScaleAction(_this6.m_autoBtn.node, false);

              if (_this6.m_currentTouchName != event.target.name) {
                return;
              }

              _this6.m_currentTouchName = null;

              if (_this6.m_btn_state == _this6.SlotBottomBarState.IDLE && _this6.m_autoBtn.interactable) {
                _this6.CloseAllMenu();

                _this6.m_isWiseAutoPlay = false;

                _this6.StartAutoplay();

                SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
                touchCb(event);
              }

              _this6.m_autoTouchTime = 0;
              _this6.m_isStartTouchAuto = false;

              _this6.SendClickEvent(Define.BTN_CLICK_EVENT.AUTOPLAY, _this6.m_spinWithSpeed);
            });
          } else {
            // new auto play
            this.m_autoBtn.node.on(Node.EventType.TOUCH_START, function (event) {
              // event.stopPropagationImmediate();
              // event.stopPropagation();
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this6.m_currentTouchName == null && _this6.m_autoBtn.interactable) {
                _this6.m_currentTouchName = event.target.name;

                if (!_this6.m_lockWiseAutoEnable) {
                  _this6.SetScaleAction(_this6.m_autoBtn.node, true);
                }
              } else {
                if (event.target && event.target.active == false) {
                  _this6.m_currentTouchName = event.target.name;
                }
              }
            });
            this.m_autoBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              _this6.SetScaleAction(_this6.m_autoBtn.node, false);

              if (_this6.m_currentTouchName == event.target.name) {
                _this6.m_currentTouchName = null;
              }
            });
            this.m_autoBtn.node.on(Node.EventType.TOUCH_END, function (event) {
              _this6.SetScaleAction(_this6.m_autoBtn.node, false);

              if (_this6.m_currentTouchName != event.target.name) {
                return;
              }

              _this6.m_currentTouchName = null;

              if (!_this6.m_lockWiseAutoEnable) {
                _this6.CloseAllMenu();

                SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
                _this6.m_isWiseAutoPlay = true;
                touchCb(event);
              }

              _this6.PushClickToBuffer(_this6.CLICK_BUFFER_TYPE.WISEAUTO);
            });
          } // wise auto play


          this.m_wiseAutoBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            // event.stopPropagationImmediate();
            // event.stopPropagation();
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this6.m_currentTouchName == null && _this6.m_wiseAutoBtn.interactable) {
              _this6.m_currentTouchName = event.target.name;

              if (!_this6.m_lockWiseAutoEnable) {
                _this6.SetScaleAction(_this6.m_autoBtn.node, false);

                tween(_this6.m_wiseAutoBtn.node).to(SCALE_TIME, {
                  scale: v3(0.9, 0.9, 1)
                }).start();
              }
            } else {
              if (event.target && event.target.active == false) {
                _this6.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_wiseAutoBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            tween(_this6.m_wiseAutoBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName == event.target.name) {
              _this6.m_currentTouchName = null;
            }
          });
          this.m_wiseAutoBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            tween(_this6.m_wiseAutoBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName != event.target.name) {
              return;
            }

            _this6.m_currentTouchName = null;

            if (_this6.m_wiseAutoBtn.interactable && !_this6.m_lockWiseAutoEnable) {
              _this6.CloseAllMenu();

              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
              _this6.m_isWiseAutoPlay = true;
              touchCb(event);
            }

            _this6.PushClickToBuffer(_this6.CLICK_BUFFER_TYPE.WISEAUTO);
          }); // auto play stop

          this.m_stopAutoBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            // event.stopPropagationImmediate();
            // event.stopPropagation();
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this6.m_currentTouchName == null && _this6.m_stopAutoBtn.interactable) {
              _this6.m_currentTouchName = event.target.name;

              _this6.SetScaleAction(_this6.m_stopAutoBtn.node, true);
            } else {
              if (event.target && event.target.active == false) {
                _this6.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_stopAutoBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            _this6.SetScaleAction(_this6.m_stopAutoBtn.node, false);

            if (_this6.m_currentTouchName == event.target.name) {
              _this6.m_currentTouchName = null;
            }
          });
          this.m_stopAutoBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            _this6.SetScaleAction(_this6.m_stopAutoBtn.node, false);

            if (_this6.m_currentTouchName != event.target.name) {
              return;
            }

            _this6.m_currentTouchName = null;

            if (_this6.m_stopAutoBtn.interactable) {
              _this6.CloseAllMenu();

              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
              touchCb(event);

              if (_this6.m_autoHintLabel && _this6.m_autoHintEffect) {
                for (var i = 0; i < _this6.m_autoHintLabel.length; i++) {
                  _this6.m_autoHintLabel[i].node.active = true;
                }

                for (var j = 0; j < _this6.m_autoHintEffect.length; j++) {
                  _this6.m_autoHintEffect[j].active = true;
                }
              }
            }

            if (_this6.m_autoplaySetting.IsUseWisePlay()) {
              _this6.SendClickEvent(Define.BTN_CLICK_EVENT.WISEAUTO_FORCE_MANUAL_STOP, _this6.m_spinWithSpeed);

              _this6.m_autoplaySetting.SetUseWisePlay(false);
            } else {
              _this6.SendClickEvent(Define.BTN_CLICK_EVENT.AUTOPLAY_STOP, _this6.m_spinWithSpeed);
            }
          }); // auto play stop with count

          this.m_stopAutoCountBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            // event.stopPropagationImmediate();
            // event.stopPropagation();
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this6.m_currentTouchName == null && _this6.m_stopAutoCountBtn.interactable) {
              _this6.m_currentTouchName = event.target.name;

              _this6.SetScaleAction(_this6.m_stopAutoCountBtn.node, true);
            } else {
              if (event.target && event.target.active == false) {
                _this6.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_stopAutoCountBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            _this6.SetScaleAction(_this6.m_stopAutoCountBtn.node, false);

            if (_this6.m_currentTouchName == event.target.name) {
              _this6.m_currentTouchName = null;
            }
          });
          this.m_stopAutoCountBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            _this6.SetScaleAction(_this6.m_stopAutoCountBtn.node, false);

            if (_this6.m_currentTouchName != event.target.name) {
              return;
            }

            _this6.m_currentTouchName = null;

            if (_this6.m_stopAutoCountBtn.interactable) {
              if (_this6.m_totalRound > 0) {
                _this6.m_autoplaySetting.SetTotalRound(_this6.m_totalRound.toString());

                _this6.m_autoplaySetting.ChangeTotalRoundBg(true);
              }

              _this6.CloseAllMenu();

              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
              touchCb(event);

              if (_this6.m_autoHintLabel && _this6.m_autoHintEffect) {
                for (var i = 0; i < _this6.m_autoHintLabel.length; i++) {
                  _this6.m_autoHintLabel[i].node.active = true;
                }

                for (var j = 0; j < _this6.m_autoHintEffect.length; j++) {
                  _this6.m_autoHintEffect[j].active = true;
                }
              }
            }

            _this6.SendClickEvent(Define.BTN_CLICK_EVENT.WISEAUTO_FORCE_MANUAL_STOP, _this6.m_spinWithSpeed);

            _this6.m_autoplaySetting.SetUseWisePlay(false);
          }); // bet

          this.BetBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            // event.stopPropagationImmediate();
            // event.stopPropagation();
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this6.m_currentTouchName == null && _this6.BetBtn.interactable) {
              _this6.m_currentTouchName = event.target.name; // this.SetScaleAction( this.BetBtn.node, true );
            } else {
              if (event.target && event.target.active == false) {
                _this6.m_currentTouchName = event.target.name;
              }
            }
          });
          this.BetBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            // this.SetScaleAction( this.BetBtn.node, false );
            if (_this6.m_currentTouchName == event.target.name) {
              _this6.m_currentTouchName = null;
            }
          });
          this.BetBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            if (_this6.m_currentTouchName != event.target.name) {
              return;
            }

            _this6.m_currentTouchName = null;
            var cEvent = new EventTouch([], false, "");

            if (_this6.m_commView.active) {
              _this6.m_commView.active = false;
            }

            if (!_this6.m_betRootNode.active) {
              if (_this6.m_btn_state == _this6.SlotBottomBarState.IDLE) {
                cEvent.target = new FackEventTarget(BottombarManager.BetViewState.Open);

                if (_this6.m_betBtns.length !== 0) {
                  _this6.m_shouldUpdateBetBtn = false;

                  for (var i = 0; i < _this6.m_betBtns.length; i++) {
                    _this6.m_betBtns[i].node.getChildByName("selected").active = false;
                    _this6.m_betBtns[i].node.getComponent(UIRenderer).color = color(255, 255, 255);
                    _this6.m_betLabels[i].node.getComponent(UIRenderer).color = color(255, 255, 255);
                  }

                  var betIndex = _this6.m_betIndex;
                  log("this.m_betBtns : ", _this6.m_betBtns);
                  _this6.m_betBtns[betIndex].node.getChildByName(BottombarManager.UIName.SELECTED).active = true;
                  _this6.m_betRootNode.active = true;

                  _this6.ChangePos(_this6.m_isLandscape, _this6.m_cb, _this6.m_isSmall, _this6.m_isLow);
                } else {
                  _this6.CreateNormalBetBtns();
                }

                if (_this6.m_vipLockNode.active) {
                  var anim = _this6.m_vipHintNode.getComponent(Animation);

                  anim.play("VipLock_" + _this6.m_betLimit.toString());

                  var widget = _this6.m_vipLockNode.getComponent(Widget);

                  if (widget) {
                    widget.updateAlignment();
                  }
                }

                if (_this6.m_extraBetView && _this6.m_extraBetView.children.length > 0) {
                  _this6.m_extraBetView.active = true;
                }
              }
            } else {
              cEvent.target = new FackEventTarget(BottombarManager.BetViewState.Close);
              _this6.m_betRootNode.active = false;

              if (_this6.m_extraBetView) {
                _this6.m_extraBetView.active = false;
              }
            }

            if (_this6.m_touchCb && _this6.m_isSendBetViewOpen) {
              _this6.m_touchCb(cEvent);
            }

            SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
          }); // 幣值切換

          this.m_currencyBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this6.m_currentTouchName == null && _this6.m_currencyBtn.interactable) {
              _this6.m_currentTouchName = event.target.name;
              tween(_this6.m_currencyBtn.node).to(SCALE_TIME, {
                scale: v3(0.9, 0.9, 1)
              }).start();
            } else {
              if (event.target && event.target.active == false) {
                _this6.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_currencyBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            tween(_this6.m_currencyBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName == event.target.name) {
              _this6.m_currentTouchName = null;
            }
          });
          this.m_currencyBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            tween(_this6.m_currencyBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName != event.target.name) {
              return;
            }

            _this6.m_currentTouchName = null;

            if (_this6.m_currencyBtn.interactable) {
              _this6.CloseAllMenu();

              _this6.m_currencyInfo.Show(_this6.m_isLandscape);

              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
            }
          });
          this.CheckSound();
        };

        _proto2.SetAppBetSideBtn = function SetAppBetSideBtn(btn, type) {
          var _this7 = this;

          btn.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this7.m_currentTouchName == null && btn.interactable) {
              _this7.m_currentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this7.m_currentTouchName = event.target.name;
              }
            }
          });
          btn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this7.m_currentTouchName == event.target.name) {
              _this7.m_currentTouchName = null;
            }
          });
          btn.node.on(Node.EventType.TOUCH_END, function (event) {
            if (_this7.m_currentTouchName != event.target.name) {
              return;
            }

            _this7.m_currentTouchName = null;

            if (_this7.m_commView.active) {
              _this7.m_commView.active = false;
            }

            if (_this7.m_betRootNode.active) {
              _this7.m_betRootNode.active = false;

              if (_this7.m_extraBetView) {
                _this7.m_extraBetView.active = false;
              }
            }

            if (_this7.m_btn_state == _this7.SlotBottomBarState.IDLE) {
              if (_this7.m_betBtns.length !== 0) {
                _this7.m_shouldUpdateBetBtn = false;

                for (var i = 0; i < _this7.m_betBtns.length; i++) {
                  _this7.m_betBtns[i].node.getChildByName("selected").active = false;
                  _this7.m_betBtns[i].node.getComponent(UIRenderer).color = color(255, 255, 255);
                  _this7.m_betLabels[i].node.getComponent(UIRenderer).color = color(255, 255, 255);
                }

                var betIndex = _this7.m_betIndex;

                if (event.target.name == BottombarManager.UIName.BTN_INCBET) {
                  _this7.m_betIndex++;
                } else if (event.target.name == BottombarManager.UIName.BTN_DECBET) {
                  _this7.m_betIndex--;
                }

                log("this.m_betBtns : ", _this7.m_betBtns);
                _this7.m_betBtns[_this7.m_betIndex].node.getChildByName(BottombarManager.UIName.SELECTED).active = true;
                var bet = _this7.m_betList[_this7.m_betIndex];

                if (_this7.m_multiBetInfo && _this7.m_multiBetInfo.Multi[_this7.m_multBetIdx] > 0 && _this7.m_multiBetInfo.IsMulti()) {
                  bet = Tools.times(bet, _this7.m_multiBetInfo.Multi[_this7.m_multBetIdx]);
                }

                _this7.NowBetLabel.string = "<b>" + _this7.m_betDollerSymbol + "</b>" + Tools.FormatNumberThousands(Tools.strip(_this7.GetDisplayValue(bet) * _this7.m_reelCount), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO) + ("<size=15>" + Define.DollarSymbolSuffix.replace(" ", "\n") + "</size>");
                var data = {
                  bet: bet
                };
                AppManager.SetData(data);
                var key = Define.AID + ":" + Define.NOW_GAME_ID + ":Bet";
                LocalStorageManager.SetInt(key, _this7.m_betIndex);
                var key1 = Define.AID + ":" + Define.NOW_GAME_ID + Define.BetStorageKey;
                LocalStorageManager.SetInt(key1, _this7.m_betList[_this7.m_betIndex]);
                SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);

                if (_this7.m_touchCb) {
                  _this7.m_touchCb(event);
                }
              }
            }
          });
        }
        /** 開啟押注列表 */
        ;

        _proto2.OpenBetView = function OpenBetView() {
          this.m_currentTouchName = null;
          var cEvent = new EventTouch([], false, "");

          if (this.m_commView.active) {
            this.m_commView.active = false;
          }

          if (!this.m_betRootNode.active) {
            if (this.m_btn_state == this.SlotBottomBarState.IDLE) {
              cEvent.target = new FackEventTarget(BottombarManager.BetViewState.Open);

              if (this.m_betBtns.length !== 0) {
                this.m_shouldUpdateBetBtn = false;

                for (var i = 0; i < this.m_betBtns.length; i++) {
                  this.m_betBtns[i].node.getChildByName("selected").active = false;
                  this.m_betBtns[i].node.getComponent(UIRenderer).color = color(255, 255, 255);
                  this.m_betLabels[i].node.getComponent(UIRenderer).color = color(255, 255, 255);
                }

                var betIndex = this.m_betIndex;
                log("this.m_betBtns : ", this.m_betBtns);
                this.m_betBtns[betIndex].node.getChildByName(BottombarManager.UIName.SELECTED).active = true;
                this.m_betRootNode.active = true;
                this.ChangePos(this.m_isLandscape, this.m_cb, this.m_isSmall, this.m_isLow);
              } else {
                this.CreateNormalBetBtns();
              }

              if (this.m_extraBetView && this.m_extraBetView.children.length > 0) {
                this.m_extraBetView.active = true;
              }
            }
          }

          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
        }
        /**@ch 第一次spin要記錄 */
        ;

        _proto2.SendSpinLog = function SendSpinLog() {
          if (this.m_isFirstSpin) {
            this.m_isFirstSpin = false;
            ConnectionManager.getInstance().SendPhaseEnteringEvent(ConnectionManager.FormPhaseEventParams(Number(Define.AID), Number(Define.NOW_GAME_ID), Define.VERSION, Define.PHASE_ENTERING_EVENT.FIRST_SPIN, Define.PHASE_RESULT.SUCCESS, Tools.GetLinkParameterByName("ssoKey"), Define.API_ID));
          }
        };

        _proto2.CheckUseK = function CheckUseK() {
          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.UseKilo)) {
            var bet = this.m_betList[this.m_betList.length - 1];

            if (this.m_multiBetInfo && this.m_multiBetInfo.Multi[this.m_multBetIdx] > 0 && this.m_multiBetInfo.IsMulti()) {
              bet = Tools.times(bet, this.m_multiBetInfo.Multi[this.m_multBetIdx]);
            }

            if (bet >= Million) {
              return true;
            }
          }

          return false;
        };

        _proto2.SetNumberK = function SetNumberK(value) {
          var num = Tools.strip(Tools.divide(value, Kilo));
          return num.toString() + "K";
        };

        _proto2.CreateNormalBetBtns = function CreateNormalBetBtns(open) {
          var _this8 = this;

          if (open === void 0) {
            open = true;
          } //產生layout，每個layout只需要裝5個


          for (var i = 0; i < Math.ceil(this.m_betList.length / Define.BetColumnLimit); i++) {
            if (!this.m_betLayoutNodes[i]) {
              var node = new Node();
              node.name = "BetNode" + i;
              node.position = BET_BTN_POS;
              node.addComponent(UITransform);
              node.getComponent(UITransform).setContentSize(this.m_betLayoutSize);
              node.getComponent(UITransform).setAnchorPoint(new Vec2(0.5, 0));
              this.m_betLayoutNodes.unshift(node);
              this.m_betViewNode.addChild(node); //按鈕

              var btnNode = new Node();
              btnNode.name = "BtnNode" + i;
              var btnLayout = btnNode.addComponent(Layout);
              btnLayout.type = Layout.Type.VERTICAL;
              btnLayout.resizeMode = Layout.ResizeMode.CONTAINER;
              btnNode.getComponent(UITransform).setContentSize(this.m_betLayoutSize);
              btnNode.getComponent(UITransform).setAnchorPoint(new Vec2(0.5, 0));
              node.addChild(btnNode);
              this.m_btnLayoutNodes.unshift(btnNode); //押注

              var betNode = new Node();
              betNode.name = "ValueNode" + i;
              var betLayout = betNode.addComponent(Layout);
              betLayout.type = Layout.Type.VERTICAL;
              betLayout.resizeMode = Layout.ResizeMode.CONTAINER;
              betNode.getComponent(UITransform).setContentSize(this.m_betLayoutSize);
              betNode.getComponent(UITransform).setAnchorPoint(new Vec2(0.5, 0));
              node.addChild(betNode);
              this.m_betNumLayoutNodes.unshift(betNode);
            }
          } //產生bet按鈕


          var counter = 0;
          var index = this.m_betLayoutNodes.length - 1;
          var useK = this.CheckUseK();

          var _loop = function _loop(_i3) {
            _this8.m_betList[_i3] = Tools.strip(_this8.m_betList[_i3]);
            betLabel = _this8.m_betLabels[_i3];
            var bet = _this8.m_betList[_i3];

            if (_this8.m_multiBetInfo && _this8.m_multiBetInfo.Multi[_this8.m_multBetIdx] > 0 && _this8.m_multiBetInfo.IsMulti()) {
              bet = Tools.times(bet, _this8.m_multiBetInfo.Multi[_this8.m_multBetIdx]);
            }

            if (betLabel) {
              betLabel.node.name = _i3.toString(); //這很重要

              betLabel.string = Tools.FormatNumberThousands(Tools.strip(_this8.GetDisplayValue(bet) * _this8.m_reelCount), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO);

              if (useK && _this8.GetDisplayValue(bet) * _this8.m_reelCount >= Kilo) {
                betLabel.string = _this8.SetNumberK(_this8.GetDisplayValue(bet) * _this8.m_reelCount);
              }

              Tools.SetFont(betLabel);
              counter += 1;

              if (counter > Define.BetColumnLimit) {
                counter = 1;
                index -= 1;
              }
            } else {
              //押注文字
              var _betNode = instantiate(_this8.m_betBtnPrefab);

              _betNode.name = _i3.toString(); //這很重要

              var labelNode = _betNode.getChildByName("Data").getChildByName(BottombarManager.UIName.BET_VALUE);

              var label = labelNode.getComponent(Label);
              label.string = Tools.FormatNumberThousands(Tools.strip(_this8.GetDisplayValue(bet) * _this8.m_reelCount), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO);

              if (useK && _this8.GetDisplayValue(bet) * _this8.m_reelCount >= Kilo) {
                label.string = _this8.SetNumberK(_this8.GetDisplayValue(bet) * _this8.m_reelCount);
              }

              _this8.m_betLabels[_i3] = label;
              Tools.SetFont(label); //清除多餘的

              labelNode.removeFromParent();

              _betNode.removeAllChildren();

              _betNode.addChild(labelNode);

              var btn = _betNode.getComponent(Button);

              btn.destroy();

              var spr = _betNode.getComponent(Sprite);

              spr.destroy(); //按鈕

              var _btnNode = instantiate(_this8.m_betBtnPrefab);

              _btnNode.name = _i3.toString(); //這很重要

              var valueNode = _btnNode.getChildByName("Data").getChildByName(BottombarManager.UIName.BET_VALUE);

              valueNode.removeFromParent();
              valueNode.destroy();
              _this8.m_betBtns[_i3] = _btnNode.getComponent(Button);
              counter += 1;

              if (counter > Define.BetColumnLimit) {
                counter = 1;
                index -= 1;
              }

              if (index < 0) {
                return "continue";
              } //index計算完才能確定在哪個


              _this8.m_betNumLayoutNodes[index].addChild(_betNode);

              _this8.m_btnLayoutNodes[index].addChild(_btnNode);

              _this8.m_betBtns[_i3].node.on(Node.EventType.TOUCH_START, function (event) {
                event.propagationImmediateStopped = true;
                event.propagationStopped = true;

                if (_this8.m_currentTouchName == null && _this8.m_betBtns[_i3].interactable) {
                  _this8.m_currentTouchName = event.target.name;
                } else {
                  if (event.target && event.target.active == false) {
                    _this8.m_currentTouchName = event.target.name;
                  }
                }
              });

              _this8.m_betBtns[_i3].node.on(Node.EventType.TOUCH_CANCEL, function (event) {
                if (_this8.m_currentTouchName == event.target.name) {
                  _this8.m_currentTouchName = null;
                }
              });

              _this8.m_betBtns[_i3].node.on(Node.EventType.TOUCH_END, function (event) {
                if (_this8.m_currentTouchName != event.target.name) {
                  return;
                }

                _this8.m_currentTouchName = null;
                _this8.m_betList[_this8.m_betIndex] = Tools.strip(_this8.m_betList[_this8.m_betIndex]);
                _this8.m_betBtns[_this8.m_betIndex].node.getChildByName(BottombarManager.UIName.SELECTED).active = false;
                _this8.m_betIndex = Number(event.target.name) || 0;
                _this8.m_betBtns[_this8.m_betIndex].node.getChildByName(BottombarManager.UIName.SELECTED).active = true;
                var bet = _this8.m_betList[_this8.m_betIndex];

                if (_this8.m_multiBetInfo && _this8.m_multiBetInfo.Multi[_this8.m_multBetIdx] > 0 && _this8.m_multiBetInfo.IsMulti()) {
                  bet = Tools.times(bet, _this8.m_multiBetInfo.Multi[_this8.m_multBetIdx]);
                }

                _this8.NowBetLabel.string = "<b>" + _this8.m_betDollerSymbol + "</b>" + Tools.FormatNumberThousands(Tools.strip(_this8.GetDisplayValue(bet) * _this8.m_reelCount), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO) + ("<size=15>" + Define.DollarSymbolSuffix.replace(" ", "\n") + "</size>");

                if (useK && _this8.GetDisplayValue(bet) * _this8.m_reelCount >= Kilo) {
                  _this8.NowBetLabel.string = "<b>" + _this8.m_betDollerSymbol + "</b>" + _this8.SetNumberK(Tools.strip(_this8.GetDisplayValue(bet) * _this8.m_reelCount));
                }

                var data = {
                  bet: bet
                };
                AppManager.SetData(data);
                _this8.m_betRootNode.active = false;
                var key = Define.AID + ":" + Define.NOW_GAME_ID + ":Bet";
                LocalStorageManager.SetInt(key, _this8.m_betIndex);
                var key1 = Define.AID + ":" + Define.NOW_GAME_ID + Define.BetStorageKey;
                LocalStorageManager.SetInt(key1, _this8.m_betList[_this8.m_betIndex]);
                SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);

                if (_this8.m_touchCb) {
                  _this8.m_touchCb(event);

                  if (_this8.m_isSendBetViewOpen) {
                    var _cEvent = new EventTouch([], false, "");

                    _cEvent.target = new FackEventTarget(BottombarManager.BetViewState.Close);

                    _this8.m_touchCb(_cEvent);
                  }
                }

                if (_this8.m_extraBetView) {
                  _this8.m_extraBetView.active = false;
                }
              });
            }
          };

          for (var _i3 = this.m_betList.length - 1; _i3 >= 0; _i3--) {
            var betLabel;

            var _ret = _loop(_i3);

            if (_ret === "continue") continue;
          } //設定上次選的bet


          for (var i = 0; i < this.m_betBtns.length; i++) {
            this.m_betBtns[i].node.getChildByName("selected").active = false;
          }

          this.m_betBtns[this.m_betIndex].node.getChildByName(BottombarManager.UIName.SELECTED).active = true;
          var width = 0,
              height = 0;

          for (var i = 0; i < this.m_betNumLayoutNodes.length; i++) {
            if (this.m_betNumLayoutNodes[i].children.length !== Define.BetColumnLimit) {
              var _height = this.m_betLayoutSize.height / Define.BetColumnLimit * this.m_betNumLayoutNodes[i].children.length;

              this.m_betNumLayoutNodes[i].getComponent(UITransform).height = _height;
              this.m_btnLayoutNodes[i].getComponent(UITransform).height = _height;
              this.m_betLayoutNodes[i].getComponent(UITransform).height = _height;
              this.m_betLayoutNodes[i].removeFromParent();
            } else {
              width += this.m_betNumLayoutNodes[i].getComponent(UITransform).contentSize.width;
              height = this.m_betNumLayoutNodes[i].getComponent(UITransform).contentSize.height;
            }
          } //把bet view拉高


          this.m_betRootNode.getComponent(UITransform).setContentSize(new Size(width + BetViewDiff, height + BET_VIEW_HEIGHT_DIF));
          this.m_betRootNode.active = open;
          this.SetExtraBetView();

          if (this.m_extraBetView) {
            if (this.m_extraBetView.children.length > 0) {
              this.m_extraBetView.active = open;
            } else {
              this.m_extraBetView.active = false;
            }
          } //顯示推薦


          if (this.m_prefer && !this.m_prefer.IsShowRange) {
            this.m_prefer.IsShowRange = true;
            var max = 2;
            var min = 0;
            var preferIdx = this.GetPreferIdx();

            if (preferIdx === 0) {
              min = preferIdx;
              max = 2;
            } else if (preferIdx === this.m_betList.length - 1) {
              max = preferIdx;
              min = preferIdx - 2;
            } else {
              min = preferIdx - 1;
              max = preferIdx + 1;
            }

            for (var _i4 = 0; _i4 < this.m_betBtns.length; _i4++) {
              if (_i4 > max || _i4 < min) {
                this.m_betBtns[_i4].node.getComponent(UIRenderer).color = color(135, 126, 98);
                this.m_betLabels[_i4].node.getComponent(UIRenderer).color = color(135, 126, 98);
              } else {
                this.m_betBtns[_i4].node.getComponent(UIRenderer).color = color(255, 255, 255);
                this.m_betLabels[_i4].node.getComponent(UIRenderer).color = color(255, 255, 255);
              }
            }
          }

          if (this.m_touchCb && this.m_isSendBetViewOpen) {
            var cEvent = new EventTouch([], false, "");
            cEvent.target = new FackEventTarget(open ? BottombarManager.BetViewState.Open : BottombarManager.BetViewState.Close);
            this.m_touchCb(cEvent);
          }
        };

        _proto2.ResetBetBtns = function ResetBetBtns() {
          while (this.m_betBtns.length > 0) {
            var btn = this.m_betBtns.pop();
            btn.node.removeFromParent();
            btn.node.destroy();
          }

          while (this.m_betLabels.length > 0) {
            var _btn = this.m_betLabels.pop();

            _btn.node.removeFromParent();

            _btn.node.destroy();
          }

          while (this.m_betLayoutNodes.length > 0) {
            var node = this.m_betLayoutNodes.pop();
            node.removeFromParent();
            node.destroy();
          }

          while (this.m_btnLayoutNodes.length > 0) {
            var _node2 = this.m_btnLayoutNodes.pop();

            _node2.removeFromParent();

            _node2.destroy();
          }

          while (this.m_betNumLayoutNodes.length > 0) {
            var _node3 = this.m_betNumLayoutNodes.pop();

            _node3.removeFromParent();

            _node3.destroy();
          }

          var key = Define.AID + ":" + Define.NOW_GAME_ID + ":Bet";
          var localBetIndex = LocalStorageManager.GetInt(key);
          this.m_betIndex = this.GetLocalBetIdx();
          this.CreateNormalBetBtns(false);
          var useK = this.CheckUseK();
          var bet = this.m_betList[this.m_betIndex];

          if (this.m_multiBetInfo && this.m_multiBetInfo.Multi[this.m_multBetIdx] > 0 && this.m_multiBetInfo.IsMulti()) {
            bet = Tools.times(bet, this.m_multiBetInfo.Multi[this.m_multBetIdx]);
          }

          this.NowBetLabel.string = "<b>" + this.m_betDollerSymbol + "</b>" + Tools.FormatNumberThousands(Tools.strip(this.GetDisplayValue(bet) * this.m_reelCount), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO) + ("<size=15>" + Define.DollarSymbolSuffix.replace(" ", "\n") + "</size>");

          if (useK && this.GetDisplayValue(bet) * this.m_reelCount >= Kilo) {
            this.NowBetLabel.string = "<b>" + this.m_betDollerSymbol + "</b>" + this.SetNumberK(Tools.strip(this.GetDisplayValue(bet) * this.m_reelCount));
          }

          var data = {
            bet: bet
          };
          AppManager.SetData(data);
        }
        /**
         * 取得押注階層，野牛從Define.BetStorageKey取得
         * @returns 階層
         */
        ;

        _proto2.GetLocalBetIdx = function GetLocalBetIdx() {
          var key = Define.AID + ":" + Define.NOW_GAME_ID + Define.BetStorageKey;
          var localBet = LocalStorageManager.GetInt(key);
          var useK = this.CheckUseK();

          if (localBet != null && Define.NOW_GAME_ID == Define.GAME_ID.BFS.toString()) {
            for (var i = 0; i < this.m_betList.length; i++) {
              if (this.m_betList[i] == localBet) {
                return i;
              }
            }
          } else {
            this.m_betIndex = this.GetNowBetIndex();

            var _key2 = Define.AID + ":" + Define.NOW_GAME_ID + ":Bet";

            var localBetIndex = LocalStorageManager.GetInt(_key2);

            if (localBetIndex != null && localBetIndex < this.m_betList.length) {
              return localBetIndex;
            }
          }

          var bet = this.m_betList[this.m_betIndex];

          if (this.m_multiBetInfo && this.m_multiBetInfo.Multi[this.m_multBetIdx] > 0 && this.m_multiBetInfo.IsMulti()) {
            bet = Tools.times(bet, this.m_multiBetInfo.Multi[this.m_multBetIdx]);
          }

          this.NowBetLabel.string = "<b>" + this.m_betDollerSymbol + "</b>" + Tools.FormatNumberThousands(Tools.strip(this.GetDisplayValue(bet) * this.m_reelCount), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO) + ("<size=15>" + Define.DollarSymbolSuffix.replace(" ", "\n") + "</size>");

          if (useK && this.GetDisplayValue(bet) * this.m_reelCount >= Kilo) {
            this.NowBetLabel.string = "<b>" + this.m_betDollerSymbol + "</b>" + this.SetNumberK(Tools.strip(this.GetDisplayValue(bet) * this.m_reelCount));
          }

          var betIndex = Tools.GetFirstBetIndex(Define.API_ID);
          return betIndex;
        };

        _proto2.SetExtraBetView = function SetExtraBetView() {
          for (var i = 0; i < this.m_betNumLayoutNodes.length; i++) {
            if (this.m_betNumLayoutNodes[i].children.length !== Define.BetColumnLimit) {
              // this.m_betLayoutNodes[ i ].getComponent( UITransform ).setAnchorPoint( v2( 0, 0 ) );
              this.m_betLayoutNodes[i].getComponent(UITransform).anchorPoint = v2(0, 0);
              this.m_betLayoutNodes[i].setPosition(v3(this.m_betLayoutSize.width / 2 + (this.m_isLandscape ? 0 : 4), 2));

              if (!this.m_betLayoutNodes[i].parent) {
                this.m_extraBetView.addChild(this.m_betLayoutNodes[i]);
              }

              this.SetExtraBetViewPos();
              break;
            }
          }
        };

        _proto2.SetExtraBetViewPos = function SetExtraBetViewPos() {
          var pos = this.m_betViewNode.position;
          var anchor = this.m_betViewNode.getComponent(UITransform).anchorPoint;
          var width = 0;

          for (var i = 0; i < this.m_btnLayoutNodes.length; i++) {
            if (this.m_btnLayoutNodes[i].children.length === Define.BetColumnLimit) {
              width += this.m_btnLayoutNodes[i].getComponent(UITransform).contentSize.width;
            }
          }

          var x = pos.x;
          var y = this.m_isLandscape ? 5.5 : 6;
          var sprite = this.m_extraBetView.getComponent(Sprite);
          var betNum = this.m_betList.length % Define.BetColumnLimit;
          var height = this.m_betLayoutSize.height / Define.BetColumnLimit * betNum + 4;
          var extraWidth = this.m_betLayoutSize.width;

          if (anchor.x === 0.5) {
            x += width / 2;
          } else if (anchor.x === 0) {
            x += width + 3;
          }

          extraWidth += this.m_isLandscape ? 3 : 5;
          this.m_extraBetView.position = v3(x, y);
          this.m_extraBetView.getComponent(UITransform).setContentSize(size(extraWidth, height));
        };

        _proto2.SetBetHintViewPos = function SetBetHintViewPos(hintViewNode) {
          var _this9 = this;

          tween(this.node).delay(0.01) // 要等旋轉動畫完成,才能算位置
          .call(function () {
            var pos = _this9.m_betViewNode.position;

            var anchor = _this9.m_betViewNode.getComponent(UITransform).anchorPoint;

            var width = 0;
            var y = 0;

            for (var i = 0; i < _this9.m_btnLayoutNodes.length; i++) {
              if (_this9.m_btnLayoutNodes[i].children.length === Define.BetColumnLimit) {
                width += _this9.m_btnLayoutNodes[i].getComponent(UITransform).contentSize.width;
              }
            }

            if (_this9.m_btnLayoutNodes.length > 0) {
              y = Tools.times(_this9.m_btnLayoutNodes[0].getComponent(UITransform).height, hintViewNode.getComponent(UITransform).anchorY);
              y += 10;
            }

            var x = pos.x;

            if (anchor.x === 0.5) {
              x += width / 2 + 5;
            } else if (anchor.x === 0) {
              x += width + 3;
            }

            var targetPos = _this9.m_betViewNode.parent.getComponent(UITransform).convertToWorldSpaceAR(v3(x, y));

            var localPoint = hintViewNode.parent.getComponent(UITransform).convertToNodeSpaceAR(targetPos);
            hintViewNode.setPosition(localPoint);
          }).start();
        };

        _proto2.SetExtraBtnPos = function SetExtraBtnPos(extraBtn) {
          if (this.m_extraBtnNode) {
            extraBtn.removeFromParent();
            this.m_extraBtnNode.addChild(extraBtn);
            extraBtn.setPosition(v3(0, 0));
          }
        }
        /**
         * 開啟快停
         */
        ;

        _proto2.StartHardStop = function StartHardStop() {
          this.m_speedBtnStatus = true;

          if (this.m_speedSprite && this.m_speedSprite[1]) {
            this.m_speedImg.getComponent(Sprite).spriteFrame = this.m_speedSprite[1];
          } else {
            this.m_speedImg.getComponent(UIRenderer).color = color(255, 255, 255);
          }

          this.m_isHintQuickMod = true;
          this.m_isHardStop = true;

          if (this.m_speedHintLabel) {
            this.m_speedHintLabel.node.active = false;
          }

          var key = Define.AID + ":" + Define.NOW_GAME_ID + ":QuickMode";
          LocalStorageManager.SetBool(key, true);
        }
        /**
         * 靜音切換
         */
        ;

        _proto2.MuteSound = function MuteSound(mute) {
          this.m_soundBtnStatus = mute;

          if (mute) {
            this.m_soundBtn.node.getComponent(Sprite).spriteFrame = this.m_soundBtnSprite[0];
            this.m_soundBtn.node.getComponent(UIRenderer).color = color(255, 255, 255);
          } else {
            this.m_soundBtn.node.getComponent(Sprite).spriteFrame = this.m_soundBtnSprite[1];
            this.m_soundBtn.node.getComponent(UIRenderer).color = color(135, 126, 98);
          }
        }
        /**
         * 顯示AutoplaySetting畫面
         * @param chip 需給予玩家目前財產
         */
        ;

        _proto2.ShowAutoplaySettingView = function ShowAutoplaySettingView(chip) {
          if (this.m_autoplaySetting) {
            var anim = this.m_autoplaySetting.node.getComponent(Animation);
            this.m_autoplayMenuNode.active = true;

            if (anim) {
              if (!this.m_isLandscape) {
                anim.play(this.m_autoplaySetting.PanelAniS);
              } else {
                anim.play(this.m_autoplaySetting.PanelAniL);
              }
            }

            this.m_autoplaySetting.SetInitChips(chip, false, this.GetNowBetValue(), walletManger.CurencyID);
          }
        };

        _proto2.SetPrefer = function SetPrefer(info) {
          if (info) {
            this.m_prefer = info;
            var defaultBet = this.GetBetList()[this.GetPreferIdx()];
            this.SetNowBet(defaultBet);
          }
        }
        /**
         * 使用 FREE SPIN / PRIZE UP 按鈕
         * @param isPrizeUp  是否是PRIZE UP,換圖用
         */
        ;

        _proto2.ChangeSpinBtn = function ChangeSpinBtn(toFreeSpin, isPrizeUp) {
          if (isPrizeUp === void 0) {
            isPrizeUp = false;
          }

          var logo = isPrizeUp ? Define.FreeSpinBtn.PrizeUp_Word : Define.FreeSpinBtn.FreeSpin_Word;

          if (toFreeSpin) {
            // btn_spinstop
            this.m_btn_spinstop_Sprite.spriteFrame = this.m_barAtlas.getSpriteFrame(Define.FreeSpinBtn.FreeSpin_BG);
            this.m_btn_spinstop_iconSprite.spriteFrame = this.m_barAtlas.getSpriteFrame(Define.FreeSpinBtn.FreeSpin_Arrow); // btn_spin

            this.m_btn_spin_Sprite.spriteFrame = this.m_barAtlas.getSpriteFrame(Define.FreeSpinBtn.FreeSpin_BG);
            this.m_btn_spin_iconSprite.spriteFrame = this.m_barAtlas.getSpriteFrame(Define.FreeSpinBtn.FreeSpin_Arrow);
          } else {
            // btn_spinstop
            this.m_btn_spinstop_Sprite.spriteFrame = this.m_barAtlas.getSpriteFrame(Define.SpinBtn.BottomBar_Btn_L);
            this.m_btn_spinstop_iconSprite.spriteFrame = this.m_barAtlas.getSpriteFrame(Define.SpinBtn.BottomBar_Spin_01); // btn_spin

            this.m_btn_spin_Sprite.spriteFrame = this.m_barAtlas.getSpriteFrame(Define.SpinBtn.BottomBar_Btn_L);
            this.m_btn_spin_iconSprite.spriteFrame = this.m_barAtlas.getSpriteFrame(Define.SpinBtn.BottomBar_Spin_01);
          }

          this.m_num_FreespinCounter.node.active = toFreeSpin;

          if (this.m_logoFreeSprite) {
            this.m_logoFreeSprite.spriteFrame = this.m_barAtlas.getSpriteFrame(logo);
            this.m_logoFreeSprite.node.active = toFreeSpin;
          }

          if (this.m_logoFreeStopSprite) {
            this.m_logoFreeStopSprite.spriteFrame = this.m_barAtlas.getSpriteFrame(logo);
            this.m_logoFreeStopSprite.node.active = toFreeSpin;
          } // this.m_freeSpinSprite.node.active = toFreeSpin;


          this.m_logoSprite.node.active = !toFreeSpin;
          this.m_logoSpriteStop.node.active = !toFreeSpin;
          this.ChangePos(this.m_isLandscape);
        };

        _proto2.GetPreferIdx = function GetPreferIdx() {
          if (this.m_prefer) {
            var chips = this.GetChips();
            var preferBet = Tools.divide(chips, Tools.times(1 - this.m_prefer.MGR, this.m_prefer.SigmaRound, 2));
            var maxBet = this.m_betList[this.m_betList.length - 1];
            var minBet = this.m_betList[0];

            if (preferBet < minBet) {
              return 0;
            } else if (preferBet > maxBet) {
              return this.m_betList.length - 1;
            } else {
              var preferIndex = 0;

              for (var i = 0; i < this.m_betList.length; i++) {
                if (preferBet >= this.m_betList[i]) {
                  preferIndex = i;
                } else {
                  break;
                }
              }

              return preferIndex;
            }
          } else {
            return 0;
          }
        };

        _proto2.CheckBetList = function CheckBetList(wallet) {
          wallet.forEach(function (element) {
            var betList = JSON.parse(JSON.stringify(element.bet));

            if (element.lower != undefined && element.lower > 0) {
              //下限
              var lower = element.lower;

              if (lower > 0) {
                for (var i = 0; i < betList.length; i++) {
                  if (betList[i] >= lower) {
                    betList.splice(0, i);
                    break;
                  }
                }
              }
            }

            if (element.upper != undefined && element.upper > 0) {
              //上限
              var upper = element.upper;

              if (upper > 0) {
                for (var _i5 = 0; _i5 < betList.length; _i5++) {
                  if (betList[_i5] > upper) {
                    betList = betList.splice(0, _i5);
                    break;
                  }
                }
              }
            } //檢查設定


            if (element.cycle != undefined && element.cycle > 0) {
              if (betList.length > 0) {
                var maxCol = 3;
                var maxBetNum = Tools.times(Define.BetColumnLimit, maxCol);

                if (betList.length > maxBetNum) {
                  var targerBet = Tools.divide(element.coin, element.cycle);
                  var center = 0;

                  if (targerBet > betList[betList.length - 1]) {
                    center = betList.length - 1;
                  } else {
                    for (var _i6 = 0; _i6 < betList.length; _i6++) {
                      if (betList[_i6] >= targerBet) {
                        if (betList[_i6] == targerBet) {
                          center = _i6;
                        } else {
                          if (_i6 > 0) {
                            center = _i6 - 1;
                          } else {
                            center = _i6;
                          }
                        }

                        break;
                      }
                    }
                  }

                  var lowIdx = center - Define.BetLowLvl > 0 ? center - Define.BetLowLvl : 0; //往下兩階

                  var upIdx = center + Define.BetUpLvl > betList.length - 1 ? betList.length - 1 : center + Define.BetUpLvl;
                  var betNum = upIdx - lowIdx + 1;

                  if (betNum < maxBetNum) {
                    var diff = Tools.minus(maxBetNum, betNum); //先向上開

                    if (upIdx !== betList.length - 1) {
                      upIdx = upIdx + diff;

                      if (upIdx > betList.length - 1) {
                        upIdx = betList.length - 1;
                      }
                    }

                    diff = Tools.minus(maxBetNum, upIdx - lowIdx + 1);

                    if (diff !== 0) {
                      if (lowIdx !== 0) {
                        lowIdx = lowIdx - diff;

                        if (lowIdx < 0) {
                          lowIdx = 0;
                        }
                      }
                    }
                  }

                  betList = betList.slice(lowIdx, upIdx + 1); //會截到end前一個
                }
              } else {
                error("Error Limit Setting!!");
              }
            }

            element.bet = betList;
          });
        }
        /**
         * 初始設定
         * @param barNode 地bar的node
         * @param betList 押注金額(single bet)
         * @param reelCount 是否因輪數調整押注金額
         */
        ;

        _proto2.Init = function Init(barNode, betList, reelCount, wallet, initChips, multiBetInfo) {
          var _this10 = this;

          if (reelCount === void 0) {
            reelCount = 1;
          }

          if (initChips === void 0) {
            initChips = 0;
          }

          this.m_view = barNode;
          this.m_reelCount = reelCount;
          this.m_multiBetInfo = multiBetInfo; // 開關BMM / APP BET按鈕

          if (this.IsBMMGames && this.m_BMMbetBtn) {
            this.m_betBtn.node.active = false;
            this.m_BMMbetBtn.node.active = true;
          }

          if (this.IsBMMGames && this.m_BMMnowBetLabel) {
            this.m_nowBetLabel.node.parent.active = false;
            this.m_BMMnowBetLabel.node.parent.active = true;
          }

          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CloseWinTxtWithZero)) {
            this.m_barWinLabel.node.active = false;
            this.m_winLabel.node.active = false;
          }

          if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
            this.m_betLayoutSize = BetLayoutSize_TaDa;
          } //先註冊


          walletManger.AddEventListener(function () {
            Define.CURRENCY_NUMBER = walletManger.CurencyID;
          }, Define.AsttWallentEventKey);

          walletManger.ToTypeS = function (a) {
            return a;
          };

          walletManger.Div = function (a, b) {
            return a / b;
          };

          if (wallet) {
            wallet.sort(function (left, right) {
              if (left.coin > 0 && right.coin > 0 || left.coin == 0 && right.coin == 0) {
                return currencyNameOrder[left.currencyName] - currencyNameOrder[right.currencyName];
              } else {
                return left.coin > 0 ? -1 : 1;
              }
            });
            this.CheckBetList(wallet);
            walletManger.SetWallet(wallet, this);
          } else {
            var defaultWallet = new walletInfo();
            defaultWallet.bet = betList;
            defaultWallet.coin = initChips;
            defaultWallet.currencyNumber = 0;
            defaultWallet.currencyName = "";
            defaultWallet.unit = 1;
            defaultWallet.rate = 1;
            walletManger.SetWallet([defaultWallet], this);
          }

          this.m_oldExchangeChips = walletManger.GetWallet();

          if (Tools.Line !== Define.LineSetting.street && Tools.Line !== Define.LineSetting.americas_str) {
            this.ChangeBetBtnIcon(walletManger.CurencyName);
          }

          this.SetBetList(betList);

          if (
          /*Tools.CheckBMMRequest( Define.BMMRequest.BetDollerSymbol ) ||*/
          !Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CurrencySymbol) || Number(Define.API_ID) == Define.MGAApi) {
            this.m_betDollerSymbol = "" + Define.DollarSymbol + " ";
          } else {
            this.m_betDollerSymbol = "";
          }

          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.ShowNetWin) && this.m_netWinLabel) {
            this.m_netWinLabel.string = this.m_netTxt + Define.DollarSymbol + "0";
            this.m_netWinLabel.node.active = true;
          } //說明頁


          if (this.m_BMMratioBtn && Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.RatioOnView)
          /*( Tools.CheckBMMRequest( Define.BMMRequest.OutsideInfo ) ||
                    Number( Define.API_ID ) == Define.MGAApi ) */
          ) {
              this.m_BMMratioBtn.node.active = true;
              this.SetRatioBtn(this.m_BMMratioBtn);

              if (Number(Define.API_ID) == Define.MGAApi) {
                this.m_ratioBtn.node.active = false;
              }
            }

          this.SetRatioBtn(this.m_ratioBtn); //報表

          this.m_historyBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this10.m_currentTouchName == null && _this10.m_historyBtn.interactable) {
              _this10.m_currentTouchName = event.target.name;

              if (!_this10.m_lockhistoryEnable) {
                tween(_this10.m_historyBtn.node).to(SCALE_TIME, {
                  scale: v3(0.9, 0.9, 1)
                }).start();
              }
            } else {
              if (event.target && event.target.active == false) {
                _this10.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_historyBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            tween(_this10.m_historyBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this10.m_currentTouchName == event.target.name) {
              _this10.m_currentTouchName = null;
            }
          });
          this.m_historyBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            tween(_this10.m_historyBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this10.m_currentTouchName != event.target.name) {
              return;
            }

            _this10.m_currentTouchName = null;
            SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);

            if (!_this10.m_lockhistoryEnable) {
              _this10.CloseAllMenu();

              if (Define.IS_DEMO) {
                MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_HISTORY_UNABLE_HINT);
              } else {
                _this10.OpenWebView(_this10.m_historyUrl, Define.StringKey.BOTTOM_BAR_BACK_GAME_HISTORY);
              }
            }

            _this10.PushClickToBuffer(_this10.CLICK_BUFFER_TYPE.HISTORY);
          }); // 返回大廳

          this.m_homeBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this10.m_currentTouchName == null && _this10.m_homeBtn.interactable) {
              _this10.m_currentTouchName = event.target.name;
              tween(_this10.m_homeBtn.node).to(SCALE_TIME, {
                scale: v3(0.9, 0.9, 1)
              }).start();
            } else {
              if (event.target && event.target.active == false) {
                _this10.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_homeBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            tween(_this10.m_homeBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this10.m_currentTouchName == event.target.name) {
              _this10.m_currentTouchName = null;
            }
          });
          this.m_homeBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            tween(_this10.m_homeBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this10.m_currentTouchName != event.target.name) {
              return;
            }

            _this10.m_currentTouchName = null;

            _this10.CloseAllMenu();

            SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
            Tools.CloseGameTab();
          }); // 通知按鈕

          if (this.m_notifyBtn) {
            this.m_notifyBtn.node.on(Node.EventType.TOUCH_START, function (event) {
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this10.m_currentTouchName == null && _this10.m_notifyBtn.interactable) {
                _this10.m_currentTouchName = event.target.name;
                tween(_this10.m_notifyBtn.node).to(SCALE_TIME, {
                  scale: v3(0.9, 0.9, 1)
                }).start();
              } else {
                if (event.target && event.target.active == false) {
                  _this10.m_currentTouchName = event.target.name;
                }
              }
            });
            this.m_notifyBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              tween(_this10.m_notifyBtn.node).to(SCALE_TIME, {
                scale: v3(1, 1, 1)
              }).start();

              if (_this10.m_currentTouchName == event.target.name) {
                _this10.m_currentTouchName = null;
              }
            });
            this.m_notifyBtn.node.on(Node.EventType.TOUCH_END, function (event) {
              tween(_this10.m_notifyBtn.node).to(SCALE_TIME, {
                scale: v3(1, 1, 1)
              }).start();

              if (_this10.m_currentTouchName != event.target.name) {
                return;
              }

              _this10.m_currentTouchName = null;

              _this10.CloseAllMenu();

              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
              NotificationManager.GetInstance().ShowAllHistoryNotify();

              _this10.SendClickEvent(Define.BTN_CLICK_EVENT.NOTIFY_HISTORY_ICON, _this10.m_spinWithSpeed);
            });
            NotificationManager.GetInstance().SetIconNode(this.m_notifyBtn.node);
          }

          this.m_webViewCloseBtn.node.on("click", function (event) {
            SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);

            _this10.CloseWebView();
          }, this);

          if (this.m_speedImg && this.m_speedBtn) {
            var key = Define.AID + ":" + Define.NOW_GAME_ID + ":QuickMode";
            var value = LocalStorageManager.GetBool(key);

            if (value != null) {
              this.m_speedBtnStatus = value;

              if (value) {
                if (this.m_speedSprite && this.m_speedSprite[1]) {
                  this.m_speedImg.getComponent(Sprite).spriteFrame = this.m_speedSprite[1];
                } else {
                  this.m_speedImg.getComponent(UIRenderer).color = color(255, 255, 255);
                }
              } else {
                if (this.m_speedSprite && this.m_speedSprite[0]) {
                  this.m_speedImg.getComponent(Sprite).spriteFrame = this.m_speedSprite[0];
                } else {
                  this.m_speedImg.getComponent(UIRenderer).color = color(135, 126, 98);
                }
              }

              this.m_isHintQuickMod = value;
              this.m_isHardStop = value;

              if (this.m_speedHintLabel) {
                this.m_speedHintLabel.node.active = !value;
              }
            } else {
              this.m_speedBtnStatus = false;

              if (this.m_speedSprite && this.m_speedSprite[0]) {
                this.m_speedImg.getComponent(Sprite).spriteFrame = this.m_speedSprite[0];
              } else {
                this.m_speedImg.getComponent(UIRenderer).color = color(135, 126, 98);
              }

              this.m_isHardStop = false;
              this.m_isHintQuickMod = false;

              if (this.m_speedHintLabel) {
                this.m_speedHintLabel.node.active = true;
              }
            }
          } // 自動玩


          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.AutoPlay)) {
            this.m_lockAutoEnable = true;
            this.m_autoBtn.node.active = false;

            if (this.m_autoSprite) {
              this.m_autoSprite.node.active = false;
            }

            if (this.m_autoHintSprite) {
              this.m_autoHintSprite.node.active = false;
            }

            if (this.m_autoHintLabel && this.m_autoHintEffect) {
              for (var i = 0; i < this.m_autoHintLabel.length; i++) {
                this.m_autoHintLabel[i].node.active = false;
              }

              for (var j = 0; j < this.m_autoHintEffect.length; j++) {
                this.m_autoHintEffect[j].active = false;
              }
            }
          }

          Define.IS_DELAY_TO_NEXT = Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.IsDelay);

          if (Define.CURRENCY_CHANGE_ENABLE && walletManger.GetWallet().length > 1) {
            this.m_currencyBtn.node.active = true;
            this.LoadCurrencyInfo();
          } else {
            this.m_currencyBtn.node.active = false;
          }

          if (!Define.CURRENCY_CHANGE_ENABLE || walletManger.IsRMB) {
            this.m_winLabel.fontSize = NoMultiCurrencyFontSize;
            this.NowBetLabel.fontSize = NoMultiCurrencyFontSize;
            this.m_balanceLabel.fontSize = NoMultiCurrencyFontSize;
            this.m_winLabel.lineHeight = this.m_winLabel.fontSize + 1;
            this.NowBetLabel.lineHeight = this.NowBetLabel.fontSize + 1;
            this.m_balanceLabel.lineHeight = this.m_balanceLabel.fontSize + 1;
          }

          if (Define.DefaultExtraFont) {
            this.m_winLabel.font = Define.DefaultExtraFont;
            this.m_balanceLabel.font = Define.DefaultExtraFont;
          }

          Tools.SetFont(this.m_stopRoundLabel);
          this.m_nowBetLabel.fontSize = NoMultiCurrencyFontSize_TaDa;
          this.SetChips(walletManger.RawCoin);
          this.SetWinValue(0); //玩家財產帶入倒數

          this.m_initTimer.Clear();
          this.m_initTimer.Start(10000); //設定遊戲幣切換

          if (this.m_coinIconSprite && this.m_coinIconSpriteAtlas) {
            var canChange = CanChange[Define.API_ID] && CanChange[Define.API_ID][walletManger.CurencyID];

            if (canChange) {
              // 財產
              this.m_balanceLabel.node.on(Node.EventType.TOUCH_START, function (event) {
                event.propagationImmediateStopped = true;
                event.propagationStopped = true;

                if (_this10.m_currentTouchName == null) {
                  _this10.m_currentTouchName = event.target.name;
                } else {
                  if (event.target && event.target.active == false) {
                    _this10.m_currentTouchName = event.target.name;
                  }
                }
              });
              this.m_balanceLabel.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
                if (_this10.m_currentTouchName == event.target.name) {
                  _this10.m_currentTouchName = null;
                }
              });
              this.m_balanceLabel.node.on(Node.EventType.TOUCH_END, function (event) {
                if (_this10.m_currentTouchName != event.target.name) {
                  return;
                }

                _this10.m_currentTouchName = null;

                if (_this10.m_isGameIdle) {
                  _this10.ChangeShowValue();
                }
              }); // 贏分

              this.m_winLabel.node.on(Node.EventType.TOUCH_START, function (event) {
                event.propagationImmediateStopped = true;
                event.propagationStopped = true;

                if (_this10.m_currentTouchName == null) {
                  _this10.m_currentTouchName = event.target.name;
                } else {
                  if (event.target && event.target.active == false) {
                    _this10.m_currentTouchName = event.target.name;
                  }
                }
              });
              this.m_winLabel.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
                if (_this10.m_currentTouchName == event.target.name) {
                  _this10.m_currentTouchName = null;
                }
              });
              this.m_winLabel.node.on(Node.EventType.TOUCH_END, function (event) {
                if (_this10.m_currentTouchName != event.target.name) {
                  return;
                }

                _this10.m_currentTouchName = null;

                if (_this10.m_isGameIdle) {
                  _this10.ChangeShowValue();
                }
              });
              this.m_coinIconSprite.node.active = true;
            } else if (walletManger.CurencyID === SilverCurrencyNumber) {
              this.m_coinIconSprite.spriteFrame = this.m_coinIconSpriteAtlas.getSpriteFrame(CoinImgName.Silver);
              this.m_coinIconSprite.node.active = true;
            }
          } //先要一次


          VipManager.GetInstance().ReqVipInfo();
        };

        _proto2.SetRatioBtn = function SetRatioBtn(ratioBtn) {
          var _this11 = this;

          ratioBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this11.m_currentTouchName == null && ratioBtn.interactable) {
              _this11.m_currentTouchName = event.target.name;

              if (!_this11.m_lockInfoEnable) {
                tween(ratioBtn.node).to(SCALE_TIME, {
                  scale: v3(0.9, 0.9, 1)
                }).start();
              }
            } else {
              if (event.target && event.target.active == false) {
                _this11.m_currentTouchName = event.target.name;
              }
            }
          });
          ratioBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            tween(ratioBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this11.m_currentTouchName == event.target.name) {
              _this11.m_currentTouchName = null;
            }
          });
          ratioBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            tween(ratioBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this11.m_currentTouchName != event.target.name) {
              return;
            }

            _this11.m_currentTouchName = null;
            SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);

            if (!_this11.m_lockInfoEnable) {
              _this11.CloseAllMenu();

              _this11.OpenWebView(_this11.m_ratioURL, Define.StringKey.BOTTOM_BAR_BACK_GAME_DESCRIPTION);
            }

            _this11.PushClickToBuffer(_this11.CLICK_BUFFER_TYPE.RATIO);
          });
        }
        /** 設定押注列表鎖: openBet = 0 時為全開 */
        ;

        _proto2.SetUnlockBetMask = function SetUnlockBetMask(openBet, isFirst) {
          if (isFirst === void 0) {
            isFirst = false;
          } // error( '●●●●●SetUnlockBetMask', isFirst, this.m_betList, this.m_betList.length, openBet )


          if (openBet > this.m_betList.length) {
            return;
          }

          this.m_appBetLimit = openBet == 0 ? this.m_betList.length : openBet - 1; //用來阻擋m_betIndex

          if (isFirst && this.m_betList && openBet > 0) {
            this.m_levelBetLockRoot.active = true;
            this.m_levelBetMasks = [];

            for (var i = 0; i < Math.ceil(this.m_betList.length / Define.BetColumnLimit); i++) {
              if (this.m_levelBetLocks[i]) {
                this.m_levelBetLocks[i].active = true;

                for (var j = 0; j < Define.BetColumnLimit; j++) {
                  var mask = instantiate(this.m_betBtnMask);
                  this.m_levelBetLocks[i].addChild(mask);
                  this.m_levelBetMasks.push(mask);
                }
              }
            }
          }

          if (this.m_levelBetMasks && this.m_levelBetMasks.length > 0) {
            var nodesNum = this.m_levelBetMasks.length;

            if (openBet == 0) {
              // 全開
              this.m_levelBetLockRoot.active = false;
              return;
            }

            for (var _i7 = 1; _i7 <= openBet; _i7++) {
              if (this.m_levelBetMasks[nodesNum - _i7]) {
                this.m_levelBetMasks[nodesNum - _i7].active = false;
              }
            }
          }
        };

        _proto2.ChangeBetBtnIcon = function ChangeBetBtnIcon(currencyName) {
          var icon = Define.BetIcon.JILI_Default;
          var iconEX = Define.BetIcon.JILI_Default + "_Ex";
          this.m_betIcon = this.m_barAtlas.getSpriteFrame(icon);
          this.m_betIconEX = this.m_barAtlas.getSpriteFrame(iconEX);
          this.BetBtnIcon.spriteFrame = this.m_betIcon;
        } //顯示前導介面
        ;

        _proto2.ShowPlayReady = function ShowPlayReady(titleSpriteFrame, visiableCb, featuresCb, parent) {
          if (AppManager.LobbyData && AppManager.LobbyData.skipFeature) {
            // 要先判斷484新手教程流程(新手教程部會有m_playReadyNode)
            // 再判斷要不要設定visiableCb
            if (visiableCb) {
              AppManager.SetChangeGameStateCb(visiableCb);
            }
          } else if (this.m_playReadyPrefab && !this.m_playReadyNode) {
            this.m_playReadyNode = instantiate(this.m_playReadyPrefab);

            if (parent) {
              parent.addChild(this.m_playReadyNode);
              Tools.SetZIndex(this.m_playReadyNode, Define.ZOrder.PLAY_READY);
            } else {
              this.node.addChild(this.m_playReadyNode);
              Tools.SetZIndex(this.m_playReadyNode, Define.ZOrder.PLAY_READY);

              if (this.m_isLandscape) {
                this.m_playReadyNode.setPosition(v3(0, 320));
              } else {
                this.m_playReadyNode.setPosition(v3(0, 568));
              }
            }

            var playReady = this.m_playReadyNode.getComponent(PlayReadyComponent);

            if (playReady) {
              playReady.Init(titleSpriteFrame, visiableCb, featuresCb);

              Tools.TriggerFeaturesShow = function () {
                playReady.Hide();
              };
            }
          } else if (this.m_playReadyNode) {
            var _playReady = this.m_playReadyNode.getComponent(PlayReadyComponent);

            if (_playReady) {
              _playReady.Show();
            }
          }
        };

        _proto2.ChangeShowValue = function ChangeShowValue() {
          if (this.m_coinIconSprite && this.m_coinIconSpriteAtlas) {
            var divisor = 1;

            switch (this.m_coinIconSprite.spriteFrame.name) {
              case CoinImgName[40]:
                this.m_coinIconSprite.spriteFrame = this.m_coinIconSpriteAtlas.getSpriteFrame(CoinImgName.Gold);
                break;

              case CoinImgName[41]:
                this.m_coinIconSprite.spriteFrame = this.m_coinIconSpriteAtlas.getSpriteFrame(CoinImgName.Gold);
                break;

              case CoinImgName.Gold:
                if (CoinImgName[walletManger.CurencyID]) {
                  if (ChangeDivisor[walletManger.CurencyID]) {
                    divisor = ChangeDivisor[walletManger.CurencyID];
                  }

                  this.m_coinIconSprite.spriteFrame = this.m_coinIconSpriteAtlas.getSpriteFrame(CoinImgName[walletManger.CurencyID]);
                }

                break;

              default:
                this.m_coinIconSprite.spriteFrame = this.m_coinIconSpriteAtlas.getSpriteFrame(CoinImgName.Gold);
                break;
            } //設定財產顯示


            var rawValeuStr = "";
            var value = Tools.divide(walletManger.RawCoin, divisor);

            if (Define.CURRENCY_CHANGE_ENABLE) {
              value = this.GetDisplayValue(value);
              var dollarSymbol = Define.DollarSymbolSuffix.replace("m", ""); // 表示該單位有被乘過1000,換算回原本貨幣值

              if (dollarSymbol != Define.DollarSymbolSuffix) {
                rawValeuStr = "\n<size=15>" + (Define.DollarSymbol + Tools.FormatNumberThousands(Tools.strip(value / 1000), Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT) + dollarSymbol) + "</size=15>";
              }
            }

            value = Tools.strip(value);

            if (sys.os != sys.OS.IOS) {
              this.m_balanceLabel.string = "<b><size=" + this.m_dollarSymbolSize + ">" + Define.DollarSymbol + " </size></b>" + "<b>" + Tools.FormatNumberThousands(value, Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT) + "</b>" + "<b><size=15>" + Define.DollarSymbolSuffix + "</size></b>" + "<b>" + rawValeuStr + "</b>";
            } else {
              this.m_balanceLabel.string = "<size=" + this.m_dollarSymbolSize + ">" + Define.DollarSymbol + " </size>" + Tools.FormatNumberThousands(value, Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT) + "<size=15>" + Define.DollarSymbolSuffix + "</size>" + rawValeuStr;
            }

            this.m_balanceLabel.fontFamily = Define.DollarFontFamily; //設定贏分

            var winValue = Tools.divide(this.m_win, divisor);

            if (sys.os != sys.OS.IOS) {
              this.m_winLabel.string = "<b><size=" + this.m_dollarSymbolSize + ">" + Define.DollarSymbol + " </size></b>" + "<b>" + Tools.FormatNumberThousands(Tools.strip(winValue), Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT) + Define.DollarSymbolSuffix + "</b>";
            } else {
              this.m_winLabel.string = "<size=" + this.m_dollarSymbolSize + ">" + Define.DollarSymbol + " </size>" + Tools.FormatNumberThousands(Tools.strip(winValue), Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT) + Define.DollarSymbolSuffix;
            }

            this.m_winLabel.fontFamily = Define.DollarFontFamily;

            if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CloseWinTxtWithZero) && winValue <= 0) {
              this.m_barWinLabel.node.active = false;
              this.m_winLabel.node.active = false;
            } else {
              this.m_barWinLabel.node.active = true;
              this.m_winLabel.node.active = true;
            }
          }
        };

        _proto2.GetExtraBetMulti = function GetExtraBetMulti() {
          if (!this.m_isItemBet && !this.m_isBuyBonusBet && this.m_multiBetInfo && this.m_multiBetInfo.Multi[this.m_multBetIdx] > 0 && this.m_multiBetInfo.IsMulti()) {
            return this.m_multiBetInfo.Multi[this.m_multBetIdx];
          }

          return 1;
        }
        /**
         * 設定按鈕狀態
         */
        ;

        _proto2.SetComponentState = function SetComponentState(target, enable, visible, type) {
          if (this.m_lockAutoEnable && (target.node.name == this.m_autoBtn.node.name || target.node.name == this.m_stopAutoBtn.node.name || target.node.name == this.m_stopAutoCountBtn.node.name)) {
            return;
          }

          target.interactable = enable;

          if (Tools.Line !== Define.LineSetting.street && Tools.Line !== Define.LineSetting.americas_str && (target.node.name == BottombarManager.UIName.BTN_SPIN || target.node.name == BottombarManager.UIName.BTN_SPINSTOP) && !this.m_isCustomize) {
            target.node.parent.active = visible;
          } else {
            target.node.active = visible;
          }

          this.SetComponentLabelState(visible, type);

          if (enable) {
            if (Tools.Line !== Define.LineSetting.street && Tools.Line !== Define.LineSetting.americas_str && (target.node.name == BottombarManager.UIName.BTN_SPIN || target.node.name == BottombarManager.UIName.BTN_SPINSTOP) && !this.m_isCustomize) {
              target.node.parent.getComponent(UIRenderer).color = color(255, 255, 255);
            } else {
              target.node.getComponent(UIRenderer).color = color(255, 255, 255);
            }
          } else {
            if (Tools.Line !== Define.LineSetting.street && Tools.Line !== Define.LineSetting.americas_str && (target.node.name == BottombarManager.UIName.BTN_SPIN || target.node.name == BottombarManager.UIName.BTN_SPINSTOP) && !this.m_isCustomize) {
              target.node.parent.getComponent(UIRenderer).color = color(150, 150, 150);
            } else {
              target.node.getComponent(UIRenderer).color = color(150, 150, 150);
            }
          }
        };

        _proto2.SetComponentLabelState = function SetComponentLabelState(visible, type) {
          if (type == BUTTON_STATE.SPIN) {
            this.m_spinSprite.node.active = visible;
          } else if (type == BUTTON_STATE.STOP) {
            this.m_spinStopSprite.node.active = visible;
          } else if (type == BUTTON_STATE.AUTO) {
            this.m_autoSprite.node.active = visible;
          } else if (type == BUTTON_STATE.STOP_AUTO) {
            this.m_autoStopSprite.node.active = visible;
          } else if (type == BUTTON_STATE.STOP_AUTO_COUNT) {
            this.m_autoCountStopSprite.node.active = visible;
            this.m_stopRoundLabel.node.active = visible;
          }
        }
        /**
         * 設定財產，
         * 在洗碼活動中直接傳玩家現在的體驗幣數值
         */
        ;

        _proto2.SetChips = function SetChips(value, multiCurrency) {
          if (multiCurrency === void 0) {
            multiCurrency = Define.CURRENCY_CHANGE_ENABLE;
          }

          this.SetRealChips(value, multiCurrency);
        }
        /**
         * 設定真實財產,非洗碼..等體驗幣
         * @param value 財產金額
         * @param multiCurrency 多幣別是否啟用flag
         */
        ;

        _proto2.SetRealChips = function SetRealChips(value, multiCurrency) {
          if (multiCurrency === void 0) {
            multiCurrency = Define.CURRENCY_CHANGE_ENABLE;
          }

          this.m_chips = value;

          if (walletManger.HasWallet) {
            walletManger.SetCoin(value);
          }

          var rawValeuStr = "";

          if (multiCurrency) {
            value = this.GetDisplayValue(value);
            var dollarSymbol = Define.DollarSymbolSuffix.replace("m", ""); // 表示該單位有被乘過1000,換算回原本貨幣值

            if (dollarSymbol != Define.DollarSymbolSuffix) {
              rawValeuStr = "\n<size=15>" + (Define.DollarSymbol + Tools.FormatNumberThousands(Tools.strip(value / 1000), Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT) + dollarSymbol) + "</size=15>";
            }
          }

          value = Tools.strip(value);

          if (this.m_coinIconSprite && this.m_coinIconSpriteAtlas && this.m_coinIconSprite.spriteFrame !== this.m_coinIconSpriteAtlas.getSpriteFrame(CoinImgName.Gold) && walletManger.HasWallet && ChangeDivisor[walletManger.CurencyID]) {
            value = Tools.divide(value, ChangeDivisor[walletManger.CurencyID]);
          }

          if (sys.os != sys.OS.IOS) {
            this.m_balanceLabel.string = "<b><size=" + this.m_dollarSymbolSize + ">" + Define.DollarSymbol + " </size></b>" + "<b>" + Tools.FormatNumberThousands(value, Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT) + "</b>" + "<b><size=15>" + Define.DollarSymbolSuffix + "</size></b>" + "<b>" + rawValeuStr + "</b>";
          } else {
            this.m_balanceLabel.string = "<size=" + this.m_dollarSymbolSize + ">" + Define.DollarSymbol + " </size>" + Tools.FormatNumberThousands(value, Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT) + "<size=15>" + Define.DollarSymbolSuffix + "</size>" + rawValeuStr;
          }

          this.m_balanceLabel.fontFamily = Define.DollarFontFamily;
        }
        /**
         * 取得財產
         */
        ;

        _proto2.GetChips = function GetChips(multiCurrency) {
          if (multiCurrency === void 0) {
            multiCurrency = Define.CURRENCY_CHANGE_ENABLE;
          }

          return this.GetRealChips(multiCurrency);
        }
        /**
         * 取得真實財產,非洗碼..等體驗幣
         * @param multiCurrency
         */
        ;

        _proto2.GetRealChips = function GetRealChips(multiCurrency) {
          if (multiCurrency === void 0) {
            multiCurrency = Define.CURRENCY_CHANGE_ENABLE;
          }

          if (walletManger.HasWallet && multiCurrency) {
            return Tools.strip(walletManger.RawCoin);
          } else {
            return Tools.strip(this.m_chips);
          }
        }
        /**
         * 設定押注清單
         */
        ;

        _proto2.SetBetList = function SetBetList(betList, multiCurrency, resetBetBtns) {
          if (multiCurrency === void 0) {
            multiCurrency = Define.CURRENCY_CHANGE_ENABLE;
          }

          if (resetBetBtns === void 0) {
            resetBetBtns = false;
          }

          var newList = betList; // 多幣別情況下使用自己 wallet 的betList

          if (multiCurrency) {
            newList = [];

            for (var i = 0; i < walletManger.BetList.length; i++) {
              newList[i] = walletManger.RawBetList[i];
            }
          }

          this.m_betList = newList;

          if (!this.m_appBetLimit) {
            this.m_appBetLimit = this.m_betList.length - 1;
          }

          var useK = this.CheckUseK();
          this.m_betList[this.m_betIndex] = Tools.strip(this.m_betList[this.m_betIndex]);
          var bet = this.m_betList[this.m_betIndex];

          if (this.m_multiBetInfo && this.m_multiBetInfo.Multi[this.m_multBetIdx] > 0 && this.m_multiBetInfo.IsMulti()) {
            bet = Tools.times(bet, this.m_multiBetInfo.Multi[this.m_multBetIdx]);
          }

          this.NowBetLabel.string = "<b>" + this.m_betDollerSymbol + "</b>" + Tools.FormatNumberThousands(Tools.strip(this.GetDisplayValue(bet) * this.m_reelCount), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO) + ("<size=15>" + Define.DollarSymbolSuffix.replace(" ", "\n") + "</size>");

          if (useK && this.GetDisplayValue(bet) * this.m_reelCount >= Kilo) {
            this.NowBetLabel.string = "<b>" + this.m_betDollerSymbol + "</b>" + this.SetNumberK(Tools.strip(this.GetDisplayValue(bet) * this.m_reelCount));
          }

          if (resetBetBtns) {
            this.ResetBetBtns();
          } else {
            this.CreateNormalBetBtns(false);
          }
        }
        /**
         * 獲得押注清單
         */
        ;

        _proto2.GetBetList = function GetBetList(multiCurrency) {
          if (multiCurrency === void 0) {
            multiCurrency = Define.CURRENCY_CHANGE_ENABLE;
          }

          if (multiCurrency) {
            return walletManger.RawBetList;
          } else {
            return this.m_betList;
          }
        }
        /**
         * 以index獲得押注
         */
        ;

        _proto2.GetBetByIndex = function GetBetByIndex(index, multiCurrency) {
          if (multiCurrency === void 0) {
            multiCurrency = Define.CURRENCY_CHANGE_ENABLE;
          }

          if (multiCurrency) {
            return walletManger.RawBetList[index];
          } else {
            return this.m_betList[index];
          }
        }
        /**
         * 設定目前狀態
         * @param state 需使用SlotBottomBarState內的狀態
         */
        ;

        _proto2.SetSpinState = function SetSpinState(state) {
          if (this.m_btn_state != state) {
            this.m_currentTouchName = null;
            this.m_btn_state = state;
          } else if (this.m_isChangePos) {
            this.m_isChangePos = false;
            this.m_currentTouchName = null;
            this.m_btn_state = state;
          } else {
            return;
          }

          var lang = "";
          var imgName = LocaleImgName_TaDa;
          this.m_btn_state = state;

          if (state == this.SlotBottomBarState.IDLE) {
            if (this.m_isSpinTurbo && this.m_localeSpriteAtlas && (Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str)) {
              this.m_spinSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.Spin + lang);
            }

            this.SetComponentState(this.m_spinBtn, true, true, BUTTON_STATE.SPIN);
            this.SetComponentState(this.m_stopSpinBtn, false, false, BUTTON_STATE.STOP);
            this.SetComponentState(this.m_autoBtn, true, true, BUTTON_STATE.AUTO);
            this.SetComponentState(this.m_stopAutoBtn, false, false, BUTTON_STATE.STOP_AUTO);
            this.SetComponentState(this.m_stopAutoCountBtn, false, false, BUTTON_STATE.STOP_AUTO_COUNT);

            if (!this.m_IsFreeSpin) {
              this.SetEnableBetButtons(true);
            }
          } else if (state == this.SlotBottomBarState.IDLE_AGAIN) {
            this.SetComponentState(this.m_spinBtn, true, true, BUTTON_STATE.SPIN);
            this.SetComponentState(this.m_stopSpinBtn, false, false, BUTTON_STATE.STOP);
            this.SetComponentState(this.m_autoBtn, true, true, BUTTON_STATE.AUTO);
            this.SetComponentState(this.m_stopAutoBtn, false, false, BUTTON_STATE.STOP_AUTO);
            this.SetComponentState(this.m_stopAutoCountBtn, false, false, BUTTON_STATE.STOP_AUTO_COUNT);
            this.SetEnableBetButtons(false);
          } else if (state == this.SlotBottomBarState.SPIN_DISABLE) {
            this.SetComponentState(this.m_spinBtn, false, true, BUTTON_STATE.SPIN);
            this.SetComponentState(this.m_autoBtn, false, true, BUTTON_STATE.AUTO);
            this.SetEnableBetButtons(false);
          } else if (state == this.SlotBottomBarState.CLICK_SPIN) {
            if (this.m_isSpinTurbo && this.m_localeSpriteAtlas) {
              this.SetComponentState(this.m_spinBtn, true, true, BUTTON_STATE.SPIN);

              if (Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str) {
                this.m_spinSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.Spin + lang);
              }

              if (Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str) {
                this.m_spinBtn.node.getComponent(UIRenderer).color = color(100, 100, 100);
              } else {
                if (this.m_spinBtn.node.name == BottombarManager.UIName.BTN_SPIN && !this.m_isCustomize) {
                  this.m_spinBtn.node.parent.getComponent(UIRenderer).color = color(100, 100, 100);
                } else {
                  this.m_spinBtn.node.getComponent(UIRenderer).color = color(100, 100, 100);
                }
              }
            } else {
              this.SetComponentState(this.m_spinBtn, false, false, BUTTON_STATE.SPIN);
              this.SetComponentState(this.m_stopSpinBtn, false, true, BUTTON_STATE.STOP);
            }

            this.SetComponentState(this.m_autoBtn, false, true, BUTTON_STATE.AUTO);
            this.SetComponentState(this.m_stopAutoBtn, false, false, BUTTON_STATE.STOP_AUTO);
            this.SetComponentState(this.m_stopAutoCountBtn, false, false, BUTTON_STATE.STOP_AUTO_COUNT);
            this.SetEnableBetButtons(false);
          } else if (state == this.SlotBottomBarState.START_SPIN) {
            if (this.m_isSpinTurbo && this.m_localeSpriteAtlas) {
              this.SetComponentState(this.m_spinBtn, true, true, BUTTON_STATE.SPIN);
              var spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.SpinStop_b + lang);

              if (!spriteFrame) {
                spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.SpinStop + lang);
              }

              if (Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str) {
                this.m_spinSprite.spriteFrame = spriteFrame;
              }
            } else {
              this.SetComponentState(this.m_spinBtn, false, false, BUTTON_STATE.SPIN);
              this.SetComponentState(this.m_stopSpinBtn, true, true, BUTTON_STATE.STOP);
            }

            this.SetComponentState(this.m_stopAutoBtn, false, false, BUTTON_STATE.STOP_AUTO);
            this.SetComponentState(this.m_stopAutoCountBtn, false, false, BUTTON_STATE.STOP_AUTO_COUNT);
            this.SetEnableBetButtons(false);
          } else if (state == this.SlotBottomBarState.CLICK_STOP) {
            if (this.m_isSpinTurbo && this.m_localeSpriteAtlas) {
              this.SetComponentState(this.m_spinBtn, true, true, BUTTON_STATE.SPIN);

              if (Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str) {
                this.m_spinSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.Spin + lang);
              }

              if (Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str) {
                this.m_spinBtn.node.getComponent(UIRenderer).color = color(100, 100, 100);
              } else {
                if (this.m_spinBtn.node.name == BottombarManager.UIName.BTN_SPIN && !this.m_isCustomize) {
                  this.m_spinBtn.node.parent.getComponent(UIRenderer).color = color(100, 100, 100);
                } else {
                  this.m_spinBtn.node.getComponent(UIRenderer).color = color(100, 100, 100);
                }
              }
            } else {
              this.SetComponentState(this.m_spinBtn, false, false, BUTTON_STATE.SPIN);
              this.SetComponentState(this.m_stopSpinBtn, false, true, BUTTON_STATE.STOP);
            }

            this.SetComponentState(this.m_stopAutoBtn, false, false, BUTTON_STATE.STOP_AUTO);
            this.SetComponentState(this.m_stopAutoCountBtn, false, false, BUTTON_STATE.STOP_AUTO_COUNT);
            this.SetComponentState(this.m_autoBtn, false, true, BUTTON_STATE.AUTO);
            this.SetEnableBetButtons(false);
          } else if (state == this.SlotBottomBarState.GET_AWARD) {
            if (this.m_isSpinTurbo && this.m_localeSpriteAtlas) {
              this.SetComponentState(this.m_spinBtn, true, true, BUTTON_STATE.SPIN);

              var _spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.SpinStop_b + lang);

              if (!_spriteFrame) {
                _spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.SpinStop + lang);
              }

              if (Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str) {
                this.m_spinSprite.spriteFrame = _spriteFrame;
              }

              if (Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str) {
                this.m_spinBtn.node.getComponent(UIRenderer).color = color(255, 255, 255);
              } else {
                if (this.m_spinBtn.node.name == BottombarManager.UIName.BTN_SPIN && !this.m_isCustomize) {
                  this.m_spinBtn.node.parent.getComponent(UIRenderer).color = color(255, 255, 255);
                } else {
                  this.m_spinBtn.node.getComponent(UIRenderer).color = color(255, 255, 255);
                }
              }
            } else {
              this.SetComponentState(this.m_spinBtn, false, false, BUTTON_STATE.SPIN);
              this.SetComponentState(this.m_stopSpinBtn, true, true, BUTTON_STATE.STOP);
            }

            this.SetComponentState(this.m_stopAutoBtn, false, false, BUTTON_STATE.STOP_AUTO);
            this.SetComponentState(this.m_stopAutoCountBtn, false, false, BUTTON_STATE.STOP_AUTO_COUNT);
            this.SetComponentState(this.m_autoBtn, false, true, BUTTON_STATE.AUTO);
            this.SetEnableBetButtons(false);
          } else if (state == this.SlotBottomBarState.CLICK_STOP_IN_AUTOPLAY) {
            this.SetComponentState(this.m_spinBtn, false, true, BUTTON_STATE.SPIN);
            this.SetComponentState(this.m_stopSpinBtn, false, false, BUTTON_STATE.STOP);
            this.SetComponentState(this.m_autoBtn, false, false, BUTTON_STATE.AUTO);

            if (this.m_autoplaySetting.IsCheckTotalRound) {
              this.SetComponentState(this.m_stopAutoBtn, false, false, BUTTON_STATE.STOP_AUTO);
              this.SetComponentState(this.m_stopAutoCountBtn, true, true, BUTTON_STATE.STOP_AUTO_COUNT);
            } else {
              this.SetComponentState(this.m_stopAutoBtn, true, true, BUTTON_STATE.STOP_AUTO);
              this.SetComponentState(this.m_stopAutoCountBtn, false, false, BUTTON_STATE.STOP_AUTO_COUNT);
            }
          } else if (state == this.SlotBottomBarState.CLICK_AUTOPLAY_HARDSTOP) {
            this.SetComponentState(this.m_spinBtn, false, false, BUTTON_STATE.SPIN);
            this.SetComponentState(this.m_stopSpinBtn, true, true, BUTTON_STATE.STOP);
            this.SetComponentState(this.m_autoBtn, false, false, BUTTON_STATE.AUTO);

            if (this.m_autoplaySetting.IsCheckTotalRound) {
              this.SetComponentState(this.m_stopAutoBtn, false, false, BUTTON_STATE.STOP_AUTO);
              this.SetComponentState(this.m_stopAutoCountBtn, true, true, BUTTON_STATE.STOP_AUTO_COUNT);
            } else {
              this.SetComponentState(this.m_stopAutoBtn, true, true, BUTTON_STATE.STOP_AUTO);
              this.SetComponentState(this.m_stopAutoCountBtn, false, false, BUTTON_STATE.STOP_AUTO_COUNT);
            }

            this.SetEnableBetButtons(false);
          } else if (state == this.SlotBottomBarState.CLICK_AUTOPLAY) {
            this.SetComponentState(this.m_spinBtn, false, true, BUTTON_STATE.SPIN);
            this.SetComponentState(this.m_stopSpinBtn, false, false, BUTTON_STATE.STOP);
            this.SetComponentState(this.m_autoBtn, false, false, BUTTON_STATE.AUTO);

            if (this.m_autoplaySetting.IsCheckTotalRound) {
              this.SetComponentState(this.m_stopAutoBtn, false, false, BUTTON_STATE.STOP_AUTO);
              this.SetComponentState(this.m_stopAutoCountBtn, true, true, BUTTON_STATE.STOP_AUTO_COUNT);
            } else {
              this.SetComponentState(this.m_stopAutoBtn, true, true, BUTTON_STATE.STOP_AUTO);
              this.SetComponentState(this.m_stopAutoCountBtn, false, false, BUTTON_STATE.STOP_AUTO_COUNT);
            }

            this.SetEnableBetButtons(false);
          } else if (state == this.SlotBottomBarState.CLICK_CANCEL) {
            this.SetComponentState(this.m_spinBtn, false, true, BUTTON_STATE.SPIN);
            this.SetComponentState(this.m_stopSpinBtn, false, false, BUTTON_STATE.STOP);
            this.SetComponentState(this.m_autoBtn, false, true, BUTTON_STATE.AUTO);

            if (this.m_autoplaySetting.IsCheckTotalRound) {
              this.SetComponentState(this.m_stopAutoBtn, false, false, BUTTON_STATE.STOP_AUTO);
              this.SetComponentState(this.m_stopAutoCountBtn, false, false, BUTTON_STATE.STOP_AUTO_COUNT);
            } else {
              this.SetComponentState(this.m_stopAutoBtn, false, false, BUTTON_STATE.STOP_AUTO);
              this.SetComponentState(this.m_stopAutoCountBtn, false, false, BUTTON_STATE.STOP_AUTO_COUNT);
            }

            this.SetEnableBetButtons(false);
          } else if (state == this.SlotBottomBarState.SKIP_SMALL_FLASH) {
            this.SetSkipSmallFlash(true);
            this.SetComponentState(this.m_spinBtn, true, true, BUTTON_STATE.SPIN);
            this.SetComponentState(this.m_stopSpinBtn, false, false, BUTTON_STATE.STOP);
            this.SetEnableBetButtons(false);
          } else if (state == this.SlotBottomBarState.SKIP_SMALL_FLASH_AUTOPLAY) {
            if (this.m_isSpinTurbo && this.m_localeSpriteAtlas) {
              this.SetComponentState(this.m_spinBtn, true, true, BUTTON_STATE.SPIN);

              var _spriteFrame2 = this.m_localeSpriteAtlas.getSpriteFrame(imgName.SpinStop_b + lang);

              if (!_spriteFrame2) {
                _spriteFrame2 = this.m_localeSpriteAtlas.getSpriteFrame(imgName.SpinStop + lang);
              }

              if (Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str) {
                this.m_spinSprite.spriteFrame = _spriteFrame2;
              }
            } else {
              this.SetComponentState(this.m_spinBtn, false, false, BUTTON_STATE.SPIN);
              this.SetComponentState(this.m_stopSpinBtn, true, true, BUTTON_STATE.STOP);
            }

            this.SetEnableBetButtons(false);
          } else if (state == this.SlotBottomBarState.SKIP_BIG_FLASH) {
            this.SetComponentState(this.m_spinBtn, false, true, BUTTON_STATE.SPIN);
            this.SetComponentState(this.m_stopSpinBtn, false, false, BUTTON_STATE.STOP);
            this.SetEnableBetButtons(false);
          } else if (state == this.SlotBottomBarState.CLICK_STOP_NO_AUTO) {
            this.SetComponentState(this.m_spinBtn, false, false, BUTTON_STATE.SPIN);
            this.SetComponentState(this.m_stopSpinBtn, false, true, BUTTON_STATE.STOP);
            this.SetEnableBetButtons(false);
          } else if (state == this.SlotBottomBarState.GET_AWARD_NO_AUTO) {
            this.SetComponentState(this.m_spinBtn, false, false, BUTTON_STATE.SPIN);
            this.SetComponentState(this.m_stopSpinBtn, true, true, BUTTON_STATE.STOP);
            this.SetEnableBetButtons(false);
          } else if (state == this.SlotBottomBarState.CLICK_STOP_IN_AUTOPLAY_NO_AUTO) {
            this.SetComponentState(this.m_spinBtn, false, true, BUTTON_STATE.SPIN);
            this.SetComponentState(this.m_stopSpinBtn, false, false, BUTTON_STATE.STOP);
          } else if (state == this.SlotBottomBarState.SPIN_DISABLE_DISABLE_STOP) {
            this.SetComponentState(this.m_stopSpinBtn, false, false, BUTTON_STATE.STOP);
            this.SetComponentState(this.m_spinBtn, false, true, BUTTON_STATE.SPIN);
            this.SetComponentState(this.m_autoBtn, false, true, BUTTON_STATE.AUTO);
            this.SetEnableBetButtons(false);
          } else if (state == this.SlotBottomBarState.AUTO_UNABLE) {
            this.SetComponentState(this.m_autoBtn, false, this.m_autoBtn.node.active, BUTTON_STATE.AUTO);
            this.SetComponentState(this.m_stopAutoBtn, false, this.m_stopAutoBtn.node.active, BUTTON_STATE.STOP_AUTO);
            this.SetComponentState(this.m_stopAutoCountBtn, false, this.m_stopAutoCountBtn.node.active, BUTTON_STATE.STOP_AUTO_COUNT);
          } else if (state == this.SlotBottomBarState.AUTO_ABLE) {
            this.SetComponentState(this.m_autoBtn, true, this.m_autoBtn.node.active, BUTTON_STATE.AUTO);
            this.SetComponentState(this.m_stopAutoBtn, true, this.m_stopAutoBtn.node.active, BUTTON_STATE.STOP_AUTO);
            this.SetComponentState(this.m_stopAutoCountBtn, true, this.m_stopAutoCountBtn.node.active, BUTTON_STATE.STOP_AUTO_COUNT);
          }
        }
        /**
         * 設定快停特效狀態
         */
        ;

        _proto2.SetSkipEffectState = function SetSkipEffectState(visible, isSkipFlash) {
          if (isSkipFlash) {
            this.SetSkipSmallFlash(isSkipFlash);
            this.SetComponentState(this.m_stopSpinBtn, false, !visible, BUTTON_STATE.STOP);
            this.SetComponentState(this.m_spinBtn, visible, visible, BUTTON_STATE.SPIN);
          } else {
            this.SetComponentState(this.m_spinBtn, false, !visible, BUTTON_STATE.SPIN);
            this.SetComponentState(this.m_stopSpinBtn, visible, visible, BUTTON_STATE.STOP);
          }
        }
        /**
         * 設定現在選的押注金額
         * @param value 押注金額
         */
        ;

        _proto2.SetNowBet = function SetNowBet(value, isFromBackpack, isFromBuyBonus) {
          if (isFromBackpack === void 0) {
            isFromBackpack = false;
          }

          if (isFromBuyBonus === void 0) {
            isFromBuyBonus = false;
          }

          if (isFromBackpack) {
            this.m_isItemBet = true;
            this.m_itemBet = value;
            this.NowBetLabel.string = "<b>" + this.m_betDollerSymbol + "</b>" + Tools.FormatNumberThousands(Tools.strip(this.GetDisplayValue(this.m_itemBet) * this.m_reelCount), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO) + ("<size=15>" + Define.DollarSymbolSuffix.replace(" ", "\n") + "</size>");

            if (this.m_touchCb && this.m_isSendBetChange) {
              var cEvent = new EventTouch([], false, "");
              cEvent.target = new FackEventTarget(BottombarManager.BetValueChange);
              this.m_touchCb(cEvent);
            }

            return;
          }

          this.m_isItemBet = false;

          if (isFromBuyBonus) {
            this.m_isBuyBonusBet = true;
            this.m_buyBonusBet = value;
            this.NowBetLabel.string = "<b>" + this.m_betDollerSymbol + "</b>" + Tools.FormatNumberThousands(Tools.strip(this.GetDisplayValue(this.m_buyBonusBet) * this.m_reelCount), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO) + ("<size=15>" + Define.DollarSymbolSuffix.replace(" ", "\n") + "</size>");

            if (this.m_touchCb && this.m_isSendBetChange) {
              var _cEvent2 = new EventTouch([], false, "");

              _cEvent2.target = new FackEventTarget(BottombarManager.BetValueChange);
              this.m_touchCb(_cEvent2);
            }

            return;
          }

          this.m_isBuyBonusBet = false;

          for (var i = 0; i < this.m_betList.length; i++) {
            if (this.m_betList[i] == value) {
              this.m_shouldUpdateBetBtn = true;
              this.m_betIndex = i;
              break;
            }
          }

          if (this.m_betLimit) {
            this.m_betIndex = this.m_betIndex >= this.m_betLimit ? this.m_betLimit - 1 : this.m_betIndex;
          }

          if (AppManager.LobbyData && AppManager.LobbyData.novice && this.m_isFirstSetting) {
            this.m_betIndex = 1;
          }

          var useK = this.CheckUseK();
          this.m_betList[this.m_betIndex] = Tools.strip(this.m_betList[this.m_betIndex]);
          var bet = this.m_betList[this.m_betIndex];

          if (this.m_multiBetInfo && this.m_multiBetInfo.Multi[this.m_multBetIdx] > 0 && this.m_multiBetInfo.IsMulti()) {
            bet = Tools.times(bet, this.m_multiBetInfo.Multi[this.m_multBetIdx]);
          }

          this.NowBetLabel.string = "<b>" + this.m_betDollerSymbol + "</b>" + Tools.FormatNumberThousands(Tools.strip(this.GetDisplayValue(bet) * this.m_reelCount), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO) + ("<size=15>" + Define.DollarSymbolSuffix.replace(" ", "\n") + "</size>");

          if (useK && this.GetDisplayValue(bet) * this.m_reelCount >= Kilo) {
            this.NowBetLabel.string = "<b>" + this.m_betDollerSymbol + "</b>" + this.SetNumberK(Tools.strip(this.GetDisplayValue(bet) * this.m_reelCount));
          }

          var data = {
            bet: bet
          };
          AppManager.SetData(data);
          var key = Define.AID + ":" + Define.NOW_GAME_ID + ":Bet";
          LocalStorageManager.SetInt(key, this.m_betIndex);
          var key1 = Define.AID + ":" + Define.NOW_GAME_ID + Define.BetStorageKey;
          LocalStorageManager.SetInt(key1, this.m_betList[this.m_betIndex]);

          if (this.m_touchCb && this.m_isSendBetChange) {
            var _cEvent3 = new EventTouch([], false, "");

            _cEvent3.target = new FackEventTarget(BottombarManager.BetValueChange);
            this.m_touchCb(_cEvent3);
          }

          this.m_isFirstSetting = false;
        }
        /**
         * 設定現在選的押注次數
         * @param value 押注次數
         */
        ;

        _proto2.SetSpinTimes = function SetSpinTimes(value) {
          if (value < 0) {
            value = 0;
          }

          this.m_num_FreespinCounter.string = value.toString();
          Define.FreeSpinRemain = value;

          if (this.m_num_ItemCount) {
            this.m_num_ItemCount.string = value.toString();
          }

          this.SetGiftCodeBtnState();
        };

        _proto2.SetGiftCodeBtnState = function SetGiftCodeBtnState() {
          if (this.m_giftCodeBtn) {
            if (Define.IsGiftCodeOpen) {
              this.m_giftCodeBtn.node.active = giftCodeManager.HasUI();
              var isActive = this.m_isGameIdle && Define.FreeSpinRemain == 0 && !backpackManager.OnUseItemID && !buyBonusManager.IsBuyBonus;
              var sprite = this.m_giftCodeBtn.node.getComponent(Sprite);
              sprite.color = isActive ? BtnColor.Light : BtnColor.Dark;
              this.m_giftCodeBtn.interactable = isActive;
            } else {
              this.m_giftCodeBtn.node.active = false;
            }
          }
        }
        /**
         * 取得現在的bet
         */
        ;

        _proto2.GetNowBetValue = function GetNowBetValue(multiCurrency) {
          if (multiCurrency === void 0) {
            multiCurrency = Define.CURRENCY_CHANGE_ENABLE;
          }

          if (this.m_isItemBet) {
            return this.m_itemBet;
          } else if (this.m_isBuyBonusBet) {
            return this.m_buyBonusBet;
          } else {
            if (multiCurrency) {
              return Tools.strip(walletManger.RawBetList[this.m_betIndex]);
            } else {
              return Tools.strip(this.m_betList[this.m_betIndex]);
            }
          }
        }
        /**
         * 取得現在的 GetFreeSpinBetValue  (目前預設最低階)
         */
        ;

        _proto2.GetFreeSpinBetValue = function GetFreeSpinBetValue(multiCurrency) {
          var _Define$APP;

          if (multiCurrency === void 0) {
            multiCurrency = Define.CURRENCY_CHANGE_ENABLE;
          }

          if (BuffManager.GetInstance().IsFreeSpinBuff || ((_Define$APP = Define.APP) == null ? void 0 : _Define$APP.FreeSpinBet) > 0) {
            return this.GetNowBetValue();
          }

          if (multiCurrency) {
            return Tools.strip(walletManger.RawBetList[0]);
          } else {
            return Tools.strip(this.m_betList[0]);
          }
        }
        /**
         * 取得現在的betIndex
         */
        ;

        _proto2.GetNowBetIndex = function GetNowBetIndex() {
          if (this.m_isItemBet || this.m_isBuyBonusBet) {
            return -1;
          }

          return this.m_betIndex;
        }
        /**
         * 獲得單位換算過後的數值
         */
        ;

        _proto2.GetDisplayValue = function GetDisplayValue(value) {
          if (Define.CURRENCY_CHANGE_ENABLE && walletManger.HasWallet) {
            return Tools.strip(walletManger.GetDisplayValue(value));
          } else {
            return Tools.strip(value);
          }
        }
        /**
         * 還原單位換算過前的數值(可能會有誤差)
         */
        ;

        _proto2.GetRawValue = function GetRawValue(value) {
          if (Define.CURRENCY_CHANGE_ENABLE && walletManger.HasWallet) {
            return Tools.strip(value * walletManger.Unit);
          } else {
            return Tools.strip(value);
          }
        };

        _proto2.SetWinValueWithCheck = function SetWinValueWithCheck(data) {
          if (data === void 0) {
            data = {
              maxWin: 0,
              value: 0,
              stopAction: true,
              isRunning: false,
              multiCurrency: Define.CURRENCY_CHANGE_ENABLE
            };
          }

          var isPass = true;

          if (data.value > data.maxWin) {
            isPass = false;
            data.value = data.maxWin;
          }

          this.SetWinValue(data.value, data.stopAction, data.isRunning, data.multiCurrency);
          return isPass;
        }
        /** 設定NET下注額 */
        ;

        _proto2.SetNetBet = function SetNetBet(bet) {
          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.ShowNetWin) && this.m_netWinLabel) {
            this.m_netWin = Tools.minus(this.m_netWin, bet);
          }
        }
        /** 設定NET結果 */
        ;

        _proto2.SetNetWin = function SetNetWin(value) {
          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.ShowNetWin) && this.m_netWinLabel) {
            this.m_netWin = Tools.plus(this.m_netWin, value);
            this.m_netWinLabel.string = this.m_netTxt + Define.DollarSymbol + Tools.FormatNumberThousands(Tools.strip(this.m_netWin), Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT);
          }
        }
        /**
         * 設定中獎金額
         * @param value 中獎金額
         */
        ;

        _proto2.SetWinValue = function SetWinValue(value, stopAction, isRunning, multiCurrency) {
          if (stopAction === void 0) {
            stopAction = true;
          }

          if (isRunning === void 0) {
            isRunning = false;
          }

          if (multiCurrency === void 0) {
            multiCurrency = Define.CURRENCY_CHANGE_ENABLE;
          }

          this.m_win = Tools.strip(value);

          if (stopAction) {
            TweenSystem.instance.ActionManager.removeAllActionsFromTarget(this.m_winLabel.node);
          }

          var winValue = this.m_win;

          if (multiCurrency) {
            winValue = this.GetDisplayValue(winValue);
          }

          if (sys.os != sys.OS.IOS) {
            this.m_winLabel.string = "<b><size=" + this.m_dollarSymbolSize + ">" + Define.DollarSymbol + " </size></b>" + "<b>" + Tools.FormatNumberThousands(Tools.strip(winValue), Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT) + Define.DollarSymbolSuffix + "</b>";
          } else {
            this.m_winLabel.string = "<size=" + this.m_dollarSymbolSize + ">" + Define.DollarSymbol + " </size>" + Tools.FormatNumberThousands(Tools.strip(winValue), Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT) + Define.DollarSymbolSuffix;
          }

          this.m_winLabel.fontFamily = Define.DollarFontFamily;

          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CloseWinTxtWithZero) && winValue <= 0) {
            this.m_barWinLabel.node.active = false;
            this.m_winLabel.node.active = false;
          } else {
            this.m_barWinLabel.node.active = true;
            this.m_winLabel.node.active = true;
          }

          if (this.m_canScaleWinValue && !isRunning) {
            this.m_winLabel.node.setScale(v3(1, 1));

            if (value > 0) {
              tween(this.m_winLabel.node).to(0.1, {
                scale: v3(1.5, 1.5, 1)
              }).delay(0.4).to(0.15, {
                scale: v3(1, 1, 1)
              }).start();
            }
          }
        }
        /**
         * 取得中獎金額
         * @param value 中獎金額
         */
        ;

        _proto2.GetWinValue = function GetWinValue() {
          return this.m_win;
        };

        _proto2.GetWinLabelString = function GetWinLabelString() {
          var str = this.m_winLabel.string.replace(/<.*?>|[^0-9|.]/g, "").replace(/^\./g, "");
          return str;
        };

        _proto2.SyncWinValue = function SyncWinValue(winValue) {
          var str = this.m_winLabel.string.replace(/<.*?>|[^0-9|.]/g, "");
          return winValue === Number(str);
        }
        /**
         * 設定AutoplaySetting按下確認後的callback
         * @param cb 按下確認後的callback
         */
        ;

        _proto2.SetAutoplayConfirmCb = function SetAutoplayConfirmCb(cb) {
          var _this12 = this;

          this.m_autoplayConfirmCb = cb;

          this.m_autoplaySetting.ConfirmCb = function () {
            _this12.m_autoplayMenuNode.active = false;

            _this12.StartAutoplay();
          };

          this.m_autoplaySetting.CancelCb = function () {
            _this12.m_autoplayMenuNode.active = false;
          };
        }
        /**
         * 進入免費遊戲
         * @param autoLock 是否鎖定自動玩按鈕(與離開需設相同值)
         */
        ;

        _proto2.SetEnterFree = function SetEnterFree(autoLock) {
          if (autoLock === void 0) {
            autoLock = false;
          }

          log("進入免費");
          this.LockHistoryEnable(true);
          this.LockBetEnable(true);

          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.DisableSettingInfo)) {
            this.LockInfoEnable(true);
          }

          NotificationManager.GetInstance().SetState(false);
          VolatilityManager.GetInstance().UnableVolatilityBtn();
          missionManager.LockDailyEnable(true);

          if (autoLock) {
            this.LockWiseAutoEnable(true);
            this.m_autoBtn.interactable = false;
            this.m_stopAutoBtn.interactable = false;
            this.m_stopAutoCountBtn.interactable = false;
            this.m_autoBtn.node.getComponent(UIRenderer).color = color(100, 100, 100);
            this.m_stopAutoBtn.node.getComponent(UIRenderer).color = color(100, 100, 100);
            this.m_stopAutoCountBtn.node.getComponent(UIRenderer).color = color(100, 100, 100);
          }
        }
        /**
         * 離開免費遊戲
         * @param autoLock 是否鎖定自動玩按鈕(與進入需設相同值)
         */
        ;

        _proto2.SetLeaveFree = function SetLeaveFree(autoLock) {
          if (autoLock === void 0) {
            autoLock = false;
          }

          this.LockHistoryEnable(false);

          if (!this.m_isItemBet) {
            this.LockBetEnable(false);
          }

          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.DisableSettingInfo)) {
            this.LockInfoEnable(false);
          }

          NotificationManager.GetInstance().SetState(true);
          VolatilityManager.GetInstance().CanUseVolatilityBtn();
          missionManager.LockDailyEnable(false);

          if (autoLock) {
            this.LockWiseAutoEnable(false);
            this.m_autoBtn.interactable = true;
            this.m_stopAutoBtn.interactable = true;
            this.m_stopAutoCountBtn.interactable = true;
            this.m_autoBtn.node.getComponent(UIRenderer).color = color(255, 255, 255);
            this.m_stopAutoBtn.node.getComponent(UIRenderer).color = color(255, 255, 255);
            this.m_stopAutoCountBtn.node.getComponent(UIRenderer).color = color(255, 255, 255);
          }
        }
        /**
         * 設定bet按鈕狀態
         */
        ;

        _proto2.SetEnableBetButtons = function SetEnableBetButtons(enable) {
          //上鎖時，不能變更bet的狀態
          if (this.m_lockBetEnable) {
            return;
          }

          this.BetBtn.interactable = enable;

          if (this.m_appBetPlusBtns[0] && this.m_appBetMinusBtns[0]) {
            this.m_appBetPlusBtns[0].interactable = enable;
            this.m_appBetPlusBtns[1].interactable = enable;
            this.m_appBetMinusBtns[0].interactable = enable;
            this.m_appBetMinusBtns[1].interactable = enable;
          }

          if (enable) {
            this.BetBtn.node.getComponent(UIRenderer).color = color(255, 255, 255);

            if (this.m_appBetPlusBtns[0] && this.m_appBetMinusBtns[0]) {
              this.m_appBetPlusBtns[0].node.getComponent(UIRenderer).color = color(255, 255, 255);
              this.m_appBetPlusBtns[1].node.getComponent(UIRenderer).color = color(255, 255, 255);
              this.m_appBetMinusBtns[0].node.getComponent(UIRenderer).color = color(255, 255, 255);
              this.m_appBetMinusBtns[1].node.getComponent(UIRenderer).color = color(255, 255, 255);
            }
          } else {
            if (!this.m_IsFreeSpin) {
              // freespin 不改顏色
              this.BetBtn.node.getComponent(UIRenderer).color = color(100, 100, 100);

              if (this.m_appBetPlusBtns[0] && this.m_appBetMinusBtns[0]) {
                this.m_appBetPlusBtns[0].node.getComponent(UIRenderer).color = color(100, 100, 100);
                this.m_appBetPlusBtns[1].node.getComponent(UIRenderer).color = color(100, 100, 100);
                this.m_appBetMinusBtns[0].node.getComponent(UIRenderer).color = color(100, 100, 100);
                this.m_appBetMinusBtns[1].node.getComponent(UIRenderer).color = color(100, 100, 100);
              }
            } //bet上鎖時把列表關閉


            this.m_betRootNode.active = false;

            if (this.m_isSendBetViewOpen) {
              var cEvent = new EventTouch([], false, "");
              cEvent.target = new FackEventTarget(BottombarManager.BetViewState.Close);

              if (this.m_touchCb) {
                this.m_touchCb(cEvent);
              }
            }
          }

          this.SetEnableBalanceButtons(enable);
        }
        /**
         * 貨幣切換按鈕狀態
         */
        ;

        _proto2.SetEnableBalanceButtons = function SetEnableBalanceButtons(enable) {
          if (!Define.CURRENCY_CHANGE_ENABLE || !this.m_currencyBtn.node.active || !this.m_currencyBtn.node.getComponent(Sprite)) {
            return;
          }

          this.m_currencyBtn.interactable = enable;

          if (enable) {
            this.m_currencyBtn.node.getComponent(Sprite).color = color(255, 255, 255);
          } else {
            this.m_currencyBtn.node.getComponent(Sprite).color = color(100, 100, 100);
          }
        }
        /**
         * 設定語系
         */
        ;

        _proto2.SetTxt = function SetTxt() {
          var _this13 = this;

          if (this.m_barWinLabel) {
            this.m_barWinLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.WIN);
            Tools.SetFont(this.m_barWinLabel);
          }

          if (this.m_netWinLabel) {
            this.m_netTxt = LocaleStringManager.GetInstance().GetString(Define.StringKey.NET);
          }

          if (this.m_barBalanceLabel) {
            this.m_barBalanceLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BALANCE);
            Tools.SetFont(this.m_barBalanceLabel);
          }

          if (this.m_vipBalanceLabel) {
            this.m_vipBalanceLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BALANCE);
            Tools.SetFont(this.m_vipBalanceLabel);
          }

          if (this.m_barTrailBalanceLabel) {
            var brand = LocaleStringManager.GetInstance().GetString(Define.StringKey.BRAND_JILI);

            if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
              brand = LocaleStringManager.GetInstance().GetString(Define.StringKey.BRAND_TADA);
            }

            var str1 = LocaleStringManager.GetInstance().GetString(Define.StringKey.FREEWINCASH_DEMOCOINS);
            str1 = str1.replace(/\{brand\}/g, brand);
            this.m_barTrailBalanceLabel.string = str1;
            Tools.SetFont(this.m_barTrailBalanceLabel);
          }

          if (this.m_speedHintLabel) {
            this.m_speedHintLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.SPEED_HINT);
            Tools.SetFont(this.m_speedHintLabel);
          }

          if (this.m_autoHintLabel[0]) {
            this.m_autoHintLabel[0].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.AUTO_HINT0);
            Tools.SetFont(this.m_autoHintLabel[0]);
            this.m_autoHintLabel[1].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.AUTO_HINT1);
            Tools.SetFont(this.m_autoHintLabel[1]);
          }

          this.m_localeSpriteAtlas = !this.m_localeSpriteAtlas ? LocaleStringManager.GetInstance().GetCommonAtlas() : this.m_localeSpriteAtlas;
          this.m_lockHintSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName.VipBetLock);

          if (this.m_streetAtlas) {
            this.m_spinSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName_TaDa.Spin);
            this.m_spinStopSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName_TaDa.SpinStop);
            this.m_autoSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName_TaDa.AutoPlay);
            this.m_autoStopSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName_TaDa.AutoStop);
            this.m_autoCountStopSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName_TaDa.AutoStop);

            if (this.m_autoHintSprite) {
              tween(this.m_autoHintSprite.node).repeatForever(tween().call(function () {
                _this13.m_autoHintSprite.spriteFrame = _this13.m_localeSpriteAtlas.getSpriteFrame("BottomBar_Tap");
              }).delay(3).call(function () {
                _this13.m_autoHintSprite.spriteFrame = _this13.m_localeSpriteAtlas.getSpriteFrame("BottomBar_Hold");
              }).delay(3)).start();
            }
          }
        };

        _proto2.SetBalanceSprite = function SetBalanceSprite(isActive) {
          var vipInfo = VipManager.GetInstance().VipInfo;

          if (vipInfo && !this.IsGLIGames && !this.IsBMMGames && !Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CloseVip)) {
            if (this.m_balanceSprite) {
              this.m_balanceSprite.node.active = false; // 總分
            }

            if (this.m_barBalanceLabel) {
              this.m_barBalanceLabel.node.active = false;
            }

            if (this.m_vipBalanceSprite) {
              this.m_vipBalanceSprite.node.active = isActive;
            }

            if (this.m_vipBalanceLabel) {
              this.m_vipBalanceLabel.node.active = isActive;
            }

            if (this.m_vipSprite) {
              this.m_vipSprite.node.active = isActive;
            }
          } else {
            if (this.m_balanceSprite) {
              this.m_balanceSprite.node.active = isActive;
            }

            if (this.m_barBalanceLabel) {
              this.m_barBalanceLabel.node.active = isActive;
            }

            if (this.m_vipBalanceSprite) {
              this.m_vipBalanceSprite.node.active = false;
            }

            if (this.m_vipBalanceLabel) {
              this.m_vipBalanceLabel.node.active = false;
            }

            if (this.m_vipSprite) {
              this.m_vipSprite.node.active = false;
            }
          }
        }
        /**
         * 設定自動玩面板字串
         */
        ;

        _proto2.SetAutoPlayPanelTxt = function SetAutoPlayPanelTxt() {
          this.m_localeSpriteAtlas = !this.m_localeSpriteAtlas ? LocaleStringManager.GetInstance().GetCommonAtlas() : this.m_localeSpriteAtlas;

          if (this.m_localeSpriteAtlas) {
            this.m_autoplaySetting.SetTxt();
            var tittle = null;

            if (this.m_autoplaySetting.node.getChildByName("img_hosting_label")) {
              tittle = this.m_autoplaySetting.node.getChildByName("img_hosting_label").getComponent(Sprite);
            } else {
              tittle = this.m_autoplaySetting.Title;
            }

            if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
              if (this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName_TaDa.AutoPlayTittle)) {
                tittle.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName_TaDa.AutoPlayTittle);
              }
            } else {
              tittle.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName.AutoPlayTittle);
            }
          }
        };

        _proto2.SetTrailBalanceSprite = function SetTrailBalanceSprite(isActive) {
          if (this.m_barTrailBalanceLabel) {
            this.m_barTrailBalanceLabel.node.active = isActive; // ｛品牌名｝币
          }

          if (this.m_barWinLabel) {
            this.m_barWinLabel.node.active = !isActive;
          }
        };

        _proto2.ShowGameScene = function ShowGameScene(isGame) {
          if (isGame === void 0) {
            isGame = true;
          }

          if (isGame) {
            this.m_showGameSceneFromGame = true;
          }

          var closeMask = function closeMask() {
            var splash = document.getElementById("splash");

            if (splash) {
              splash.style.display = "none";
            }
          };

          if (Tools.HasReadyCb() && this.m_showGameSceneFromGame) {
            Tools.GameReady();
            var key = Define.AID + ":" + Define.NOW_GAME_ID + ":" + Define.CloseIntroKey;
            var isClosed = LocalStorageManager.GetBool(key);

            if (isClosed && !this.m_playReadyNode || AppManager.LobbyData && AppManager.LobbyData.skipFeature) {
              error("showgamescene ShowSkyBar");
              var nodeParent = this.node.parent;
              var setPosNode = nodeParent.parent;
              AppManager.ShowSkyBar(setPosNode, true);
            }
          } else {
            closeMask();
          }

          if (Number(Define.API_ID) == Define.MGAApi || Define.REALITY_CHECK_INTERVAL > 0 && Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.ShowNetWin)) {
            this.StartIdleTime();
          }
        }
        /**
         * 開始自動玩
         */
        ;

        _proto2.StartAutoplay = function StartAutoplay() {
          var lang = "";
          var imgName = LocaleImgName;
          this.SendSpinLog();

          if (this.m_autoHintLabel && this.m_autoHintEffect) {
            for (var i = 0; i < this.m_autoHintLabel.length; i++) {
              this.m_autoHintLabel[i].node.active = false;
            }

            for (var j = 0; j < this.m_autoHintEffect.length; j++) {
              this.m_autoHintEffect[j].active = false;
            }
          }

          if (!this.m_isWiseAutoPlay) {
            // DEMO站台自動玩有強制局數限制
            if (Define.IS_DEMO && Define.HAS_CLIENTMODE) {
              this.m_totalRound = Define.AUTOPLAY_MAX_ROUND;
              this.m_stopRoundLabel.string = this.m_totalRound.toString();
            }

            this.m_autoplayConfirmCb(this.m_autoplaySetting.OthersInfo(false));

            if (this.m_localeSpriteAtlas && (Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str)) {
              this.m_autoStopSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.AutoStop + lang);
              this.m_autoCountStopSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.AutoStop + lang);
            }

            this.m_chipCompareTypes = BottombarManager.CompareTypes.None;
            return;
          }

          if (this.m_localeSpriteAtlas && (Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str)) {
            this.m_autoStopSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.AutoStop + lang);
            this.m_autoCountStopSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.AutoStop + lang);
          }

          if (this.m_autoplaySetting.IsCheckTotalRound) {
            this.m_totalRound = this.m_autoplaySetting.TotalRound;
            this.m_stopRoundLabel.string = this.m_totalRound.toString();
          } else {
            this.m_totalRound = -1;
          }

          if (this.m_autoplaySetting.IsCheckTotalBet) {
            this.m_singleWin = this.m_autoplaySetting.TotalBet;
          } else {
            this.m_singleWin = -1;
          }

          if (this.m_autoplaySetting.IsCheckChipGreat) {
            this.m_chipGreatLimit = this.m_autoplaySetting.ChipGreatLimit;
          }

          if (this.m_autoplaySetting.IsCheckChipLess) {
            this.m_chipLessLimit = this.m_autoplaySetting.ChipLessLimit;
          }

          this.m_autoplayConfirmCb(this.m_autoplaySetting.OthersInfo(true));
        }
        /**
         * 使用局數自動玩
         */
        ;

        _proto2.AutoPlayByTimes = function AutoPlayByTimes() {
          if (this.m_totalRound > 0) {
            this.m_totalRound -= 1;

            if (this.m_totalRound == 0) {
              this.m_autoplaySetting.SetTotalRound("100");
              this.m_autoplaySetting.ChangeTotalRoundBg(false);
            }

            this.m_stopRoundLabel.string = this.m_totalRound.toString();
          }
        }
        /**
         * 取得自動玩是否有局數
         */
        ;

        _proto2.IsAutoPlayByTimes = function IsAutoPlayByTimes() {
          if (this.m_autoplaySetting.IsCheckTotalRound) {
            if (this.m_totalRound > 0) {
              return true;
            } else {
              this.m_autoplaySetting.ChangeTotalRoundBg(false);
              return false;
            }
          }

          return true;
        }
        /**
         * 取得autoPlay次數
         */
        ;

        _proto2.GetTimesOfAutoPlay = function GetTimesOfAutoPlay() {
          if (this.m_autoplaySetting.IsCheckTotalRound) {
            return this.m_totalRound;
          }

          return -1;
        }
        /**
         * 取得是否快停
         */
        ;

        _proto2.IsQuickEffect = function IsQuickEffect() {
          return this.m_isHardStop;
        }
        /**
         * 如有設定籌碼限制，回傳目前設定的值
         */
        ;

        _proto2.GetValueOfPoint_Less = function GetValueOfPoint_Less() {
          if (this.m_autoplaySetting.IsCheckChipLess) {
            return this.m_chipLessLimit;
          }

          return -1;
        }
        /**
         * 如有設定籌碼限制，回傳目前設定的值
         */
        ;

        _proto2.GetValueOfPoint_Great = function GetValueOfPoint_Great() {
          if (this.m_autoplaySetting.IsCheckChipGreat) {
            return this.m_chipGreatLimit;
          }

          return -1;
        }
        /**
         * 如有設定贏錢倍率，回傳目前設定的值
         */
        ;

        _proto2.GetValueOfSingleWin = function GetValueOfSingleWin() {
          if (this.m_autoplaySetting.IsCheckTotalBet) {
            // return this.m_singleWin;
            var win = Tools.times(this.GetNowBetValue(), this.m_singleWin);
            return win;
          }

          return -1;
        }
        /**
         * 中獎金額逐步增加
         * @param totalAward 中獎金額
         * @param durTime 表演時間
         * @param delay 延後表演時間
         */
        ;

        _proto2.ShowAward = function ShowAward(totalAward, durTime, delay) {
          this.m_totalAward = totalAward;
          this.m_durTick = durTime - delay;
          this.m_delay = delay;
          this.m_showAward = 0;
          this.m_step = this.m_totalAward / this.m_durTick;
          this.m_originalWin = this.m_win;
          this.m_isShowAward = true;
        }
        /**
         * 加速停止跑錢動畫
         */
        ;

        _proto2.ForceToStop = function ForceToStop() {
          if (this.m_isShowAward) {
            this.m_isShowAward = false;
            this.SetWinValue(this.m_originalWin + this.m_totalAward);
          }
        };

        _proto2.PlayTime = function PlayTime() {
          var stop = false;
          this.m_playTime_sec++;

          if (this.m_playTime_sec > 59) {
            this.m_playTime_sec = 0;
            this.m_playTime_min++;

            if (this.m_playTime_min == 999) {
              stop = true;
            }
          }

          var minute = this.m_playTime_min >= 10 ? this.m_playTime_min.toString() : "0" + this.m_playTime_min.toString();
          var second = this.m_playTime_sec >= 10 ? this.m_playTime_sec.toString() : "0" + this.m_playTime_sec.toString();
          this.m_playTimeLabel.string = minute + ":" + second;

          if (stop) {
            this.unschedule(this.PlayTime);
          }
        };

        _proto2.StartPlayTime = function StartPlayTime() {
          if (this.m_playTimeLayoutNode.active && !this.m_playTimerStarted) {
            this.m_playTimerStarted = true;
            this.schedule(this.PlayTime, 1);
          }
        };

        _proto2.StartIdleTime = function StartIdleTime() {
          var _this14 = this;

          var timer = function timer() {
            // 遊戲總時間計時器
            if (_this14.m_playTimeLayoutNode.active) {
              var stop = false;
              _this14.m_playTime_sec++;

              if (_this14.m_playTime_sec > 59) {
                _this14.m_playTime_sec = 0;
                _this14.m_playTime_min++;

                if (_this14.m_playTime_min > 59) {
                  _this14.m_playTime_min = 0;
                  _this14.m_playTime_hr++;

                  if (_this14.m_playTime_hr == 999) {
                    stop = true;
                  }
                }
              }

              var hour = _this14.m_playTime_hr >= 10 ? _this14.m_playTime_hr.toString() : "0" + _this14.m_playTime_hr.toString();
              var minute = _this14.m_playTime_min >= 10 ? _this14.m_playTime_min.toString() : "0" + _this14.m_playTime_min.toString();
              var second = _this14.m_playTime_sec >= 10 ? _this14.m_playTime_sec.toString() : "0" + _this14.m_playTime_sec.toString();
              _this14.m_playTimeLabel.string = hour + ":" + minute + ":" + second;

              if (stop) {
                _this14.unschedule(timer);
              }
            } // 閒置時間計時器


            if (Number(Define.API_ID) == Define.MGAApi) {
              _this14.m_idleTime++;
              error("idleTime", _this14.m_idleTime);

              if (_this14.m_idleTime >= 3600) {
                MsgBox.getInstance().ShowMessageBox("Idle Time Over 1 HR", Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, Tools.CloseGameTab, Tools.GetErrorCode(Define.ErrorStatus.Game, Define.ErrorStatus.Unknow));

                _this14.unschedule(timer);
              }
            } // 防沉迷計時器


            if (Define.REALITY_CHECK_INTERVAL > 0 && Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.ShowNetWin)) {
              _this14.m_realityCheckTime++;

              if (_this14.m_realityCheckTime >= Define.REALITY_CHECK_INTERVAL) {
                _this14.m_realityCheckTime = 0;

                _this14.ShowRealiteCheckMsgBox();
              }
            }
          };

          if (!this.m_playTimerStarted) {
            this.m_playTimerStarted = true;
            this.schedule(timer, 1);
          }
        };

        _proto2.ResetIdleTimer = function ResetIdleTimer() {
          this.m_idleTime = 0;
        };

        _proto2.update = function update(dt) {
          if (this.m_isStartTouchAuto) {
            this.m_autoTouchTime += dt;

            if (this.m_autoTouchTime > 1) {
              this.CloseAllMenu();
              this.m_isWiseAutoPlay = true;
              this.m_isStartTouchAuto = false;
              this.m_currentTouchName = null;
              var cEvent = new EventTouch([], false, "");
              cEvent.target = new FackEventTarget(BottombarManager.UIName.BTN_WISEAUTOPLAY);
              this.m_touchCb(cEvent);
            }
          }

          if (this.m_timeLabel.node.active) {
            this.m_sec -= dt;

            if (this.m_sec <= 0) {
              this.m_sec = 1;
              var nowDate = new Date();
              var hour = nowDate.getHours() >= 10 ? nowDate.getHours().toString() : "0" + nowDate.getHours();
              var min = nowDate.getMinutes() >= 10 ? nowDate.getMinutes().toString() : "0" + nowDate.getMinutes();
              this.m_timeLabel.string = hour + ":" + min;
            }
          }

          if (this.m_initTimer) {
            this.m_initTimer.Update(dt * 1000);

            if (this.m_initTimer.ToBool()) {
              this.m_isInitChips = true;
              delete this.m_initTimer;
              this.m_initTimer = null;
            }
          }

          if (this.m_spinHoldTimer) {
            this.m_spinHoldTimer.Update(dt * 1000);

            if (this.m_spinHoldTimer.ToBool()) {
              if (this.m_isFirstSpinHold) {
                this.m_isFirstSpinHold = false;

                if (this.m_touchCb) {
                  var event = new EventTouch([], false, "");
                  event.target = new FackEventTarget(BottombarManager.UIName.BTN_HOLD_SPIN);
                  this.m_touchCb(event);
                }
              }
            }
          }

          if (this.m_isShowAward) {
            this.m_delay -= dt;

            if (this.m_delay <= 0) {
              this.m_showAward += this.m_step * dt;

              if (this.m_showAward > this.m_totalAward) {
                this.m_showAward = this.m_totalAward;
              }

              this.SetWinValue(this.m_originalWin + this.m_showAward);
              this.m_durTick = this.m_durTick - dt;

              if (this.m_showAward == this.m_totalAward) {
                this.m_isShowAward = false;
              }
            }
          }

          if (this.m_timer.ToBool()) {
            this.m_timer.Start(10 * 1000);
            this.ClickBufferToServer();
          }

          if (this.m_marqueeTimer.ToBool()) {
            this.SetMarquee();
            this.ShowMarquee();
            this.m_marqueeTimer.Start(5 * 1000);
            this.ClickBufferToServer();
          }

          if (this.m_useSoundTimer.ToBool() && this.m_soundTimeFlag) {
            this.m_soundTime++;
            this.m_useSoundTimer.Start(1 * 1000);
          }
        }
        /**
         * 取得是否快停
         */
        ;

        _proto2.GetSpeedFast = function GetSpeedFast() {
          return this.m_speedBtnStatus;
        }
        /**
         * 設定局號
         */
        ;

        _proto2.SetLogIndex = function SetLogIndex(logindex, isFixByClient) {
          if (isFixByClient === void 0) {
            isFixByClient = true;
          }

          var log = logindex;

          if (isFixByClient) {
            log = logindex.substring(0, 5) + "-" + logindex.substring(5, 11) + "-" + logindex.substring(11, 19);
          }

          this.m_logIndex.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BOTTOM_BAR_LOGINDEX_TITLE) + " " + log;

          if (LocaleStringManager.CurrLang === Define.Lang.MM) {
            this.m_logIndex.font = Define.DefaultFont;
          }
        }
        /**
         * 設定winLabel顯示
         */
        ;

        _proto2.SetWinLabelActive = function SetWinLabelActive(isActive) {
          this.m_winLabel.node.active = isActive;
        }
        /**
         * 隱藏版號
         */
        ;

        _proto2.HideVersion = function HideVersion() {
          this.m_version.node.active = false;
        };

        _proto2.ForceToStopWinValueRunning = function ForceToStopWinValueRunning(scale) {
          if (scale === void 0) {
            scale = 1;
          } // this.m_winLabel.node.stopAllActions();


          TweenSystem.instance.ActionManager.removeAllActionsFromTarget(this.m_winLabel.node);
          this.m_winLabel.node.setScale(v3(scale, scale));
        }
        /**
         * 確認是否正在跑分
         */
        ;

        _proto2.IsWinValueRunning = function IsWinValueRunning() {
          // return this.m_winLabel.node.getNumberOfRunningActions() > 0;
          return TweenSystem.instance.ActionManager.getNumberOfRunningActionsInTarget(this.m_winLabel.node);
        };

        _proto2.SetWinValueWithRunningAndCheck = function SetWinValueWithRunningAndCheck(data) {
          if (data === void 0) {
            data = {
              maxWin: 0,
              finalValue: 0,
              duration: 0.02,
              unit: 1.0,
              multiCurrency: Define.CURRENCY_CHANGE_ENABLE
            };
          }

          var isPass = true;

          if (data.finalValue > data.maxWin) {
            isPass = false;
            data.finalValue = data.maxWin;
          }

          this.SetWinValueWithRunning(data.finalValue, data.duration, data.unit, data.multiCurrency);
          return isPass;
        }
        /**
         * 跑錢動畫
         */
        ;

        _proto2.SetWinValueWithRunning = function SetWinValueWithRunning(finalValue, duration, unit, multiCurrency) {
          var _this15 = this;

          if (unit === void 0) {
            unit = 1.0;
          }

          if (multiCurrency === void 0) {
            multiCurrency = Define.CURRENCY_CHANGE_ENABLE;
          }

          var times = Tools.divide(duration, 0.02);
          var str = this.m_winLabel.string.replace(/<.*?>|\(\d*\)|[^0-9|.]/g, "").replace(/^\./g, "");
          var value = Number(str) * unit;

          if (value >= finalValue) {
            return;
          }

          var step = Tools.divide(Tools.strip(finalValue - value), times);
          var repeatAction = tween(this.m_winLabel.node).repeat(times, tween().sequence(tween().call(function () {
            value = value + step;

            if (value >= finalValue) {
              value = finalValue;
            }

            _this15.SetWinValue(value, false, true, multiCurrency);
          }), tween().delay(0.02)));
          var action = repeatAction;

          if (this.m_canScaleWinValue) {
            action = tween(this.m_winLabel.node).parallel(tween().to(0.1, {
              scale: v3(1.5, 1.5, 1)
            }), repeatAction).delay(0.4).to(0.15, {
              scale: v3(1, 1, 1)
            });
          }

          tween(this.m_winLabel.node).then(action).call(function () {
            _this15.SetWinValue(finalValue, true, true, multiCurrency);
          }).start();
        } // 取得BigWin的label節點座標
        ;

        _proto2.GetWinLabelWorldPos = function GetWinLabelWorldPos() {
          return this.m_winLabel.node.getComponent(UITransform).convertToWorldSpaceAR(Vec3.ZERO);
        }
        /**
         * 設定自動玩面板freeGame字串
         */
        ;

        _proto2.SetAutoPlaySettingPanelFreeGameString = function SetAutoPlaySettingPanelFreeGameString(strKey1, strKey2, strKey3) {
          this.m_autoplaySetting.SetFreeGameString(strKey1, strKey2, strKey3);
        }
        /**
         * 設定自動玩面板freeGame選擇圖片
         */
        ;

        _proto2.SetAutoPlayFreeGameSelectSprites = function SetAutoPlayFreeGameSelectSprites(spriteFrames, rounds) {
          this.m_autoplaySetting.SetFreeGameSelectSprites(spriteFrames, rounds);
        } //上鎖時，不能變更bet的狀態

        /**
         * bet鎖
         */
        ;

        _proto2.LockBetEnable = function LockBetEnable(islock, isAuto) {
          if (isAuto === void 0) {
            isAuto = false;
          }

          if (buyBonusManager.HasBuyBonus && buyBonusManager.IsBuyBonus) {
            return;
          }

          if (islock || this.m_IsFreeSpin) {
            this.SetEnableBetButtons(false);
            this.m_lockBetEnable = islock;
          } else {
            this.m_lockBetEnable = islock;

            if (!isAuto) {
              this.SetEnableBetButtons(true);
            }
          }
        } //上鎖時，不能變更Auto的狀態

        /**
         * 自動玩鎖
         */
        ;

        _proto2.LockAutoEnable = function LockAutoEnable(islock) {
          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.AutoPlay)) {
            islock = true;
          }

          this.m_lockAutoEnable = islock;
        } //上鎖時，不能變更智慧託管的狀態

        /**
         * 智慧託管鎖
         */
        ;

        _proto2.LockWiseAutoEnable = function LockWiseAutoEnable(islock) {
          if (islock) {
            if (this.m_autoplayMenuNode.active) {
              this.m_autoplayMenuNode.active = false;
            }

            this.m_wiseAutoBtn.node.getComponent(UIRenderer).color = color(135, 126, 98);
          } else {
            this.m_wiseAutoBtn.node.getComponent(UIRenderer).color = color(255, 255, 255);
          }

          this.m_lockWiseAutoEnable = islock;
        } //上鎖時，不能開啟報表

        /**
         * 報表鎖
         */
        ;

        _proto2.LockHistoryEnable = function LockHistoryEnable(islock) {
          if (islock) {
            if (this.m_webView && this.m_webView.node.active && this.m_webView.url == this.m_historyUrl) {
              this.CloseWebView();
            }

            this.m_historyBtn.node.getComponent(UIRenderer).color = color(135, 126, 98);
          } else {
            this.m_historyBtn.node.getComponent(UIRenderer).color = color(255, 255, 255);
          }

          this.m_lockhistoryEnable = islock;
        } //上鎖時，不能開啟說明頁

        /**
         * 說明頁鎖
         */
        ;

        _proto2.LockInfoEnable = function LockInfoEnable(islock) {
          if (islock) {
            this.m_ratioBtn.node.getComponent(UIRenderer).color = color(135, 126, 98);
          } else {
            this.m_ratioBtn.node.getComponent(UIRenderer).color = color(255, 255, 255);
          }

          this.m_lockInfoEnable = islock;
        };

        _proto2.ClickSoundBtn = function ClickSoundBtn() {
          if (this.m_soundBtnStatus) {
            // 關
            this.m_soundBtnStatus = false;
            this.m_soundBtn.node.getComponent(Sprite).spriteFrame = this.m_soundBtnSprite[1];
            this.m_soundBtn.node.getComponent(UIRenderer).color = color(135, 126, 98);
            SoundManager.getInstance().SetAllMute(true);
            this.CheckSound();
            this.m_soundTime = 0;
            this.SendClickEvent(Define.BTN_CLICK_EVENT.SOUND_OFF, this.m_spinWithSpeed);
          } // 開
          else {
              this.m_soundBtnStatus = true;
              this.m_soundBtn.node.getComponent(Sprite).spriteFrame = this.m_soundBtnSprite[0];
              this.m_soundBtn.node.getComponent(UIRenderer).color = color(255, 255, 255);
              SoundManager.getInstance().SetAllMute(false);
              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
              this.CheckSound();
              this.SendClickEvent(Define.BTN_CLICK_EVENT.SOUND_ON, this.m_spinWithSpeed);
            }
        };

        _proto2.ClickSpeedBtn = function ClickSpeedBtn() {
          if (this.m_speedBtnStatus) {
            // 關
            this.m_speedBtnStatus = false;

            if (this.m_speedSprite && this.m_speedSprite[0]) {
              this.m_speedImg.getComponent(Sprite).spriteFrame = this.m_speedSprite[0];
            } else {
              this.m_speedImg.getComponent(UIRenderer).color = color(135, 126, 98);
            }

            this.m_isHintQuickMod = true;
            this.m_isHardStop = false;
            var key = Define.AID + ":" + Define.NOW_GAME_ID + ":QuickMode";
            LocalStorageManager.SetBool(key, false);
            SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
            this.ShowSpeedMsg(LocaleStringManager.GetInstance().GetString(Define.StringKey.SPEED_PANEL_STOP));
            this.SendClickEvent(Define.BTN_CLICK_EVENT.HARDSTOP_OFF, this.m_spinWithSpeed);
            this.m_spinWithSpeed = 0;

            if (this.m_speedHintLabel) {
              this.m_speedHintLabel.node.active = true;
            }
          } // 開
          else {
              this.m_speedBtnStatus = true;

              if (this.m_speedSprite && this.m_speedSprite[1]) {
                this.m_speedImg.getComponent(Sprite).spriteFrame = this.m_speedSprite[1];
              } else {
                this.m_speedImg.getComponent(UIRenderer).color = color(255, 255, 255);
              }

              this.m_isHintQuickMod = true;
              this.m_isHardStop = true;

              var _key3 = Define.AID + ":" + Define.NOW_GAME_ID + ":QuickMode";

              LocalStorageManager.SetBool(_key3, true);
              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
              this.ShowSpeedMsg(LocaleStringManager.GetInstance().GetString(Define.StringKey.SPEED_PANEL_START));
              this.SendClickEvent(Define.BTN_CLICK_EVENT.HARDSTOP_ON, this.m_spinWithSpeed);

              if (this.m_speedHintLabel) {
                this.m_speedHintLabel.node.active = false;
              }
            }
        }
        /**
         * 取得UI元素
         */
        ;

        _proto2.getUIElement = function getUIElement(name) {
          if (name == BottombarManager.UIName.BTN_SOUND) {
            return this.m_commView.getChildByName(BottombarManager.UIName.BTN_SOUND);
          } else if (name == BottombarManager.UIName.BTN_SPEED) {
            return this.m_commView.getChildByName(BottombarManager.UIName.BTN_SPEED);
          } else if (name == BottombarManager.UIName.BTN_AUTOPLAY) {
            return this.m_autoBtn.node;
          } else if (name == BottombarManager.UIName.BTN_SPIN) {
            return this.m_spinBtn.node;
          }

          return;
        }
        /**
         * 初始化自動玩面板
         * @param aid 玩家aid
         * @param apiid 玩家apiid
         * @param gameid 遊戲id(define)
         */
        ;

        _proto2.AutoPlayPanelInit = function AutoPlayPanelInit(aiduserinfo, apiidgameid, gameid, siteid) {
          var aid;
          var apiid;
          var showHomeBtn = Define.IS_LOBBY_OPEN && ((Define.LobbyMode === Define.LobbyModeType.TO_URL || Define.LobbyMode === Define.LobbyModeType.CHANGE_IFRAME) && Define.HOME_URL && Define.HOME_URL != "" || Define.LobbyMode === Define.LobbyModeType.TO_JILI && !Define.IsLifeSocketClose);

          if (typeof aiduserinfo == "string") {
            aid = aiduserinfo;
            apiid = apiidgameid;
          } else {
            aid = aiduserinfo.aid.toString();
            apiid = aiduserinfo.apiid.toString();
            siteid = aiduserinfo.siteid;
            gameid = apiidgameid;
          }

          Define.AID = aid;
          Define.API_ID = apiid;
          Define.NOW_GAME_ID = gameid;
          Define.SITE_ID = siteid;

          if (Tools.isIndia) {
            Define.SERIES_GAME_NAME = "AceRoyale";
          } else if (Tools.IsTada) {
            Define.SERIES_GAME_NAME = "Tada";
          }

          this.m_autoplaySetting.Init(aid, apiid, gameid, this);
          this.m_homeBtn.node.active = showHomeBtn;

          if (Tools.Line != Define.LineSetting.bc) {
            NotificationManager.GetInstance().Init(this, Define.AID, Define.API_ID, Define.NOW_GAME_ID);
            NotificationManager.GetInstance().SetState(true);
          }
        };

        _proto2.SetAutoPlayIcon = function SetAutoPlayIcon(ballIcons) {
          this.m_autoplaySetting.SetBallIcon(ballIcons);
        };

        _proto2.LoadTitle = function LoadTitle(url) {
          var _this16 = this;

          assetManager.loadRemote(url, {
            reload: true
          }, function (error, resource) {
            if (error) {
              _this16.LoadTitle(url);

              return;
            }

            _this16.m_webViewTitleSprite.spriteFrame = new SpriteFrame();
            _this16.m_webViewTitleSprite.spriteFrame.texture = resource;
            _this16.m_webViewTitleSprite.enabled = true;
          });
        }
        /**
         * 同步財產，請注意使用時機，請勿每一幀都呼叫
         * @param serverCoinInfos server所給的財產金額
         */
        ;

        _proto2.SyncChips = function SyncChips(serverCoinInfos, autoStopCb, isSpinAck, isFromWS) {
          var _this17 = this;

          if (isSpinAck === void 0) {
            isSpinAck = false;
          }

          if (isFromWS === void 0) {
            isFromWS = false;
          }

          if (serverCoinInfos === null) {
            return;
          }

          if (!walletManger.HasWallet) {
            return;
          }
          /**如果isSpinAck為false。
           * 如果IsSyncFromWS為true，isFromWS和m_isGameIdle有一個為false就不同步。
           * 如果IsSyncFromWS為false，isFromWS為true則不同步。
           */


          if (!isSpinAck && (Define.IsSyncFromWS && (!isFromWS || !this.m_isGameIdle) || !Define.IsSyncFromWS && isFromWS)) {
            return;
          }

          var currencyID = walletManger.CurencyID;
          var tempInfos = null;
          var index = null;

          if (typeof serverCoinInfos !== "number") {
            for (var i = 0; i < serverCoinInfos.length; i++) {
              if (serverCoinInfos[i].currencyNumber === currencyID) {
                index = i;
                break;
              }
            }

            serverCoinInfos.forEach(function (value, index, array) {
              serverCoinInfos[index].coin = Tools.strip(serverCoinInfos[index].coin);
            });
            tempInfos = serverCoinInfos;
          } else {
            var tempArray = new Array();
            var tempWalet = {
              coin: serverCoinInfos,
              currencyNumber: currencyID
            };
            tempArray.push(tempWalet);
            tempInfos = tempArray;
            index = 0;
          }

          var realCoin = 0;

          if (index !== null) {
            realCoin = this.GetDisplayValue(tempInfos[index].coin);

            if (!this.m_isInitChips && this.GetChips() === 0 && realCoin > 0) {
              this.m_isInitChips = true;
              delete this.m_initTimer;
              this.m_initTimer = null;
            }
          }

          if (this.m_isInitChips) {
            if (Define.DEPOSIT_URL && this.m_firstCheckChips && this.GetChips() < Tools.strip(this.m_betList[0])) {
              MsgBox.getInstance().ShowDepositMsg();
            }

            this.m_firstCheckChips = false;
            var wallet = walletManger.GetWallet();
            wallet.forEach(function (value, index, array) {
              for (var _i8 = 0; _i8 < tempInfos.length; _i8++) {
                if (wallet[index].currencyNumber === tempInfos[_i8].currencyNumber && Math.abs(Tools.minus(wallet[index].coin, tempInfos[_i8].coin)) > 0) {
                  var _log = "CN:%s,NC:%s,SC:%s";
                  _log = js.formatStr(_log, wallet[index].currencyNumber, wallet[index].coin, tempInfos[_i8].coin);
                  _log += ",SA:" + (isSpinAck ? "1" : "0");
                  _log += ",S:" + (Define.IsSyncFromWS ? "1" : "0");
                  _log += ",iWS:" + (isFromWS ? "1" : "0");
                  _log += ",I:" + (_this17.m_isGameIdle ? "1" : "0");

                  _this17.SendClickEvent(Define.BTN_CLICK_EVENT.SYNC_CHIPS, _log);
                }
              }
            });
          }

          walletManger.SetAllCoin(tempInfos);
          this.SetChips(this.GetChips());
          this.m_oldExchangeChips = walletManger.GetWallet();

          if (Tools.divide(Math.floor(Tools.times(this.GetChips(), 100)), 100) != Tools.divide(Math.floor(Tools.times(realCoin, 100)), 100) && //金額與server的不同
          realCoin >= 0) {
            var _log2 = "C:%s,S:%s";
            _log2 = js.formatStr(_log2, this.GetChips().toString(), realCoin.toString());
            this.SendClickEvent(Define.BTN_CLICK_EVENT.CHANGE_CHIPS, _log2);
          }
        }
        /**
         * 增加快停提示的count
         */
        ;

        _proto2.AddHardStopTipCount = function AddHardStopTipCount(btnName) {
          var _this18 = this;

          if (this.IsBMMGames && Tools.IsUKGC || Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CloseSpeedUp)) {
            return;
          }

          if (!this.m_isHintQuickMod) {
            if (!this.m_isSpinCountFinished) {
              if (btnName == BottombarManager.UIName.BTN_SPIN) {
                this.m_spinClickCount += 1;

                if (this.m_spinClickCount >= SPIN_CLICK_TIME) {
                  this.m_isSpinCountFinished = true;
                }
              }
            } else if (Date.now() - this.m_clickStartTime > CLICK_SECONDS) {
              this.m_clickStartTime = Date.now();
              this.m_clickCount = 1;
            } else {
              this.m_clickCount += 1;

              if (this.m_clickCount >= CLICK_TIME) {
                this.m_isHintQuickMod = true;
                var setting = {};
                setting.contextKey = Define.StringKey.MSGBOX_QUICK_MOD;
                setting.titleKey = Define.StringKey.MSGBOX_TITLE_QUICK_MOD;
                setting.showCancelBtn = false;
                setting.showConfirmBtn = true;
                setting.showCloseBtn = true;

                setting.confirmCB = function () {
                  _this18.StartHardStop();
                };

                MsgBox.getInstance().PushMessageBoxSetting(setting);
              }
            }
          }
        }
        /**
         * 取得地bar使用的文字plist
         */
        ;

        _proto2.GetStringAtlas = function GetStringAtlas() {
          return this.m_localeSpriteAtlas;
        }
        /**
         * 取得commAtlas2
         */
        ;

        _proto2.GetCommAtlas = function GetCommAtlas() {
          return this.m_commAtlas;
        }
        /**
         * 取得streetAtlas
         */
        ;

        _proto2.GetStreetAtlas = function GetStreetAtlas() {
          return this.m_streetAtlas;
        }
        /**
         * 關閉所有地bar選單
         */
        ;

        _proto2.CloseAllMenu = function CloseAllMenu() {
          if (this.m_commView.active) {
            TweenSystem.instance.ActionManager.removeAllActionsFromTarget(this.m_wiseAutoBtn.node);
            TweenSystem.instance.ActionManager.removeAllActionsFromTarget(this.m_historyBtn.node);
            TweenSystem.instance.ActionManager.removeAllActionsFromTarget(this.m_ratioBtn.node);
            this.m_wiseAutoBtn.node.setScale(v3(1, 1, 1));
            this.m_historyBtn.node.setScale(v3(1, 1, 1));
            this.m_ratioBtn.node.setScale(v3(1, 1, 1));
            this.m_commView.active = false;
          }

          if (this.m_betRootNode.active) {
            this.m_betRootNode.active = false;

            if (this.m_extraBetView) {
              this.m_extraBetView.active = false;
            }

            if (this.m_touchCb && this.m_isSendBetViewOpen) {
              var cEvent = new EventTouch([], false, "");
              cEvent.target = new FackEventTarget(BottombarManager.BetViewState.Close);
              this.m_touchCb(cEvent);
            }
          }
        };

        _proto2.ShowRealiteCheckMsgBox = function ShowRealiteCheckMsgBox() {
          var _this19 = this;

          var min = this.m_playTime_min;
          var hr = this.m_playTime_hr;
          var timeStr = hr.toString() + "h " + min.toString() + "m";
          var netStr = "";

          if (this.m_netWin >= 0) {
            netStr = Define.DollarSymbol + this.m_netWin.toString();
          } else {
            var net = Tools.times(this.m_netWin, -1);
            netStr = "-" + Define.DollarSymbol + net.toString();
          }

          iframeCommandManager.UseStopAutoCb(); // 先借iframe控制的來用

          MsgBox.getInstance().ShowRealityCheckMessageBox(Define.StringKey.MSGBOX_REALITY_CHECK, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, [timeStr, netStr], Tools.CloseGameTab, function () {
            _this19.OpenWebView(_this19.m_historyUrl, Define.StringKey.BOTTOM_BAR_BACK_GAME_HISTORY);
          });
        }
        /**
         * 開啟WebView
         */
        ;

        _proto2.OpenWebView = function OpenWebView(url, tittle) {
          log("OpenWebView", url, tittle);

          if (this.m_webViewLock == true) {
            return;
          }

          MsgBox.getInstance().AddObstacle("WEBVIEW");
          this.m_webView.node.active = true;

          if (this.m_webView.url == url && url == this.m_historyUrl) {
            this.m_webView.nativeWebView.contentWindow.postMessage('{"cmd": "refresh", "options": { "stayLatestPage": true } }', url.slice(0, url.indexOf(".com") + 4));
          } else {
            this.m_webView.url = url;
          }

          if (!sys.isNative) {
            window.scrollTo(0, 0);
          }

          this.m_webViewCloseBtn.node.getChildByName("Label2").getComponent(Label).string = LocaleStringManager.GetInstance().GetString(tittle);

          if (LocaleStringManager.CurrLang === Define.Lang.MM) {
            this.m_webViewCloseBtn.node.getChildByName("Label2").getComponent(Label).font = Define.DefaultFont;
          }

          this.ChangeWebViewSize(this.m_isLandscape);
        }
        /**
         * 關閉WebView
         */
        ;

        _proto2.CloseWebView = function CloseWebView() {
          MsgBox.getInstance().DeleteObstacle("WEBVIEW");
          this.m_webView.node.active = false;
        }
        /**
         * 鎖定webview使其無法開啟
         */
        ;

        _proto2.LockWebViewEnable = function LockWebViewEnable(bool) {
          this.m_webViewLock = bool;
        };

        _proto2.ShowSpeedMsg = function ShowSpeedMsg(state, isConnectSpeed) {
          var _this20 = this;

          if (isConnectSpeed === void 0) {
            isConnectSpeed = false;
          }

          this.m_speedPanelLabel.string = state;

          if (LocaleStringManager.CurrLang === Define.Lang.MM) {
            this.m_speedPanelLabel.font = Define.DefaultFont;
          }

          TweenSystem.instance.ActionManager.removeAllActionsFromTarget(this.m_speedPanelLabel.node);
          this.m_speedPanelLabel.node.active = true;
          TweenSystem.instance.ActionManager.removeAllActionsFromTarget(this.m_speedPanel.node);
          this.m_speedPanel.node.active = true;
          var delay = 1;

          if (isConnectSpeed) {
            delay = 2;
          }

          tween(this.m_speedPanel.node.getComponent(UIOpacity)).to(0.3, {
            opacity: 200
          }).delay(delay).to(0.2, {
            opacity: 0
          }).call(function () {
            _this20.m_speedPanel.node.active = false;
          }).start();
          tween(this.m_speedPanelLabel.node.getComponent(UIOpacity)).to(0.3, {
            opacity: 200
          }).delay(delay).to(0.2, {
            opacity: 0
          }).call(function () {
            _this20.m_speedPanelLabel.node.active = false;
          }).start(); //連線狀態

          if (isConnectSpeed) {
            this.m_isLockConnectSprite = true;
            this.m_connectSprite.spriteFrame = this.m_connectAtlas.getSpriteFrame("BottomBar_Wifi_01");
            this.m_connectAnim.play("Connect");
          }
        };

        _proto2.UpdateConnectSprite = function UpdateConnectSprite(isLock) {
          this.m_isLockConnectSprite = isLock;
          var avgSpeed = ConnectionSpeed.GetInstance().AvgSpeed;

          for (var i = 0; i < Define.SpeedRange.length; i++) {
            if (avgSpeed <= Define.SpeedRange[i]) {
              var lvl = Define.MaxSpeedLvl - i;

              if (lvl > Define.MaxSpeedLvl) {
                lvl = Define.MaxSpeedLvl;
              } else if (lvl < 1) {
                lvl = 1;
              }

              this.m_connectSprite.spriteFrame = this.m_connectAtlas.getSpriteFrame("BottomBar_Wifi_0" + lvl.toString());

              if (i > 2) {
                this.m_connectAnim.play("Connect");
              } else {
                this.m_connectAnim.play("Connect_Close");
              }

              break;
            }
          }
        } // 新增一個計時器每十秒才送一次 防止DDOS
        ;

        _proto2.PushClickToBuffer = function PushClickToBuffer(type) {
          this.m_clickBuffer[type]++;
        };

        _proto2.ClickBufferToServer = function ClickBufferToServer() {
          //特色頁
          if (this.m_clickBuffer[this.CLICK_BUFFER_TYPE.FEATURES] >= 1) {
            this.SendClickEvent(Define.BTN_CLICK_EVENT.FEATURESVIEW, this.m_clickBuffer[this.CLICK_BUFFER_TYPE.BACKPACK_MSG]);
            this.m_clickBuffer[this.CLICK_BUFFER_TYPE.FEATURES] = 0;
          } //說明頁


          if (this.m_clickBuffer[this.CLICK_BUFFER_TYPE.RATIO] >= 1) {
            this.SendClickEvent(Define.BTN_CLICK_EVENT.RATIO, this.m_clickBuffer[this.CLICK_BUFFER_TYPE.BACKPACK_MSG]);
            this.m_clickBuffer[this.CLICK_BUFFER_TYPE.RATIO] = 0;
          } //遊戲歷程


          if (this.m_clickBuffer[this.CLICK_BUFFER_TYPE.HISTORY] >= 1) {
            this.SendClickEvent(Define.BTN_CLICK_EVENT.HISTORY, this.m_clickBuffer[this.CLICK_BUFFER_TYPE.BACKPACK_MSG]);
            this.m_clickBuffer[this.CLICK_BUFFER_TYPE.HISTORY] = 0;
          } //智能託管


          if (this.m_clickBuffer[this.CLICK_BUFFER_TYPE.WISEAUTO] >= 1) {
            this.SendClickEvent(Define.BTN_CLICK_EVENT.WISEAUTO, this.m_clickBuffer[this.CLICK_BUFFER_TYPE.BACKPACK_MSG]);
            this.m_clickBuffer[this.CLICK_BUFFER_TYPE.WISEAUTO] = 0;
          } //背包


          if (this.m_clickBuffer[this.CLICK_BUFFER_TYPE.BACKPACK] >= 1) {
            this.SendClickEvent(Define.BTN_CLICK_EVENT.BACKPACK, this.m_clickBuffer[this.CLICK_BUFFER_TYPE.BACKPACK_MSG]);
            this.m_clickBuffer[this.CLICK_BUFFER_TYPE.BACKPACK] = 0;
          } //道具分頁


          if (this.m_clickBuffer[this.CLICK_BUFFER_TYPE.BACKPACK_GAME] >= 1) {
            this.SendClickEvent(Define.BTN_CLICK_EVENT.BACKPACK_GAMETAB, this.m_clickBuffer[this.CLICK_BUFFER_TYPE.BACKPACK_MSG]);
            this.m_clickBuffer[this.CLICK_BUFFER_TYPE.BACKPACK_GAME] = 0;
          } //所有分頁


          if (this.m_clickBuffer[this.CLICK_BUFFER_TYPE.BACKPACK_ALL] >= 1) {
            this.SendClickEvent(Define.BTN_CLICK_EVENT.BACKPACK_ALLTAB, this.m_clickBuffer[this.CLICK_BUFFER_TYPE.BACKPACK_MSG]);
            this.m_clickBuffer[this.CLICK_BUFFER_TYPE.BACKPACK_ALL] = 0;
          } //訊息分頁


          if (this.m_clickBuffer[this.CLICK_BUFFER_TYPE.BACKPACK_MSG] >= 1) {
            this.SendClickEvent(Define.BTN_CLICK_EVENT.BACKPACK_MSGTAB, this.m_clickBuffer[this.CLICK_BUFFER_TYPE.BACKPACK_MSG]);
            this.m_clickBuffer[this.CLICK_BUFFER_TYPE.BACKPACK_MSG] = 0;
          }
        }
        /**
         * @description 是否隱藏加速和特色鈕
         * @param show (預設 true) false則隱藏
         *  */
        ;

        _proto2.ShowUIButton = function ShowUIButton(show) {
          if (show === void 0) {
            show = true;
          }

          if (show) {
            if (this.m_speedBtn) {
              this.m_speedBtn.node.active = true;
              this.m_speedImg.active = true;
            }
          } else {
            if (this.m_speedBtn) {
              this.m_speedBtn.node.active = false;
              this.m_speedImg.active = false;
            }
          }
        };

        _proto2.IsSkipSmallFlash = function IsSkipSmallFlash() {
          return this.m_isSkipFlash;
        };

        _proto2.SetSkipSmallFlash = function SetSkipSmallFlash(state) {
          this.m_isSkipFlash = state;
        };

        _proto2.CloseJPCheckBox = function CloseJPCheckBox() {
          this.m_autoplaySetting.CloseJPCheckBox();
        };

        _proto2.CheckSound = function CheckSound() {
          if (this.m_useSoundTimer && this.m_soundBtnStatus) {
            this.m_useSoundTimer.Start(1 * 1000);
            this.m_soundTimeFlag = true;
          } else {
            this.m_soundTimeFlag = false;
          }
        };

        _proto2.SetSpinWithSpeed = function SetSpinWithSpeed() {
          this.m_spinWithSpeed++;
        };

        _proto2.SetSpinWithAuto = function SetSpinWithAuto() {
          this.m_spinWithAuto++;
        };

        _proto2.GetSpinWithAuto = function GetSpinWithAuto() {
          var temp = this.m_spinWithAuto;
          this.m_spinWithAuto = 0;
          return temp;
        };

        _proto2.LoadCurrencyInfo = function LoadCurrencyInfo() {
          var _this21 = this;

          if (!this.m_currencyInfo) {
            Define.CommonBundle.load(Tools.GetFilePath("Astt/%s/multiCurrency/changeCurrency"), Prefab, function (err, prefab) {
              if (err) {
                error(err.message || err);
                return;
              }

              var node = instantiate(prefab);

              _this21.node.addChild(node);

              Tools.SetZIndex(node, Define.ZOrder.RANKING);
              node.active = false;
              _this21.m_currencyInfo = node.getComponent(CurrencyChange);

              _this21.m_currencyInfo.Init(_this21, walletManger);
            });
          }
        };

        _proto2.SetFreeGameString = function SetFreeGameString(txt) {
          if (this.m_autoplaySetting) {
            this.m_autoplaySetting.SetFreeGameString(txt, "", []);
          } else {
            error("autoplaySetting is null!");
          }
        };

        _proto2.HaveStopSound = function HaveStopSound(state) {
          this.m_haveStopSound = state;
        }
        /**
         * 設定是否使用縮放效果
         */
        ;

        _proto2.SetWinValueScale = function SetWinValueScale(state) {
          this.m_canScaleWinValue = state;
        }
        /**
         * @description 設定是否使用特效版
         * @param fntPath 字體路徑
         * @param pos 顯示位置(直版與橫版)
         * @param fontSize 字體大小
         * @param lineHeight 每行高(因每種fnt預設大小不同，需自行在creator中拉個label套套看，否則會有數字不會置中問題)
         */
        ;

        _proto2.SetUseEftWinValue = function SetUseEftWinValue(fntPath, pos, fontSize, lineHeight) {
          this.m_eftWin = new EffectWin(this, this.m_isLandscape);
          this.m_eftWin.SetUseEftWinValue(fntPath, pos, fontSize, lineHeight);
        }
        /**
         * 必須先SetUseEftWinValue才可使用
         */
        ;

        _proto2.SetEftWinValue = function SetEftWinValue(finalValue, totalValue) {
          this.m_eftWin.SetEftWinValue(finalValue, totalValue);
        };

        _proto2.SkipEftWinValue = function SkipEftWinValue() {
          this.m_eftWin.SkipEftWinValue();
        };

        _proto2.SendClickEvent = function SendClickEvent(eventID, eventStatus) {
          ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, eventID, eventStatus, this.m_isLandscape));
        }
        /**
         * 跑馬燈設置
         */
        ;

        _proto2.SetMarquee = function SetMarquee() {
          this.m_marqueeObj = LifeSocket.GetInstance().GetMarqueeMsg();

          if (this.m_marqueeObj != null) {
            // 大廳中設定另外一組跑馬燈
            var showType = this.m_marqueeObj.content.showType;

            if (showType == 1) {
              if (AppManager.LobbyData != null) {
                this.SetLobbyMarquee(this.m_marqueeObj);
              }

              return;
            }

            var marqueeStrVec = [];
            var i = 0;
            var marqueeMainStr = this.m_marqueeObj.content.template.format;
            var marqueeMainColor = this.m_marqueeObj.content.template.color;
            var marqueeSpacilStrVec = this.m_marqueeObj.content.content;
            var marqueeSpacilColorVec = this.m_marqueeObj.content.contentColor;
            var splitString = marqueeMainStr.split(/{.}/); // 分數資料一定在最後一個

            if (!isNaN(Number(marqueeSpacilStrVec[marqueeSpacilStrVec.length - 1]))) {
              var value = Number(marqueeSpacilStrVec[marqueeSpacilStrVec.length - 1]);
              marqueeSpacilStrVec[marqueeSpacilStrVec.length - 1] = Tools.FormatNumberThousands(value, Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT);
            }

            while (marqueeMainStr.match(/{(.*?)}/) != null) {
              var str = marqueeMainStr.match(/{(.*?)}/);
              marqueeStrVec.push([marqueeMainColor, splitString[i]], [marqueeSpacilColorVec[str[1]], marqueeSpacilStrVec[str[1]]]);
              marqueeMainStr = marqueeMainStr.replace(str[0], "");
              i++;
            }

            if (splitString[i]) {
              marqueeStrVec.push([marqueeMainColor, splitString[i]]);
            }

            var finalStr = "";

            while (marqueeStrVec.length != 0) {
              var _str = marqueeStrVec.shift();

              finalStr = finalStr + _str[0] + ";30;" + _str[1];

              if (marqueeStrVec.length > 0) {
                var dot = "";

                if (LocaleStringManager.CurrLang == Define.Lang.CN || LocaleStringManager.CurrLang == Define.Lang.JP) {
                  dot = ",";
                } else {
                  dot = "，";
                }

                finalStr = finalStr + dot;
              }
            }

            this.m_marqueeNodeS.getComponent(RichText).string = LocaleStringManager.GetInstance().GetString(finalStr);

            if (LocaleStringManager.CurrLang === Define.Lang.MM) {
              this.m_marqueeNodeS.getComponent(RichText).font = Define.DefaultFont;
            }

            finalStr = finalStr.replace("\\n", "");
            this.m_marqueeNodeL.getComponent(RichText).string = LocaleStringManager.GetInstance().GetString(finalStr);

            if (LocaleStringManager.CurrLang === Define.Lang.MM) {
              this.m_marqueeNodeL.getComponent(RichText).font = Define.DefaultFont;
            }
          }
        };

        _proto2.ShowMarquee = function ShowMarquee() {
          var _this22 = this;

          var SHIFT_L = 50;
          var SHIFT_S = 100;

          if (this.m_marqueeObj != null) {
            // 大廳中設定另外一組跑馬燈
            var showType = this.m_marqueeObj.content.showType;

            if (showType == 1) {
              return;
            }

            var x = this.m_marqueeNodeL.position.x; // this.m_marqueeNodeL.y = SHIFT_L;

            this.m_marqueeNodeL.setPosition(x, SHIFT_L);
            tween(this.m_marqueeNodeL).to(0.4, {
              position: v3(x, 0)
            }).call(function () {
              _this22.m_marqueeBgL.getComponent(UIOpacity).opacity = 255;
            }).delay(3.2).call(function () {
              _this22.m_marqueeBgL.getComponent(UIOpacity).opacity = 0.5;
            }).to(0.4, {
              position: v3(x, -SHIFT_L)
            }).call(function () {
              // this.m_marqueeNodeL.position = v3( x, SHIFT_L );
              _this22.m_marqueeNodeL.setPosition(x, SHIFT_L);
            }).start();
            x = this.m_marqueeNodeS.position.x; // this.m_marqueeNodeS.y = SHIFT_S;

            this.m_marqueeNodeS.setPosition(x, SHIFT_S);
            tween(this.m_marqueeNodeS).to(0.4, {
              position: v3(x, 0)
            }).call(function () {
              _this22.m_marqueeBgS.getComponent(UIOpacity).opacity = 255;
            }).delay(3.2).call(function () {
              _this22.m_marqueeBgS.getComponent(UIOpacity).opacity = 0.5;
            }).to(0.4, {
              position: v3(x, -SHIFT_S)
            }).call(function () {
              _this22.m_marqueeNodeS.position = v3(x, SHIFT_S);
            }).start();
          }
        };

        _proto2.SetLobbyMarquee = function SetLobbyMarquee(data) {
          var _this23 = this;

          AppManager.GetMarquee(data, function (node) {
            if (node) {
              var marquee_L = node;
              var marquee_S = instantiate(node);
              marquee_L.setParent(_this23.m_lobbyMarqueeNode); // marquee_L.y = Define.DEFAULT_LANDSCAPE_SIZE.height / 2;

              marquee_L.setPosition(marquee_L.position.x, Define.DEFAULT_LANDSCAPE_SIZE.height / 2);
              marquee_L.name = "lobbyMarquee_L"; // marquee_L.getComponent( AppManager.LobbyComponentName.marquee ).Play( true, true );

              var appMarquee_L = marquee_L.getComponent(AppManager.LobbyComponentName.marquee);
              appMarquee_L.Play(false, true);
              marquee_S.setParent(_this23.m_lobbyMarqueeNode); // marquee_S.y = this.m_floatView.getComponent( UITransform ).contentSize.height / 2;

              marquee_S.setPosition(marquee_S.position.x, _this23.m_floatView.getComponent(UITransform).contentSize.height / 2);
              marquee_S.name = "lobbyMarquee_S"; // marquee_S.getComponent( AppManager.LobbyComponentName.marquee ).Play( false, true );

              var appMarquee_S = marquee_S.getComponent(AppManager.LobbyComponentName.marquee);
              appMarquee_S.Play(false, true);

              if (_this23.m_isLandscape) {
                marquee_S.getComponent(UIOpacity).opacity = 0;
              } else {
                marquee_L.getComponent(UIOpacity).opacity = 0;
              }
            }
          });
        };

        _proto2.SetSpinTurbo = function SetSpinTurbo(isTurbo) {
          if (isTurbo === void 0) {
            isTurbo = false;
          }

          this.m_isSpinTurbo = isTurbo;
        }
        /**
         * 找原押注金額的index
         * @param betValue 要找的押注金額(原值)，如美金0.3請傳3
         */
        ;

        _proto2.FindBetIndexByValue = function FindBetIndexByValue(betValue, needRatio) {
          if (needRatio === void 0) {
            needRatio = true;
          }

          var currencyID = walletManger.CurencyID;
          var walletInfo = walletManger.GetWalletByID(currencyID);
          var ratio = walletInfo.ratio ? walletInfo.ratio : 1;
          var betList = JSON.parse(JSON.stringify(walletInfo.bet));

          if (ratio !== 1 && needRatio) {
            betList.forEach(function (value, index, array) {
              betList[index] = Tools.divide(value, ratio);
            });
          }

          var index = 0;

          for (var i = 0; i < betList.length; i++) {
            if (betList[i] === betValue) {
              index = i;
              break;
            }
          }

          return index;
        };

        _proto2.LeaveGame = function LeaveGame() {// Rankboard.LeaveGame();
        } //====================自選起伏====================
        ;

        _proto2.VolatilityInit = function VolatilityInit(info) {
          VolatilityManager.GetInstance().Init(info, this, this.m_volatilityParent, this.m_volatilitySprite);
        } //====================GLI====================
        ;

        _createClass(BottombarManager, [{
          key: "CommonWebviewParentNode",
          get: function get() {
            return this.m_commonWebviewParentNode;
          }
        }, {
          key: "ConnectAnim",
          set: function set(v) {
            this.m_connectAnim = v;
          }
        }, {
          key: "ConnectSprite",
          set: function set(v) {
            this.m_connectSprite = v;
          }
        }, {
          key: "SpinBtn",
          get: function get() {
            return this.m_spinBtn;
          },
          set: function set(v) {
            this.m_spinBtn = v;
          }
        }, {
          key: "StopSpinBtn",
          set: function set(v) {
            this.m_stopSpinBtn = v;
          }
        }, {
          key: "AutoBtn",
          get: function get() {
            return this.m_autoBtn;
          },
          set: function set(v) {
            this.m_autoBtn = v;
          }
        }, {
          key: "StopAutoBtn",
          set: function set(v) {
            this.m_stopAutoBtn = v;
          }
        }, {
          key: "StopAutoCountBtn",
          set: function set(v) {
            this.m_stopAutoCountBtn = v;
          }
        }, {
          key: "SpeedButton",
          set: function set(v) {
            this.m_speedButton = v;
          }
        }, {
          key: "CurrencyBtn",
          set: function set(v) {
            this.m_currencyBtn = v;
          } // 押注按鈕

        }, {
          key: "BetBtn",
          get: function get() {
            if (this.IsBMMGames && this.m_BMMbetBtn) {
              return this.m_BMMbetBtn;
            } else {
              return this.m_betBtn;
            }
          },
          set: function set(v) {
            this.m_betBtn = v;
          }
        }, {
          key: "BetBtnIcon",
          get: function get() {
            if (this.IsBMMGames && this.m_BMMbetBtnIcon) {
              return this.m_BMMbetBtnIcon;
            } else {
              return this.m_betBtnIcon;
            }
          },
          set: function set(v) {
            this.m_betBtnIcon = v;
          }
        }, {
          key: "BMMBetBtnIcon",
          set: function set(v) {
            this.m_BMMbetBtnIcon = v;
          }
        }, {
          key: "CommBtn",
          get: function get() {
            return this.m_commBtn;
          },
          set: function set(v) {
            this.m_commBtn = v;
          }
        }, {
          key: "CommSprite",
          get: function get() {
            return this.m_commSprite;
          },
          set: function set(v) {
            this.m_commSprite = v;
          }
        }, {
          key: "WiseAutoBtn",
          set: function set(v) {
            this.m_wiseAutoBtn = v;
          }
        }, {
          key: "HistoryBtn",
          set: function set(v) {
            this.m_historyBtn = v;
          }
        }, {
          key: "RatioBtn",
          set: function set(v) {
            this.m_ratioBtn = v;
          }
        }, {
          key: "BMMratioBtn",
          set: function set(v) {
            this.m_BMMratioBtn = v;
          }
        }, {
          key: "HomeBtn",
          set: function set(v) {
            this.m_homeBtn = v;
          }
        }, {
          key: "GiftCodeBtn",
          get: function get() {
            return this.m_giftCodeBtn;
          }
        }, {
          key: "StopRoundLabel",
          set: function set(v) {
            this.m_stopRoundLabel = v;
          }
        }, {
          key: "WinLabel",
          get: function get() {
            return this.m_winLabel;
          },
          set: function set(v) {
            this.m_winLabel = v;
          }
        }, {
          key: "NetWinLabel",
          get: function get() {
            return this.m_netWinLabel;
          } //當前押注值
          ,
          set: function set(v) {
            this.m_netWinLabel = v;
          }
        }, {
          key: "NowBetLabel",
          get: function get() {
            if (this.IsBMMGames && this.m_BMMnowBetLabel) {
              return this.m_BMMnowBetLabel;
            } else {
              return this.m_nowBetLabel;
            }
          },
          set: function set(v) {
            this.m_nowBetLabel = v;
          }
        }, {
          key: "BalanceLabel",
          get: function get() {
            return this.m_balanceLabel;
          },
          set: function set(v) {
            this.m_balanceLabel = v;
          }
        }, {
          key: "LogIndex",
          get: function get() {
            return this.m_logIndex;
          },
          set: function set(v) {
            this.m_logIndex = v;
          }
        }, {
          key: "Version",
          set: function set(v) {
            this.m_version = v;
          }
        }, {
          key: "TimeLabel",
          set: function set(v) {
            this.m_timeLabel = v;
          }
        }, {
          key: "TimeLayoutNode",
          set: function set(v) {
            this.m_timeLayoutNode = v;
          }
        }, {
          key: "PlayTimeLabel",
          set: function set(v) {
            this.m_playTimeLabel = v;
          }
        }, {
          key: "PlayTimeLayoutNode",
          set: function set(v) {
            this.m_playTimeLayoutNode = v;
          }
        }, {
          key: "PlatVerLabel",
          set: function set(v) {
            this.m_platVerLabel = v;
          }
        }, {
          key: "VerString",
          set:
          /**
           * 設定版號
           * @param v 傳入的字串即顯示的字串
           */
          function set(v) {
            if (this.m_version) {
              this.m_version.string = v;
              Define.GAME_VERSION = v;
            }
          }
        }, {
          key: "BetRootNode",
          set: function set(v) {
            this.m_betRootNode = v;
          }
        }, {
          key: "BetViewNode",
          set: function set(v) {
            this.m_betViewNode = v;
          }
        }, {
          key: "ExtraBetView",
          set: function set(v) {
            this.m_extraBetView = v;
          }
        }, {
          key: "CommView",
          set: function set(v) {
            this.m_commView = v;
          }
        }, {
          key: "SoundBtn",
          set: function set(v) {
            this.m_soundBtn = v;
          }
        }, {
          key: "WebView",
          get: function get() {
            return this.m_webView.node;
          }
        }, {
          key: "SpinSprite",
          get: function get() {
            return this.m_spinSprite;
          },
          set: function set(v) {
            this.m_spinSprite = v;
          }
        }, {
          key: "SpinStopSprite",
          set: function set(v) {
            this.m_spinStopSprite = v;
          }
        }, {
          key: "AutoSprite",
          set: function set(v) {
            this.m_autoSprite = v;
          }
        }, {
          key: "AutoStopSprite",
          set: function set(v) {
            this.m_autoStopSprite = v;
          }
        }, {
          key: "AutoCountStopSprite",
          set: function set(v) {
            this.m_autoCountStopSprite = v;
          }
        }, {
          key: "AutoHintLabel",
          set: function set(v) {
            this.m_autoHintLabel = v;
          }
        }, {
          key: "AutoHintEffect",
          set: function set(v) {
            this.m_autoHintEffect = v;
          }
        }, {
          key: "SpeedHintLabel",
          set: function set(v) {
            this.m_speedHintLabel = v;
          }
        }, {
          key: "WinSprite",
          get: function get() {
            return this.m_winSprite;
          }
        }, {
          key: "BarWinLabel",
          get: function get() {
            return this.m_barWinLabel;
          },
          set: function set(v) {
            this.m_barWinLabel = v;
          }
        }, {
          key: "BarBalanceLabel",
          set: // 總分
          function set(v) {
            this.m_barBalanceLabel = v;
          }
        }, {
          key: "VipBalanceLabel",
          set: function set(v) {
            this.m_vipBalanceLabel = v;
          }
        }, {
          key: "FloatViewSize",
          get: function get() {
            return this.m_floatView.getComponent(UITransform).contentSize;
          }
        }, {
          key: "VipSprite",
          set: function set(v) {
            this.m_vipSprite = v;
          }
        }, {
          key: "VipSpriteFrames",
          get: function get() {
            return this.m_vipSpriteFrames;
          }
        }, {
          key: "AppVipSpriteFrames",
          get: function get() {
            return this.m_appVipSpriteFrames;
          } // 聯合彩金機制

        }, {
          key: "JackPotBtn",
          get: function get() {
            return this.m_jackPotBtn;
          } // 滿額必開機制

        }, {
          key: "MustHitByBtn",
          get: function get() {
            return this.m_mustHitByBtn;
          }
          /**vip 押注鎖 */

        }, {
          key: "VipLockNode",
          set: function set(v) {
            this.m_vipLockNode = v;
          }
        }, {
          key: "VipHintNode",
          set: function set(v) {
            this.m_vipHintNode = v;
          }
        }, {
          key: "UnLockVipNode",
          set: function set(v) {
            this.m_unLockVipNode = v;
          }
        }, {
          key: "UnlockVIPSprite",
          set: function set(v) {
            this.m_unlockVIPSprite = v;
          }
        }, {
          key: "LockHintSprite",
          set: function set(v) {
            this.m_lockHintSprite = v;
          }
        }, {
          key: "VipMaskNodes",
          set: function set(v) {
            this.m_vipMaskNodes = v;
          }
          /**Level 押注遮罩 */

        }, {
          key: "ExtraBtnNode",
          set: function set(v) {
            this.m_extraBtnNode = v;
          }
        }, {
          key: "NotifyRoot",
          get: function get() {
            return this.m_notifyRoot;
          } //前導

        }, {
          key: "IsFreeSpin",
          get: function get() {
            return this.m_IsFreeSpin;
          }
        }, {
          key: "SoundBtnStatus",
          get: function get() {
            return this.m_soundBtnStatus;
          }
        }, {
          key: "BtnState",
          get: function get() {
            return this.m_btn_state;
          }
        }, {
          key: "GetChipCompareTypes",
          get:
          /**
           * 條件是大於等於回傳true，小於等於回傳false
           */
          function get() {
            return this.m_chipCompareTypes;
          }
        }, {
          key: "IsHardStop",
          get: function get() {
            return this.m_isHardStop;
          }
        }, {
          key: "IsLandscape",
          get: function get() {
            return this.m_isLandscape;
          }
        }, {
          key: "IsLow",
          get: function get() {
            return this.m_isLow;
          } //推薦資訊

        }, {
          key: "CurrentTouchName",
          get: function get() {
            return this.m_currentTouchName;
          },
          set: function set(v) {
            this.m_currentTouchName = v;
          }
        }, {
          key: "AutoplayPrefab",
          set:
          /**
           * 需給予Autoplay的Prefab
           */
          function set(prefab) {
            this.m_autoplayPrefab = prefab;
            var autoplay = instantiate(this.m_autoplayPrefab); //@ts-ignore (works in 3.6.2)

            this.m_autoplaySetting = autoplay.getComponent(AutoPlaySetting); // works ?

            this.m_autoplayMenuNode.addChild(autoplay);
          }
        }, {
          key: "RatioUrl",
          set: function set(v) {
            this.m_ratioURL = v;
          }
        }, {
          key: "HistoryUrl",
          get: function get() {
            return this.m_historyUrl;
          },
          set: function set(v) {
            this.m_historyUrl = v;
          }
        }, {
          key: "BackpackUrl",
          get: function get() {
            return this.m_backpackUrl;
          },
          set: function set(v) {
            this.m_backpackUrl = v;
          }
        }, {
          key: "MemberUrl",
          get: function get() {
            return this.m_memberUrl;
          },
          set: function set(v) {
            this.m_memberUrl = v;
          }
        }, {
          key: "IsWiseAutoPlay",
          set: function set(is) {
            this.m_isWiseAutoPlay = is;
          }
        }, {
          key: "AID",
          get: function get() {
            return Define.AID;
          }
        }, {
          key: "ApiID",
          get: function get() {
            return Define.API_ID;
          }
        }, {
          key: "GameId",
          get: function get() {
            return Define.NOW_GAME_ID;
          }
        }, {
          key: "EffectWin",
          get: function get() {
            return this.m_eftWin;
          }
        }, {
          key: "IsSmall",
          get: function get() {
            return this.m_isSmall;
          } // get DailyMission() { return this.m_extraManager.DailyMission; }

        }, {
          key: "Wallet",
          get: function get() {
            return walletManger;
          } //首次點擊spin的flag

        }, {
          key: "IsOpenMall",
          get: function get() {
            return this.m_isOpenMall;
          } // trail bet數量
          ,
          set: function set(isOpenType) {
            this.m_isOpenMall = isOpenType;
          }
        }, {
          key: "IsGameIdle",
          get: function get() {
            return this.m_isGameIdle;
          },
          set: function set(v) {
            this.m_isGameIdle = v;

            if (!this.m_isGameIdle && this.m_coinIconSprite && this.m_coinIconSpriteAtlas && this.m_coinIconSprite.spriteFrame.name !== CoinImgName.Gold && walletManger.CurencyID !== SilverCurrencyNumber) {
              this.ChangeShowValue();
            }

            this.SetGiftCodeBtnState();
          }
        }, {
          key: "IsSendBetViewOpen",
          set: function set(v) {
            this.m_isSendBetViewOpen = v;
          } //是否開啟bet改變事件

        }, {
          key: "IsSendBetChange",
          set: function set(v) {
            this.m_isSendBetChange = v;
          }
        }, {
          key: "PlayReadyNode",
          get: function get() {
            if (this.m_playReadyNode) {
              return this.m_playReadyNode;
            } else {
              return null;
            }
          } //遊戲Logo

        }, {
          key: "IsGLIGames",
          get: function get() {
            return Define.GLI_GAME_ID.indexOf(Number(Define.NOW_GAME_ID)) != -1;
          } //====================BMM====================

        }, {
          key: "IsBMMGames",
          get: function get() {
            return Define.BMM_GAME_ID.indexOf(Number(Define.NOW_GAME_ID)) != -1;
          }
        }]);

        return BottombarManager;
      }(Component), _class3.BetViewState = {
        Open: "BetViewOpen",
        Close: "BetViewClose"
      }, _class3.BetValueChange = "BetValueChange", _class3.UIName = {
        /**/
        IMG_BAR_DN: "img_bar_dn",

        /**/
        IMG_WIN: "img_win",

        /**/
        IMG_BLANCE: "img_blance",

        /**/
        TXT_BLANCE: "txt_blance",

        /**/
        COMM_MENU: "comm_menu",

        /**/
        BTN_INFO: "btn_info",

        /**/
        BTN_SOUND: "btn_sound",

        /**/
        BTN_WISEAUTOPLAY: "btn_wiseautoplay",

        /**/
        BTN_HISTORY: "btn_history",

        /**/
        BTN_COMM: "btn_comm",

        /**/
        IMG_BTN_COMM: "img_btn_comm",

        /**/
        TXT_WIN: "txt_win",

        /**/
        BETVIEW: "betView",

        /**/
        BET_MENU: "bet_menu",

        /**/
        BTN_BETS: "btn_bet",
        // btn_bets + 1~7

        /**/
        BET_VALUE: "bet_value",

        /**/
        SELECTED: "selected",

        /**/
        BTN_BET: "btn_bet",

        /**/
        IMG_BET: "img_bet",

        /**/
        TXT_BET_VALUE: "txt_bet_value",

        /**/
        BTN_FEATURES: "btn_features",

        /**/
        IMG_SPEED: "img_speed",

        /**/
        BTN_SPEED: "btn_speed",

        /**/
        BTN_BACKPACK: "btn_backpack",

        /**/
        IMG_BACKPACKNODE: "img_backpackNode",

        /**/
        IMG_BACKPACK: "img_backpack",

        /**/
        USINGCARD: "usingCard",

        /**/
        USINGCARDNUM: "usingCardNum",

        /**/
        BTN_AUTOSTOP_C: "btn_autostop_c",

        /**/
        IMG_AUTOTOP: "img_autotop",

        /**/
        TXT_AUTO_COUNT: "txt_auto_count",

        /**/
        BTN_AUTOSTOP: "btn_autostop",

        /**/
        IMG_AUTOTOP_1: "img_autotop_1",

        /**/
        BTN_AUTOPLAY: "btn_autoplay",

        /**/
        IMG_AUTOPLAY: "img_autoplay",

        /**/
        BTN_SPINSTOP: "btn_spinstop",

        /**/
        IMG_STOP_LABEL: "img_stop_label",

        /**/
        BTN_SPIN: "btn_spin",

        /**/
        IMG_SPIN_LABEL: "img_spin_label",

        /**/
        AUTOPLAY: "Autoplay",

        /**/
        IMG_BAR_SUB_BG: "img_bar_sub_bg",

        /**/
        WEBVIEW: "webview",

        /**/
        BTN_CLOSE: "btn_close",

        /**/
        BTN_TRIAL: "btn_Trial",

        /**/
        TRAILWINPROGRESSBAR: "TrailWinProgressBar",
        //按住spin用

        /**/
        BTN_HOLD_SPIN: "btn_hold_spin",

        /**/
        BTN_RELEASE_SPIN: "btn_release_spin",
        //APP BET +-

        /**/
        BTN_INCBET: "btn_IncBet",

        /**/
        BTN_DECBET: "btn_DecBet"
      }, _class3.WIN_TILTE_TYPE = {
        WIN: "WIN",
        GOOD_LUCK: "GOOD_LUCK",
        BLESSING: "BLESSING",
        SP_BLESSING: "SP_BLESSING",
        BLESSING_NO_JP: "BLESSING_NO_JP",
        CUSTOM: "CUSTOM"
      }, _class3.BLESSING_TEXT_AMOUNT = 40, _class3.SP_BLESSING_TEXT_AMOUNT = 50, _class3.CompareTypes = {
        None: -1,
        Great: 0,
        Less: 1
      }, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_commonTextPrefab", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_commonTextPrefabID", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_commonWebviewParentNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_commonWebPagePrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_barAtlas", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_barNode", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_barBgNode", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_barBgCustRoot", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_barBgCustSprite", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_coinIconSprite", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_coinIconSpriteAtlas", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_jiliLogoSpriteFrame", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_indiaLogoSpriteFrame", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_TaDaLogoSpriteFrame", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_UFALogoSpriteFrame", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_jiliStarLogoSpriteFrame", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "m_brandSpriteFrames", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "m_connectAnim", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "m_connectSprite", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "m_connectAtlas", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "m_spinBtn", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "m_stopSpinBtn", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "m_autoBtn", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "m_stopAutoBtn", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "m_stopAutoCountBtn", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "m_speedButton", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "m_speedSprite", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "m_currencyBtn", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "m_betBtn", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "m_betBtnIcon", [_dec30], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor31 = _applyDecoratedDescriptor(_class2.prototype, "m_BMMbetBtnIcon", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor32 = _applyDecoratedDescriptor(_class2.prototype, "m_betIcons", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor33 = _applyDecoratedDescriptor(_class2.prototype, "m_BMMbetBtn", [_dec33], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor34 = _applyDecoratedDescriptor(_class2.prototype, "m_appBetBg", [_dec34], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor35 = _applyDecoratedDescriptor(_class2.prototype, "m_appBetBtn", [_dec35], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor36 = _applyDecoratedDescriptor(_class2.prototype, "m_appBetPlusBtns", [_dec36], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor37 = _applyDecoratedDescriptor(_class2.prototype, "m_appBetMinusBtns", [_dec37], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor38 = _applyDecoratedDescriptor(_class2.prototype, "m_betCloseBtn", [_dec38], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor39 = _applyDecoratedDescriptor(_class2.prototype, "m_commBtn", [_dec39], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor40 = _applyDecoratedDescriptor(_class2.prototype, "m_commSprite", [_dec40], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor41 = _applyDecoratedDescriptor(_class2.prototype, "m_wiseAutoBtn", [_dec41], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor42 = _applyDecoratedDescriptor(_class2.prototype, "m_historyBtn", [_dec42], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor43 = _applyDecoratedDescriptor(_class2.prototype, "m_ratioBtn", [_dec43], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor44 = _applyDecoratedDescriptor(_class2.prototype, "m_BMMratioBtn", [_dec44], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor45 = _applyDecoratedDescriptor(_class2.prototype, "m_homeBtn", [_dec45], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor46 = _applyDecoratedDescriptor(_class2.prototype, "m_giftCodeBtn", [_dec46], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor47 = _applyDecoratedDescriptor(_class2.prototype, "m_notifyBtn", [_dec47], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor48 = _applyDecoratedDescriptor(_class2.prototype, "m_stopRoundLabel", [_dec48], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor49 = _applyDecoratedDescriptor(_class2.prototype, "m_winLabel", [_dec49], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor50 = _applyDecoratedDescriptor(_class2.prototype, "m_netWinLabel", [_dec50], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor51 = _applyDecoratedDescriptor(_class2.prototype, "m_nowBetLabel", [_dec51], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor52 = _applyDecoratedDescriptor(_class2.prototype, "m_BMMnowBetLabel", [_dec52], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor53 = _applyDecoratedDescriptor(_class2.prototype, "m_APPnowBetLabel", [_dec53], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor54 = _applyDecoratedDescriptor(_class2.prototype, "m_balanceLabel", [_dec54], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor55 = _applyDecoratedDescriptor(_class2.prototype, "m_logIndex", [_dec55], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor56 = _applyDecoratedDescriptor(_class2.prototype, "m_version", [_dec56], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor57 = _applyDecoratedDescriptor(_class2.prototype, "m_timeLabel", [_dec57], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor58 = _applyDecoratedDescriptor(_class2.prototype, "m_timeLayoutNode", [_dec58], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor59 = _applyDecoratedDescriptor(_class2.prototype, "m_playTimeLabel", [_dec59], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor60 = _applyDecoratedDescriptor(_class2.prototype, "m_playTimeLayoutNode", [_dec60], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor61 = _applyDecoratedDescriptor(_class2.prototype, "m_platVerLabel", [_dec61], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor62 = _applyDecoratedDescriptor(_class2.prototype, "m_marqueeNodeL", [_dec62], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor63 = _applyDecoratedDescriptor(_class2.prototype, "m_marqueeNodeS", [_dec63], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor64 = _applyDecoratedDescriptor(_class2.prototype, "m_lobbyMarqueeNode", [_dec64], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor65 = _applyDecoratedDescriptor(_class2.prototype, "m_betRootNode", [_dec65], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor66 = _applyDecoratedDescriptor(_class2.prototype, "m_betViewNode", [_dec66], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor67 = _applyDecoratedDescriptor(_class2.prototype, "m_extraBetView", [_dec67], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor68 = _applyDecoratedDescriptor(_class2.prototype, "m_autoplayMenuNode", [_dec68], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor69 = _applyDecoratedDescriptor(_class2.prototype, "m_commView", [_dec69], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor70 = _applyDecoratedDescriptor(_class2.prototype, "m_soundBtn", [_dec70], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor71 = _applyDecoratedDescriptor(_class2.prototype, "m_soundBtnSprite", [_dec71], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor72 = _applyDecoratedDescriptor(_class2.prototype, "m_txt_blessing", [_dec72], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor73 = _applyDecoratedDescriptor(_class2.prototype, "m_img_win", [_dec73], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor74 = _applyDecoratedDescriptor(_class2.prototype, "m_fullScreenMask", [_dec74], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor75 = _applyDecoratedDescriptor(_class2.prototype, "m_webView", [_dec75], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor76 = _applyDecoratedDescriptor(_class2.prototype, "m_webViewCloseBtn", [_dec76], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor77 = _applyDecoratedDescriptor(_class2.prototype, "m_upBarNode", [_dec77], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor78 = _applyDecoratedDescriptor(_class2.prototype, "m_commAtlas", [_dec78], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor79 = _applyDecoratedDescriptor(_class2.prototype, "m_betBack", [_dec79], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor80 = _applyDecoratedDescriptor(_class2.prototype, "m_appBetBack", [_dec80], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor81 = _applyDecoratedDescriptor(_class2.prototype, "m_streetAtlas", [_dec81], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor82 = _applyDecoratedDescriptor(_class2.prototype, "m_logoSprite", [_dec82], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor83 = _applyDecoratedDescriptor(_class2.prototype, "m_logoSpriteStop", [_dec83], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor84 = _applyDecoratedDescriptor(_class2.prototype, "m_logoFreeSprite", [_dec84], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor85 = _applyDecoratedDescriptor(_class2.prototype, "m_logoFreeStopSprite", [_dec85], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor86 = _applyDecoratedDescriptor(_class2.prototype, "m_spinSprite", [_dec86], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor87 = _applyDecoratedDescriptor(_class2.prototype, "m_spinStopSprite", [_dec87], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor88 = _applyDecoratedDescriptor(_class2.prototype, "m_autoSprite", [_dec88], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor89 = _applyDecoratedDescriptor(_class2.prototype, "m_autoStopSprite", [_dec89], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor90 = _applyDecoratedDescriptor(_class2.prototype, "m_autoCountStopSprite", [_dec90], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor91 = _applyDecoratedDescriptor(_class2.prototype, "m_autoHintSprite", [_dec91], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor92 = _applyDecoratedDescriptor(_class2.prototype, "m_autoHintLabel", [_dec92], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor93 = _applyDecoratedDescriptor(_class2.prototype, "m_autoHintEffect", [_dec93], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor94 = _applyDecoratedDescriptor(_class2.prototype, "m_speedHintLabel", [_dec94], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor95 = _applyDecoratedDescriptor(_class2.prototype, "m_winSprite", [_dec95], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor96 = _applyDecoratedDescriptor(_class2.prototype, "m_barWinLabel", [_dec96], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor97 = _applyDecoratedDescriptor(_class2.prototype, "m_balanceSprite", [_dec97], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor98 = _applyDecoratedDescriptor(_class2.prototype, "m_barBalanceLabel", [_dec98], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor99 = _applyDecoratedDescriptor(_class2.prototype, "m_barTrailBalanceLabel", [_dec99], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor100 = _applyDecoratedDescriptor(_class2.prototype, "m_vipBalanceSprite", [_dec100], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor101 = _applyDecoratedDescriptor(_class2.prototype, "m_vipBalanceLabel", [_dec101], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor102 = _applyDecoratedDescriptor(_class2.prototype, "m_betBtnPrefab", [_dec102], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor103 = _applyDecoratedDescriptor(_class2.prototype, "m_speedPanel", [_dec103], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor104 = _applyDecoratedDescriptor(_class2.prototype, "m_speedPanelLabel", [_dec104], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor105 = _applyDecoratedDescriptor(_class2.prototype, "m_webViewTitleSprite", [_dec105], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor106 = _applyDecoratedDescriptor(_class2.prototype, "m_marqueeBgL", [_dec106], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor107 = _applyDecoratedDescriptor(_class2.prototype, "m_marqueeBgS", [_dec107], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor108 = _applyDecoratedDescriptor(_class2.prototype, "m_marqueeMask", [_dec108], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor109 = _applyDecoratedDescriptor(_class2.prototype, "m_volatilityParent", [_dec109], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor110 = _applyDecoratedDescriptor(_class2.prototype, "m_floatView", [_dec110], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor111 = _applyDecoratedDescriptor(_class2.prototype, "m_vipSprite", [_dec111], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor112 = _applyDecoratedDescriptor(_class2.prototype, "m_vipSpriteFrames", [_dec112], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor113 = _applyDecoratedDescriptor(_class2.prototype, "m_appVipSpriteFrames", [_dec113], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor114 = _applyDecoratedDescriptor(_class2.prototype, "m_jackPotBtn", [_dec114], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor115 = _applyDecoratedDescriptor(_class2.prototype, "m_mustHitByBtn", [_dec115], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor116 = _applyDecoratedDescriptor(_class2.prototype, "m_vipLockNode", [_dec116], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor117 = _applyDecoratedDescriptor(_class2.prototype, "m_vipHintNode", [_dec117], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor118 = _applyDecoratedDescriptor(_class2.prototype, "m_unLockVipNode", [_dec118], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor119 = _applyDecoratedDescriptor(_class2.prototype, "m_unlockVIPSprite", [_dec119], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor120 = _applyDecoratedDescriptor(_class2.prototype, "m_lockHintSprite", [_dec120], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor121 = _applyDecoratedDescriptor(_class2.prototype, "m_vipMaskNodes", [_dec121], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor122 = _applyDecoratedDescriptor(_class2.prototype, "m_levelBetLockRoot", [_dec122], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor123 = _applyDecoratedDescriptor(_class2.prototype, "m_betBtnMask", [_dec123], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor124 = _applyDecoratedDescriptor(_class2.prototype, "m_levelBetLocks", [_dec124], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor125 = _applyDecoratedDescriptor(_class2.prototype, "m_extraBtnNode", [_dec125], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor126 = _applyDecoratedDescriptor(_class2.prototype, "m_notifyRoot", [_dec126], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor127 = _applyDecoratedDescriptor(_class2.prototype, "m_playReadyPrefab", [_dec127], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor128 = _applyDecoratedDescriptor(_class2.prototype, "m_usingCard", [_dec128], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor129 = _applyDecoratedDescriptor(_class2.prototype, "m_freespinUseAniPrefab", [_dec129], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor130 = _applyDecoratedDescriptor(_class2.prototype, "m_freespinEndAniPrefab", [_dec130], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor131 = _applyDecoratedDescriptor(_class2.prototype, "m_freespinBetAniPrefab", [_dec131], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor132 = _applyDecoratedDescriptor(_class2.prototype, "m_freespinBtnEftPrefab", [_dec132], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor133 = _applyDecoratedDescriptor(_class2.prototype, "m_num_FreespinCounter", [_dec133], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor134 = _applyDecoratedDescriptor(_class2.prototype, "m_freeSpins_Gain", [_dec134], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor135 = _applyDecoratedDescriptor(_class2.prototype, "m_num_ItemCount", [_dec135], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor136 = _applyDecoratedDescriptor(_class2.prototype, "m_freeSpinSprite", [_dec136], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BottombarView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BottombarManager.ts', './ConnectionManager.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, v3, sys, BottombarManager, ConnectionManager, Tools;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      sys = module.sys;
    }, function (module) {
      BottombarManager = module.default;
    }, function (module) {
      ConnectionManager = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _class;

      cclegacy._RF.push({}, "75e66tRm/hDrpDpsz6U9BxH", "BottombarView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BottombarView = exports('default', ccclass(_class = /*#__PURE__*/function (_BottombarManager) {
        _inheritsLoose(BottombarView, _BottombarManager);

        function BottombarView() {
          return _BottombarManager.apply(this, arguments) || this;
        }

        var _proto = BottombarView.prototype;
        /**
        * 初始化自動玩面板
        * @param aid 玩家aid
        * @param apiid 玩家apiid
        * @param gameid 遊戲id(define)
        */

        _proto.AutoPlayPanelInit = function AutoPlayPanelInit(aid, apiid, gameid, siteid) {
          var _this = this;

          _BottombarManager.prototype.AutoPlayPanelInit.call(this, aid, apiid, gameid, siteid);

          var spriteFrame = Tools.UsingLogoSpriteFrame();

          if (spriteFrame) {
            this.m_webViewTitleSprite.spriteFrame = spriteFrame;
            this.m_webViewTitleSprite.node.setScale(v3(0.5, 0.5, 1));
            this.m_webViewTitleSprite.enabled = true;
          } else {
            var changeTitle = function changeTitle(obj) {
              var titleName = obj[apiid]; //沒有定義的使用預設title

              if (titleName && !sys.isNative) {
                var url = window.location.href;
                var reg = /\.com/g;
                url = url.slice(0, url.search(reg) + 4) + "/smallicon/";
                _this.m_webViewTitleSprite.enabled = false;

                _this.LoadTitle(url + titleName);
              }
            };

            var setting = ConnectionManager.getInstance().GetApiId2TitleName(function (obj) {
              if (obj) {
                changeTitle(obj);
              }
            });

            if (setting) {
              changeTitle(setting);
            }
          }
        };

        return BottombarView;
      }(BottombarManager)) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BottombarView2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BottombarManager.ts', './ConnectionManager.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, v3, _decorator, UITransform, Size, sys, BottombarManager, ConnectionManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      v3 = module.v3;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      Size = module.Size;
      sys = module.sys;
    }, function (module) {
      BottombarManager = module.default;
    }, function (module) {
      ConnectionManager = module.default;
    }],
    execute: function () {
      var _class;

      cclegacy._RF.push({}, "9527bH7nw1HUrTBlzpDGpVk", "BottombarView2", undefined);

      var BET_BTN_POS = v3(0, 2);
      var BET_VIEW_HEIGHT_DIF = 4;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BottombarView2 = exports('default', ccclass(_class = /*#__PURE__*/function (_BottombarManager) {
        _inheritsLoose(BottombarView2, _BottombarManager);

        function BottombarView2() {
          return _BottombarManager.apply(this, arguments) || this;
        }

        var _proto = BottombarView2.prototype;
        /**
        * 初始化自動玩面板
        * @param aid 玩家aid
        * @param apiid 玩家apiid
        * @param gameid 遊戲id(define)
        */

        _proto.AutoPlayPanelInit = function AutoPlayPanelInit(aid, apiid, gameid, siteid) {
          var _this = this;

          _BottombarManager.prototype.AutoPlayPanelInit.call(this, aid, apiid, gameid, siteid);

          var changeTitle = function changeTitle(obj) {
            var titleName = obj[apiid]; //沒有定義的使用預設title

            if (titleName && !sys.isNative) {
              var url = window.location.href;
              var reg = /\.com/g;
              url = url.slice(0, url.search(reg) + 4) + "/smallicon/";
              _this.m_webViewTitleSprite.enabled = false;

              _this.LoadTitle(url + titleName);
            }
          };

          var setting = ConnectionManager.getInstance().GetApiId2TitleName(function (obj) {
            if (obj) {
              changeTitle(obj);
            }
          });

          if (setting) {
            changeTitle(setting);
          }
        };

        _proto.CreateNormalBetBtns = function CreateNormalBetBtns(open) {
          if (open === void 0) {
            open = true;
          }

          _BottombarManager.prototype.CreateNormalBetBtns.call(this, open); //設定上次選的bet


          for (var i = 0; i < this.m_betBtns.length; i++) {
            this.m_betBtns[i].node.getChildByName("selected").active = false;
          }

          this.m_betBtns[this.m_betIndex].node.getChildByName(BottombarManager.UIName.SELECTED).active = true;
          var width = 0,
              height = 0;

          for (var i = 0; i < this.m_betLayoutNodes.length; i++) {
            this.m_betLayoutNodes[i].setPosition(BET_BTN_POS);
            width += this.m_betLayoutNodes[i].getComponent(UITransform).contentSize.width;
            height = this.m_betLayoutNodes[i].getComponent(UITransform).contentSize.height;
          } //把bet view拉高


          this.m_betViewNode.getComponent(UITransform).setContentSize(new Size(width, height + BET_VIEW_HEIGHT_DIF));
          this.m_betViewNode.active = open;
        };

        _proto.CreateTrialBetBtns = function CreateTrialBetBtns(open) {
          if (open === void 0) {
            open = true;
          } //設定上次選的bet


          for (var i = 0; i < this.m_betBtns.length; i++) {
            this.m_betBtns[i].node.getChildByName("selected").active = false;
          }

          this.m_betBtns[this.m_betIndex].node.getChildByName(BottombarManager.UIName.SELECTED).active = true;
          var width = 0,
              height = 0;

          for (var i = 0; i < this.m_betLayoutNodes.length; i++) {
            this.m_betLayoutNodes[i].setPosition(BET_BTN_POS);
            width += this.m_betLayoutNodes[i].getComponent(UITransform).contentSize.width;
            height = this.m_betLayoutNodes[i].getComponent(UITransform).contentSize.height;
          } //把bet view拉高


          this.m_betViewNode.getComponent(UITransform).setContentSize(new Size(width, height + BET_VIEW_HEIGHT_DIF));
          this.m_betViewNode.active = open;
        };

        return BottombarView2;
      }(BottombarManager)) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BottombarViewbc.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BottombarManager.ts', './ConnectionManager.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, v3, UITransform, size, sys, BottombarManager, ConnectionManager, Tools;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      UITransform = module.UITransform;
      size = module.size;
      sys = module.sys;
    }, function (module) {
      BottombarManager = module.default;
    }, function (module) {
      ConnectionManager = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _class;

      cclegacy._RF.push({}, "ae5c5LObT9FVI/ssC5M8qLC", "BottombarViewbc", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BottombarViewbc = exports('default', ccclass(_class = /*#__PURE__*/function (_BottombarManager) {
        _inheritsLoose(BottombarViewbc, _BottombarManager);

        function BottombarViewbc() {
          return _BottombarManager.apply(this, arguments) || this;
        }

        var _proto = BottombarViewbc.prototype;
        /**
        * 初始化自動玩面板
        * @param aid 玩家aid
        * @param apiid 玩家apiid
        * @param gameid 遊戲id(define)
        */

        _proto.AutoPlayPanelInit = function AutoPlayPanelInit(aid, apiid, gameid, siteid) {
          var _this = this;

          _BottombarManager.prototype.AutoPlayPanelInit.call(this, aid, apiid, gameid, siteid);

          var spriteFrame = Tools.UsingLogoSpriteFrame();

          if (spriteFrame) {
            this.m_webViewTitleSprite.spriteFrame = spriteFrame;
            this.m_webViewTitleSprite.node.setScale(v3(0.5, 0.5));
            this.m_webViewTitleSprite.enabled = true;
          } else {
            var changeTitle = function changeTitle(obj) {
              var titleName = obj[apiid]; //沒有定義的使用預設title

              if (titleName && !sys.isNative) {
                var url = window.location.href;
                var reg = /\.com/g;
                url = url.slice(0, url.search(reg) + 4) + "/smallicon/";
                _this.m_webViewTitleSprite.enabled = false;

                _this.LoadTitle(url + titleName);
              }
            };

            var setting = ConnectionManager.getInstance().GetApiId2TitleName(function (obj) {
              if (obj) {
                changeTitle(obj);
              }
            });

            if (setting) {
              changeTitle(setting);
            }
          }
        };

        _proto.ChangeWebViewSize = function ChangeWebViewSize(isLandscape) {
          if (isLandscape) {
            this.m_webView.node.position = v3(0, 570);
            this.m_webView.node.getComponent(UITransform).setContentSize(size(1137, 570));
            this.m_upBarNode.active = true;
          } else {
            this.m_webView.node.position = v3(0, 1066);
            this.m_webView.node.getComponent(UITransform).setContentSize(size(640, 1066));
            this.m_upBarNode.active = true;
          }
        };

        return BottombarViewbc;
      }(BottombarManager)) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BuffManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './EnvironmentConfig.ts', './gaiaProto.mjs_cjs=&original=.js', './DataStruct.ts', './ConnectManager.ts', './Wallet.ts', './GaiaManager.ts', './buffproto.mjs_cjs=&original=.js', './Tools.ts', './AppManager.ts', './AutoShowManager.ts', './gaiaProto.js', './buffproto.js'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, Define, EnvironmentConfig, ConnectionDataStruct, ConnectManager, walletManger, gaiaManager, Tools, AppManager, AutoShowManager, _cjsExports, _cjsExports$1;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, null, function (module) {
      ConnectionDataStruct = module.ConnectionDataStruct;
    }, function (module) {
      ConnectManager = module.default;
    }, function (module) {
      walletManger = module.walletManger;
    }, function (module) {
      gaiaManager = module.gaiaManager;
    }, null, function (module) {
      Tools = module.default;
    }, function (module) {
      AppManager = module.default;
    }, function (module) {
      AutoShowManager = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      _cjsExports$1 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bb20ap3WvNKxrTO3fUFC0LK", "BuffManager", undefined);

      var BuffBackReq = /*#__PURE__*/function (_ConnectionDataStruct) {
        _inheritsLoose(BuffBackReq, _ConnectionDataStruct);

        function BuffBackReq() {
          var _this;

          _this = _ConnectionDataStruct.call(this) || this;
          _this.method = ConnectionDataStruct.RequestMethod.Post;
          _this.url = "/buff/GetBackProto";
          _this.reqData = null;
          return _this;
        }

        return BuffBackReq;
      }(ConnectionDataStruct.ProtocolData);

      var BuffNowReq = /*#__PURE__*/function (_ConnectionDataStruct2) {
        _inheritsLoose(BuffNowReq, _ConnectionDataStruct2);

        function BuffNowReq() {
          var _this2;

          _this2 = _ConnectionDataStruct2.call(this) || this;
          _this2.method = ConnectionDataStruct.RequestMethod.Post;
          _this2.url = "/buff/GetNowProto";
          _this2.reqData = null;
          return _this2;
        }

        return BuffNowReq;
      }(ConnectionDataStruct.ProtocolData);

      var BuffUseReq = /*#__PURE__*/function (_ConnectionDataStruct3) {
        _inheritsLoose(BuffUseReq, _ConnectionDataStruct3);

        function BuffUseReq() {
          var _this3;

          _this3 = _ConnectionDataStruct3.call(this) || this;
          _this3.method = ConnectionDataStruct.RequestMethod.Post;
          _this3.url = "/buff/UseBuffProto";
          _this3.reqData = null;
          return _this3;
        }

        return BuffUseReq;
      }(ConnectionDataStruct.ProtocolData);

      var BuffParamReq = /*#__PURE__*/function (_ConnectionDataStruct4) {
        _inheritsLoose(BuffParamReq, _ConnectionDataStruct4);

        function BuffParamReq() {
          var _this4;

          _this4 = _ConnectionDataStruct4.call(this) || this;
          _this4.method = ConnectionDataStruct.RequestMethod.Post;
          _this4.url = "/buff/GetParamProto";
          _this4.reqData = null;
          return _this4;
        }

        return BuffParamReq;
      }(ConnectionDataStruct.ProtocolData);

      var USE_STATE = {
        UseSuccess: 0,
        UseError_PlayerParamNil: 1,
        UseError_BuffNil: 2,
        UseError_Amount: 3,
        UseError_SameInUse: 4,
        UseError_BuffTypeNil: 5,
        UseError_NoUseType: 6,
        UseError_ApiFail: 7
      };
      var BUFF_TYPE = exports('BUFF_TYPE', {
        CoinBoost: 1,
        // 遊戲幣增值劵
        PiggyBankBoost: 2,
        // 小豬撲滿增值劵
        GachaTicket: 3,
        // 扭蛋機抵用劵
        VipPrivilege: 4,
        // VIP特權卡
        LevelBoost: 5,
        // 等級加成劵
        ScoreBoost: 6,
        // 活動積分加成
        RankBoost: 7,
        // 競賽加成器
        LuckyWheel: 8,
        // 幸運轉盤加成
        PrizeUp: 51,
        // 獎金加成卡
        ExtraBet: 52,
        // extra bet 加成卡
        FreeSpin: 53 // FreeSpin 卡

      });
      var BuffManager = exports('default', /*#__PURE__*/function () {
        function BuffManager() {
          this.m_buffCardDatas = [];
          this.m_buffNowInfo = [];
          this.m_useBuffInfo = {
            Result: 0,
            State: 0,
            Info: null
          };
          this.m_buffNodePool = new Array();
          this.m_poolTags = [];
          this.m_isExtraBetBuff = false;
          this.m_isFreeSpinBuff = false;
          this.m_isPrizeUpBuff = false;
          this.m_buffActavateCb = null;
          this.m_buffEndCb = null;
          this.m_instantBuff = null;
          this.m_firstInGame = true;
          this.m_buffTimeUpTemp = false;
          this.m_activatingBuffIdx = null;
          this.m_scheduler = null;
          this.m_isRunning = false;
          this.m_isFirstGetBuffInfo = false;
        }

        BuffManager.GetInstance = function GetInstance() {
          if (!this._instance) {
            this._instance = new BuffManager();
          }

          return this._instance;
        };

        BuffManager.OnExit = function OnExit() {
          delete this._instance;
          this._instance = null;
        };

        var _proto = BuffManager.prototype;

        _proto.Init = function Init(component, activateCb, endCb) {
          var _this5 = this;

          if (!Tools.IsTadaCasino) {
            return;
          }

          if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) ;else {
            var GetBuffBack = function GetBuffBack() {
              var data = new _cjsExports.gaiaProto.BuffBackReq();
              data.aid = Number(Define.APP.GetAID());
              data.token = Define.APP.GetAToken();
              data.apiid = Number(Define.APP.GetApiID()); //  lang編號尚未定義

              data.lang = 0;
              var req = new BuffBackReq();
              req.reqData = _cjsExports.gaiaProto.BuffBackReq.encode(data).finish();
              return new Promise(function (resolve) {
                ConnectManager.GetInstance().SendCommand(req, function (ack) {
                  gaiaManager.CheckAck(ack, function (type, data, ack) {
                    var info = _cjsExports$1.buffProto.GetPlayerBackAck.decode(data);

                    console.error('●●●●● GetBuffBack', JSON.stringify(info));
                    resolve(info);
                  });
                }, false, true);
              });
            };

            var GetBuffNow = function GetBuffNow() {
              var data = new _cjsExports.gaiaProto.BuffNowReq();
              data.aid = Number(Define.APP.GetAID());
              data.token = Define.APP.GetAToken();
              data.apiid = Number(Define.APP.GetApiID());
              data.gameid = Number(Define.NOW_GAME_ID);
              var req = new BuffNowReq();
              req.reqData = _cjsExports.gaiaProto.BuffNowReq.encode(data).finish();
              return new Promise(function (resolve) {
                ConnectManager.GetInstance().SendCommand(req, function (ack) {
                  gaiaManager.CheckAck(ack, function (type, data) {
                    var info = _cjsExports$1.buffProto.GetPlayerBuffAck.decode(data);

                    _this5.m_buffNowInfo = info.List ? info.List : [];
                    _this5.m_isFirstGetBuffInfo = true;
                    console.error('▶▶▶▶▶ GetBuffNow', JSON.stringify(_this5.m_buffNowInfo));
                    resolve(info);
                  });
                }, false, true);
              });
            };

            var UseBuff = function UseBuff(id, idx) {
              var data = new _cjsExports.gaiaProto.BuffUseReq();
              data.aid = Number(Define.APP.GetAID());
              data.token = Define.APP.GetAToken();
              data.apiid = Number(Define.APP.GetApiID());
              data.gameid = Number(Define.NOW_GAME_ID);

              if (walletManger.HasWallet) {
                data.currency = walletManger.CurencyID;
              }

              data.buffid = id;
              data.buffidx = idx;
              var req = new BuffUseReq();
              req.reqData = _cjsExports.gaiaProto.BuffUseReq.encode(data).finish();
              return new Promise(function (resolve) {
                ConnectManager.GetInstance().SendCommand(req, function (ack) {
                  gaiaManager.CheckAck(ack, function (type, data) {
                    var info = _cjsExports$1.buffProto.UsePlayerBuffAck.decode(data);

                    console.error('▶▶▶▶▶ UseBuff', id.toString(), idx.toString(), JSON.stringify(info));
                    _this5.m_useBuffInfo = info;

                    _this5.OnRecvAck(info, idx);

                    resolve(info);
                  });
                }, false, true);
              });
            };

            var GetBuffInfo = function GetBuffInfo(list) {
              var data = new _cjsExports.gaiaProto.BuffParamReq();
              data.aid = Number(Define.APP.GetAID());
              data.token = Define.APP.GetAToken();
              data.idlist = list;
              var req = new BuffParamReq();
              req.reqData = _cjsExports.gaiaProto.BuffParamReq.encode(data).finish();
              return new Promise(function (resolve) {
                ConnectManager.GetInstance().SendCommand(req, function (ack) {
                  gaiaManager.CheckAck(ack, function (type, data) {
                    var info = _cjsExports$1.buffProto.GetSettingParamAck.decode(data);

                    var list = info.Info;
                    console.error('▶▶▶▶▶ GetBuffInfoList', JSON.stringify(list));
                    resolve(list);
                  });
                }, false, true);
              });
            };

            AppManager.InitBuffSystem(GetBuffBack, GetBuffNow, UseBuff, GetBuffInfo);
            this.m_scheduler = component;
            this.m_buffActavateCb = activateCb;
            this.m_buffEndCb = endCb;

            this.m_instantBuff = function () {
              if (!AutoShowManager.GetInstance().IsIntorViewOpen && !_this5.m_isExtraBetBuff && !_this5.m_isPrizeUpBuff && !_this5.m_isFreeSpinBuff) {
                AppManager.ShowReward(function () {
                  /*do nothing*/
                });
              }
            };
          }
        }
        /** 確認即時型BUFF的schedule */
        ;

        _proto.CheckInstantBuff = function CheckInstantBuff(isRun) {
          if (Tools.IsTadaCasino) {
            if (isRun) {
              this.m_scheduler.schedule(this.m_instantBuff, 0.5);
            } else {
              console.error('★★★★★ unschedule');
              this.m_scheduler.unschedule(this.m_instantBuff);
            }
          }
        };

        _proto.OnRecvAck = function OnRecvAck(ack, idx) {
          if (ack.State == USE_STATE.UseSuccess) {
            var _bet = null;
            var _times = null;
            var info = ack.Info;
            var isLobbyBuff = false;

            switch (info.BuffType) {
              case BUFF_TYPE.ExtraBet:
                this.m_isExtraBetBuff = true;
                console.error('♥♥♥♥♥ ExtraBet Buff Activate');
                break;

              case BUFF_TYPE.FreeSpin:
                this.m_isFreeSpinBuff = true;
                _bet = info.Param1;
                _times = info.Param2;
                this.m_activatingBuffIdx = idx;
                console.error('♣♣♣♣♣ FreeSpin Buff Activate');
                break;

              case BUFF_TYPE.PrizeUp:
                this.m_isPrizeUpBuff = true;
                _bet = info.Param1;
                _times = info.Param2;
                this.m_activatingBuffIdx = idx;
                console.error('♠♠♠♠♠ PrizeUp Buff Activate');
                break;

              default:
                isLobbyBuff = true;
                console.error('♦♦♦♦♦ Lobby Buff Activate => type:', info.BuffType);
                break;
            }

            if (!isLobbyBuff) // 遊戲BUFF才觸發
              {
                this.m_buffActavateCb(_bet, _times);
              }
          } else {
            console.error('✖✖✖✖✖ UseBuff Sometinig Wrong => type:', ack.State);
            this.m_buffActavateCb();
          }
        };

        _proto.FirstActivateBuff = function FirstActivateBuff(nextCb) {
          if (this.m_firstInGame) {
            this.m_firstInGame = false;

            if (this.m_buffNowInfo.length > 0) {
              var nowTime = Date.now();
              var _bet2 = 0;
              var _times2 = 0;

              for (var i = 0; i < this.m_buffNowInfo.length; i++) {
                var type = this.m_buffNowInfo[i].BuffType;

                if (type == BUFF_TYPE.ExtraBet || type == BUFF_TYPE.FreeSpin || type == BUFF_TYPE.PrizeUp) {
                  var beginTime = Number(this.m_buffNowInfo[i].BeginTime) * 1000;
                  var endTime = Number(this.m_buffNowInfo[i].EndTime) * 1000;

                  if (nowTime < endTime && nowTime >= beginTime) {
                    console.error('Buff Activate type:', type, nowTime, endTime);

                    switch (type) {
                      case BUFF_TYPE.ExtraBet:
                        this.m_isExtraBetBuff = true;
                        break;

                      case BUFF_TYPE.FreeSpin:
                        this.m_isFreeSpinBuff = true;
                        _bet2 = this.m_buffNowInfo[i].Param1;
                        _times2 = this.m_buffNowInfo[i].Param2;
                        this.m_activatingBuffIdx = this.m_buffNowInfo[i].BuffIndex;
                        break;

                      case BUFF_TYPE.PrizeUp:
                        this.m_isPrizeUpBuff = true;
                        _bet2 = this.m_buffNowInfo[i].Param1;
                        _times2 = this.m_buffNowInfo[i].Param2;
                        this.m_activatingBuffIdx = this.m_buffNowInfo[i].BuffIndex;
                        break;
                    }
                  }
                }
              }

              if (!this.m_isExtraBetBuff && !this.m_isFreeSpinBuff && !this.m_isPrizeUpBuff) {
                // 目前的BUFF都不是遊戲端的,只有大廳的
                nextCb();
              } else {
                this.m_buffActavateCb && this.m_buffActavateCb(_bet2, _times2);
              }
            } else {
              nextCb();
            }
          }
        };

        _proto.GetBuffNode = function GetBuffNode(name) {
          var index = -1;

          for (var idx = 0; idx < this.m_poolTags.length; idx++) {
            if (this.m_poolTags[idx] == name) {
              index = idx;
              break;
            }
          }

          if (index >= 0) {
            return this.m_buffNodePool[index].pop();
          } else {
            // console.error( 'Pool Empty' )
            return null;
          }
        };

        _proto.ReturnBuffNode = function ReturnBuffNode(node, name) {
          var index = -1;

          for (var idx = 0; idx < this.m_poolTags.length; idx++) {
            if (this.m_poolTags[idx] == name) {
              index = idx;
              break;
            }
          }

          if (index >= 0) {
            this.m_buffNodePool[index].push(node);
          } else {
            // console.error( 'pool empty,create new: ', name )
            this.m_poolTags.push(name);
            var arr = [];
            this.m_buffNodePool.push(arr);
            this.m_buffNodePool[this.m_poolTags.length - 1].push(node);
          }
        };

        _proto.SetBuffEnd = function SetBuffEnd() {
          if (this.m_activatingBuffIdx) {
            AppManager.ForceBuffEnd(this.m_activatingBuffIdx);
          }

          this.m_buffTimeUpTemp = false;
          this.m_isExtraBetBuff = false;
          this.m_isFreeSpinBuff = false;
          this.m_isPrizeUpBuff = false;
          this.m_activatingBuffIdx = null;
        };

        _proto.BuffTimer = function BuffTimer(dt) {
          var nowTime = Date.now();

          if (this.m_buffNowInfo.length > 0) {
            for (var i = 0; i < this.m_buffNowInfo.length; i++) {
              var type = this.m_buffNowInfo[i].BuffType;

              if (type == BUFF_TYPE.ExtraBet && this.m_isExtraBetBuff || type == BUFF_TYPE.FreeSpin && this.m_isFreeSpinBuff || type == BUFF_TYPE.PrizeUp && this.m_isPrizeUpBuff) {
                var endTime = Number(this.m_buffNowInfo[i].EndTime) * 1000;

                if (nowTime >= endTime) {
                  console.error('Buff End type:', type, nowTime, endTime);
                  this.m_buffEndCb && this.m_buffEndCb(); // switch ( type )
                  // {
                  //     case BUFF_TYPE.ExtraBet:
                  //         this.m_isExtraBetBuff = false;
                  //         break;
                  //     case BUFF_TYPE.FreeSpin:
                  //         this.m_isFreeSpinBuff = false;
                  //         break;
                  //     case BUFF_TYPE.PrizeUp:
                  //         this.m_isPrizeUpBuff = false;
                  //         break;
                  // }
                }
              }
            } // let nowDate = new Date( nowTime );
            // let year = nowDate.getFullYear();
            // let month = nowDate.getMonth() + 1;
            // let date = nowDate.getDate();
            // let hour = nowDate.getHours();
            // let min = nowDate.getMinutes();
            // let sec = nowDate.getSeconds();

          }
        };

        _createClass(BuffManager, [{
          key: "BuffCardDatas",
          get:
          /** 背包BUFF卡資料 */

          /** 背包BUFF卡資料 */
          function get() {
            return this.m_buffCardDatas;
          },
          set: function set(v) {
            this.m_buffCardDatas = v;
          }
        }, {
          key: "IsExtraBetBuff",
          get: function get() {
            return this.m_isExtraBetBuff;
          }
        }, {
          key: "IsFreeSpinBuff",
          get: function get() {
            return this.m_isFreeSpinBuff;
          }
        }, {
          key: "IsPrizeUpBuff",
          get: function get() {
            return this.m_isPrizeUpBuff;
          }
        }, {
          key: "BuffTimeUpTemp",
          get: function get() {
            return this.m_buffTimeUpTemp;
          },
          set: function set(b) {
            this.m_buffTimeUpTemp = b;
          }
        }, {
          key: "ActivatingBuffIdx",
          get: function get() {
            return this.m_activatingBuffIdx;
          }
        }, {
          key: "IsFirstGetBuffInfo",
          get: function get() {
            return this.m_isFirstGetBuffInfo;
          }
        }]);

        return BuffManager;
      }());
      BuffManager._instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BuyBonusBtn.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "3659cv2X/JLQowu/TE9B+1+", "BuyBonusBtn", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BuyBonusBtn = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "BuyBonus title"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BuyBonusBtn, _Component);

        function BuyBonusBtn() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_title", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = BuyBonusBtn.prototype;

        _proto.SetTxt = function SetTxt(spriteAtlas) {
          if (spriteAtlas && this.m_title) {
            this.m_title.spriteFrame = spriteAtlas.getSpriteFrame('BuyBonus_IconName');
          }
        };

        return BuyBonusBtn;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_title", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BuyBonusManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './ConnectManager.ts', './gaiaProto.mjs_cjs=&original=.js', './GaiaManager.ts', './ManagerDataStructure.ts', './gaiaProto.js'], function (exports) {
  'use strict';

  var _createClass, cclegacy, Define, ConnectManager, gaiaManager, ManagerDataStructure, _cjsExports;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      ConnectManager = module.default;
    }, null, function (module) {
      gaiaManager = module.gaiaManager;
    }, function (module) {
      ManagerDataStructure = module.ManagerDataStructure;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bb16cc1hm9DkYd7oJBvwVV2", "BuyBonusManager", undefined);

      var CheckMallCommandType = {
        PROTOCOL_TYPE_MALL: 36
      };

      var BuyBonusManager = /*#__PURE__*/function () {
        function BuyBonusManager() {
          this.m_buyBonus = null;
          this.m_needButBonus = -1;
          this.m_createViewCb = null;
        }

        var _proto = BuyBonusManager.prototype;

        _proto.OnLoad = function OnLoad(buyBonus) {
          this.m_buyBonus = buyBonus;
        };

        _proto.OnDestroy = function OnDestroy() {
          this.m_buyBonus = null;
        };

        _proto.Init = function Init(bottombar, info, startCb, endCb, spriteAtlas) {
          var _this$m_buyBonus;

          (_this$m_buyBonus = this.m_buyBonus) == null ? void 0 : _this$m_buyBonus.Init(bottombar, info, startCb, endCb, spriteAtlas);
        };

        _proto.NewInit = function NewInit(startCb, endCb, isvol, voltype) {
          var _this = this;

          if (isvol === void 0) {
            isvol = false;
          }

          if (voltype === void 0) {
            voltype = 0;
          }

          if (Define.APP) {
            var data = new _cjsExports.gaiaProto.CheckMallReq();
            data.aid = Number(Define.APP.GetAID());
            data.apiid = Number(Define.APP.GetApiID());
            data.token = Define.APP.GetAToken();
            data.isvol = isvol;
            data.voltype = voltype;
            var req = new ManagerDataStructure.CheckMallReq();
            req.reqData = _cjsExports.gaiaProto.CheckMallReq.encode(data).finish();
            ConnectManager.GetInstance().SendCommand(req, function (ack) {
              gaiaManager.CheckAck(ack, function (type, data) {
                _this.OnRecvAck(type, data, startCb, endCb);
              });
            }, false, true);
          }
        };

        _proto.OnRecvAck = function OnRecvAck(type, data, startCb, endCb) {
          switch (type) {
            case CheckMallCommandType.PROTOCOL_TYPE_MALL:
              {
                var _info = _cjsExports.gaiaProto.CheckMallAck.decode(data); // bottombar.BuyBonusInit( info.Settings, startCb, endCb );


                if (_info.Show) {
                  this.m_createViewCb(_info.Settings, startCb, endCb);
                } else {
                  this.m_needButBonus = 0;
                }
              }
          }
        };

        _proto.Show = function Show() {
          var _this$m_buyBonus2;

          (_this$m_buyBonus2 = this.m_buyBonus) == null ? void 0 : _this$m_buyBonus2.Show();
        };

        _proto.Hide = function Hide() {
          var _this$m_buyBonus3;

          (_this$m_buyBonus3 = this.m_buyBonus) == null ? void 0 : _this$m_buyBonus3.Hide();
        };

        _proto.SetSpriteAtlas = function SetSpriteAtlas(spriteAtlas, spriteFrame) {
          var _this$m_buyBonus4;

          (_this$m_buyBonus4 = this.m_buyBonus) == null ? void 0 : _this$m_buyBonus4.SetSpriteAtlas(spriteAtlas, spriteFrame);
        };

        _proto.SetTxt = function SetTxt() {
          var _this$m_buyBonus5;

          (_this$m_buyBonus5 = this.m_buyBonus) == null ? void 0 : _this$m_buyBonus5.SetTxt();
        };

        _proto.SetRemainTimes = function SetRemainTimes() {
          var _this$m_buyBonus6;

          (_this$m_buyBonus6 = this.m_buyBonus) == null ? void 0 : _this$m_buyBonus6.SetRemainTimes();
        };

        _proto.CheckOverAni = function CheckOverAni() {
          var _this$m_buyBonus7;

          (_this$m_buyBonus7 = this.m_buyBonus) == null ? void 0 : _this$m_buyBonus7.CheckOverAni();
        };

        _proto.CloseMall = function CloseMall() {
          var _this$m_buyBonus8;

          (_this$m_buyBonus8 = this.m_buyBonus) == null ? void 0 : _this$m_buyBonus8.CloseMall();
        };

        _proto.ForceBuyBonusState = function ForceBuyBonusState(bet) {
          var _this$m_buyBonus9;

          (_this$m_buyBonus9 = this.m_buyBonus) == null ? void 0 : _this$m_buyBonus9.ForceBuyBonusState(bet);
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          var _this$m_buyBonus10;

          (_this$m_buyBonus10 = this.m_buyBonus) == null ? void 0 : _this$m_buyBonus10.OnRotation(isLandscape);
        };

        _createClass(BuyBonusManager, [{
          key: "NeedButBonus",
          get: function get() {
            return this.m_needButBonus;
          },
          set: function set(n) {
            this.m_needButBonus = n;
          }
        }, {
          key: "CreateViewCb",
          set: function set(v) {
            this.m_createViewCb = v;
          }
        }, {
          key: "IsBuyBonus",
          get: function get() {
            return this.m_buyBonus ? this.m_buyBonus.IsBuyBonus : false;
          }
        }, {
          key: "CanBuyBonus",
          set: function set(b) {
            if (this.m_buyBonus) {
              this.m_buyBonus.CanBuyBonus = b;
            }
          }
        }, {
          key: "RemainTimes",
          get: function get() {
            return this.m_buyBonus ? this.m_buyBonus.RemainTimes : null;
          }
        }, {
          key: "MallId",
          get: function get() {
            return this.m_buyBonus ? this.m_buyBonus.MallId : null;
          }
        }, {
          key: "MallBet",
          get: function get() {
            return this.m_buyBonus ? this.m_buyBonus.MallBet : null;
          }
        }, {
          key: "HasBuyBonus",
          get: function get() {
            if (this.m_buyBonus) {
              return true;
            } else {
              return false;
            }
          }
        }]);

        return BuyBonusManager;
      }();

      var buyBonusManager = exports('buyBonusManager', new BuyBonusManager());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BuyBonusView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LocaleStringManager.ts', './Define.ts', './SoundManager.ts', './BottombarManager.ts', './Tools.ts', './MsgBox.ts', './NotificationManager.ts', './BackpackManager.ts', './BuyBonusManager.ts', './Wallet.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Node, SpriteFrame, Button, Label, RichText, Sprite, UIRenderer, color, js, Animation, Component, LocaleStringManager, Define, SoundManager, BottombarManager, Tools, MsgBox, NotificationManager, backpackManager, buyBonusManager, walletManger;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Button = module.Button;
      Label = module.Label;
      RichText = module.RichText;
      Sprite = module.Sprite;
      UIRenderer = module.UIRenderer;
      color = module.color;
      js = module.js;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      BottombarManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      NotificationManager = module.default;
    }, function (module) {
      backpackManager = module.backpackManager;
    }, function (module) {
      buyBonusManager = module.buyBonusManager;
    }, function (module) {
      walletManger = module.walletManger;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35;

      cclegacy._RF.push({}, "9c707CnlLhHyIwOl6erQGx+", "BuyBonusView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SPECIAL_GAME_NON_RULE = 0;
      var PAGE_TYPE;

      (function (PAGE_TYPE) {
        PAGE_TYPE[PAGE_TYPE["BUY"] = 0] = "BUY";
      })(PAGE_TYPE || (PAGE_TYPE = {}));

      var TOUCH_EVENT;

      (function (TOUCH_EVENT) {
        TOUCH_EVENT[TOUCH_EVENT["START"] = 0] = "START";
        TOUCH_EVENT[TOUCH_EVENT["CANCEL"] = 1] = "CANCEL";
        TOUCH_EVENT[TOUCH_EVENT["END"] = 2] = "END";
      })(TOUCH_EVENT || (TOUCH_EVENT = {}));

      var SPECIAL_GAME_TYPE;

      (function (SPECIAL_GAME_TYPE) {
        SPECIAL_GAME_TYPE[SPECIAL_GAME_TYPE["FREE"] = 0] = "FREE";
        SPECIAL_GAME_TYPE[SPECIAL_GAME_TYPE["BONUS"] = 1] = "BONUS";
      })(SPECIAL_GAME_TYPE || (SPECIAL_GAME_TYPE = {}));

      var BuyBonus = exports('default', (_dec = property({
        type: Node,
        tooltip: "BuyBonus根節點"
      }), _dec2 = property({
        type: Node,
        tooltip: "背景遮罩"
      }), _dec3 = property({
        type: SpriteFrame,
        tooltip: "內購智能訊息icon圖"
      }), _dec4 = property({
        type: Button,
        tooltip: "頁簽按鈕控制項"
      }), _dec5 = property({
        type: Label,
        tooltip: "頁簽按鈕標題"
      }), _dec6 = property({
        type: Node,
        tooltip: "頁簽按鈕選中控制項"
      }), _dec7 = property({
        type: Node,
        tooltip: "頁面"
      }), _dec8 = property({
        type: Button,
        tooltip: "頁面"
      }), _dec9 = property({
        type: Button,
        tooltip: "頁面"
      }), _dec10 = property({
        type: Button,
        tooltip: "切換購買選單(加)"
      }), _dec11 = property({
        type: Button,
        tooltip: "切換購買選單(減)"
      }), _dec12 = property({
        type: Button,
        tooltip: "押注(加)"
      }), _dec13 = property({
        type: Button,
        tooltip: "押注(減)"
      }), _dec14 = property({
        type: Button,
        tooltip: "購買次數(加)"
      }), _dec15 = property({
        type: Button,
        tooltip: "購買次數(減)"
      }), _dec16 = property({
        type: Button,
        tooltip: "購買"
      }), _dec17 = property({
        type: Button,
        tooltip: "說明"
      }), _dec18 = property({
        type: Label,
        tooltip: "說明文字"
      }), _dec19 = property({
        type: Node,
        tooltip: "說明頁面"
      }), _dec20 = property({
        type: Label,
        tooltip: "押注"
      }), _dec21 = property({
        type: Label,
        tooltip: "購買次數"
      }), _dec22 = property({
        type: RichText,
        tooltip: "金額"
      }), _dec23 = property({
        type: RichText,
        tooltip: "一張卡價格"
      }), _dec24 = property({
        type: Label,
        tooltip: "遊戲說明"
      }), _dec25 = property({
        type: Label,
        tooltip: "特殊遊戲"
      }), _dec26 = property({
        type: Sprite,
        tooltip: "特殊遊戲Icon"
      }), _dec27 = property({
        type: Sprite,
        tooltip: "特殊遊戲文字"
      }), _dec28 = property({
        type: Label,
        tooltip: "購買標題"
      }), _dec29 = property({
        type: Label,
        tooltip: "特色標題"
      }), _dec30 = property({
        type: Label,
        tooltip: "押注標題"
      }), _dec31 = property({
        type: Label,
        tooltip: "購買次數標題"
      }), _dec32 = property({
        type: Label,
        tooltip: "金額標題"
      }), _dec33 = property({
        type: Label,
        tooltip: "總金額標題"
      }), _dec34 = property({
        type: Label,
        tooltip: "購買並使用"
      }), _dec35 = property({
        type: Sprite,
        tooltip: "付費遊戲 Txt"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BuyBonus, _Component);

        function BuyBonus() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_buyBonusRoot", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_mask", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_icon", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_pageBtn", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_pageBtnText", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_pageBtnSelected", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_page", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_closeBtn", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_maskBtn", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_listNext", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_listBack", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betAdd", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betMinus", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_timesAdd", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_timesMinus", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBtn", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_explainBtn", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_explainTxt", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_explainPage", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betLabel", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_timesLabel", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_priceLabel", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betPriceLabel", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_specialGameExpLabel", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_specialGameLabel", _descriptor25, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_specialGameIcon", _descriptor26, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_specialGameTxt", _descriptor27, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyTitleTxt", _descriptor28, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featureTitleTxt", _descriptor29, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betLabelTxt", _descriptor30, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_timesLabelTxt", _descriptor31, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_priceLabelTxt", _descriptor32, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_totalPriceLabelTxt", _descriptor33, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyAndUseTxt", _descriptor34, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusTxt", _descriptor35, _assertThisInitialized(_this));

          _this.m_bottomBar = null;
          _this.m_buttonState = new Array();
          _this.m_buyList = new Array();
          _this.m_buyListIndex = 0;
          _this.m_betIndex = 0;
          _this.m_betIndexMax = 0;
          _this.m_countIndexMax = 99;
          _this.m_count = 1;
          _this.m_currentTouchName = null;
          _this.m_eventButtonCb = [[null, null, null], [null, null, function () {
            _this.Hide();
          }], [null, null, function () {
            _this.Hide();
          }], [null, null, function () {
            _this.SwitchList(true);
          }], [null, null, function () {
            _this.SwitchList(false);
          }], [null, null, function () {
            _this.AddBet(true);
          }], [null, null, function () {
            _this.AddBet(false);
          }], [null, null, function () {
            _this.AddTimes(true);
          }], [null, null, function () {
            _this.AddTimes(false);
          }], [null, null, function () {
            _this.Confirm();
          }], [null, null, function () {
            _this.SetExplainView();
          }]];
          _this.m_isBuyBonus = false;
          _this.m_canBuyBonus = false;
          _this.m_remainTimes = 0;
          _this.m_mallId = 0;
          _this.m_priceOdd = 0;
          _this.m_spriteAtlas = null;
          _this.m_buyFGTxt = null;
          _this.m_startCb = null;
          _this.m_endCb = null;
          _this.m_origBet = 0;
          return _this;
        }

        var _proto = BuyBonus.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          buyBonusManager.OnLoad(this); // 目前僅1個按鈕

          if (this.m_pageBtn[PAGE_TYPE.BUY]) {
            this.m_pageBtn[PAGE_TYPE.BUY].interactable = false;
            this.m_pageBtnText[PAGE_TYPE.BUY].node.getComponent(UIRenderer).color = color(36, 30, 8);
          }

          var eventButton = [this.m_pageBtn[PAGE_TYPE.BUY], this.m_closeBtn, this.m_maskBtn, this.m_listNext, this.m_listBack, this.m_betAdd, this.m_betMinus, this.m_timesAdd, this.m_timesMinus, this.m_buyBtn, this.m_explainBtn];

          for (var i = 0; i < eventButton.length; i++) {
            if (eventButton[i]) {
              this.SetEventListener(eventButton[i], this.m_eventButtonCb[i]);
            }
          }

          if (this.m_mask) {
            this.m_mask.on(Node.EventType.TOUCH_START, function (event) {
              if (!_this2.m_explainPage) {
                _this2.m_bottomBar.BottomBarManager.CloseCommonText();
              }
            });
          }

          this.Hide(); // 設定字體

          this.m_betPriceLabel.fontFamily = Define.DollarFontFamily;
        };

        _proto.start = function start() {};

        _proto.update = function update(dt) {};

        _proto.Init = function Init(bottombar, info, startCb, endCb, spriteAtlas) {
          this.m_bottomBar = bottombar;

          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CloseBuyBonusInfo)) {
            this.m_explainBtn.node.active = false;
          } //  m_buyList裡的betVec要手塞,重新檢查info裡有甚麼


          for (var i = 0; i < info.length; i++) {
            this.m_buyList[i] = info[i];
            this.SetBetVec(this.m_buyList[i], info[i].MaxBet);
          }

          if (this.m_buyList.length <= 1) {
            this.m_listNext.node.active = false;
            this.m_listBack.node.active = false;
          }

          this.m_spriteAtlas = spriteAtlas;
          this.m_startCb = startCb;
          this.m_endCb = endCb;
          this.SetBetIndexMax(this.m_buyList[this.m_buyListIndex].BetVec.length - 1);
          this.SetTimes();
          this.SetBet();
          this.SetPriceOdd();
          this.SetTxt();
          this.SetSpecialGameIcon();
          this.SetSpecialGameTimesInfo();
          NotificationManager.GetInstance().UpdateBuyBonusNotify(this.m_icon);
        }
        /**@ch 去掉太大的Bet */
        ;

        _proto.SetBetVec = function SetBetVec(betList, maxBet) {
          var betRange = Tools.times(maxBet, walletManger.Ratio);
          var range = walletManger.RawBetList.length;

          for (var i = walletManger.RawBetList.length - 1; i >= 0; i--) {
            if (walletManger.RawBetList[i] > betRange) {
              range = i;
            } else if (walletManger.RawBetList[i] <= betRange) {
              break;
            }
          }

          betList.BetVec = walletManger.RawBetList.slice(0, range);
        };

        _proto.SetEventListener = function SetEventListener(button, cb) {
          var _this3 = this;

          button.node.on(Node.EventType.TOUCH_START, function (event) {
            // event.stopPropagationImmediate();
            // event.stopPropagation();
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this3.m_currentTouchName == null && button.interactable) {
              _this3.m_currentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this3.m_currentTouchName = event.target.name;
              }
            }

            if (cb[TOUCH_EVENT.START]) {
              cb[TOUCH_EVENT.START]();
            }

            SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
          });
          button.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this3.m_currentTouchName == event.target.name) {
              _this3.m_currentTouchName = null;
            }

            if (cb[TOUCH_EVENT.CANCEL]) {
              cb[TOUCH_EVENT.CANCEL]();
            }
          });
          button.node.on(Node.EventType.TOUCH_END, function (event) {
            if (_this3.m_currentTouchName != event.target.name) {
              return;
            }

            _this3.m_currentTouchName = null;

            if (cb[TOUCH_EVENT.END]) {
              cb[TOUCH_EVENT.END]();
            }
          });
        };

        _proto.SetExplainView = function SetExplainView() {
          if (this.m_explainPage) {
            this.m_explainPage.active = !this.m_explainPage.active;
          } else {
            var title = LocaleStringManager.GetInstance().GetString(Define.StringKey.BUY_BONUS_BUY);
            var content = LocaleStringManager.GetInstance().GetString(Define.StringKey.BUY_BONUS_ITEM_EXPLAIN);
            this.m_bottomBar.BottomBarManager.OpenCommonText(title, content);
          }
        };

        _proto.ShowFeatures = function ShowFeatures() {
          this.m_bottomBar.ShowFeatures();
        };

        _proto.SetBetIndexMax = function SetBetIndexMax(max) {
          this.m_betIndexMax = max;
        };

        _proto.SwitchList = function SwitchList(isNext) {
          if (this.m_buyListIndex >= this.m_buyList.length - 1 && isNext || this.m_buyListIndex < 1 && !isNext) {
            return;
          }

          this.m_buyListIndex = this.m_buyListIndex + (isNext ? 1 : -1);
          this.SetPriceOdd();
          this.SetBetIndexMax(this.m_buyList[this.m_buyListIndex].BetVec.length - 1);
          this.SetTimes();
          this.SetBet();
          this.SetSpecialGameTimesInfo();
          this.SetSpecialGameIcon();
        }
        /**@ch 當玩家嘗試增加Bet */
        ;

        _proto.AddBet = function AddBet(isAdd) {
          if (this.m_betIndex >= this.m_betIndexMax && isAdd || this.m_betIndex <= 0 && !isAdd) {
            return;
          }

          this.m_betIndex = this.m_betIndex + (isAdd ? 1 : -1);
          this.SetBet();
        };

        _proto.AddTimes = function AddTimes(isAdd) {
          if (this.m_count >= this.m_countIndexMax && isAdd || this.m_count <= 1 && !isAdd) {
            return;
          }

          this.m_count = this.m_count + (isAdd ? 1 : -1);
          this.SetTimes();
        };

        _proto.SetTimes = function SetTimes() {
          this.m_timesLabel.string = Tools.FormatNumberThousands(this.m_count);
          this.SetPriceOdd();
        }
        /**@ch 設定資訊(顯示字串、字型) */
        ;

        _proto.SetSpecialGameTimesInfo = function SetSpecialGameTimesInfo() {
          var times = this.m_buyList[this.m_buyListIndex].DescRounds;
          var type = this.m_buyList[this.m_buyListIndex].DescType;

          if (times != SPECIAL_GAME_NON_RULE) {
            if (type == SPECIAL_GAME_TYPE.FREE) {
              if (this.m_specialGameLabel) {
                this.m_specialGameLabel.string = js.formatStr(LocaleStringManager.GetInstance().GetString(Define.StringKey.BUY_BONUS_DES_FREE), times);

                if (!this.m_specialGameLabel.font) {
                  this.m_specialGameLabel.font = Define.DefaultFont;
                }
              }
            } else if (type == SPECIAL_GAME_TYPE.BONUS) {
              if (this.m_specialGameLabel) {
                this.m_specialGameLabel.string = js.formatStr(LocaleStringManager.GetInstance().GetString(Define.StringKey.BUY_BONUS_DES_BONUS), times);

                if (!this.m_specialGameLabel.font) {
                  this.m_specialGameLabel.font = Define.DefaultFont;
                }
              }
            }
          } else {
            if (this.m_specialGameLabel) {
              this.m_specialGameLabel.string = "";
            }
          }
        };

        _proto.SetSpecialGameIcon = function SetSpecialGameIcon() {
          if (this.m_spriteAtlas) {
            if (this.m_buyList[this.m_buyListIndex]) {
              var type = this.m_buyList[this.m_buyListIndex].DescType;

              if (this.m_spriteAtlas.getSpriteFrame("Buy_FG_Icon0" + (type + 1))) {
                this.m_specialGameIcon.spriteFrame = this.m_spriteAtlas.getSpriteFrame("Buy_FG_Icon0" + (type + 1));
              } else if (this.m_spriteAtlas.getSpriteFrame("Txt_FG")) {
                this.m_specialGameTxt.spriteFrame = this.m_spriteAtlas.getSpriteFrame("Txt_FG"); // this.m_specialGameIcon.spriteFrame = this.m_spriteAtlas.getSpriteFrame( "Buy_FG_Icon0" + ( type + 1 ) );
              }
            }
          }
        }
        /**@ch 玩家調整當前Bet時需要做的事情 */
        ;

        _proto.SetBet = function SetBet() {
          var bet = this.m_bottomBar.GetDisplayValue(this.m_buyList[this.m_buyListIndex].BetVec[this.m_betIndex]);
          this.m_betLabel.string = Tools.FormatNumberThousands(bet, Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO);
          this.m_betPriceLabel.string = Tools.FormatNumberThousands(Tools.times(bet, this.m_buyList[this.m_buyListIndex].PriceOdd), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO, true, 2);

          if ((!Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CurrencySymbol) || Number(Define.API_ID) == Define.MGAApi) && Define.DollarSymbol != "") {
            this.m_betPriceLabel.string = "<p>" + Define.DollarSymbol + " </p>" + this.m_betPriceLabel.string;
          }

          this.SetPriceOdd();
        };

        _proto.SetPriceOdd = function SetPriceOdd() {
          this.m_priceLabel.string = Tools.FormatNumberThousands(this.m_bottomBar.GetDisplayValue(this.TotalPrice()), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO, true, 2);

          if ((!Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CurrencySymbol) || Number(Define.API_ID) == Define.MGAApi) && Define.DollarSymbol != "") {
            this.m_priceLabel.string = "<p>" + Define.DollarSymbol + " </p>" + this.m_priceLabel.string;
          }

          this.m_priceLabel.fontFamily = Define.DollarFontFamily;
        };

        _proto.TotalPrice = function TotalPrice() {
          return Tools.times(this.m_count, Tools.times(this.m_buyList[this.m_buyListIndex].PriceOdd, this.m_buyList[this.m_buyListIndex].BetVec[this.m_betIndex]));
        }
        /**@ch 按下確認購買 */
        ;

        _proto.Confirm = function Confirm() {
          if (!this.m_canBuyBonus) {
            // 這裡要告訴玩家不能使用
            MsgBox.getInstance().ShowMessageBox(Define.StringKey.TRIAL_REFUSED_REASON + "1", Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO);
            return;
          }

          if (this.m_bottomBar.GetChips() >= this.TotalPrice()) {
            this.m_origBet = this.m_bottomBar.GetNowBetValue();
            this.m_remainTimes = this.m_count;
            this.m_bottomBar.SetUsingBuyBonus(true, this.m_buyList[this.m_buyListIndex].DescType);
            this.m_bottomBar.BuyBonusRemainTimes = this.m_remainTimes;
            this.m_mallId = this.m_buyList[this.m_buyListIndex].AlterID;
            this.m_priceOdd = this.m_buyList[this.m_buyListIndex].PriceOdd;
            this.m_bottomBar.SetNowBet(this.m_buyList[this.m_buyListIndex].BetVec[this.m_betIndex], false, true);
            this.m_isBuyBonus = true;
            this.Hide();
            var bottomBar = this.m_bottomBar.getComponent(BottombarManager);
            bottomBar.SetGiftCodeBtnState();
            Define.SetCanUseItemCard(false);
            this.m_bottomBar.SetBetDescribe(true);

            if (this.m_startCb) {
              bottomBar.SendSpinLog();
              this.m_startCb();
            } // 表演動畫

          } else {
            // 跳不足提示
            MsgBox.getInstance().ShowMessageBox(Define.StringKey.BUY_BONUS_MSG_MONEY_NOT_ENOUGH);
          }
        };

        _proto.ForceBuyBonusState = function ForceBuyBonusState(bet) {
          // console.error( 'ForceBuyBonusState', this.m_bottomBar.GetNowBetValue(), this.m_buyList )
          this.m_origBet = this.m_bottomBar.GetNowBetValue();
          this.m_count = 1;
          this.m_remainTimes = this.m_count - 1;
          this.m_bottomBar.SetUsingBuyBonus(true, this.m_buyList[this.m_buyListIndex].DescType);
          this.m_bottomBar.BuyBonusRemainTimes = this.m_remainTimes;
          this.m_mallId = this.m_buyList[this.m_buyListIndex].AlterID;
          this.m_priceOdd = this.m_buyList[this.m_buyListIndex].PriceOdd; // this.m_bottomBar.SetNowBet( this.m_buyList[ this.m_buyListIndex ].BetVec[ this.m_betIndex ], false, true );

          this.m_bottomBar.SetNowBet(bet, false, true);
          this.m_isBuyBonus = true;
          this.Hide();
          Define.SetCanUseItemCard(false);
          this.m_bottomBar.SetBetDescribe(true);

          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.ShowBuyBonusBetInfo) && this.m_bottomBar.BuyBonusPriceRoot) {
            var thisRoundCost = Tools.times(this.m_buyList[this.m_buyListIndex].PriceOdd, bet);
            this.m_bottomBar.BuyBonusPriceRoot.active = true;
            this.m_bottomBar.CumulativePaid = thisRoundCost; // 設定此局花費字串

            this.m_bottomBar.BuyBonusNumPrice = thisRoundCost;
            this.m_bottomBar.BuyBonusCumulativePrice = thisRoundCost;
          }
        };

        _proto.Show = function Show() {
          console.error('buybonus show', this.m_isBuyBonus, this.m_bottomBar.IsInTrial, backpackManager.OnUseItemID, this.m_canBuyBonus);

          if (this.m_isBuyBonus || this.m_bottomBar.IsInTrial || backpackManager.OnUseItemID || !this.m_canBuyBonus) {
            // 這裡要告訴玩家不能使用
            MsgBox.getInstance().ShowMessageBox(Define.StringKey.TRIAL_REFUSED_REASON + "1", Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO);
            return;
          }

          this.node.active = true;
          this.m_bottomBar.SendClickEvent(Define.BTN_CLICK_EVENT.BUY_BONUS, 0);
        };

        _proto.Hide = function Hide() {
          this.node.active = false;
        };

        _proto.SetSpriteAtlas = function SetSpriteAtlas(spriteAtlas, spriteFrame) {
          if (spriteFrame === void 0) {
            spriteFrame = null;
          }

          this.m_spriteAtlas = spriteAtlas;
          this.m_buyFGTxt = spriteFrame;
          this.SetTxt();
          this.SetSpecialGameIcon();
        };

        _proto.SetTxt = function SetTxt() {
          if (this.m_buyTitleTxt) {
            this.m_buyTitleTxt.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BUY_BONUS_BUY);

            if (!this.m_buyTitleTxt.font) {
              this.m_buyTitleTxt.font = Define.DefaultFont;
            }
          }

          this.m_specialGameExpLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BUY_BONUS_DES_BUY_NOW);

          if (!this.m_specialGameExpLabel.font) {
            this.m_specialGameExpLabel.font = Define.DefaultFont;
          }

          this.m_betLabelTxt.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BUY_BONUS_DES_BET);
          var betDollerSymbol = "";

          if ((!Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CurrencySymbol) || Number(Define.API_ID) == Define.MGAApi) && Define.DollarSymbol != "") {
            betDollerSymbol = "(" + ("" + Define.DollarSymbol) + ")";
          }

          this.m_betLabelTxt.string = js.formatStr(this.m_betLabelTxt.string, betDollerSymbol);

          if (!this.m_betLabelTxt.font) {
            // this.m_betLabelTxt.font = Define.DefaultFont;
            Tools.SetFont(this.m_betLabelTxt);
          }

          this.m_timesLabelTxt.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BUY_BONUS_DES_TIMES);

          if (!this.m_timesLabelTxt.font) {
            // this.m_timesLabelTxt.font = Define.DefaultFont;
            Tools.SetFont(this.m_timesLabelTxt);
          }

          this.m_priceLabelTxt.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BUY_BONUS_DES_COST);

          if (!this.m_priceLabelTxt.font) {
            // this.m_priceLabelTxt.font = Define.DefaultFont;
            Tools.SetFont(this.m_priceLabelTxt);
          }

          this.m_totalPriceLabelTxt.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BUY_BONUS_DES_TOTAL_PRICE);

          if (!this.m_totalPriceLabelTxt.font) {
            // this.m_totalPriceLabelTxt.font = Define.DefaultFont;
            Tools.SetFont(this.m_totalPriceLabelTxt);
          }

          this.m_buyAndUseTxt.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BUY_BONUS_BUY_AND_PLAY);

          if (!this.m_buyAndUseTxt.font) {
            // this.m_buyAndUseTxt.font = Define.DefaultFont;
            Tools.SetFont(this.m_buyAndUseTxt);
          }

          if (this.m_explainTxt) {
            this.m_explainTxt.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BUY_BONUS_ITEM_EXPLAIN);

            if (!this.m_explainTxt.font) {
              this.m_explainTxt.font = Define.DefaultFont;
            }
          } // if ( this.m_spriteAtlas )


          if (this.m_buyFGTxt) {
            // this.m_buyBonusTxt.spriteFrame = this.m_spriteAtlas.getSpriteFrame( "Buy_FG_Txt01" );
            this.m_buyBonusTxt.spriteFrame = this.m_buyFGTxt;
          } else if (this.m_spriteAtlas) {
            this.m_buyBonusTxt.spriteFrame = this.m_spriteAtlas.getSpriteFrame('BuyBonus_Title');
          } // 送審新功能應該要加入setTxt


          Tools.SetFont(this.m_betLabel);
          Tools.SetFont(this.m_timesLabel);
          Tools.SetFont(this.m_priceLabel);
          Tools.SetFont(this.m_betPriceLabel);
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          var originActive = this.node.active;
          this.node.active = true;

          if (isLandscape) {
            this.m_buyBonusRoot.getComponent(Animation).play("Clip_BuyBonus_Landscape");
          } else {
            this.m_buyBonusRoot.getComponent(Animation).play("Clip_BuyBonus_Portrait");
          }

          this.node.active = originActive;
        }
        /**@ch 開轉時要設定的東西 */
        ;

        _proto.SetRemainTimes = function SetRemainTimes() {
          this.m_remainTimes--;
          this.m_bottomBar.SetChips(this.m_bottomBar.GetChips() - this.MallBet);
          this.m_bottomBar.BottomBarManager.SetNetBet(this.MallBet);
          this.m_bottomBar.BuyBonusRemainTimes = this.m_remainTimes;

          if (!Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.ShowBuyBonusBetInfo) || !this.m_bottomBar.BuyBonusPriceRoot) {
            return;
          } // 縮回去
          // tween( this.m_bottomBar )
          //     .call( () =>
          //     {
          //         this.m_bottomBar.BuyBonusAnimNode.getComponent( Animation ).play( "Clip_BuyBonus_FreeGame_End" );
          //     } )
          //     .delay( 0.25 )
          //     .call( () =>
          //     {
          //         this.m_bottomBar.BuyBonusAnimNode.active = false;
          //         // 設定總共花費字串
          //         this.m_bottomBar.BuyBonusCumulativePrice = this.m_bottomBar.CumulativePaid;
          //     } )
          //     .start();


          this.m_bottomBar.BuyBonusPriceRoot.active = true;
          var thisRoundCost = Tools.times(this.m_buyList[this.m_buyListIndex].PriceOdd, this.m_buyList[this.m_buyListIndex].BetVec[this.m_betIndex]);
          this.m_bottomBar.CumulativePaid = this.m_bottomBar.CumulativePaid + thisRoundCost; // 設定此局花費字串

          this.m_bottomBar.BuyBonusNumPrice = thisRoundCost;
          this.m_bottomBar.BuyBonusCumulativePrice = this.m_bottomBar.CumulativePaid;
        }
        /**@ch 檢查BuyBonus是否結束，各遊戲須在EndState做串接 */
        ;

        _proto.CheckOverAni = /*#__PURE__*/function () {
          var _CheckOverAni = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!(this.m_remainTimes == 0)) {
                      _context.next = 6;
                      break;
                    }

                    if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.ShowBuyBonusBetInfo) && this.m_bottomBar.BuyBonusPriceRoot) {
                      this.m_bottomBar.BuyBonusPriceRoot.active = false;
                    }

                    this.m_bottomBar.SetNowBet(this.m_origBet);
                    this.CloseMall();
                    _context.next = 8;
                    break;

                  case 6:
                    if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.ShowBuyBonusBetInfo)) {
                      _context.next = 8;
                      break;
                    }

                    return _context.abrupt("return");

                  case 8:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function CheckOverAni() {
            return _CheckOverAni.apply(this, arguments);
          }

          return CheckOverAni;
        }()
        /**@ch 離開時關閉 */
        ;

        _proto.CloseMall = function CloseMall() {
          // 新增新面板變數還原
          this.m_bottomBar.CumulativePaid = 0;
          this.m_isBuyBonus = false;
          this.m_canBuyBonus = true;
          Define.SetCanUseItemCard(true);
          this.m_bottomBar.SetBetDescribe(false);
          this.m_bottomBar.SetUsingBuyBonus(false, this.m_buyList[this.m_buyListIndex].DescType);
          this.Hide();

          if (this.m_endCb) {
            this.m_endCb();
          }
        };

        _createClass(BuyBonus, [{
          key: "IsBuyBonus",
          get: function get() {
            return this.m_isBuyBonus;
          }
        }, {
          key: "CanBuyBonus",
          set: function set(value) {
            this.m_canBuyBonus = value;
          }
        }, {
          key: "RemainTimes",
          get: function get() {
            return this.m_remainTimes;
          }
        }, {
          key: "MallId",
          get: function get() {
            return this.m_mallId;
          }
        }, {
          key: "MallBet",
          get: function get() {
            return this.m_priceOdd * this.m_bottomBar.GetNowBetValue();
          }
        }]);

        return BuyBonus;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusRoot", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_mask", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_icon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_pageBtn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_pageBtnText", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_pageBtnSelected", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_page", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_closeBtn", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_maskBtn", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_listNext", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_listBack", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_betAdd", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_betMinus", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_timesAdd", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_timesMinus", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBtn", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "m_explainBtn", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "m_explainTxt", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "m_explainPage", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "m_betLabel", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "m_timesLabel", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "m_priceLabel", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "m_betPriceLabel", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "m_specialGameExpLabel", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "m_specialGameLabel", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "m_specialGameIcon", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "m_specialGameTxt", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "m_buyTitleTxt", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "m_featureTitleTxt", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "m_betLabelTxt", [_dec30], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor31 = _applyDecoratedDescriptor(_class2.prototype, "m_timesLabelTxt", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor32 = _applyDecoratedDescriptor(_class2.prototype, "m_priceLabelTxt", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor33 = _applyDecoratedDescriptor(_class2.prototype, "m_totalPriceLabelTxt", [_dec33], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor34 = _applyDecoratedDescriptor(_class2.prototype, "m_buyAndUseTxt", [_dec34], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor35 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusTxt", [_dec35], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CellComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './SoundManager.ts', './Tools.ts', './ItemList.ts', './AwardCell.ts', './DebrisCell.ts', './ExchangeNumComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Node, Label, Animation, Component, Define, LocaleStringManager, SoundManager, Tools, ItemList, AwardCell, DebrisCell, ExchangeNumComponent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Node = module.Node;
      Label = module.Label;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      ItemList = module.default;
    }, function (module) {
      AwardCell = module.default;
    }, function (module) {
      DebrisCell = module.default;
    }, function (module) {
      ExchangeNumComponent = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "4b1e4e/GnNAnYUsohaPRaoA", "CellComponent", undefined);

      var SHRINK_THRESHOLD = 3;
      var SHRINK_RATE = 0.7;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CellComponent = exports('default', (_dec = property({
        type: DebrisCell,
        tooltip: "碎片"
      }), _dec2 = property({
        type: AwardCell,
        tooltip: "獎勵"
      }), _dec3 = property({
        type: ExchangeNumComponent,
        tooltip: "數量控制"
      }), _dec4 = property({
        type: Button,
        tooltip: "兌換按鈕"
      }), _dec5 = property({
        type: Node,
        tooltip: "不可兌換按鈕"
      }), _dec6 = property({
        type: Label,
        tooltip: "兌換道具"
      }), _dec7 = property({
        type: Label,
        tooltip: "獎勵"
      }), _dec8 = property({
        type: Label,
        tooltip: "兌換"
      }), _dec9 = property({
        type: Node,
        tooltip: "縮小之ROOT"
      }), _dec10 = property({
        type: Node,
        tooltip: "縮小之ROOT(Number)"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CellComponent, _Component);

        function CellComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_debrisCells", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_awardCells", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_exchangeNumComponent", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_exchangeBtn", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_disableNode", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_exchangeItemLabel", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_exchangeAwardLabel", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_exchangeLabels", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_shrinkRoot", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_shrinkRootNumber", _descriptor10, _assertThisInitialized(_this));

          _this.m_debrisManager = null;
          _this.m_info = null;
          _this.m_itemDesc = null;
          return _this;
        }

        var _proto = CellComponent.prototype;

        _proto.Init = function Init(manager, info, itemDesc) {
          var _this2 = this;

          this.m_debrisManager = manager;
          this.m_info = info;
          this.m_itemDesc = itemDesc; //設定碎片配方

          for (var i = 0; i < this.m_debrisCells.length; i++) {
            if (this.m_info.dn[i]) {
              this.m_debrisCells[i].node.active = true;
              this.m_debrisCells[i].NumLabel.node.active = true;
              this.m_debrisCells[i].UpdateNum(0);
              this.m_debrisCells[i].Init(this.m_debrisManager.GetDebrisIcon(this.m_info.dn[i]), this.m_info.dc[i]);

              if (i >= SHRINK_THRESHOLD) {
                this.m_shrinkRoot.setScale(SHRINK_RATE, SHRINK_RATE);
                this.m_shrinkRootNumber.setScale(SHRINK_RATE, SHRINK_RATE);
              }
            } else {
              this.m_debrisCells[i].node.active = false;
              this.m_debrisCells[i].NumLabel.node.active = false;
            }
          } //設定獎勵


          for (var _i = 0; _i < this.m_awardCells.length; _i++) {
            this.m_awardCells[_i].node.active = false;
          }

          this.m_awardCells[0].node.active = true;
          this.m_awardCells[0].Init(ItemList.GetInstance().GetItemIcon(info.ficon), info.amount); //設定數量

          this.m_exchangeNumComponent.Init(info.max, this, function () {
            _this2.ChangeNum();
          });
          this.SetTxt();
        };

        _proto.SetTxt = function SetTxt() {
          for (var i = 0; i < this.m_exchangeLabels.length; i++) {
            Tools.SetFont(this.m_exchangeLabels[i]);
            this.m_exchangeLabels[i].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.DEBRIS_EXCHANGE);
          }

          if (this.m_exchangeAwardLabel) {
            Tools.SetFont(this.m_exchangeAwardLabel);
            this.m_exchangeAwardLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.DEBRIS_AWARD);
          }

          if (this.m_exchangeItemLabel) {
            Tools.SetFont(this.m_exchangeItemLabel);
            this.m_exchangeItemLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.DEBRIS_ITEM);
          }

          this.m_exchangeNumComponent.SetTxt();
        };

        _proto.OnExchange = function OnExchange() {
          if (this.m_exchangeNumComponent.Num > 0) {
            SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);

            if (this.node.getComponent(Animation)) {
              var anim = this.node.getComponent(Animation);
              anim.play("Clip_Debris_GetReward");
            }

            this.m_debrisManager.ReqExchange(this.m_info.no, this.m_exchangeNumComponent.Num);
            this.m_exchangeNumComponent.ResetNum();
            this.ChangeNum();
          }
        };

        _proto.OnShowRewardInfo = function OnShowRewardInfo() {
          if (!this.m_itemDesc || !this.m_info.ItemBet) {
            console.error("Something wrong", this.m_itemDesc, this.m_info.ItemBet);
            return;
          }

          var star = Number(this.m_info.ficon.toString()[1]);
          var type = Number(this.m_info.ficon.toString()[0]);
          var icon = ItemList.GetInstance().GetItemIcon(this.m_info.ficon);
          var itemTitle = LocaleStringManager.GetInstance().GetGameName(Number(Define.NOW_GAME_ID));
          var infoText = ItemList.GetInstance().GetItemInfoText({
            bet: this.m_info.ItemBet,
            gameDesc: this.m_itemDesc,
            star: star,
            type: type
          }, 2);
          var desc = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_TXT_INFO) + "\n" + infoText.gameDesc;
          this.m_debrisManager.OpenCommonText(infoText.title, desc, itemTitle, icon, this.m_info.amount);
        };

        _proto.ChangeNum = function ChangeNum() {
          this.m_awardCells[0].UpdateNum(this.m_exchangeNumComponent.Num);

          for (var i = 0; i < this.m_debrisCells.length; i++) {
            if (this.m_debrisCells[i].node.active) {
              this.m_debrisCells[i].UpdataNeedNum(this.m_exchangeNumComponent.Num);
            }
          }
        };

        _proto.UpdateInfo = function UpdateInfo(info) {
          //更新碎片數量
          if (info.debrislist) {
            var sortDebrisList = [];

            for (var i = 0; i < info.debrislist.length; i++) {
              var no = info.debrislist[i].no.toString();
              var lvl = Number(no[1]);

              if (!isNaN(lvl)) {
                if (!sortDebrisList[lvl]) {
                  sortDebrisList[lvl] = [];
                }

                sortDebrisList[lvl].push(info.debrislist[i]);
              }
            }

            for (var _i2 = 0; _i2 < this.m_info.dn.length; _i2++) {
              var _no = this.m_info.dn[_i2].toString();

              var _lvl = Number(_no[1]);

              if (!isNaN(_lvl) && sortDebrisList[_lvl]) {
                for (var j = 0; j < sortDebrisList[_lvl].length; j++) {
                  if (sortDebrisList[_lvl][j].no === this.m_info.dn[_i2]) {
                    this.m_debrisCells[_i2].UpdateNum(sortDebrisList[_lvl][j].count ? sortDebrisList[_lvl][j].count : 0);

                    break;
                  }
                }
              }
            }
          } //更新按鈕狀態


          this.m_exchangeNumComponent.UpdateState(); //更新兌換剩餘次數

          if (info.changelist) {
            for (var _i3 = 0; _i3 < info.changelist.length; _i3++) {
              if (info.changelist[_i3].formula === this.m_info.no) {
                this.m_exchangeNumComponent.DecreaseLeft(info.changelist[_i3].count);
                break;
              }
            }
          } //檢查是否還可以兌換


          var canChange = true;

          for (var _i4 = 0; _i4 < this.m_info.dn.length; _i4++) {
            if (this.m_info.dn[_i4]) {
              canChange = this.m_debrisCells[_i4].Num >= this.m_debrisCells[_i4].NeedNum;

              if (!canChange) {
                break;
              }
            }
          }

          var canExchange = canChange && this.m_exchangeNumComponent.ChangeTimes < this.m_exchangeNumComponent.LeftNum;
          this.m_exchangeBtn.node.active = canExchange;
          this.m_disableNode.active = !canExchange;
          return canExchange;
        };

        _proto.CheckRecipe = function CheckRecipe(num) {
          for (var i = 0; i < this.m_debrisCells.length; i++) {
            var needNum = Tools.times(this.m_debrisCells[i].NeedNum, num);

            if (this.m_debrisCells[i].Num < needNum) {
              return false;
            }
          }

          return true;
        };

        return CellComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_debrisCells", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_awardCells", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_exchangeNumComponent", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_exchangeBtn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_disableNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_exchangeItemLabel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_exchangeAwardLabel", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_exchangeLabels", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_shrinkRoot", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_shrinkRootNumber", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CommonEffect.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, v3, v2, macro;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v3 = module.v3;
      v2 = module.v2;
      macro = module.macro;
    }],
    execute: function () {
      exports('CommonEffect', void 0);

      cclegacy._RF.push({}, "6f779uo//FP8owPSb4jjuXE", "CommonEffect", undefined);

      var CommonEffect;

      (function (_CommonEffect) {
        var ExtendsMath = /*#__PURE__*/function () {
          //--------------------------------------------------------------------------------------------
          function ExtendsMath() {} //--------------------------------------------------------------------------------------------

          /** 取得帕斯卡三角形的第 `line` 層 */


          ExtendsMath.PascalTriangleLine = function PascalTriangleLine(line) {
            var ptArr = [1];

            for (var i = 1; i < line; i++) {
              ptArr[i] = ptArr[i - 1] * (line - i) / i;
            }

            return ptArr;
          } //--------------------------------------------------------------------------------------------

          /** 在指定範圍裡取隨機值 */
          ;

          ExtendsMath.RangedRandom = function RangedRandom(min, max) {
            return (max - min) * Math.random() + min;
          } //--------------------------------------------------------------------------------------------

          /** 取得矩形範圍內隨機位置
           * @param origin 中心點位置
           * @param range  長寬大小 (px)
           * @param angle  旋轉角度 (DEG)
           */
          ;

          ExtendsMath.GetRandomRectPos = function GetRandomRectPos(origin, range, angle) {
            var vector = v2(this.RangedRandom(-range.x, range.x) / 2 | 0, this.RangedRandom(-range.x, range.x) / 2 | 0).rotate(angle * macro.RAD);
            return origin.add(vector);
          } //--------------------------------------------------------------------------------------------

          /** 取得橢圓範圍內隨機位置
           * @param origin 中心點位置
           * @param range  長短軸大小 (px)
           * @param angle  橢圓旋轉角 (DEG)
           */
          ;

          ExtendsMath.GetRandomOvalPos = function GetRandomOvalPos(origin, range, angle) {
            var ratio = range.y / Math.max(1, range.x);
            var radius = Math.random() * range.x * 0.5;
            var radian = Math.random() * Math.PI * 2;
            var vector = v2(radius * Math.cos(radian), radius * Math.sin(radian) * ratio).rotate(angle * macro.RAD);
            return origin.add(vector);
          } //--------------------------------------------------------------------------------------------

          /** 同時縮放與翻轉
           * @param scaleMin  最小縮放比例
           * @param scaleMax  最大縮放比例
           * @param flipTimes 翻轉總次數
           * @param time      時間尺度 [0, 1]
           * @returns 回傳指定時間時的縮放比
           */
          ;

          ExtendsMath.ZoomAndFlip = function ZoomAndFlip(scaleMin, scaleMax, flipTimes, time) {
            var s = Math.sin(time * Math.PI) * (scaleMax - scaleMin) + scaleMin;
            var f = Math.cos(time * Math.PI * flipTimes);
            return v2(s * f, s);
          } //--------------------------------------------------------------------------------------------
          ;

          return ExtendsMath;
        }();

        _CommonEffect.ExtendsMath = ExtendsMath;

        var Bezier = /*#__PURE__*/function () {
          // Points
          // Length
          // Pascal Triangle Line
          // Bezier

          /**
           * 貝茲曲線計算工具
           * @param points 控制點
           */
          function Bezier(points) {
            this.pts = null;
            this.len = 0;
            this.ptl = null;
            this.bez = null;
            this.len = points.length;

            if (this.len == 0) {
              points.push(v3(0, 0));
              points.push(v3(0, 0));
            } else if (this.len == 1) {
              points.push(v3(points[0].x, points[0].y));
            }

            this.pts = points;

            switch (this.len) {
              case 2:
                {
                  this.bez = this.Bezier2;
                  break;
                }

              case 3:
                {
                  this.bez = this.Bezier3;
                  break;
                }

              case 4:
                {
                  this.bez = this.Bezier4;
                  break;
                }

              case 5:
                {
                  this.bez = this.Bezier5;
                  break;
                }

              case 6:
                {
                  this.bez = this.Bezier6;
                  break;
                }

              default:
                {
                  this.ptl = ExtendsMath.PascalTriangleLine(this.len);
                  this.bez = this.BezierN;
                  break;
                }
            }
          }
          /**
           * 取得於指定時間尺度的位置
           * @param time `[0, 1]`
           */


          var _proto = Bezier.prototype;

          _proto.GetPosition = function GetPosition(time) {
            return this.bez.apply(this, [time]);
          }
          /** 2 階貝茲曲線 */
          ;

          _proto.Bezier2 = function Bezier2(t) {
            var r = 1 - t;
            return v3(r * this.pts[0].x + t * this.pts[1].x, r * this.pts[0].y + t * this.pts[1].y);
          }
          /** 3 階貝茲曲線 */
          ;

          _proto.Bezier3 = function Bezier3(t) {
            var r = 1 - t;
            var f = [r * r, 2 * r * t, t * t];
            return v3(f[0] * this.pts[0].x + f[1] * this.pts[1].x + f[2] * this.pts[2].x, f[0] * this.pts[0].y + f[1] * this.pts[1].y + f[2] * this.pts[2].y);
          }
          /** 4 階貝茲曲線 */
          ;

          _proto.Bezier4 = function Bezier4(t) {
            var r = 1 - t;
            var f = [r * r * r, 3 * r * r * t, 3 * r * t * t, t * t * t];
            return v3(f[0] * this.pts[0].x + f[1] * this.pts[1].x + f[2] * this.pts[2].x + f[3] * this.pts[3].x, f[0] * this.pts[0].y + f[1] * this.pts[1].y + f[2] * this.pts[2].y + f[3] * this.pts[3].y);
          }
          /** 5 階貝茲曲線 */
          ;

          _proto.Bezier5 = function Bezier5(t) {
            var r = 1 - t;
            var f = [r * r * r * r, 4 * r * r * r * t, 6 * r * r * t * t, 4 * r * t * t * t, t * t * t * t];
            return v3(f[0] * this.pts[0].x + f[1] * this.pts[1].x + f[2] * this.pts[2].x + f[3] * this.pts[3].x + f[4] * this.pts[4].x, f[0] * this.pts[0].y + f[1] * this.pts[1].y + f[2] * this.pts[2].y + f[3] * this.pts[3].y + f[4] * this.pts[4].y);
          }
          /** 6 階貝茲曲線 */
          ;

          _proto.Bezier6 = function Bezier6(t) {
            var r = 1 - t;
            var f = [r * r * r * r * r, 5 * r * r * r * r * t, 10 * r * r * r * t * t, 10 * r * r * t * t * t, 5 * r * t * t * t * t, t * t * t * t * t];
            return v3(f[0] * this.pts[0].x + f[1] * this.pts[1].x + f[2] * this.pts[2].x + f[3] * this.pts[3].x + f[4] * this.pts[4].x + f[5] * this.pts[5].x, f[0] * this.pts[0].y + f[1] * this.pts[1].y + f[2] * this.pts[2].y + f[3] * this.pts[3].y + f[4] * this.pts[4].y + f[5] * this.pts[5].y);
          }
          /** N 階貝茲曲線 */
          ;

          _proto.BezierN = function BezierN(t) {
            var r = 1 - t;
            var v = v3(0, 0);

            for (var i = 0; i < this.len; i++) {
              var f = 1;

              for (var j = 0; j < this.len - i - 1; j++) {
                f *= r;
              }

              for (var k = 0; k < i; k++) {
                f *= t;
              }

              v.x += f * this.ptl[i] * this.pts[i].x;
              v.y += f * this.ptl[i] * this.pts[i].y;
            }

            return v;
          };

          return Bezier;
        }();

        _CommonEffect.Bezier = Bezier;
      })(CommonEffect || (CommonEffect = exports('CommonEffect', {})));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CommonTextManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './SoundManager.ts', './Tools.ts', './IconTemplate.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Label, Button, Sprite, RichText, Component, Define, SoundManager, Tools, IconTemplate;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Button = module.Button;
      Sprite = module.Sprite;
      RichText = module.RichText;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      IconTemplate = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

      cclegacy._RF.push({}, "405f6GpBJJAeL+jOwIdKmiW", "CommonTextManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CommonTextManager = exports('default', (_dec = property({
        type: Node,
        tooltip: "純文字"
      }), _dec2 = property({
        type: Node,
        tooltip: "道具卡"
      }), _dec3 = property({
        type: Label,
        tooltip: "訊息框上方標題"
      }), _dec4 = property({
        type: Label,
        tooltip: "內容文字"
      }), _dec5 = property({
        type: Button,
        tooltip: "X按鈕"
      }), _dec6 = property({
        type: Button,
        tooltip: "背景遮罩"
      }), _dec7 = property({
        type: Sprite,
        tooltip: "道具卡圖示"
      }), _dec8 = property({
        type: Label,
        tooltip: "道具卡數量"
      }), _dec9 = property({
        type: Label,
        tooltip: "道具卡標題"
      }), _dec10 = property({
        type: RichText,
        tooltip: "道具卡描述"
      }), _dec11 = property({
        type: Node,
        tooltip: "收藏"
      }), _dec12 = property({
        type: IconTemplate,
        tooltip: "收藏 IconTemplate"
      }), _dec13 = property({
        type: Label,
        tooltip: "favor內容文字"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CommonTextManager, _Component);

        function CommonTextManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_textNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_itemNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_title", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentText", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_closeBtn", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_nodeBlockBtn", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_itemIconSprite", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_itemNumLabel", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_itemTitleLabel", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_itemDescLabel", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_FaverNode", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_FaverIconTemplate", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_favorContentText", _descriptor13, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = CommonTextManager.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.m_closeBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            SoundManager.getInstance().Play(Define.AudioClips.COMMON_CANCEL_BTN);

            _this2.CloseCommonText();
          });
          this.m_nodeBlockBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            _this2.CloseCommonText();
          }); // 使用粗體字型

          Tools.SetFont(this.m_title);
          Tools.SetFont(this.m_itemTitleLabel);
          Tools.SetFont(this.m_contentText);
          Tools.SetFont(this.m_itemNumLabel);
          Tools.SetFont(this.m_itemDescLabel);
          Tools.SetFont(this.m_favorContentText);
        }
        /**
             * 
             * @param title 介面標題
             * @param content 內容，有道具卡圖示時為道具卡描述
             * @param itemTilte 道具卡所屬的遊戲
             * @param itemIconSprite 道具卡icon
             * @param textType 區分來源
             */
        ;

        _proto.OpenCommonText = function OpenCommonText(title, content, itemTilte, itemIconSprite, itemNum, textType) {
          if (itemTilte || itemIconSprite) {
            this.m_itemTitleLabel.string = itemTilte;
            this.m_itemDescLabel.string = content;
            this.m_itemIconSprite.spriteFrame = itemIconSprite;

            if (itemNum && itemNum > 0) {
              this.m_itemNumLabel.string = itemNum.toString();
            } else {
              this.m_itemNumLabel.string = "";
            }

            this.m_itemNode.active = true;
            this.m_textNode.active = false;
          } else {
            this.m_contentText.string = content;
            this.m_itemNode.active = false;
            this.m_textNode.active = true;
          }

          this.m_title.string = title;
          this.node.active = true;
          this.m_FaverNode.active = false;

          if (textType == Define.CommonTextType.FAVOR) {
            this.m_itemNode.active = false;
            this.m_textNode.active = false;
            this.m_contentText.string = "";
            this.m_favorContentText.string = content;
            this.m_FaverNode.active = true;
          }
        };

        _proto.InitFavorIcon = function InitFavorIcon(func) {
          if (func) {
            func(this.m_FaverIconTemplate);
          }
        };

        _proto.CloseCommonText = function CloseCommonText() {
          this.node.active = false; // 美術檔裡面的預設值 關閉之後就復原 以防修改到

          this.m_contentText.horizontalAlign = Label.HorizontalAlign.CENTER;
          this.m_contentText.verticalAlign = Label.VerticalAlign.TOP;
        };

        _proto.SetTitle = function SetTitle(title) {
          this.m_title.string = title;
        };

        _proto.SetContentText = function SetContentText(content) {
          this.m_contentText.string = content;
        };

        _proto.SetContentText_HorizontalAlign = function SetContentText_HorizontalAlign(align) {
          this.m_contentText.horizontalAlign = align;
        };

        _proto.SetContentText_VerticalAlign = function SetContentText_VerticalAlign(align) {
          this.m_contentText.verticalAlign = align;
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          if (isLandscape) {
            // this.node.setPosition( 0, 320, 0 );
            this.node.setPosition(0, 218, 0);
          } else {
            this.node.setPosition(0, 568, 0);
          }
        };

        _createClass(CommonTextManager, [{
          key: "Close",
          get: function get() {
            return this.m_closeBtn.node;
          }
        }]);

        return CommonTextManager;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_textNode", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_itemNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_title", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_contentText", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_closeBtn", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_nodeBlockBtn", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_itemIconSprite", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_itemNumLabel", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_itemTitleLabel", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_itemDescLabel", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_FaverNode", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_FaverIconTemplate", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_favorContentText", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CommonWebPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, WebView, Button, Animation, Component, Define;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      WebView = module.WebView;
      Button = module.Button;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "b955aTAiglJ44fY/c86hV+V", "CommonWebPage", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CommonWebPage = exports('default', (_dec = property({
        type: Label,
        tooltip: "標題"
      }), _dec2 = property({
        type: WebView,
        tooltip: "WebView"
      }), _dec3 = property({
        type: Button,
        tooltip: "重整按鈕"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CommonWebPage, _Component);

        function CommonWebPage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_titleLabel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_webView", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_reloadBtn", _descriptor3, _assertThisInitialized(_this));

          _this.m_closeCb = null;
          return _this;
        }

        var _proto = CommonWebPage.prototype;

        _proto.OnRotation = function OnRotation(isLandscape) {
          if (isLandscape) {
            this.node.getComponent(Animation).play("Clip_Common_WebPage_Landscape");
          } else {
            this.node.getComponent(Animation).play("Clip_Common_WebPage_Portrait");
          }
        };

        _proto.SetTitle = function SetTitle(str) {
          this.m_titleLabel.string = str;

          if (!this.m_titleLabel.font) {
            this.m_titleLabel.font = Define.DefaultFont;
          }
        };

        _proto.Show = function Show(url, isLandscape, reload) {
          if (reload === void 0) {
            reload = false;
          }

          this.m_reloadBtn.node.active = reload;
          this.m_webView.url = url;
          this.node.active = true;
          this.OnRotation(isLandscape);
        };

        _proto.OnClose = function OnClose() {
          this.node.active = false;
          this.m_closeCb && this.m_closeCb();
        };

        _proto.reload = function reload() {
          var _this2 = this;

          var reloadurl = this.m_webView.url;
          this.m_webView.url = "";
          this.scheduleOnce(function () {
            _this2.m_webView.url = reloadurl; // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     this.webView.node.position = cc.v3( 0, 10000, 0 );
            // }
          }, 0);
        };

        _createClass(CommonWebPage, [{
          key: "CloseCb",
          set: function set(v) {
            this.m_closeCb = v;
          }
        }]);

        return CommonWebPage;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_titleLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_webView", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_reloadBtn", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ConnectionManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './MsgBox.ts', './Tools.ts', './Request.ts', './EnvironmentConfig.ts', './ItemList.ts', './LocaleStringManager.ts', './ConnectionSpeed.ts', './AppManager.ts', './env'], function (exports) {
  'use strict';

  var _createClass, cclegacy, log, sys, assetManager, Define, MsgBox, Tools, Request, EnvironmentConfig, ItemList, LocaleStringManager, ConnectionSpeed, AppManager, EDITOR;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      sys = module.sys;
      assetManager = module.assetManager;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      Request = module.Request;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      ItemList = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      ConnectionSpeed = module.default;
    }, function (module) {
      AppManager = module.default;
    }, function (module) {
      EDITOR = module.EDITOR;
    }],
    execute: function () {
      cclegacy._RF.push({}, "52d7cw8mKhFuJZpX5IGvC1J", "ConnectionManager", undefined);

      var IngoreEventID = [Define.BTN_CLICK_EVENT.AUTOPLAY, Define.BTN_CLICK_EVENT.AUTOPLAY_STOP, Define.BTN_CLICK_EVENT.SPIN, Define.BTN_CLICK_EVENT.STOP, Define.BTN_CLICK_EVENT.HARDSTOP_ON, Define.BTN_CLICK_EVENT.HARDSTOP_OFF, Define.BTN_CLICK_EVENT.CLICK_PLATE];
      var PassGameID = [Define.GAME_ID.CSH, Define.GAME_ID.FG, Define.GAME_ID.SR, Define.GAME_ID.MW, Define.GAME_ID.MW2, Define.GAME_ID.NC, Define.GAME_ID.CAI];
      /**
       * 
       * Created by HuiRu on 2018/06/30.
       */

      var PrizeType = exports('PrizeType', {
        none: 0,
        coin: 1,
        itemCard: 2
      });
      var MAIL_REQ_RETRY = 3;
      var ConnectionManager = exports('default', /*#__PURE__*/function () {
        function ConnectionManager() {
          var _this = this;

          this.m_protocolList = void 0;
          this.m_defaultOnCommand = void 0;
          this.m_defaultOnCommandError = void 0;
          this.m_defaultHeader = void 0;
          this.m_defaultHttpMethod = ConnectionManager.HTTP_METHOD.TYPE_GET;
          this.m_defaultTimeout = 20;
          this.m_webSocketConnected = false;
          this.m_queueCMD = void 0;
          this.m_webSocket = void 0;
          this.m_webUrl = "";
          this.m_isCloseClick = false;
          this.m_passClickEventList = null;
          this.m_isFirst = true;
          this.m_apiIdString = null;
          this.m_ingoreEventID = null;
          this.m_passGameID = null;
          this.m_token = void 0;
          this.m_apiIdToTitleName = null;
          this.m_settingCb = null;
          this.m_isCloseAutoChange = false;

          if (ConnectionManager._instance) {
            throw new Error("Error: Instantiation failed: Use ConnectionManager.getInstance() instead of new.");
          }

          ConnectionManager._instance = this;
          this.m_protocolList = new Map();
          this.m_defaultHeader = {
            "Access-Control-Allow-Origin": "*"
          };

          if (!sys.isNative && EnvironmentConfig.ENV_TYPE !== Define.EVN.TEST && !EDITOR) {
            this.m_webUrl = window.location.href;
            var re = /\?/g;
            this.m_webUrl = this.m_webUrl.slice(0, this.m_webUrl.search(re));
            var url = window.location.href;
            var reg = /\.com/g;
            url = url.slice(0, url.search(reg) + 4) + "/smallicon/setting.json";
            var game = window.location.href;
            game = game.slice(game.search(reg) + 5, game.search(re) - 1);
            game = game.replace("/index.htm", "");
            assetManager.loadRemote(url, {
              reload: true
            }, function (error, resource) {
              if (resource) {
                if (resource.CloseClick && resource.CloseClick[game]) {
                  _this.m_isCloseClick = true;
                }

                if (resource.IgnoreEventNo) {
                  _this.m_passClickEventList = resource.IgnoreEventNo;
                }

                _this.m_apiIdToTitleName = resource.ApiIdToTitleName;

                if (_this.m_settingCb) {
                  _this.m_settingCb(_this.m_apiIdToTitleName);
                }

                if (resource.CloseAutoChange && resource.CloseAutoChange[game]) {
                  _this.m_isCloseAutoChange = true;
                }
              }
            });
          }

          window.addEventListener('unhandledrejection', function (event) {
            var params = ConnectionManager.FormErrorParams(Define.AID, Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, event.reason);
            ConnectionManager.getInstance().SendErrorLog(params);
          });
          this.m_apiIdString = Tools.GetLinkParameterByName("apiId");
        }

        ConnectionManager.getInstance = function getInstance() {
          if (!this._instance) {
            this._instance = new ConnectionManager();
          }

          return ConnectionManager._instance;
        };

        ConnectionManager.FormPhaseEventParams = function FormPhaseEventParams(accountID, gameID, gameVer, eventID, eventStatus, ssoKey, apiid) {
          if (eventStatus === void 0) {
            eventStatus = Define.PHASE_RESULT.UNKNOWN;
          }

          var params = {};
          params.AccountID = accountID;
          params.GameID = gameID;
          params.GameVersion = gameVer;
          params.EventID = eventID;
          params.EventStatus = eventStatus;
          params.SSOKey = ssoKey;
          params.ApiId = apiid;

          if (params.AccountID == undefined || params.AccountID == 0) {
            params.AccountID = -1;
          }

          if (params.SSOKey == undefined || params.SSOKey == "") {
            params.SSOKey = "Null";
          }

          return params;
        };

        ConnectionManager.FormSubAgentServiceParams = function FormSubAgentServiceParams(accountID, apiId, gameID, siteID, agentID, lineCode) {
          // 2020/11/9 Rain需求 ： accountid apiid agent eventid eventvalue
          // let cuturl = ( window.location != window.parent.location )
          //     ? document.referrer
          //     : document.location.href;
          // 2020/12/8 Rain需求 ： 網址改成取 document.referrer 
          var cuturl = document.location.href;

          if (document.referrer) {
            cuturl = document.referrer;
          }

          cuturl = cuturl.replace("http://", "");
          cuturl = cuturl.replace("https://", "");
          var spliturl = cuturl.split("/")[0];
          var params = {};
          params.AccountID = accountID;
          params.ApiID = apiId;
          params.GameID = gameID;
          params.SiteID = siteID;
          params.AgentID = agentID;
          params.LineCode = lineCode;
          params.Site = spliturl;

          if (params.AccountID == undefined || params.AccountID == 0) {
            params.AccountID = -1;
          }

          return params;
        };

        ConnectionManager.FormVerificationEventParams = function FormVerificationEventParams(accountID, gameID, gameVer, eventID, eventValue, ssoKey, apiid, logIndex) {
          if (eventValue === void 0) {
            eventValue = "";
          }

          var params = {};
          params.AccountID = accountID;
          params.GameID = gameID;
          params.GameVersion = gameVer;
          params.EventID = eventID;
          params.EventValue = eventValue;
          params.SSOKey = ssoKey;
          params.ApiId = apiid;
          params.LogIndex = logIndex;

          if (params.AccountID == undefined || params.AccountID == 0) {
            params.AccountID = -1;
          }

          if (params.SSOKey == undefined || params.SSOKey == "") {
            params.SSOKey = "Null";
          }

          return params;
        };

        ConnectionManager.FormErrorParams = function FormErrorParams(aId, apiId, gameID, gameVer, errorObj) {
          var params = {};
          params.AccountID = aId;
          params.GameID = gameID;
          params.GameVersion = gameVer;
          params.ErrorLog = JSON.stringify(errorObj.stack);

          switch (sys.browserType) {
            case sys.BrowserType.CHROME:
              params.BrowserSystem = 1;
              break;

            case sys.BrowserType.SAFARI:
              params.BrowserSystem = 2;
              break;

            case sys.BrowserType.IE:
              params.BrowserSystem = 3;
              break;

            case sys.BrowserType.UC:
              params.BrowserSystem = 4;
              break;

            case sys.BrowserType.QQ:
            case sys.BrowserType.MOBILE_QQ:
              params.BrowserSystem = 5;
              break;

            default:
              params.BrowserSystem = 0;
              break;
          }

          switch (sys.os) {
            case sys.OS.ANDROID:
              params.DeviceSystem = 1;
              break;

            case sys.OS.IOS:
              params.DeviceSystem = 2;
              break;

            case sys.OS.WINDOWS:
              params.DeviceSystem = 3;
              break;

            default:
              params.DeviceSystem = 0;
              break;
          }

          params.CreateTime = new Date().toDateString();
          return params;
        };

        ConnectionManager.FormMailParams = function FormMailParams(accountId, lang) {
          var params = {};
          params.AccountId = accountId;
          params.Lang = lang;
          return params;
        };

        ConnectionManager.FormBtnClickParams = function FormBtnClickParams(accountID, apiId, gameID, gameVer, eventID, eventStatus, isLandscape) {
          if (eventStatus === void 0) {
            eventStatus = Define.PHASE_RESULT.UNKNOWN;
          }

          if (isLandscape === void 0) {
            isLandscape = true;
          }

          var params = {};
          params.AccountID = accountID;
          params.ApiID = apiId;
          params.GameID = gameID;
          params.GameVersion = gameVer;
          params.EventID = eventID;
          params.EventStatus = eventStatus;
          if (isLandscape) params.isLandscape = 1;else params.isLandscape = 2;

          if (params.AccountID == undefined || params.AccountID == 0) {
            params.AccountID = -1;
          }

          return params;
        };

        ConnectionManager.OnExit = function OnExit() {
          delete this._instance;
          this._instance = null;
        };

        var _proto = ConnectionManager.prototype;

        _proto.GetApiId2TitleName = function GetApiId2TitleName(cb) {
          this.m_settingCb = cb;

          if (this.m_apiIdToTitleName) {
            return this.m_apiIdToTitleName;
          } else {
            return null;
          }
        };

        _proto.SetDefaultHeader = function SetDefaultHeader(header) {
          this.m_defaultHeader = header;
        };

        _proto.SetDefaultHttpMethod = function SetDefaultHttpMethod(httpMethod) {
          this.m_defaultHttpMethod = httpMethod;
        };

        _proto.SetDefaultOnCommandFunc = function SetDefaultOnCommandFunc(func) {
          if (func != null) {
            this.m_defaultOnCommand = func;
          }
        };

        _proto.SetDefaultOnCommandErrorFunc = function SetDefaultOnCommandErrorFunc(func) {
          if (func != null) {
            this.m_defaultOnCommandError = func;
          }
        };

        _proto.SetToken = function SetToken(token) {
          this.m_token = token;
        };

        _proto.AddSetting = function AddSetting(protocol, type, onCommand, onCommandError, link, httpMethod, header) {
          if (onCommand === void 0) {
            onCommand = null;
          }

          if (onCommandError === void 0) {
            onCommandError = null;
          }

          if (link === void 0) {
            link = null;
          }

          if (httpMethod === void 0) {
            httpMethod = null;
          }

          if (header === void 0) {
            header = null;
          }

          this.AddSettingBySubData(protocol, {
            type: type,
            onCommand: onCommand,
            onCommandError: onCommandError,
            httpLink: link,
            header: header,
            httpMethod: httpMethod
          });
          return true;
        };

        _proto.AddSettingBySubData = function AddSettingBySubData(protocol, data) {
          if (data.type == ConnectionManager.CONNECT_TYPE.TYPE_HTTP && data.httpLink == null) {
            log("ConnectionManager Error! Please set Link:", protocol);
            return false;
          } // if ( this.m_protocolList.get( protocol ) != null )
          // {
          //     cc.error( "ConnectionManager Error! Duplicate definition:", protocol );
          //     return false;
          // }


          this.m_protocolList.set(protocol, data);
          return true;
        };

        _proto.GetSetting = function GetSetting(protocol) {
          return this.m_protocolList.get(protocol);
        };

        _proto.CheckSetting = function CheckSetting(protocol) {
          if (this.m_protocolList.get(protocol) != null || this.m_protocolList.get(protocol) != undefined) {
            return true;
          }

          return false;
        };

        _proto.UpdateURL = function UpdateURL() {
          var subData = this.m_protocolList.get(Define.PROTOCOL.SUBAGENTSERVICE_REQ);

          if (subData) {
            subData.httpLink = EnvironmentConfig.SUBAGENTSERVICE_URL;
          } else {
            ConnectionManager.getInstance().AddSetting(Define.PROTOCOL.SUBAGENTSERVICE_REQ, ConnectionManager.CONNECT_TYPE.TYPE_HTTP, function () {}, function () {}, EnvironmentConfig.SUBAGENTSERVICE_URL);
          }
        };

        _proto.SendCommand = function SendCommand(commandType, content, queryParams, body, cb) {
          if (content === void 0) {
            content = null;
          }

          if (queryParams === void 0) {
            queryParams = {};
          }

          if (body === void 0) {
            body = null;
          }

          if (cb === void 0) {
            cb = null;
          }

          if (this.m_isFirst) {
            this.m_isFirst = false; // GameAppA.SetChangeCb( () =>
            // {
            //     this.UpdateURL();
            // } );
          }

          var subData = this.m_protocolList.get(commandType);

          if (subData == null || subData.type >= ConnectionManager.CONNECT_TYPE.MAX) {
            return;
          }

          switch (subData.type) {
            case ConnectionManager.CONNECT_TYPE.TYPE_HTTP:
              {
                this.ReqHttp(commandType, subData, content, queryParams, body, cb);
                break;
              }

            case ConnectionManager.CONNECT_TYPE.TYPE_WEBSOCKET:
              {
                if (this.m_webSocketConnected) {
                  this.SendWSCommand(commandType, content);
                } else {
                  if (this.m_queueCMD == undefined) {
                    this.m_queueCMD = new Array();
                  }

                  this.m_queueCMD.push({
                    protocolType: commandType,
                    content: content
                  });
                  this.ConnectWebSocket(subData.httpLink, subData.onCommand);
                }

                break;
              }
          }
        };

        _proto.ReqHttp = function ReqHttp(commandType, subData, content, queryParams, body, cb) {
          if (content === void 0) {
            content = null;
          }

          if (queryParams === void 0) {
            queryParams = {};
          }

          if (body === void 0) {
            body = null;
          }

          if (cb === void 0) {
            cb = null;
          }

          var self = this;
          var httpMethod = subData.httpMethod || this.m_defaultHttpMethod;
          var header = subData.header || this.m_defaultHeader;
          content = content || "";
          var url = subData.httpLink + content;

          if (queryParams == null) {
            queryParams = {};
          }

          if (commandType != Define.PROTOCOL.LOGIN) {
            queryParams["token"] = this.m_token;
          }

          var now = Date.now();
          subData.ignoreCache;
          this.m_defaultTimeout;
          var promise = Request(httpMethod, url, queryParams, body).then(function (res) {
            if (res.ok) {
              try {
                var responseJSON = JSON.parse(res.data);

                if (cb !== null) {
                  cb(responseJSON);
                } else if (subData.onCommand == undefined) {
                  self.m_defaultOnCommand(commandType, responseJSON);
                } else {
                  subData.onCommand(commandType, responseJSON);
                }
              } catch (error) {
                throw error;
              }
            } else {
              if (commandType != Define.PROTOCOL.PHASE_EVENT && commandType != Define.PROTOCOL.CLICK_EVENT && commandType != Define.PROTOCOL.VERIFY_EVENT) {
                // GameAppA.ChangeBaseConfig();
                if (subData.onCommandError == undefined) {
                  self.m_defaultOnCommandError && self.m_defaultOnCommandError(commandType, res);
                } else {
                  subData.onCommandError(commandType, res);
                }
              }
            }

            ConnectionSpeed.GetInstance().SetSpeedData(Tools.minus(Date.now(), now));
          })["catch"](function (err) {
            if (commandType != Define.PROTOCOL.PHASE_EVENT && commandType != Define.PROTOCOL.CLICK_EVENT && commandType != Define.PROTOCOL.VERIFY_EVENT) {
              // GameAppA.ChangeBaseConfig();
              if (subData.onCommandError == undefined) {
                self.m_defaultOnCommandError(commandType, err);
              } else {
                subData.onCommandError(commandType, err);
              }
            }

            ConnectionSpeed.GetInstance().SetSpeedData(Tools.minus(Date.now(), now));

            if (Define.NOW_GAME_ID !== "0") {
              var params = ConnectionManager.FormErrorParams(Define.AID, Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.VERSION, null);
              params.ErrorLog = JSON.stringify(err);
              ConnectionManager.getInstance().SendErrorLog(params);
            }
          });
        };

        _proto.ConnectWebSocket = function ConnectWebSocket(serverIP, cb) {
          log("--ReqWebSocket-----------------------------------------------------------");
          var self = this;
          serverIP = serverIP.replace("http://", "");
          this.m_webSocket = new WebSocket("ws://" + serverIP);

          this.m_webSocket.onmessage = function (e) {
            log("--ReqWebSocket--GO---------------------------------------------------------");
            log(e.data);
            var jsonObj = JSON.parse(e.data);
            var subData = self.m_protocolList.get(jsonObj.cmdType);
            log(self.m_protocolList, subData);

            if (subData == undefined || subData.onCommand == undefined) {
              self.m_defaultOnCommand(jsonObj.cmdType, jsonObj.content);
            } else {
              subData.onCommand(jsonObj.cmdType, jsonObj.content);
            }
          };

          this.m_webSocket.onopen = function (evt) {
            self.m_webSocketConnected = true;
            log("onopen " + evt);

            if (cb != undefined) {
              cb();
            }

            if (self.m_queueCMD.length > 0) {
              for (var i = 0; i < self.m_queueCMD.length; i++) {
                var cmd = self.m_queueCMD.pop();
                self.SendWSCommand(cmd.protocolType, cmd.content);
              }
            }
          };

          this.m_webSocket.onclose = function (evt) {
            self.m_webSocketConnected = false;
            log("onclose " + evt);
          };

          this.m_webSocket.onerror = function (evt) {
            log("onerror " + evt);
            MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_LOGIN_FAIL, null, Tools.CloseGameTab);
            self.m_webSocketConnected = false;
          };
        };

        _proto.SendWSCommand = function SendWSCommand(type, content) {
          log("SendWSCommand: ", type, content);
          var cmd = {
            cmdType: type,
            content: content
          };
          var jsonObject = JSON.stringify(cmd);
          this.m_webSocket.send(jsonObject);
        };

        _proto.GetLoginCB = function GetLoginCB() {
          return this.m_protocolList.get(Define.PROTOCOL.LOGIN).onCommand;
        };

        _proto.SetLoginCB = function SetLoginCB(cb) {
          this.m_protocolList.get(Define.PROTOCOL.LOGIN).onCommand = cb;
        };

        _proto.IsProhibitLog = function IsProhibitLog() {
          return EnvironmentConfig.ENV_TYPE == Define.EVN.TEST || Boolean(Tools.GetLinkParameterByName("demo")) && !(Define.GLI_GAME_ID.indexOf(Number(Define.NOW_GAME_ID)) != -1) && !(Define.BMM_GAME_ID.indexOf(Number(Define.NOW_GAME_ID)) != -1);
        } // 階段埋點
        ;

        _proto.SendPhaseEnteringEvent = function SendPhaseEnteringEvent(params) {
          if (this.IsProhibitLog()) {
            return;
          }

          log("SendPhaseEnteringEvent");

          switch (sys.browserType) {
            case sys.BrowserType.CHROME:
              params.BrowserSystem = 1;
              break;

            case sys.BrowserType.SAFARI:
              params.BrowserSystem = 2;
              break;

            case sys.BrowserType.IE:
              params.BrowserSystem = 3;
              break;

            case sys.BrowserType.UC:
              params.BrowserSystem = 4;
              break;

            case sys.BrowserType.QQ:
            case sys.BrowserType.MOBILE_QQ:
              params.BrowserSystem = 5;
              break;

            case sys.BrowserType.FIREFOX:
              params.BrowserSystem = 6;
              break;

            default:
              params.BrowserSystem = 0;
              break;
          }

          switch (sys.os) {
            case sys.OS.ANDROID:
              params.DeviceSystem = 1;
              break;

            case sys.OS.IOS:
              params.DeviceSystem = 2;
              break;

            case sys.OS.WINDOWS:
              params.DeviceSystem = 3;
              break;

            default:
              params.DeviceSystem = 0;
              break;
          }

          params.CreateTime = new Date().toISOString();
          var str = "?AccountID=" + params.AccountID + "&GameID=" + params.GameID + "&GameVersion=" + params.GameVersion + "&EventID=" + params.EventID + "&EventStatus=" + params.EventStatus + "&BrowserSystem=" + params.BrowserSystem + "&DeviceSystem=" + params.DeviceSystem + // "&CreateTime=" + params.CreateTime +
          "&SSOKey=" + params.SSOKey + "&ApiId=" + (this.m_apiIdString ? this.m_apiIdString : params.ApiId) + "&CurrencyNumber=" + Define.CURRENCY_NUMBER + "&SubAgentCode=" + Define.SUB_AGENT_CODE;
          var subData = this.m_protocolList.get(Define.PROTOCOL.PHASE_EVENT);

          if (subData) {
            if (!subData.onCommand) {
              subData.onCommand = function () {//階段流失不做處理
              };
            }

            if (!subData.onCommandError) {
              subData.onCommandError = function () {//階段流失不做處理
              };
            }
          }

          this.SendCommand(Define.PROTOCOL.PHASE_EVENT, str);
        } // 送 SendSubAgentService 
        ;

        _proto.SendSubAgentService = function SendSubAgentService(params) {
          if (Define.IS_DEMO) {
            return;
          } // 2020/11/19 盧鴻需求


          var str = "?accountId=" + params.AccountID + "&apiId=" + (this.m_apiIdString ? this.m_apiIdString : params.ApiID) + "&gameId=" + params.GameID + "&siteId=" + params.SiteID + "&agentId=" + params.AgentID + "&linecode=" + params.LineCode + "&site=" + params.Site;
          var subData = this.m_protocolList.get(Define.PROTOCOL.SUBAGENTSERVICE_REQ);

          if (!subData) {
            ConnectionManager.getInstance().AddSetting(Define.PROTOCOL.SUBAGENTSERVICE_REQ, ConnectionManager.CONNECT_TYPE.TYPE_HTTP, function () {}, function () {}, EnvironmentConfig.SUBAGENTSERVICE_URL);
          }

          this.SendCommand(Define.PROTOCOL.SUBAGENTSERVICE_REQ, str);
        } // 按鈕點擊log
        ;

        _proto.SendBtnClickEvent = function SendBtnClickEvent(params) {
          // 設定APP新手旗標
          switch (params.EventID) {
            case Define.BTN_CLICK_EVENT.SPIN:
            case Define.BTN_CLICK_EVENT.CLICK_PLATE:
            case Define.BTN_CLICK_EVENT.SPACE_SPIN:
            case Define.BTN_CLICK_EVENT.AUTOPLAY:
            case Define.BTN_CLICK_EVENT.WISEAUTO_TOTAL:
              AppManager.SetNovice();
              break;
          }

          if (!this.m_ingoreEventID) {
            this.m_ingoreEventID = {};

            for (var i = 0; i < IngoreEventID.length; i++) {
              this.m_ingoreEventID[IngoreEventID[i]] = true;
            }
          }

          if (!this.m_passGameID) {
            this.m_passGameID = {};

            for (var _i = 0; _i < PassGameID.length; _i++) {
              this.m_passGameID[PassGameID[_i]] = true;
            }
          }

          if (!this.m_passGameID[params.GameID] && this.m_ingoreEventID[params.EventID]) {
            //關閉
            return;
          } // 2測不送log


          if (this.IsProhibitLog()) {
            return;
          }

          if (this.m_isCloseClick) {
            var event = params.EventID;

            if (event != Define.BTN_CLICK_EVENT.PLATFORM_ERROR_MESSAGE && event > Define.BTN_CLICK_EVENT.WEB_SITE && event < Define.BTN_CLICK_EVENT.FEATURESVIEW) {
              return;
            }
          }

          switch (sys.browserType) {
            case sys.BrowserType.CHROME:
              params.BrowserSystem = 1;
              break;

            case sys.BrowserType.SAFARI:
              params.BrowserSystem = 2;
              break;

            case sys.BrowserType.IE:
              params.BrowserSystem = 3;
              break;

            case sys.BrowserType.UC:
              params.BrowserSystem = 4;
              break;

            case sys.BrowserType.QQ:
            case sys.BrowserType.MOBILE_QQ:
              params.BrowserSystem = 5;
              break;

            case sys.BrowserType.FIREFOX:
              params.BrowserSystem = 6;
              break;

            default:
              params.BrowserSystem = 0;
              break;
          }

          switch (sys.os) {
            case sys.OS.ANDROID:
              params.DeviceSystem = 1;
              break;

            case sys.OS.IOS:
              params.DeviceSystem = 2;
              break;

            case sys.OS.WINDOWS:
              params.DeviceSystem = 3;
              break;

            default:
              params.DeviceSystem = 0;
              break;
          }

          params.CreateTime = new Date();
          var str = "?AccountID=" + params.AccountID + "&ApiID=" + (this.m_apiIdString ? this.m_apiIdString : params.ApiID) + "&GameID=" + params.GameID + "&GameVersion=" + params.GameVersion + "&EventNo=" + params.EventID + "&EventValue=" + params.EventStatus + "&BrowserSystem=" + params.BrowserSystem + "&DeviceSystem=" + params.DeviceSystem + '&Screen=' + params.isLandscape + // "&CreateTime=" + params.CreateTime +
          "&CurrencyNumber=" + Define.CURRENCY_NUMBER + "&SubAgentCode=" + Define.SUB_AGENT_CODE;
          var subData = this.m_protocolList.get(Define.PROTOCOL.CLICK_EVENT);

          if (subData) {
            if (!subData.onCommand) {
              subData.onCommand = function () {//點擊不做處理
              };
            }

            if (!subData.onCommandError) {
              subData.onCommandError = function () {//點擊不做處理
              };
            }
          }

          this.SendCommand(Define.PROTOCOL.CLICK_EVENT, str);
        };

        _proto.SendMailReq = function SendMailReq(params, cb, errorCount) {
          var _this2 = this;

          if (errorCount === void 0) {
            errorCount = 0;
          }

          var httpMethod = this.m_defaultHttpMethod;
          var header = this.m_defaultHeader;
          var content = "?AccountId=" + params.AccountId + (params.Lang ? "&Lang=" + params.Lang : "");
          var url = EnvironmentConfig.MAIL_URL + content;

          if (url.indexOf("?") > 0) {
            url = url + "&token=" + this.m_token;
          } else {
            url = url + "?toke=" + this.m_token;
          }

          var now = Date.now();
          this.m_defaultTimeout;
          var promise = Request(httpMethod, url).then(function (res) {
            if (res.ok) {
              var responseJSON = JSON.parse(res.data);

              if (cb) {
                cb(responseJSON.Mails, responseJSON.Error);
              }
            } else {
              errorCount += 1;

              if (errorCount < MAIL_REQ_RETRY) {
                _this2.SendMailReq(params, cb, errorCount);
              }
            }

            ConnectionSpeed.GetInstance().SetSpeedData(Tools.minus(Date.now(), now));
          })["catch"](function (err) {
            errorCount += 1;

            if (errorCount < MAIL_REQ_RETRY) {
              _this2.SendMailReq(params, cb, errorCount);
            }

            ConnectionSpeed.GetInstance().SetSpeedData(Tools.minus(Date.now(), now));
          });
        }
        /**顯示信件通知內容 */
        ;

        _proto.ShowMailInfo = function ShowMailInfo(mailinfo) {
          switch (mailinfo.PrizeType) {
            case PrizeType.coin:
              MsgBox.getInstance().ShowMessageBoxFormat(Define.StringKey.MSGBOX_AWARD_INFO, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, [mailinfo.Desc, mailinfo.Number.toString(), mailinfo.CurrencySymbol + Tools.FormatNumberThousands(Tools.strip(mailinfo.Amount), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO)]);
              break;

            case PrizeType.itemCard:
              var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.MSGBOX_AWARD_INFO_ITEM);
              str = str.replace("{Rank}", mailinfo.Number.toString());
              str = str.replace("{Event}", mailinfo.Desc);
              str = str.replace("{Reward}", ItemList.GetInstance().GetItemInfoText({
                gameName: LocaleStringManager.GetInstance().GetGameName(mailinfo.Extra.GameID),
                title: mailinfo.Extra.CardName
              }, null).title);
              MsgBox.getInstance().ShowMessageBoxFormat("", Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, [str]);
              break;
          }
        };

        _proto.SendErrorLog = function SendErrorLog(params) {
          var re = /index\.\w+\.js/g;

          if (params.ErrorLog == undefined || params.ErrorLog.search(re) === -1) {
            return;
          }

          while (true) {
            var result = params.ErrorLog.search(this.m_webUrl);

            if (result !== -1) {
              params.ErrorLog = params.ErrorLog.replace(this.m_webUrl, "");
            } else {
              break;
            }
          }

          var url = EnvironmentConfig.ERROR_URL;
          var paramsUrl = "?";

          for (var item in params) {
            paramsUrl += item + "=" + params[item] + "&";
          }

          var promise = Request("get", url + paramsUrl);
          promise.then(function (res) {});
        } // SendWebReqTest( cb: () => void = null )
        // {
        //     let httpMethod: string = this.m_defaultHttpMethod;
        //     let header: { [ key: string ]: string } = this.m_defaultHeader;
        //     let requestOptions: RequestOptions = {} as RequestOptions;
        //     requestOptions.headers = header;
        //     requestOptions.timeout = this.m_defaultTimeout;
        //     let promise = Request( ( httpMethod as any ), EnvironmentConfig.WEB_TEST_URL )
        //         .then( ( res: RequestResult ) =>
        //         {
        //             if ( res.ok )
        //             {
        //             }
        //             else
        //             {
        //                 GameAppA.ChangeBaseConfig();
        //             }
        //             if ( cb )
        //             {
        //                 cb();
        //             }
        //         } )
        //         .catch( ( err ) =>
        //         {
        //             GameAppA.ChangeBaseConfig();
        //             if ( cb )
        //             {
        //                 cb();
        //             }
        //         } );
        // }
        ;

        _proto.SendVerificationEvent = function SendVerificationEvent(params) {
          if (this.IsProhibitLog()) {
            return;
          }

          log("SendVerificationEvent");

          switch (sys.browserType) {
            case sys.BrowserType.CHROME:
              params.BrowserSystem = 1;
              break;

            case sys.BrowserType.SAFARI:
              params.BrowserSystem = 2;
              break;

            case sys.BrowserType.IE:
              params.BrowserSystem = 3;
              break;

            case sys.BrowserType.UC:
              params.BrowserSystem = 4;
              break;

            case sys.BrowserType.QQ:
            case sys.BrowserType.MOBILE_QQ:
              params.BrowserSystem = 5;
              break;

            case sys.BrowserType.FIREFOX:
              params.BrowserSystem = 6;
              break;

            default:
              params.BrowserSystem = 0;
              break;
          }

          switch (sys.os) {
            case sys.OS.ANDROID:
              params.DeviceSystem = 1;
              break;

            case sys.OS.IOS:
              params.DeviceSystem = 2;
              break;

            case sys.OS.WINDOWS:
              params.DeviceSystem = 3;
              break;

            default:
              params.DeviceSystem = 0;
              break;
          }

          params.CreateTime = new Date();
          var str = "?AccountID=" + params.AccountID + "&GameID=" + params.GameID + "&GameVersion=" + params.GameVersion + "&EventID=" + params.EventID + "&EventValue=" + params.EventValue + "&BrowserSystem=" + params.BrowserSystem + "&DeviceSystem=" + params.DeviceSystem + "&CreateTime=" + params.CreateTime + "&SSOKey=" + params.SSOKey + "&ApiId=" + (this.m_apiIdString ? this.m_apiIdString : params.ApiId) + "&LogIndex=" + params.LogIndex;
          var subData = this.m_protocolList.get(Define.PROTOCOL.VERIFY_EVENT);

          if (subData) {
            if (!subData.onCommand) {
              subData.onCommand = function () {//點擊不做處理
              };
            }

            if (!subData.onCommandError) {
              subData.onCommandError = function () {//點擊不做處理
              };
            }
          } else {
            ConnectionManager.getInstance().AddSetting(Define.PROTOCOL.VERIFY_EVENT, ConnectionManager.CONNECT_TYPE.TYPE_HTTP, function () {//不做處理
            }, function () {//不做處理
            }, EnvironmentConfig.VERIFY_URL);
          }

          this.SendCommand(Define.PROTOCOL.VERIFY_EVENT, str);
        };

        _createClass(ConnectionManager, [{
          key: "IsCloseAutoChange",
          get: //http
          function get() {
            return this.m_isCloseAutoChange;
          }
        }]);

        return ConnectionManager;
      }());
      ConnectionManager.CONNECT_TYPE = {
        TYPE_HTTP: 1,
        TYPE_WEBSOCKET: 2,
        MAX: 3
      };
      ConnectionManager.HTTP_METHOD = {
        TYPE_GET: 'get',
        TYPE_POST: 'post'
      };
      ConnectionManager._instance = new ConnectionManager();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ConnectionSpeed.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Tools.ts'], function (exports) {
  'use strict';

  var _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, Tools;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "78e90FmBMVKHaAiB4a9kegO", "ConnectionSpeed", undefined);

      var MAX_DATA_NUM = 5;
      var ConnectionSpeed = exports('default', /*#__PURE__*/function () {
        function ConnectionSpeed() {
          this.m_speedData = [];
          this.m_avgSpeed = null;
          this.m_notifyCb = {};
        }

        ConnectionSpeed.GetInstance = function GetInstance() {
          if (!this._instance) {
            this._instance = new ConnectionSpeed();
          }

          return ConnectionSpeed._instance;
        };

        ConnectionSpeed.OnExit = function OnExit() {
          delete this._instance;
          this._instance = null;
        };

        var _proto = ConnectionSpeed.prototype;

        _proto.SetSpeedData = /*#__PURE__*/function () {
          var _SetSpeedData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(time) {
            var total;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    this.m_speedData.push(time);

                    if (this.m_speedData.length > MAX_DATA_NUM) {
                      total = 0;
                      this.m_speedData.forEach(function (element) {
                        total = Tools.plus(total, element);
                      });
                      this.m_avgSpeed = Tools.divide(total, this.m_speedData.length);
                      this.m_speedData = new Array();
                      this.NotifyAll();
                    }

                  case 2:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function SetSpeedData(_x) {
            return _SetSpeedData.apply(this, arguments);
          }

          return SetSpeedData;
        }()
        /**
         * 增加監聽
         * @param key 在define內定義key
         * @param cb 有更新時要呼叫的，請使用async function
         */
        ;

        _proto.AddSpeedNotify = function AddSpeedNotify(key, cb) {
          this.m_notifyCb[key] = cb;
        };

        _proto.NotifyAll = /*#__PURE__*/function () {
          var _NotifyAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var _key, element;

            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    for (_key in this.m_notifyCb) {
                      if (Object.prototype.hasOwnProperty.call(this.m_notifyCb, _key)) {
                        element = this.m_notifyCb[_key];

                        if (element) {
                          element(this.m_avgSpeed);
                        }
                      }
                    }

                  case 1:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function NotifyAll() {
            return _NotifyAll.apply(this, arguments);
          }

          return NotifyAll;
        }();

        _proto.OnExit = function OnExit() {
          this.m_notifyCb = {};
        };

        _createClass(ConnectionSpeed, [{
          key: "AvgSpeed",
          get: function get() {
            return this.m_avgSpeed;
          }
        }]);

        return ConnectionSpeed;
      }());
      ConnectionSpeed._instance = new ConnectionSpeed();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ConnectManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnvironmentConfig.ts', './MsgBox.ts', './Define.ts', './Tools.ts', './ConnectionSpeed.ts', './DataStruct.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, log, EnvironmentConfig, MsgBox, Define, Tools, ConnectionSpeed, ConnectionDataStruct;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      ConnectionSpeed = module.default;
    }, function (module) {
      ConnectionDataStruct = module.ConnectionDataStruct;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6cece1NubVKiYunxO18gQAl", "ConnectManager", undefined);

      var CommandRecord = function CommandRecord(content, callback, hasToken, isProto) {
        this.content = void 0;
        this.callback = void 0;
        this.hasToken = void 0;
        this.isProto = void 0;
        this.content = content;
        this.callback = callback;
        this.hasToken = hasToken;
        this.isProto = isProto;
      };

      var ConnectManager = exports('default', /*#__PURE__*/function () {
        function ConnectManager() {
          this.m_ip = "";
          this.m_token = "";
          this.m_isFirstSendRepeatLogin = true;
          this.m_gameType = "";
          this.m_isProto = false;
          this.m_errorCallback = null;
          this.m_loginFailCallback = null;
          this.m_commands = new Array();
        }

        ConnectManager.GetInstance = function GetInstance() {
          if (!this._instance) {
            this._instance = new ConnectManager();
          }

          return ConnectManager._instance;
        };

        ConnectManager.OnExit = function OnExit() {
          delete this._instance;
          this._instance = null;
        };

        var _proto = ConnectManager.prototype;
        /**
         * 傳送Command
         * @param content 要傳的資料
         * @param callback (ack) => { this.OnRecvAck(ack) }
         */

        _proto.SendCommand = function SendCommand(content, callback, hasToken, isProto) {
          if (hasToken === void 0) {
            hasToken = true;
          }

          if (isProto === void 0) {
            isProto = false;
          }

          var command = new CommandRecord(content, callback, hasToken, isProto); //需要token的需依序傳送，避免token重複

          if (hasToken) {
            this.m_commands.push(command);

            if (this.m_commands.length == 1) {
              this.ExecuteCommand(command);
            }
          } else {
            this.ExecuteCommand(command);
          }
        };

        _proto.ExecuteCommand = function ExecuteCommand(command) {
          switch (command.content.Method) {
            case ConnectionDataStruct.RequestMethod.Get:
              if (command.content.URL != "" && command.content.info != null) {
                this.Get(command);
              }

              break;

            case ConnectionDataStruct.RequestMethod.Post:
              if (command.content.URL != "" && command.content.reqData != null) {
                this.Post(command);
              }

              break;

            default:
              log("Error Request Method!!");
              break;
          }
        };

        _proto.ExecuteNext = function ExecuteNext() {
          this.m_commands.shift();

          if (this.m_commands.length > 0) {
            this.ExecuteCommand(this.m_commands[0]);
          }
        };

        _proto.ErrorHandle = function ErrorHandle(handleType) {
          // GameAppA.ChangeBaseConfig();
          if (this.m_errorCallback) {
            this.m_errorCallback(handleType);
          }

          this.ExecuteNext();
        }
        /**
         * Http的Get
         */
        ;

        _proto.Get = function Get(command) {
          var _this = this;

          var url = command.content.URL + "?";

          for (var item in command.content.info) {
            if (item != "constructor") {
              url += item + "=" + command.content.info[item] + "&";
            }
          }

          if (command.hasToken) {
            url += "token=" + this.m_token;
          }

          var now = Date.now();
          var xhr = new XMLHttpRequest();
          xhr.open("GET", this.m_ip + url, true);
          xhr.timeout = 10000;
          xhr.withCredentials = true;

          xhr.onload = function () {
            if (xhr.readyState == 4) {
              if (xhr.status >= 200 && xhr.status < 300 || xhr.status == 304) {
                var response = xhr.responseText;

                if (response) {
                  var responseJson = JSON.parse(response);

                  if (responseJson.token) {
                    _this.m_token = responseJson.token;
                  }

                  command.callback(responseJson);

                  _this.ExecuteNext();
                } else {
                  command.callback(false);

                  _this.ExecuteNext();
                }
              } else {
                if (command.content.Type === ConnectionDataStruct.ErrorHandleType.Handle) {
                  MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_CONNECT_FAIL, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, Tools.CloseGameTab, Tools.GetErrorCode(Define.ErrorStatus.Game, Define.ErrorStatus.Unknow, xhr.status));
                }

                command.callback(false);

                _this.ExecuteNext();
              }

              ConnectionSpeed.GetInstance().SetSpeedData(Tools.minus(Date.now(), now));
            }
          };

          xhr.ontimeout = function () {
            ConnectionSpeed.GetInstance().SetSpeedData(Tools.minus(Date.now(), now));

            _this.ErrorHandle(command.content.Type);
          };

          xhr.onerror = function () {
            ConnectionSpeed.GetInstance().SetSpeedData(Tools.minus(Date.now(), now));

            _this.ErrorHandle(command.content.Type);
          };

          xhr.send();
        }
        /**
         * Http的Post
         */
        ;

        _proto.Post = function Post(command) {
          var _this2 = this;

          var param = command.content.reqData instanceof Uint8Array ? command.content.reqData : JSON.stringify(command.content.reqData);
          var urlTemp = command.content.URL + "?";

          if (command.content.info) {
            for (var item in command.content.info) {
              if (item != "constructor") {
                urlTemp += item + "=" + command.content.info[item] + "&";
              }
            }
          }

          if (command.hasToken) {
            urlTemp += "token=" + this.m_token;
          }

          var now = Date.now();
          var xhr = new XMLHttpRequest();

          if (this.m_isProto || command.isProto) {
            xhr.responseType = "arraybuffer";
          }

          xhr.open("POST", this.m_ip + urlTemp, true);
          xhr.setRequestHeader("Content-Type", this.m_isProto || command.isProto ? "application/x-protobuf" : "application/json");
          xhr.timeout = 10000;

          xhr.onload = function () {
            if (xhr.readyState == 4) {
              if (xhr.status >= 200 && xhr.status < 300 || xhr.status == 304) {
                if (_this2.m_isProto || command.isProto) {
                  if (xhr.response) {
                    command.callback(xhr.response);

                    _this2.ExecuteNext();

                    return;
                  }
                } else {
                  if (xhr.responseText) {
                    var responseJson = JSON.parse(xhr.responseText);

                    if (responseJson.token) {
                      _this2.m_token = responseJson.token;
                    }

                    command.callback(responseJson);

                    _this2.ExecuteNext();

                    return;
                  }
                }

                command.callback(false);

                _this2.ExecuteNext();
              } else {
                if (command.content.URL === "/account/login") {
                  if (_this2.m_loginFailCallback) {
                    _this2.m_loginFailCallback();
                  }
                } else {
                  if (command.content.Type === ConnectionDataStruct.ErrorHandleType.Handle) {
                    MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_CONNECT_FAIL, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, Tools.CloseGameTab, Tools.GetErrorCode(Define.ErrorStatus.Game, Define.ErrorStatus.Unknow, xhr.status));
                  }
                }

                command.callback(false);

                _this2.ExecuteNext();
              }

              ConnectionSpeed.GetInstance().SetSpeedData(Tools.minus(Date.now(), now));
            }
          };

          xhr.ontimeout = function () {
            ConnectionSpeed.GetInstance().SetSpeedData(Tools.minus(Date.now(), now));

            _this2.ErrorHandle(command.content.Type);
          };

          xhr.onerror = function () {
            ConnectionSpeed.GetInstance().SetSpeedData(Tools.minus(Date.now(), now));

            _this2.ErrorHandle(command.content.Type);
          };

          xhr.send(param); //reqData为字符串形式： "key=value"
        }
        /**
         * 選擇適用內測還是外測，如從外測網址連進網頁則只能使用外測
         */
        ;

        _proto.SelectIp = function SelectIp() {
          var envType = EnvironmentConfig.ENV_TYPE;
          var ip = EnvironmentConfig.GAME_SERVER_URL;

          switch (envType) {
            case Define.EVN.TEST:
              break;

            default:
              ip += this.m_gameType;
              break;
          }

          this.m_ip = ip;
        } // update (dt) {}
        ;

        _createClass(ConnectManager, [{
          key: "Token",
          set: function set(v) {
            this.m_token = v;
          }
        }, {
          key: "GameType",
          set: function set(v) {
            this.m_gameType = v; // GameAppA.SetChangeCb( () => { this.SelectIp(); } );
          }
        }, {
          key: "IsProto",
          set: function set(v) {
            this.m_isProto = v;
          }
        }, {
          key: "ErrorCb",
          set: function set(v) {
            this.m_errorCallback = v;
          }
        }, {
          key: "LoginFailCallback",
          set: function set(v) {
            this.m_loginFailCallback = v;
          }
        }]);

        return ConnectManager;
      }());
      ConnectManager._instance = new ConnectManager();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CurrcncyItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Tools.ts', './SoundManager.ts', './Define.ts', './CurrencyChange.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Label, Button, Node, tween, Vec3, Component, Tools, SoundManager, Define, CurrencyChange;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Button = module.Button;
      Node = module.Node;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      CurrencyChange = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "8cdd5ikCNtNZKQfT19e1A2u", "CurrcncyItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SCALE_TIME = 0.05;
      var CurrcncyItem = exports('default', (_dec = property(Sprite), _dec2 = property(Label), _dec3 = property(Button), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CurrcncyItem, _Component);

        function CurrcncyItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_coinSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_money", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_btn", _descriptor3, _assertThisInitialized(_this));

          _this.m_btncallback = void 0;
          _this.m_id = void 0;
          return _this;
        }

        var _proto = CurrcncyItem.prototype; // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          var _this2 = this;

          this.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (CurrencyChange.CurrentTouchName == null && _this2.m_btn.interactable) {
              CurrencyChange.CurrentTouchName = event.target.name;
              tween(_this2.node).to(SCALE_TIME, {
                scale: new Vec3(0.9, 0.9, 1)
              }).start();
            } else {
              if (event.target && event.target.active == false) {
                CurrencyChange.CurrentTouchName = event.target.name;
              }
            }
          });
          this.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            tween(_this2.node).to(SCALE_TIME, {
              scale: new Vec3(1, 1, 1)
            }).start();

            if (CurrencyChange.CurrentTouchName == event.target.name) {
              CurrencyChange.CurrentTouchName = null;
            }
          });
          this.node.on(Node.EventType.TOUCH_END, function (event) {
            tween(_this2.node).to(SCALE_TIME, {
              scale: new Vec3(1, 1, 1)
            }).start();

            if (CurrencyChange.CurrentTouchName != event.target.name) {
              return;
            }

            CurrencyChange.CurrentTouchName = null;

            if (_this2.m_btn.interactable) {
              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);

              if (_this2.m_btncallback) {
                _this2.m_btncallback(_this2.m_id);
              }
            }
          });
        } // update (dt) {}
        ;

        _proto.setInfo = function setInfo(info, resource, clickCb) {
          var coin = info.coin;
          var name = info.name; //有m單位就還原

          if (name.search("m") == 0) {
            coin /= 1000;
            name = name.replace("m", "");
          }

          this.m_money.string = Tools.FormatNumberThousands(Tools.strip(coin), Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT) + " " + name;
          this.node.name = name;
          this.m_coinSprite.spriteFrame = resource;
          this.m_id = info.id;
          this.m_btncallback = clickCb;
        };

        return CurrcncyItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_coinSprite", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_money", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_btn", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CurrencyChange.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CurrcncyItem.ts', './MsgBox.ts', './Define.ts', './Tools.ts', './LocaleStringManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, ScrollView, Prefab, SpriteFrame, error, UITransform, instantiate, Animation, Component, CurrcncyItem, MsgBox, Define, Tools, LocaleStringManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      ScrollView = module.ScrollView;
      Prefab = module.Prefab;
      SpriteFrame = module.SpriteFrame;
      error = module.error;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      CurrcncyItem = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3;

      cclegacy._RF.push({}, "e42b6vaqdpDHLunjDqWkzLL", "CurrencyChange", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CurrencyChange = exports('default', (_dec = property(Label), _dec2 = property(CurrcncyItem), _dec3 = property(ScrollView), _dec4 = property(Prefab), ccclass(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CurrencyChange, _Component);

        function CurrencyChange() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_titleLabel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_nowItem", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scrollView", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_itemPrefab", _descriptor4, _assertThisInitialized(_this));

          _this.m_bottombar = void 0;
          _this.m_itemList = void 0;
          _this.coinTextures = {};
          return _this;
        }

        CurrencyChange.OnExit = function OnExit() {
          this.CurrentTouchName = null;
        };

        var _proto = CurrencyChange.prototype; // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {} // update (dt) {}
        ;

        _proto.Init = function Init(bottombar, wallet) {
          var _this2 = this;

          this.m_bottombar = bottombar;
          this.m_titleLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.CHANGE_CURRENCY_TITLE);
          this.m_bottombar.Wallet.List.forEach(function (wallet) {
            //把小單位去掉才會讀到正確圖
            var resName = wallet.name.replace("m", "");
            Define.CommonBundle.load(Tools.GetFilePath("Astt/%s/multiCurrency/coin/" + resName), SpriteFrame, function (err, res) {
              if (err) {
                error(err);
                return;
              }

              _this2.coinTextures[wallet.name] = res;
            });
          });
        };

        _proto.Show = function Show(isLandscape) {
          this.RefreshList();
          this.node.active = true;
          this.OnRotation(isLandscape, undefined);
        };

        _proto.Close = function Close() {
          this.node.active = false;
        };

        _proto.RefreshList = function RefreshList() {
          var _this3 = this;

          this.m_scrollView.content.getComponent(UITransform).width = this.m_scrollView.node.getComponent(UITransform).width;
          this.m_scrollView.content.removeAllChildren();
          var width = 0;
          var height = 0;
          this.m_itemList = this.m_bottombar.Wallet.List;
          var nowWalletIndex = 0;

          for (var i = 0; i < this.m_itemList.length; i++) {
            if (this.m_itemList[i].id == this.m_bottombar.Wallet.NowWalletId) {
              nowWalletIndex = i;
              break;
            }
          }

          var nowWallet = this.m_itemList.splice(nowWalletIndex, 1)[0];
          this.m_nowItem.setInfo(nowWallet, this.coinTextures[nowWallet.name], function (id) {
            _this3.ChangeWallet(id);
          });
          this.m_itemList.forEach(function (value) {
            var node = instantiate(_this3.m_itemPrefab);
            width = node.getComponent(UITransform).width;
            height = node.getComponent(UITransform).height;

            _this3.m_scrollView.content.addChild(node);

            node.getComponent(CurrcncyItem).setInfo(value, _this3.coinTextures[value.name], function (id) {
              _this3.ChangeWallet(id);
            });
          });
          this.m_scrollView.content.getComponent(UITransform).height = Math.ceil(this.m_itemList.length / Math.floor(this.m_scrollView.content.getComponent(UITransform).width / width)) * height;
        };

        _proto.ChangeWallet = function ChangeWallet(id) {
          this.m_bottombar.Wallet.ChangeNowCurrency(id);
          MsgBox.getInstance().ShowMessageBox(Tools.StringFormat(LocaleStringManager.GetInstance().GetString(Define.StringKey.CHANGE_CURRENCY), this.m_bottombar.Wallet.CurencyName)); // cc.log(this.m_bottombar.Wallet.bet)

          this.m_bottombar.SetBetList(undefined, undefined, true);
          this.m_bottombar.SetChips(this.m_bottombar.Wallet.RawCoin);
          this.m_bottombar.SetWinValue(0);
          this.Close();
        };

        _proto.OnRotation = function OnRotation(isLandscape, isSmall) {
          if (isLandscape) {
            this.getComponent(Animation).play("Info_L");
          } else {
            this.getComponent(Animation).play("Info_S");
          }
        };

        return CurrencyChange;
      }(Component), _class3.CurrentTouchName = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_titleLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_nowItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_scrollView", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_itemPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DailyMission.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DailyMissionItem.ts', './LocaleStringManager.ts', './Define.ts', './SoundManager.ts', './Tools.ts', './NotificationManager.ts', './BottombarManager.ts', './LocalStorageManager.ts', './AppManager.ts', './MissionListView.ts', './GameLsitView.ts', './RedDiamondGet.ts', './GetRedLetter.ts', './GameIconComponent.ts', './DailyMissionManager.ts', './LevelManager.ts', './RookieHintManager.ts', './MissionBtn.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, _createClass, cclegacy, _decorator, Node, Label, ScrollView, Prefab, Button, Sprite, v3, SpriteAtlas, UITransform, instantiate, Layout, Size, log, Animation, find, tween, Component, DailyMissionItem, MissionDetailStatus, LocaleStringManager, Define, SoundManager, Tools, NotificationManager, BottombarManager, LocalStorageManager, AppManager, MissionListView, GameLsitView, RedDiamondGet, GetRedLetter, GameIconComponent, missionManager, LevelManager, HintLevel, MissionBtn;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      ScrollView = module.ScrollView;
      Prefab = module.Prefab;
      Button = module.Button;
      Sprite = module.Sprite;
      v3 = module.v3;
      SpriteAtlas = module.SpriteAtlas;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      Layout = module.Layout;
      Size = module.Size;
      log = module.log;
      Animation = module.Animation;
      find = module.find;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      DailyMissionItem = module.default;
      MissionDetailStatus = module.MissionDetailStatus;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      NotificationManager = module.default;
    }, function (module) {
      BottombarManager = module.default;
    }, function (module) {
      LocalStorageManager = module.default;
    }, function (module) {
      AppManager = module.default;
    }, function (module) {
      MissionListView = module.default;
    }, function (module) {
      GameLsitView = module.default;
    }, function (module) {
      RedDiamondGet = module.default;
    }, function (module) {
      GetRedLetter = module.default;
    }, function (module) {
      GameIconComponent = module.default;
    }, function (module) {
      missionManager = module.missionManager;
    }, function (module) {
      LevelManager = module.default;
    }, function (module) {
      HintLevel = module.HintLevel;
    }, function (module) {
      MissionBtn = module.default;
    }],
    execute: function () {
      exports('MissionType', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21;

      cclegacy._RF.push({}, "225aexmh9RCCbti5PKqZfXE", "DailyMission", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var retrySecs = [60, 120, 120];
      var refreshMissionTime = 120;
      var refreshTimeText = "07:00";
      var LobbyMallCoinID = exports('LobbyMallCoinID', 2000);
      var GameCoinID = exports('GameCoinID', 6000);
      var TaDaBuffID = exports('TaDaBuffID', 7000);
      var CollectCardID = exports('CollectCardID', 8000);
      var GiftID_MINI = exports('GiftID_MINI', 900000);
      var GiftID_MAX = exports('GiftID_MAX', 999999);
      var RedDiamondGetPrefab = "Astt/%s/RedDiamond/Prefab/RedDiamond_Get";
      var RedDiamondLetterPrefab = "Astt/%s/RedDiamond/Prefab/RedDiamond_Letter";
      var MissionTypeNums = exports('MissionTypeNums', 2);
      /** proto.missionProto.IItemCard */
      // export interface MissionItemData
      // {
      //     WinType: number;
      //     GameID: number,
      //     Game: string,
      //     GameName: string,
      //     ItemName: string,
      //     Icon: number,
      //     ItemDesc: string,
      //     Bet: number,
      //     Star: number,
      // }

      /** proto.missionProto.IGiftPack */
      // export interface MissionGiftData
      // {
      //     List: GiftPack[],
      // }

      /** proto.missionProto.IGift */
      // export interface GiftPack
      // {
      //     ItemID: number,
      //     ItemCount: number,
      //     ExtendId: number,
      // }

      /** 事件type*/

      var EventType = exports('EventType', {
        Open: 1,
        // 打開頁面
        Close: 2,
        // 關閉頁面
        Active: 3,
        // 任務開始
        Inactive: 4 // 任務結束

      });
      var TabName = ["DailyMission_TheGame", "DailyMission_OtherGame", "DailyMission_Mission"];
      var DailyMission = exports('default', (_dec = property([Node]), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property([Label]), _dec5 = property(ScrollView), _dec6 = property(Prefab), _dec7 = property(Label), _dec8 = property([Button]), _dec9 = property(Node), _dec10 = property(Label), _dec11 = property({
        type: Node,
        tooltip: "介面本體"
      }), _dec12 = property({
        type: Prefab,
        tooltip: "遊戲Icon"
      }), _dec13 = property({
        type: Node,
        tooltip: "頁簽"
      }), _dec14 = property({
        type: Node,
        tooltip: "頁簽紅點"
      }), _dec15 = property({
        type: Node,
        tooltip: "亮起的頁簽"
      }), _dec16 = property({
        type: Prefab,
        tooltip: "任務項目畫面"
      }), _dec17 = property({
        type: Prefab,
        tooltip: "遊戲項目畫面"
      }), _dec18 = property({
        type: Node,
        tooltip: "放置頁面"
      }), _dec19 = property({
        type: Sprite,
        tooltip: "標題"
      }), _dec20 = property({
        type: Sprite,
        tooltip: "頁簽標題-暗"
      }), _dec21 = property({
        type: Sprite,
        tooltip: "頁簽標題-亮"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DailyMission, _Component);

        function DailyMission() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "TitleText", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "PageNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Mask", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "RefreshText", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ScrollView", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ItemPrefab", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "PromoteText", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "TypeButtons", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "FutureMissionNode", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "FutureMissionTexts", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_mainNode", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_gameIconPrefab", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tabNodes", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_redPointNodes", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lightPageNodes", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_missionListPagePrefab", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_gameListPagePrefab", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentNode", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_titleSprite", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_darkTabTitleSprites", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lightTabTitleSprites", _descriptor21, _assertThisInitialized(_this));

          _this.isShow = false;
          _this.actionStartTime = void 0;
          _this.actionEndTime = void 0;
          _this.missionListUI = [];
          _this.icon = void 0;
          _this.iconTime = void 0;
          _this.crossDayTime = 0;
          _this.getNowMission = void 0;
          _this.m_isLandscape = void 0;
          _this.running = false;
          _this.lock = false;
          _this.curCompNum = 0;
          _this.curLockNum = 0;
          _this.hasRefreshMissionList = true;
          _this.retryTimes = 0;
          _this.m_controller = void 0;
          _this.m_refreshTimer = 0;
          _this.m_getRdAniPrefab = void 0;
          _this.m_getRdLetterAniPrefab = void 0;
          _this.currentGameList = {};
          _this.m_thisGameView = null;
          _this.m_gameListView = null;
          _this.m_readList = {};
          _this.readKeyName = "";
          _this.m_missionAtlas = void 0;
          _this.defaultSelectMissionType = void 0;
          _this.m_missionBtn = void 0;
          _this.m_needShowComplete = false;
          _this.m_isClose = false;
          _this._eventCb = [];
          _this._dt = 0;
          return _this;
        }

        var _proto = DailyMission.prototype;

        _proto.callEventCb = function callEventCb(event) {
          this._eventCb.forEach(function (f) {
            f(event);
          });
        };

        _proto.onLoad = function onLoad() {
          missionManager.OnLoad(this);
        };

        _proto.onDestroy = function onDestroy() {
          missionManager.OnDestroy();
        };

        _proto.start = function start() {
          if (this.RefreshText[0]) {
            this.RefreshText[0].node.active = true; // this.PromoteText.string = LocaleStringManager.GetInstance().GetString( Define.StringKey.DAILY_PROMOTE );

            if (!LocaleStringManager.IsChinese()) {
              this.RefreshText[0].node.setScale(v3(0.75, this.RefreshText[0].node.scale.y, 1));
            }

            Tools.SetFont(this.RefreshText[0]);
          }

          if (this.FutureMissionTexts[0]) {
            Tools.SetFont(this.FutureMissionTexts[0]);
          }
        };

        _proto.update = function update(dt) {
          // if ( this.isShow )
          // {
          //     //scroll view draw call節省
          //     let view = this.ScrollView.getContentPosition();
          //     if ( this.missionList.length > 0 )
          //     {
          //         // 起始位置
          //         let start = Math.floor( view.y / this.missionList[ 0 ].height );
          //         start = ( start < 0 ) ? 0 : start;
          //         // 結束位置
          //         let end = ( start + scrollShowMax > this.missionList.length - 1 ) ? this.missionList.length - 1 : start + scrollShowMax;
          //         // 範圍內有就顯示
          //         for ( let i = start; i <= end; ++i )
          //         {
          //             if ( this.missionList[ i ].dataNode )
          //             {
          //                 this.missionList[ i ].dataNode.active = true;
          //             }
          //         }
          //         // 超過顯示範圍的就隱藏
          //         let before = start - 1;
          //         let next = end + 1;
          //         if ( before > 0 && this.missionList[ before ].dataNode )
          //         {
          //             this.missionList[ before ].dataNode.active = false;
          //         }
          //         if ( next < this.missionList.length && this.missionList[ next ].dataNode )
          //         {
          //             this.missionList[ next ].dataNode.active = false;
          //         }
          //     }
          // }
          if (this.m_isClose) {
            return;
          }

          this._dt += dt;
          this._dt = this._dt > 1 ? 0 : this._dt;

          if (this._dt == 0) {
            return;
          } //活動時間倒數


          var timeString = "";

          if (this.actionEndTime) {
            this._dt = 0;
            var now = new Date();
            var diff = this.actionEndTime.getTime() - now.getTime();
            diff = diff < 0 ? 0 : diff;
            var day = Math.floor(diff / (1000 * 60 * 60 * 24));
            var hour = Math.floor(diff / (1000 * 60 * 60)) - day * 24;
            var min = Math.floor(diff / (1000 * 60)) - (day * 24 + hour) * 60;

            if (this.iconTime) {
              this.iconTime.node.setScale(v3(1, this.iconTime.node.scale.y, 1));
            }

            if (diff == 0) {
              // this.iconTime.string = LocaleStringManager.GetInstance().GetString( Define.StringKey.RANK_END );
              timeString = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_END);
              this.running = false;
            } else if (day >= 1) {
              // this.iconTime.string = `${day}D ${hour}H`;
              timeString = day + "D " + hour + "H";
            } else if (hour >= 1 || min >= 1) {
              // this.iconTime.string = `${hour}H ${min}m`;
              timeString = hour + "H " + min + "m";
            } else {
              // this.iconTime.string = LocaleStringManager.GetInstance().GetString( Define.StringKey.RANK_LESS_X_MIN );
              timeString = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_LESS_X_MIN);

              if (!LocaleStringManager.IsChinese() && this.iconTime) {
                this.iconTime.node.setScale(v3(0.7, this.iconTime.node.scale.y, 1));
              }
            }

            this.m_refreshTimer += dt;

            if (this.m_refreshTimer > refreshMissionTime) {
              this.m_refreshTimer = 0;
              this.checkAndRefreshMissionList();
            }
          } else {
            // this.iconTime.string = LocaleStringManager.GetInstance().GetString( Define.StringKey.DAILY_COMMING_SOON );
            timeString = LocaleStringManager.GetInstance().GetString(Define.StringKey.DAILY_COMMING_SOON);

            if (!LocaleStringManager.IsChinese() && this.iconTime) {
              this.iconTime.node.setScale(v3(0.7, this.iconTime.node.scale.y, 1));
            }
          }

          if (this.iconTime) {
            this.iconTime.string = timeString;
          }

          if (this.m_thisGameView) {
            this.m_thisGameView.SetTimeTxt(timeString);
          }

          if (this.isShow) ;else {
            //關起來的時候檢查有沒有跨日
            if (this.crossDayTime != 0 && new Date().getTime() > this.crossDayTime) {
              this.crossDayTime = 0;
              this.updateMissionInfo();
            }
          }
        };

        _proto.init = /*#__PURE__*/function () {
          var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(controller, getNowMission, icon, timeText, isLandscape, callback) {
            var _this2 = this;

            var missionNode, gameNode;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return Promise.all([this.loadAtlasFile(), new Promise(function (resolve) {
                      var checkItemInfo = function checkItemInfo() {
                        if (controller.IsBackpackStringLoaded()) {
                          _this2.unschedule(checkItemInfo);

                          resolve();
                        }
                      };

                      _this2.schedule(checkItemInfo, 1);
                    })]);

                  case 2:
                    this.getNowMission = getNowMission;
                    this.icon = icon;
                    this.iconTime = timeText;
                    Tools.SetFont(this.iconTime);
                    this.m_missionBtn = icon.Pic.getComponent(MissionBtn);
                    this.m_controller = controller;
                    this.readKeyName = Define.AID + ":DailyMissionReadList";
                    this.m_readList = LocalStorageManager.GetObject(this.readKeyName);

                    if (this.m_readList == null) {
                      this.m_readList = {};
                    } // if ( Tools.Line === Define.LineSetting.americas ||
                    //     Tools.Line === Define.LineSetting.americas_str )
                    // {
                    //:


                    this.m_mainNode.active = false;
                    missionNode = instantiate(this.m_missionListPagePrefab);
                    this.m_contentNode.addChild(missionNode);
                    this.m_thisGameView = missionNode.getComponent(MissionListView);
                    this.m_thisGameView.Init(this.m_controller, this, this.m_missionAtlas, function () {
                      _this2.showDesc();
                    });
                    gameNode = instantiate(this.m_gameListPagePrefab);
                    this.m_contentNode.addChild(gameNode);
                    gameNode.active = false;
                    this.m_gameListView = gameNode.getComponent(GameLsitView);

                    if (this.m_thisGameView) {
                      this.m_thisGameView.SetRefreshTxt();
                    } // }


                    this.OnRotation(this.m_controller.IsLandscape);

                    if (Tools.IsTadaCasino && LevelManager.GetInstance().LevelInfo.level < HintLevel.Mission) {
                      this.lock = true;
                    }

                    this.updateMissionInfo(true);
                    this.m_controller.SetTrialEndCb(function () {
                      _this2.updateMissionInfo();
                    });

                    if (AppManager.LobbyData) {
                      Define.CommonBundle.load(Tools.GetFilePath(RedDiamondGetPrefab), Prefab, function (err, prefab) {
                        if (err) {
                          return;
                        }

                        _this2.m_getRdAniPrefab = prefab;
                      });
                      Define.CommonBundle.load(Tools.GetFilePathApiId(RedDiamondLetterPrefab), Prefab, function (err, prefab) {
                        if (err) {
                          return;
                        }

                        _this2.m_getRdLetterAniPrefab = prefab;
                      });
                    }

                    if (callback) {
                      callback();
                    }

                  case 27:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function init(_x, _x2, _x3, _x4, _x5, _x6) {
            return _init.apply(this, arguments);
          }

          return init;
        }() //選擇頁簽
        ;

        _proto.OnSelectTab = function OnSelectTab(event, eventData) {
          var idx = Number(eventData);

          if (!isNaN(idx)) {
            SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);

            for (var i = 0; i < this.m_lightPageNodes.length; i++) {
              this.m_lightPageNodes[i].active = idx == i;
            }

            if (idx === 0) // 2024/3/8 移除部分紅點(只剩一顆)
              {
                this.m_redPointNodes[idx].active = false;
              }

            this.ClickMissionPage(null, idx.toString());
          }
        } // 載入合圖
        ;

        _proto.loadAtlasFile = function loadAtlasFile() {
          var _this3 = this;

          return new Promise(function (resolve) {
            var filePath = "/framework/dailyMission/dailymission";

            if (Tools.isIndia) {
              filePath = "/framework_india/dailyMission/dailymission";
            } else if (Tools.isIndia2) {
              filePath = "/dailymission_india2";
            }

            if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
              filePath = "/framework_americas/dailyMission/dailymission";
            }

            var url = "AsttText/" + LocaleStringManager.CurrLang + filePath; // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {
            //     url = "AsttText/" + LocaleStringManager.CurrLang + "/framework_americas/dailyMission/dailymission";
            // }

            Define.OtherBundle.load(url, SpriteAtlas, function (err, res) {
              if (err) {
                console.error(err.message || err);
                resolve();
                return;
              }

              _this3.m_missionAtlas = res;

              _this3.SetTxt();

              resolve();
            });
          });
        };

        _proto.CloseIcon = function CloseIcon() {
          if (this.icon) {
            this.icon.Pic.active = false;
            this.icon.Ani.node.active = false;
            this.icon.Label.active = false;
          }
        };

        _proto.updateMissionInfo = function updateMissionInfo(isFirst) {
          var _this4 = this;

          if (isFirst === void 0) {
            isFirst = false;
          }

          this.getNowMission(function (info) {
            /**跨日時間(幾點) */
            var crossDayHour = info.OverDay;
            var crossDayMin = info.OverDayMin;
            var nowTime = Date.now();
            _this4.actionStartTime = new Date(Number(info.StartTimestamp) * 1000);
            _this4.actionEndTime = new Date(Number(info.EndTimestamp) * 1000);

            if ((!info.EndTimestamp || Number(info.EndTimestamp) <= 0 || info.EndTimestamp == "") && _this4.retryTimes >= retrySecs.length) {
              _this4.m_isClose = true;
            }

            refreshTimeText = _this4.GetRefreshTime();

            if (Tools.isIndia || Tools.isIndia2) {
              refreshTimeText = "05:30";
            }

            if (_this4.RefreshText[0]) {
              _this4.RefreshText[0].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.DAILY_REFRESH).replace("{time}", "" + refreshTimeText);
            }

            _this4.running = _this4.actionStartTime.getTime() < nowTime && nowTime < _this4.actionEndTime.getTime() && info.DailyMissionList.length > 0;
            _this4.icon.Pic.getComponent(Button).interactable = !_this4.lock;

            if (!_this4.running) {
              var updateTime = new Date(_this4.actionEndTime); //計算下次更新時間

              if (_this4.retryTimes < retrySecs.length) {
                _this4.crossDayTime = updateTime.getTime() + retrySecs[_this4.retryTimes] * 1000;
                _this4.retryTimes++;
              } else {
                if (updateTime <= new Date()) {
                  updateTime.setDate(updateTime.getDate() + 1);
                }

                _this4.crossDayTime = updateTime.getTime() + Math.random() * 5000; // 隨機5秒誤差避免client都同時跟server要

                _this4.retryTimes = 0;
                _this4.icon.Pic.active = false;
                _this4.icon.Ani.node.active = false;
                _this4.icon.Label.active = false;

                _this4.callEventCb(EventType.Inactive);
              }

              return;
            }

            if (_this4.m_controller && !_this4.m_controller.IsInTrial) {
              _this4.icon.Pic.active = true;
              _this4.icon.Ani.node.active = true; //  Tools.IsTada要改Tools.IsTadaCasino

              _this4.icon.Label.active = Tools.IsTadaCasino ? false : true;

              _this4.callEventCb(EventType.Active);
            }

            _this4.curCompNum = 0; // let startTime = new Date( this.actionStartTime.getTime() );
            // if ( startTime.getHours() != crossDayHour || startTime.getMinutes() != crossDayMin || startTime.getSeconds() != 0 || startTime.getMilliseconds() != 0 )
            // {
            //     startTime.setHours( crossDayHour, crossDayMin, 0, 0 );
            // }
            // // 如果不是清晨12點結束,則視為隔日清晨12點結束
            // let endTime = new Date( this.actionEndTime.getTime() );
            // if ( endTime.getHours() != crossDayHour || endTime.getMinutes() != crossDayMin || endTime.getSeconds() != 0 || endTime.getMilliseconds() != 0 )
            // {
            //     endTime.setDate( endTime.getDate() + 1 )
            //     endTime.setHours( crossDayHour, crossDayMin, 0, 0 );
            // }
            // //計算第幾日任務
            // let currentDate = new Date( info.CurrentDate );
            // currentDate.setHours( crossDayHour );
            // currentDate.setMinutes( crossDayMin );
            // let today = Math.ceil( ( currentDate.getTime() - startTime.getTime() ) / 86400000 ) + 1
            // let totalDays = Math.ceil( ( endTime.getTime() - startTime.getTime() ) / 86400000 )
            // log( "today", today )
            // log( "totalDays", totalDays )
            // this.dateDisplay = []
            // for ( let i = 0; i < this.Dates.length; i++ )
            // {
            //     let showDay = today - 1 + i;
            //     let showDate = new Date( currentDate.getTime() + ( i - 1 ) * 86400000 )
            //     this.Dates[ i ].getChildByName( 'label_date' ).getComponent( Label ).string = `${showDate.getMonth() + 1}/${showDate.getDate()}`
            //     this.dateDisplay.push( !( showDay < 1 || showDay > totalDays ) );
            // }

            _this4.crossDayTime = _this4.actionStartTime.getTime() + 86400000 + Math.random() * 5000; // 隨機5秒誤差避免client都同時跟server要

            if (_this4.m_isClose) {
              _this4.crossDayTime = 999999999;
            }

            if (_this4.m_readList == null || _this4.m_readList.updateTime == null || _this4.m_readList.updateTime < _this4.actionStartTime.getTime()) {
              // 已讀時間不是當日的,直接清除
              _this4.m_readList = {
                list: [],
                updateTime: new Date().getTime()
              };
              _this4.m_readList.list[2] = {
                compNum: 0,
                lockNum: 0,
                total: 0,
                isRead: false
              };
            }

            if (_this4.m_readList.list[2].compNum < _this4.actionStartTime.getTime()) {
              _this4.m_readList.list[2].isRead = false;

              if (_this4.TypeButtons[2]) {
                _this4.TypeButtons[2].node.getChildByName("red_point").active = true;
              } // if ( this.m_redPointNodes[ 2 ] )
              // {
              //     this.m_redPointNodes[ 2 ].active = true;
              // }

            } // if ( Tools.UsingLogoSpriteFrame() )
            // {
            //     this.TitleText[ 2 ].active = true;
            //     this.TitleText[ 2 ].getChildByName( "Title" ).getComponent( Label ).string = info.Desc;
            // }
            // else if ( LocaleStringManager.IsChinese() )
            // {
            //     this.TitleText[ 0 ].active = true;
            //     this.TitleText[ 0 ].getComponent( Label ).string = info.Desc;
            // }
            // else
            // {
            //     this.TitleText[ 1 ].active = true;
            //     this.TitleText[ 1 ].getComponent( Label ).string = info.Desc;
            // }


            if (_this4.TitleText[0]) {
              _this4.TitleText[0].active = true;
              _this4.TitleText[0].getComponent(Sprite).spriteFrame = _this4.m_missionAtlas.getSpriteFrame("txt_title_task");
            } // this.DateText.string = `${this.actionStartTime.getFullYear()}/${this.actionStartTime.getMonth() + 1}/${this.actionStartTime.getDate()}~${this.actionEndTime.getFullYear()}/${this.actionEndTime.getMonth() + 1}/${this.actionEndTime.getDate()}`


            if (_this4.m_thisGameView) {
              _this4.m_thisGameView.UpdateMissionList(info.DailyMissionList, info.ItemInfo, info.GiftInfo, isFirst);
            } else {
              _this4.updateMissionList(info.DailyMissionList, info.ItemInfo, info.GiftInfo);
            }

            if (info.NextGameIDList == null) {
              info.NextGameIDList = [];
            }

            _this4.updateFutureGameNode(info.NextGameIDList.sort(function (a, b) {
              return a - b;
            }));

            _this4.updateMissionTypes();

            NotificationManager.GetInstance().UpdateMissionNotify(info);
          });
        };

        _proto.updateMissionTypes = function updateMissionTypes() {
          var displayCounts = 0;
          var defaultSelect = -1;

          if (this.TypeButtons.length > 0) {
            this.TypeButtons.forEach(function (btn, idx) {
              if (btn.node.active == true) {
                defaultSelect = defaultSelect == -1 ? idx : defaultSelect;
                displayCounts++;
              }
            });
            var avgWidth = this.TypeButtons[0].node.parent.getComponent(UITransform).width / displayCounts;
            this.TypeButtons.forEach(function (btn) {
              btn.node.getComponent(UITransform).width = avgWidth;
            });
          } else {
            this.m_tabNodes.forEach(function (node, idx) {
              if (node.active == true) {
                defaultSelect = defaultSelect == -1 ? idx : defaultSelect;
                displayCounts++;
              }
            });
          }

          if (this.defaultSelectMissionType == undefined) {
            this.defaultSelectMissionType = defaultSelect;
          }

          if (this.isShow) {
            // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     this.ClickMissionPage( null, this.defaultSelectMissionType.toString() );
            // }
            // else
            // {
            this.OnSelectTab(null, this.defaultSelectMissionType.toString()); // }
          }
        };

        _proto.updateMissionList = function updateMissionList(list, itemInfoList, giftInfoList) {
          var _this5 = this; // console.error( 'updateMissionList', list, itemInfoList, giftInfoList )
          // 把已完成的任務往後排


          var spList = [];
          var compList = [];
          var lockList = [];
          var runList = [];
          list.forEach(function (info) {
            if (info.CurrentCount >= info.TotalCount) {
              compList.push(info);
            } else if (info.Lock) {
              lockList.push(info);
            } else if (info.Vip == 100) {
              spList.push(info);
            } else {
              runList.push(info);
            }
          });
          runList.sort(function (a, b) {
            if (a.GameID.toString() == Define.NOW_GAME_ID && b.GameID.toString() != Define.NOW_GAME_ID) {
              return -1;
            } else if (b.GameID.toString() == Define.NOW_GAME_ID && a.GameID.toString() != Define.NOW_GAME_ID) {
              return 1;
            }

            var progressA = a.CurrentCount / a.TotalCount;
            var progressB = b.CurrentCount / b.TotalCount;
            return progressB - progressA;
          });
          list = spList.concat(runList, lockList, compList); // this.missionList = list;

          var itemHeight = 0;
          var missionNums = [];

          for (var i = 0; i < MissionTypeNums; i++) {
            missionNums.push({
              comp: 0,
              lock: 0,
              total: 0
            });
          }

          var compNum = 0; //任務完成次數

          var lockNum = 0; //未開放任務數

          var gameList = {};
          list.forEach(function (value, i) {
            var item;

            if (!_this5.missionListUI[i]) {
              item = instantiate(_this5.ItemPrefab);
              _this5.missionListUI[i] = item; // item.y = -1 * ((i + 0.5) * item.height + spaceY * i)

              item.getComponent(DailyMissionItem).setRes(_this5.m_missionAtlas);

              _this5.ScrollView.content.addChild(item);
            } else {
              item = _this5.missionListUI[i];
            }

            Tools.SetZIndex(item, i); // let rewardInfo: ItemInfoData | MissionCoinInfo;

            var rewardInfo;
            var giftPack = []; //  Tools.IsTada要改Tools.IsTadaCasino

            if (Tools.IsTadaCasino) {
              giftPack = DailyMission.toGiftPackData(value, giftInfoList, itemInfoList);
            }

            if (value.ItemID == LobbyMallCoinID) {
              rewardInfo = value;
            } else {
              rewardInfo = DailyMission.toItemInfoData(itemInfoList[value.ItemID]);
            }

            var missionDetailStatus;

            if (giftPack.length > 0) {
              missionDetailStatus = item.getComponent(DailyMissionItem).updateDataNew(value, giftPack, _this5.m_controller, i);
            } else {
              missionDetailStatus = item.getComponent(DailyMissionItem).updateData(value, rewardInfo, _this5.m_controller);
            }

            switch (missionDetailStatus) {
              case MissionDetailStatus.Complete:
                missionNums[value.Show - 1].comp++;
                compNum++;
                break;

              case MissionDetailStatus.Lock:
                missionNums[value.Show - 1].lock++;
                lockNum++;
                break;
            }

            missionNums[value.Show - 1].total++;
            itemHeight = item.getComponent(UITransform).height;

            if (value.GameID.toString() == Define.NOW_GAME_ID) {
              // 有自己的遊戲任務就預設顯示遊戲類
              _this5.defaultSelectMissionType = 1;
            }

            if (value.Show == 2 && value.GameID) {
              gameList[value.GameID.toString()] = true;
            }
          });
          this.currentGameList = gameList;
          var spaceY = this.ScrollView.content.getComponent(Layout).spacingY;
          this.ScrollView.content.getComponent(UITransform).height = list.length * itemHeight + (list.length - 1) * spaceY;
          this.curLockNum = 0;
          this.curCompNum = 0;

          for (var _i = 0; _i < MissionTypeNums; _i++) {
            var readInfo = this.m_readList.list[_i];

            if (readInfo == null) {
              readInfo = {
                compNum: 0,
                lockNum: 0,
                total: 0,
                isRead: false
              };
              this.m_readList.list[_i] = readInfo;
            }

            this.curCompNum += readInfo.compNum;
            this.curLockNum += readInfo.lockNum;
            var missionNum = missionNums[_i];

            if (readInfo.compNum != missionNum.comp || readInfo.lockNum != missionNum.lock || readInfo.total != missionNum.total) {
              readInfo.isRead = false;
              this.TypeButtons[_i].node.getChildByName("red_point").active = true;
            }

            readInfo.compNum = missionNum.comp;
            readInfo.lockNum = missionNum.lock;
            readInfo.total = missionNum.total;
            this.TypeButtons[_i].node.active = !(missionNum.total == 0);
          }

          this.icon.Mode.active = false;
          var hasPlayNewMission = false;

          if (lockNum != this.curLockNum) {
            var animState = this.icon.Ani.getState("ButtonFX01_New");

            if (animState && !animState.isPlaying) {
              this.icon.Mode.active = true;
              this.icon.Ani.stop();
              this.icon.Ani.play("ButtonFX01_New");
            }

            hasPlayNewMission = true;
          }

          this.curLockNum = lockNum;

          if (compNum > this.curCompNum && hasPlayNewMission == false) {
            var _animState = this.icon.Ani.getState("ButtonFX01_End");

            if (_animState && !_animState.isPlaying) {
              this.icon.Mode.active = true;
              this.icon.Ani.stop();
              this.icon.Ani.play("ButtonFX01_End");
            }
          }

          this.curCompNum = compNum; //多餘的prefab清掉

          for (var _i2 = list.length; _i2 < this.missionListUI.length; _i2++) {
            if (this.missionListUI[_i2]) {
              this.missionListUI[_i2].destroy();

              this.missionListUI[_i2] = null;
            }
          }

          this.ScrollView.scrollToTop();
        };

        _proto.ClickMissionPage = function ClickMissionPage(touch, type) {
          var _this6 = this;

          if (touch != null) {
            SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
          }

          var clickType = parseInt(type);

          if (this.m_thisGameView) {
            this.m_mainNode.active = true;

            switch (clickType) {
              case 0:
              case 1:
                this.switchMissionList(clickType);
                this.m_thisGameView.node.active = true;
                this.m_gameListView.node.active = false;
                break;

              case 2:
                this.m_gameListView.node.active = true;
                this.m_thisGameView.node.active = false;
                break;
            }
          } else {
            if (clickType == 0 || clickType == 1) {
              this.switchMissionList(clickType);
              this.FutureMissionNode.active = false;
              this.ScrollView.node.active = true;
            } else if (clickType == 2) {
              this.FutureMissionNode.active = true;
              this.ScrollView.node.active = false;
              this.m_readList.list[clickType].compNum = new Date().getTime();
            }
          } // 清除紅點&紀錄狀態


          var read = this.m_readList.list[clickType];
          read.isRead = true;
          this.m_readList.updateTime = new Date().getTime();
          LocalStorageManager.SetObject(this.readKeyName, this.m_readList);

          if (this.TypeButtons.length > 0) {
            this.TypeButtons.forEach(function (btn, i) {
              if (i == clickType) {
                btn.node.getChildByName("red_point").active = false;
                btn.interactable = false;
              } else {
                btn.interactable = true;
              }
            });
          }

          if (this.m_redPointNodes.length > 0) {
            this.m_redPointNodes.forEach(function (node, i) {
              if (i == clickType) {
                node.active = false;
                _this6.m_tabNodes[i].getComponent(Button).interactable = false;
              } else {
                _this6.m_tabNodes[i].getComponent(Button).interactable = true;
              }
            });
          }

          this.OnRotation(this.m_isLandscape);
        };

        _proto.switchMissionList = function switchMissionList(type) {
          var _this7 = this;

          if (this.m_thisGameView) {
            this.m_thisGameView.SwitchMissionList(type);
          } else {
            var displayNum = 0;
            var itemHeight = 0;
            this.missionListUI.forEach(function (item) {
              if (item == null) return;
              var missionItem = item.getComponent(DailyMissionItem);
              var info = missionItem.m_info;
              item.active = info.Show - 1 == type;

              if (item.active) {
                displayNum++;
              }

              if (missionItem.status == MissionDetailStatus.Complete) {
                _this7.scheduleOnce(function () {});

                missionItem.playCompAni();
              }

              itemHeight = item.getComponent(UITransform).height;
            });
            var spaceY = this.ScrollView.content.getComponent(Layout).spacingY;
            this.ScrollView.content.getComponent(UITransform).height = displayNum * itemHeight + (displayNum - 1) * spaceY;
          }
        };

        _proto.updateFutureGameNode = function updateFutureGameNode(gameList) {
          var _this8 = this; //:設定遊戲ICON


          if (this.m_thisGameView) {
            if (this.m_tabNodes[2]) {
              this.m_tabNodes[2].active = !(gameList.length == 0);
            }

            this.m_gameListView.SetInfo(this.crossDayTime, gameList);
          } else {
            if (this.TypeButtons[2]) {
              this.TypeButtons[2].node.active = !(gameList.length == 0);
            }

            var tomorrow = new Date(this.crossDayTime);
            this.FutureMissionTexts[0].string = Tools.StringFormat(LocaleStringManager.GetInstance().GetString(Define.StringKey.DAILY_TOMORROW), tomorrow.getDate() + "/" + (tomorrow.getMonth() + 1));
            var scrollView = this.FutureMissionNode.getComponent(ScrollView);
            var itemHeight = 130;
            scrollView.content.removeAllChildren();
            gameList.forEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(gameid) {
              var gameIconNode, gameIcon;
              return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      if (Tools.Icons[gameid]) {
                        _context2.next = 3;
                        break;
                      }

                      _context2.next = 3;
                      return new Promise(function (resolve) {
                        Tools.LoadIcon(LocaleStringManager.CurrLang, gameid, function () {
                          resolve();
                        });
                      });

                    case 3:
                      gameIconNode = null;

                      if (_this8.m_gameIconPrefab) {
                        gameIconNode = instantiate(_this8.m_gameIconPrefab);
                        gameIcon = gameIconNode.getComponent(GameIconComponent);
                        gameIcon.SetGameIcon(Tools.Icons[gameid]);
                        gameIconNode.setScale(v3(0.585, 0.585, 1));
                      } else {
                        gameIconNode = new Node();
                        gameIconNode.addComponent(Sprite).spriteFrame = Tools.Icons[gameid];
                        gameIconNode.getComponent(Sprite).sizeMode = Sprite.SizeMode.CUSTOM;
                        gameIconNode.getComponent(UITransform).setContentSize(new Size(itemHeight, itemHeight));
                      }

                      scrollView.content.addChild(gameIconNode);

                    case 6:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2);
            })));
            var spaceY = this.ScrollView.content.getComponent(Layout).spacingY;
            scrollView.content.getComponent(UITransform).height = gameList.length * itemHeight + (gameList.length - 1) * spaceY;
          }
        }
        /**刷新當日任務清單資料 */
        ;

        _proto.refreshMissionList = function refreshMissionList(callback) {
          var _this9 = this;

          this.hasRefreshMissionList = true;
          this.getNowMission(function (info) {
            log("info", info);

            if (info.DailyMissionList) {
              if (_this9.m_thisGameView) {
                _this9.m_thisGameView.UpdateMissionList(info.DailyMissionList, info.ItemInfo, info.GiftInfo);
              } else {
                _this9.updateMissionList(info.DailyMissionList, info.ItemInfo, info.GiftInfo);
              }

              NotificationManager.GetInstance().UpdateMissionNotify(info);
            }

            if (callback) {
              callback();
            }
          });
        };

        _proto.checkAndRefreshMissionList = function checkAndRefreshMissionList(callback) {
          if (!this.hasRefreshMissionList) {
            this.refreshMissionList(callback);
          }

          return !this.hasRefreshMissionList;
        };

        _proto.openUI = function openUI() {
          var _this10 = this; // error( "openUI", this.running, !this.isShow, !this.lock )


          if (this.running && !this.isShow && !this.lock) {
            var hasRefresh = false;
            var key = Define.AID + ":" + Define.MissionIsOpenedKey;
            var isOpened = LocalStorageManager.GetBool(key);
            hasRefresh = this.checkAndRefreshMissionList(function () {
              // if ( Tools.Line !== Define.LineSetting.americas &&
              //     Tools.Line !== Define.LineSetting.americas_str )
              // {
              //     this.ClickMissionPage( null, this.defaultSelectMissionType.toString() );
              // }
              // else
              // {
              _this10.OnSelectTab(null, _this10.defaultSelectMissionType.toString()); // }


              _this10.OnRotation(_this10.m_isLandscape);

              if (!isOpened && Tools.IsTadaCasino && _this10.m_controller.RookieHintManager) {
                // 顯示新手教程
                LocalStorageManager.SetBool(key, true);

                _this10.m_controller.RookieHintManager.CheckLevelHint(3.5, _this10.m_isLandscape);
              }
            });
            this.callEventCb(EventType.Open);
            this.isShow = true; // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     this.getComponent( cc.Animation ).play( "DailyMission_In" );
            //     // this.Dates.forEach( ( node, i ) =>
            //     // {
            //     //     node.active = this.dateDisplay[ i ];
            //     // } )
            //     this.icon.Ani.getComponent( cc.Animation ).setCurrentTime( 0 );
            //     this.icon.Ani.getComponent( cc.Animation ).stop();
            // }

            this.icon.Mode.active = false;

            if (!hasRefresh) {
              // if ( Tools.Line !== Define.LineSetting.americas &&
              //     Tools.Line !== Define.LineSetting.americas_str )
              // {
              //     this.ClickMissionPage( null, this.defaultSelectMissionType.toString() );
              // }
              // else
              // {
              this.OnSelectTab(null, this.defaultSelectMissionType.toString()); // }

              this.OnRotation(this.m_isLandscape);
            }
          }
        };

        _proto.closeUI = function closeUI() {
          if (!this.isShow) {
            return;
          }

          this.callEventCb(EventType.Close);
          this.isShow = false;
          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN); // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     this.getComponent( cc.Animation ).play( "DailyMission_Out" );
          //     this.getComponent( cc.Animation ).once( 'finished', () =>
          //     {
          //         // this.Dates.forEach( ( node, i ) =>
          //         // {
          //         //     node.active = false;
          //         // } )
          //     } )
          // }
          // else
          // {

          var bottomBar = this.m_controller.getComponent(BottombarManager);
          bottomBar.CloseCommonText();
          this.m_mainNode.active = false; // }
        };

        _proto.isOpen = function isOpen() {
          return this.isShow;
        };

        _proto.showDesc = function showDesc() {
          var gameList = "";
          var gameIDList = Object.keys(this.m_thisGameView ? this.m_thisGameView.CurrentGameList : this.currentGameList);

          if (gameIDList.length == 0) {
            gameList = LocaleStringManager.GetInstance().GetString(Define.StringKey.DAILY_DESC_SINGLE_GAME);
          } else {
            gameIDList.forEach(function (gameID, index) {
              var gameName = LocaleStringManager.GetInstance().GetGameName(Number(gameID));
              gameList = gameList + (index != 0 ? "," : "") + gameName;
            });
          }

          var desc = LocaleStringManager.GetInstance().GetString(Define.StringKey.DAILY_DESC_CONTENT);

          while (desc.search("{time}") !== -1) {
            desc = desc.replace("{time}", refreshTimeText);
          }

          while (desc.search("{ITEM_NAME}") !== -1) {
            desc = desc.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
          } // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     this.m_controller.ShowItemInfo(
          //         Define.StringKey.DAILY_DESC_TITLE,
          //         Tools.StringFormat(
          //             desc,
          //             refreshTimeText, refreshTimeText, gameList, Define.SERIES_GAME_NAME
          //         )
          //     )
          // }
          // else
          // {


          var bottomBar = this.m_controller.node.getComponent(BottombarManager);
          bottomBar.OpenCommonText(LocaleStringManager.GetInstance().GetString(Define.StringKey.DAILY_DESC_TITLE), Tools.StringFormat(desc, refreshTimeText, refreshTimeText, gameList, Define.SERIES_GAME_NAME)); // }
        };

        _proto.LockDailyEnable = function LockDailyEnable(islock) {
          if (!this.running) {
            return;
          }

          this.lock = islock;
          this.icon.Pic.getComponent(Button).interactable = !this.lock;

          if (islock) {
            this.closeUI();
          }
        };

        _proto.SetTxt = function SetTxt() {
          if (LocaleStringManager.CurrLang !== Define.Lang.EN && this.m_missionAtlas) {
            if (this.m_titleSprite) {
              this.m_titleSprite.spriteFrame = this.m_missionAtlas.getSpriteFrame("DailyMission_Title");
            }

            for (var i = 0; i < this.m_darkTabTitleSprites.length; i++) {
              this.m_darkTabTitleSprites[i].spriteFrame = this.m_missionAtlas.getSpriteFrame(TabName[i]);
              this.m_lightTabTitleSprites[i].spriteFrame = this.m_missionAtlas.getSpriteFrame(TabName[i] + "_On");
            }
          }
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          var _this$m_thisGameView, _this$m_gameListView; // if ( this.m_isLandscape === isLandscape )
          // {
          //     return;
          // }


          this.m_isLandscape = isLandscape;
          var anim = this.m_mainNode.getComponent(Animation); // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     if ( isLandscape )
          //     {
          //         anim.play( "DailyMission_L" );
          //     }
          //     else
          //     {
          //         anim.play( "DailyMission_S" );
          //     }
          // }
          // else
          // {

          if (isLandscape) {
            anim.play("Clip_Common_TagFrame_Landscape");
          } else {
            anim.play("Clip_Common_TagFrame_Portrait");
          }

          (_this$m_thisGameView = this.m_thisGameView) == null ? void 0 : _this$m_thisGameView.OnRotation(isLandscape);
          (_this$m_gameListView = this.m_gameListView) == null ? void 0 : _this$m_gameListView.OnRotation(isLandscape); // }
        };

        DailyMission.toItemInfoData = function toItemInfoData(data) {
          var ret = {};

          if (data) {
            ret.icon = data.Icon;
            ret.type = data.WinType;
            ret.bet = data.Bet;
            ret.title = data.ItemName;
            ret.gameName = LocaleStringManager.GetInstance().GetGameName(data.GameID);
            ret.gameDesc = data.GameName;
            ret.star = data.Star;
          }

          return ret;
        };

        DailyMission.toGiftPackData = function toGiftPackData(info, giftData, itemData) {
          // console.error( 'toGiftPackData start: ', info, giftData, itemData )
          // 處理禮包資訊,禮包內容物:遊戲幣,紅鑽,道具卡
          var itemId = info.ItemID;
          var itemCount = info.ItemCount;
          var extendId = info.ExtendID;
          var ret = [];
          var data = {
            ItemID: 0,
            ItemCount: 0,
            ExtendID: null,
            ItemInfo: null
          };

          if (giftData && giftData[itemId]) {
            var giftList = giftData[itemId].List;

            for (var i = 0; i < giftList.length; i++) {
              if (giftList[i].ItemID == LobbyMallCoinID || giftList[i].ItemID == GameCoinID || giftList[i].ItemID == TaDaBuffID || giftList[i].ItemID == CollectCardID) {
                // 禮物內容為遊戲幣或紅鑽
                data = {
                  ItemID: giftList[i].ItemID,
                  ItemCount: giftList[i].ItemCount,
                  ExtendID: giftList[i].ExtendID,
                  ItemInfo: null
                };
              } else {
                // 禮物內容為卡片類
                var item = this.toItemInfoData(itemData[giftList[i].ItemID]);
                data = {
                  ItemID: giftList[i].ItemID,
                  ItemCount: giftList[i].ItemCount,
                  ExtendID: giftList[i].ExtendID,
                  ItemInfo: item
                };
              }

              ret.push(data);
            }
          } else {
            if (itemId == LobbyMallCoinID || itemId == GameCoinID || itemId == TaDaBuffID || itemId == CollectCardID) {
              data = {
                ItemID: itemId,
                ItemCount: itemCount,
                ExtendID: extendId,
                ItemInfo: null
              };
            } else if (itemData && itemData[itemId]) {
              var _item = this.toItemInfoData(itemData[itemId]);

              data = {
                ItemID: itemId,
                ItemCount: itemCount,
                ExtendID: null,
                ItemInfo: _item
              };
            }

            ret.push(data);
          }

          return ret;
        };

        _proto.ConvertMissionList = function ConvertMissionList(missionReward, nowChips) {
          // let missionRewardData: RewardData[] = [];
          var rewardDatas = [];

          if (missionReward && missionReward.length > 0) {
            var gameCoin = 0;

            for (var i = 0; i < missionReward.length; i++) {
              var itemType = Define.RewardInfoDataType.SLOT_ITEM;
              var values = [null, null, null];
              var value4 = null;

              switch (missionReward[i].ItemID) {
                case LobbyMallCoinID:
                  itemType = Define.RewardInfoDataType.RUBY;
                  break;

                case GameCoinID:
                  itemType = Define.RewardInfoDataType.COIN;
                  gameCoin += missionReward[i].ItemCount;
                  values[0] = nowChips;
                  break;

                case TaDaBuffID:
                  itemType = Define.RewardInfoDataType.BUFF;
                  value4 = missionReward[i].ExtendID;
                  break;

                case CollectCardID:
                  itemType = Define.RewardInfoDataType.ALBUM_CARD; // values = this.DecodeExtendID( Number( missionReward[ i ].ExtendID ) )

                  value4 = missionReward[i].ExtendID;
                  break;

                default:
                  // 道具卡沒固定ID
                  itemType = Define.RewardInfoDataType.SLOT_ITEM;
                  values[0] = missionReward[i].ItemID;
                  break;
              }

              var rewards = {
                data: {
                  type: itemType,
                  amount: missionReward[i].ItemCount ? missionReward[i].ItemCount : 1,
                  value: values[0],
                  value2: values[1],
                  value3: values[2],
                  value4: value4
                }
              };
              rewardDatas.push(rewards);
            }

            console.error('ConvertMissionList', JSON.stringify(rewardDatas));
            var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.SHOW_REWARD_MISSION);
            AppManager.SetRewardDatas(rewardDatas, str);
            return gameCoin;
          }

          return 0;
        };

        _proto.DecodeExtendID = function DecodeExtendID(extendId) {
          var result = [0, 0, 0];
          result[0] = extendId / 1e5 % 1000;
          result[1] = extendId / 1e4 % 10;
          result[2] = extendId / 10 % 1000;
          return result;
        };

        _proto.ShowComplete = function ShowComplete() {
          console.error('ShowComplete', this.m_needShowComplete, this.m_thisGameView.UnlockString);

          if (this.m_needShowComplete) {
            var unlockString = this.m_thisGameView.UnlockString;
            this.m_missionBtn.ShowComplete(unlockString);
            this.m_needShowComplete = false;
            this.m_thisGameView.ResetCompList();
          }
        };

        _proto.ShowGetRedDiamond = function ShowGetRedDiamond(rewardNum) {
          var _this11 = this;

          return new Promise(function (resolve) {
            if (_this11.m_getRdAniPrefab && _this11.m_getRdLetterAniPrefab) {
              var landscape = _this11.m_isLandscape;
              var playAniRoot = _this11.m_controller.node;

              var screenSize = _this11.m_controller.getComponent(BottombarManager).FloatViewSize;

              var letterDirection = landscape ? "Top" : Tools.isIndia2 ? "Right" : "Bottom";
              var rdAni = instantiate(_this11.m_getRdAniPrefab);

              if (rdAni.getComponent(RedDiamondGet)) {
                rdAni.getComponent(RedDiamondGet).SetTxt();
              } else {
                var label1 = find("Bg/Frame/TXT", rdAni).getComponent(Label);
                var label2 = find("Bg/Frame/TXT02", rdAni).getComponent(Label);
                label1.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.REWARD_RUBY);
                label2.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.REWARD_CLICK_MALL);
                Tools.SetFont(label1);
                Tools.SetFont(label2);
              }

              rdAni.position = Tools.DiffPos(playAniRoot.getComponent(UITransform).anchorPoint, landscape, playAniRoot);
              playAniRoot.addChild(rdAni);
              Tools.SetZIndex(rdAni, Define.ZOrder.RANKING + 2);
              var letterAni = instantiate(_this11.m_getRdLetterAniPrefab);
              var flyPos = find("Data/Node_GetDiamond", letterAni);

              if (letterAni.getComponent(GetRedLetter)) {
                letterAni.getComponent(GetRedLetter).SetTxt();
                flyPos = letterAni.getComponent(GetRedLetter).TargetNode;
              } else {
                var rewardText = find("Data/Num_Get", letterAni);
                rewardText.getComponent(Label).string = ""; //`+${rewardNum}`;  // 暫時隱藏

                Tools.SetFont(rewardText.getComponent(Label));
              }

              letterAni.position = Tools.DiffPos(playAniRoot.getComponent(UITransform).anchorPoint, landscape, playAniRoot);

              switch (letterDirection) {
                case "Top":
                  letterAni.position = letterAni.position.add(v3(200, screenSize.height / 2 - 40));
                  break;

                case "Right":
                  letterAni.position = letterAni.position.add(v3(screenSize.width / 2 - 40, -200));
                  break;

                case "Bottom":
                  letterAni.position = letterAni.position.add(v3(0, -screenSize.height / 2 + 40));
                  break;
              }

              letterAni.active = false;
              playAniRoot.addChild(letterAni);
              Tools.SetZIndex(letterAni, Define.ZOrder.RANKING + 1);
              SoundManager.getInstance().Play(Define.AudioClips.ITEM_CARD_USE);
              rdAni.getComponent(Animation).play("Clip_RedDiamond_Start");
              rdAni.getComponent(Animation).once(Animation.EventType.FINISHED, function () {
                rdAni.getComponent(Animation).play("Clip_RedDiamond_Loop");
                Define.Wait(_this11, 0.2).then(function () {
                  var letterAniName = letterDirection == "Top" ? "L" : letterDirection == "Bottom" ? "S" : "R";
                  letterAni.active = true;
                  letterAni.getComponent(Animation).play("Clip_RedDiamond_Letter_" + letterAniName + "_Start");
                  rdAni.getComponent(Animation).play("Clip_RedDiamond_Hit");
                  rdAni.getComponent(Animation).once(Animation.EventType.FINISHED, function () {
                    var targetPosition = playAniRoot.getComponent(UITransform).convertToNodeSpaceAR(letterAni.getComponent(UITransform).convertToWorldSpaceAR(v3(flyPos.position))); // log("yee",targetPosition);

                    letterAni.getComponent(Animation).play("Clip_RedDiamond_Letter_" + letterAniName + "_Hit01");
                    var scale = 0.2;
                    tween(rdAni).to(1, {
                      position: v3(targetPosition.add(v3(0, -138 * scale))),
                      scale: v3(scale, scale, 1)
                    }).call(function () {
                      rdAni.removeFromParent();
                      letterAni.getComponent(Animation).play("Clip_RedDiamond_Letter_" + letterAniName + "_Hit02");
                      letterAni.getComponent(Animation).once(Animation.EventType.FINISHED, function () {
                        letterAni.getComponent(Animation).play("Clip_RedDiamond_Letter_" + letterAniName + "_Idle");
                        Define.Wait(_this11, 0.5).then(function () {
                          letterAni.getComponent(Animation).play("Clip_RedDiamond_Letter_" + letterAniName + "_End");
                          letterAni.getComponent(Animation).once(Animation.EventType.FINISHED, function () {
                            letterAni.removeFromParent();
                            resolve();
                          });
                        });
                      });
                    }).start();
                  });
                });
              });
            } else {
              resolve();
            }
          });
        };

        _proto.GetRefreshTime = function GetRefreshTime() {
          if (this.actionEndTime) {
            var hour = this.actionEndTime.getHours() >= 10 ? this.actionEndTime.getHours().toString() : "0" + this.actionEndTime.getHours();
            var min = this.actionEndTime.getMinutes() >= 10 ? this.actionEndTime.getMinutes().toString() : "0" + this.actionEndTime.getMinutes();

            var _refreshTimeText = hour + ":" + min;

            return _refreshTimeText;
          } else {
            var now = Date.now();
            var nowDate = new Date(now);
            var refreshTime = Date.UTC(nowDate.getFullYear(), nowDate.getMonth(), nowDate.getDate());
            var refreshDate = new Date(refreshTime);

            var _hour = refreshDate.getHours() >= 10 ? refreshDate.getHours().toString() : "0" + refreshDate.getHours();

            var _min = refreshDate.getMinutes() >= 10 ? refreshDate.getMinutes().toString() : "0" + refreshDate.getMinutes();

            var _refreshTimeText2 = _hour + ":" + _min;

            return _refreshTimeText2;
          }
        };

        _createClass(DailyMission, [{
          key: "TabNodes",
          get: function get() {
            return this.m_tabNodes;
          }
        }, {
          key: "RedPointNodes",
          get: function get() {
            return this.m_redPointNodes;
          }
        }, {
          key: "IconNodes",
          get: function get() {
            return this.icon;
          }
        }, {
          key: "IsLandscape",
          get: function get() {
            return this.m_isLandscape;
          }
          /**活動是否進行中 */

        }, {
          key: "ReadList",
          get: function get() {
            return this.m_readList;
          }
        }, {
          key: "MissionBtn",
          get: function get() {
            return this.m_missionBtn;
          }
        }, {
          key: "NeedShowComplete",
          set: function set(b) {
            this.m_needShowComplete = b;
          }
        }, {
          key: "eventCb",
          set:
          /**
           * 各類事件callback,設定null清空callback.
           * open,close,active,inactive
           */
          function set(cb) {
            if (cb == null) {
              this._eventCb = [];
            } else {
              this._eventCb.push(cb);
            }
          }
        }]);

        return DailyMission;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "TitleText", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "PageNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Mask", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "RefreshText", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "ScrollView", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "ItemPrefab", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "PromoteText", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "TypeButtons", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "FutureMissionNode", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "FutureMissionTexts", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_mainNode", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_gameIconPrefab", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_tabNodes", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_redPointNodes", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_lightPageNodes", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_missionListPagePrefab", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "m_gameListPagePrefab", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "m_contentNode", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "m_titleSprite", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "m_darkTabTitleSprites", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "m_lightTabTitleSprites", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class)); // export interface MissionDetail
      // {
      //     CurrentDate: string,
      //     DailyMissionList: MissionInfo[],
      //     Desc: string,
      //     EndTime: string,
      //     StartTime: string,
      //     StartTimestamp: number,
      //     EndTimestamp: number,
      //     ItemInfo: MissionItemData[],
      //     GiftInfo: MissionGiftData[],
      //     OverDay: number,
      //     OverDayMin: number,
      //     NextGameIDList: number[],
      // }

      var MissionType;

      (function (MissionType) {
        MissionType[MissionType["Common"] = 0] = "Common";
        MissionType[MissionType["Game"] = 1] = "Game";
      })(MissionType || (MissionType = exports('MissionType', {})));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DailyMissionItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LocaleStringManager.ts', './Define.ts', './SoundManager.ts', './ItemList.ts', './Tools.ts', './MsgBox.ts', './LifeSocket.ts', './BottombarManager.ts', './DailyMissionRewardCell.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Animation, Node, Label, RichText, Sprite, ProgressBar, SpriteFrame, color, Component, LocaleStringManager, Define, SoundManager, ItemList, Tools, MsgBox, LifeSocket, BottombarManager, DailyMissionRewardCell;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Node = module.Node;
      Label = module.Label;
      RichText = module.RichText;
      Sprite = module.Sprite;
      ProgressBar = module.ProgressBar;
      SpriteFrame = module.SpriteFrame;
      color = module.color;
      Component = module.Component;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      ItemList = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      BottombarManager = module.default;
    }, function (module) {
      DailyMissionRewardCell = module.default;
    }],
    execute: function () {
      exports({
        MissionDetailStatus: void 0,
        MissionRewardType: void 0
      });

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27;

      cclegacy._RF.push({}, "d3c6fa546BI5KTS3cfwtT0w", "DailyMissionItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var tagAtlasName = ["Txt_taskicon_JILI", "Txt_taskicon_specificgame", "Txt_taskicon_limitedtime", "Txt_taskicon_VIP", "Txt_taskicon_SP"];
      var TagNames = ["DailyMission_TagName_Brand", "DailyMission_TagName_Game", "DailyMission_TagName_Time", "DailyMission_TagName_VIP", "DailyMission_TagName_SP"];
      var ShowType = {
        Universal: 1,
        SingleGame: 2
      };
      var DailyMissionItem = exports('default', (_dec = property(Animation), _dec2 = property({
        type: Node,
        tooltip: "底圖"
      }), _dec3 = property({
        type: Label,
        tooltip: "任務標題"
      }), _dec4 = property({
        type: RichText,
        tooltip: "任務條件"
      }), _dec5 = property({
        type: Label,
        tooltip: "獎勵項目資訊"
      }), _dec6 = property({
        type: Label,
        tooltip: "獎勵項目"
      }), _dec7 = property({
        type: Sprite,
        tooltip: "紅鑽圖示"
      }), _dec8 = property({
        type: ProgressBar,
        tooltip: "任務進度"
      }), _dec9 = property({
        type: Label,
        tooltip: "任務進度提示"
      }), _dec10 = property({
        type: Node,
        tooltip: "類型標籤,[jili,specific,limite,vip,sp]"
      }), _dec11 = property({
        type: Sprite,
        tooltip: "標籤多語系"
      }), _dec12 = property({
        type: Node,
        tooltip: "完成提示"
      }), _dec13 = property({
        type: Node,
        tooltip: "禁用提示"
      }), _dec14 = property({
        type: Node,
        tooltip: "跳轉"
      }), _dec15 = property(Sprite), _dec16 = property({
        type: SpriteFrame,
        tooltip: "進度條圖片，1為0.1以下使用"
      }), _dec17 = property({
        type: Node,
        tooltip: "特效"
      }), _dec18 = property({
        type: Node,
        tooltip: "紅鑽"
      }), _dec19 = property({
        type: Label,
        tooltip: "紅鑽數量"
      }), _dec20 = property({
        type: Node,
        tooltip: "道具卡"
      }), _dec21 = property({
        type: Sprite,
        tooltip: "道具卡icon"
      }), _dec22 = property({
        type: Label,
        tooltip: "道具卡數量"
      }), _dec23 = property({
        type: Node,
        tooltip: "資訊按鈕"
      }), _dec24 = property({
        type: Node,
        tooltip: "獎勵面板3個以上用"
      }), _dec25 = property({
        type: Node,
        tooltip: "獎勵面板3個以上用背景 0:會變長 1:固定長度"
      }), _dec26 = property({
        type: DailyMissionRewardCell,
        tooltip: "單個獎勵資訊"
      }), _dec27 = property({
        type: Label,
        tooltip: "Reward或GameType"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DailyMissionItem, _Component);

        function DailyMissionItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "ani", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_bgNodes", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "GameText", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ConditionText", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "RewardInfoText", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "RewardTexts", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "RewardImg", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "Progress", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ProgressText", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "TypeTag", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tagNameSprites", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "CompNode", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "LockNode", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "RedictNode", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gameIcon", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ProgressBarSpriteFrame", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "FxNode", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_redDiamondNode", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_redDiamondNum", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_itemNode", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_itemIconSprite", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_itemNumLabel", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_infoBtnNode", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rewardLayout", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_over3Back", _descriptor25, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rewardCell", _descriptor26, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rewardOrTypeTxt", _descriptor27, _assertThisInitialized(_this));

          _this.m_itemInfo = void 0;
          _this.m_giftPackInfo = [];
          _this.m_extraManager = void 0;
          _this.rewardType = void 0;
          _this.m_info = void 0;
          _this.m_langAtlas = void 0;
          _this.status = null;
          _this.tweenComp = void 0;
          _this.m_itemNum = 0;
          _this.m_isLandscape = false;
          _this.m_closeAllRewardLayoutCb = void 0;
          return _this;
        }

        var _proto = DailyMissionItem.prototype; // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          if (this.RewardInfoText[0]) {
            this.RewardInfoText[0].node.active = true;
            this.RewardInfoText[0].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.DAILY_REWARD);
            Tools.SetFont(this.RewardInfoText[0]);
          } //  Tools.IsTada要改Tools.IsTadaCasino
          // if ( !Tools.IsTadaCasino )
          // {
          //     this.GameText[ 0 ].node.active = true;
          // }


          if (this.m_rewardOrTypeTxt
          /*&& Tools.IsTadaCasino*/
          ) {
              this.m_rewardOrTypeTxt.string = "";
            }

          Tools.SetFont(this.ConditionText[0]);
          Tools.SetFont(this.ConditionText[1]);
          Tools.SetFont(this.GameText[0]);
          Tools.SetFont(this.RewardTexts[0]);
          Tools.SetFont(this.ProgressText);
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          this.m_isLandscape = isLandscape;

          if (isLandscape) {
            this.node.getComponent(Animation).play("Clip_DailyMission_MissionCell_Landscape");
            this.FxNode.getComponent(Animation).play("Clip_DailyMission_Special_FX_Landscape");

            if (this.m_giftPackInfo && this.m_over3Back[0]) {
              if (this.m_giftPackInfo.length > 4) {
                this.m_over3Back[0].active = false;
                this.m_over3Back[1].active = true;
              } else {
                this.m_over3Back[0].active = true;
                this.m_over3Back[1].active = false;
              }
            }
          } else {
            this.node.getComponent(Animation).play("Clip_DailyMission_MissionCell_Portrait");
            this.FxNode.getComponent(Animation).play("Clip_DailyMission_Special_FX_Portrait");

            if (this.m_giftPackInfo && this.m_over3Back[0]) {
              if (this.m_giftPackInfo.length > 2) {
                this.m_over3Back[0].active = false;
                this.m_over3Back[1].active = true;
              } else {
                this.m_over3Back[0].active = true;
                this.m_over3Back[1].active = false;
              }
            }
          }
        };

        _proto.setRes = function setRes(atlas, cb) {
          var _this2 = this;

          this.m_langAtlas = atlas;
          this.TypeTag.forEach(function (node, index) {
            if (node.getChildByName("txt")) {
              node.getChildByName("txt").getComponent(Sprite).spriteFrame = _this2.m_langAtlas.getSpriteFrame(tagAtlasName[index]);
            }

            if (_this2.m_tagNameSprites[index]) {
              _this2.m_tagNameSprites[index].spriteFrame = _this2.m_langAtlas.getSpriteFrame(TagNames[index]);
            }
          });

          if (cb) {
            this.m_closeAllRewardLayoutCb = cb;
          }
        };

        _proto.CloseRewardLayout = function CloseRewardLayout() {
          if (this.m_rewardLayout) {
            this.m_rewardLayout.active = false;
          }
        }
        /**
         * 更新資料
         * @param info 
         * @ret 任務狀態 MissionDetailStatus
         */
        ;

        _proto.updateData = function updateData(info, itemInfo, m_bottombar, idx) {
          this.m_info = info;
          this.m_extraManager = m_bottombar;
          this.RewardImg.node.active = false;

          if (this.tweenComp) {
            this.tweenComp.stop();
            this.tweenComp = null;
          } // if ( Tools.Line === Define.LineSetting.americas &&
          //     Tools.Line === Define.LineSetting.americas_str )
          // {


          this.CompNode.active = false; // }

          if (LocaleStringManager.IsChinese()) {
            this.ConditionText[0].node.active = true;
            this.ConditionText[0].string = info.ConditionDesc;
            this.ConditionText[0].fontFamily = Define.DollarFontFamily;
          } else {
            this.ConditionText[1].node.active = true;
            this.ConditionText[1].string = info.ConditionDesc;
            this.ConditionText[1].fontFamily = Define.DollarFontFamily;
          }

          if (info.Show == ShowType.SingleGame && info.GameID) {
            //  Tools.IsTada要改Tools.IsTadaCasino
            // if ( Tools.IsTadaCasino )
            // {
            this.RewardTexts[0].string = LocaleStringManager.GetInstance().GetGameName(info.GameID); // }
            // else
            // {
            //     this.GameText[ 0 ].string = LocaleStringManager.GetInstance().GetGameName( info.GameID );
            // }

            this.RedictNode.active = info.GameID.toString() != Define.NOW_GAME_ID && !Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.AllChangeGameImport);
          } else {
            var brand = LocaleStringManager.GetInstance().GetString(Tools.IsTada ? Define.StringKey.BRAND_TADA : Define.StringKey.BRAND_JILI);
            var gameType = LocaleStringManager.GetInstance().GetString(Define.StringKey.DAILY_PLAY_SLOT_GAME);
            var str = gameType.replace("{0}", brand); //  Tools.IsTada要改Tools.IsTadaCasino
            // if ( Tools.IsTadaCasino )
            // {

            this.RewardTexts[0].string = Tools.StringFormat(str, Define.SERIES_GAME_NAME); // }
            // else
            // {
            //     this.GameText[ 0 ].string = Tools.StringFormat( str, Define.SERIES_GAME_NAME );
            // }

            this.RedictNode.active = false;
          } // this.CompNode.getComponent( Sprite ).enabled = !this.RedictNode.active;
          // this.LockNode.getComponent( Sprite ).enabled = !this.RedictNode.active;


          if (info.Vip == 100) {
            this.FxNode.active = true; // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     this.FxNode.getComponent( cc.Animation ).play();
            // }
          } else {
            this.FxNode.active = false;
          }

          this.LockNode.active = info.Lock == true;
          this.TypeTag.forEach(function (node, index) {
            node.active = false;
          });

          if (info.Vip == 100) {
            this.TypeTag[4].active = true;
          } else if (info.Show == ShowType.Universal) {
            this.TypeTag[0].active = true;
          } else if (info.Show == ShowType.SingleGame) {
            this.TypeTag[1].active = true;
          }

          if (itemInfo.ItemID) {
            this.updateDataCoin(itemInfo);
          } else {
            this.rewardType = MissionRewardType.Item;
            this.updateDataItemCard(itemInfo, info.ItemCount, idx);
          } // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {


          if (this.m_info.Show === ShowType.SingleGame && this.m_infoBtnNode) {
            this.m_infoBtnNode.active = false;
          } // }


          return this.updateProgress(info);
        };

        _proto.updateDataNew = function updateDataNew(info, giftPack, m_bottombar, idx) {
          var _this3 = this;

          this.m_info = info;

          if (giftPack) {
            this.m_giftPackInfo = giftPack;
          }

          this.m_extraManager = m_bottombar;
          this.RewardImg.node.active = false;

          if (this.tweenComp) {
            this.tweenComp.stop();
            this.tweenComp = null;
          } // if ( Tools.Line === Define.LineSetting.americas &&
          //     Tools.Line === Define.LineSetting.americas_str )
          // {


          this.CompNode.active = false; // }

          if (LocaleStringManager.IsChinese()) {
            this.ConditionText[0].node.active = true;
            this.ConditionText[0].string = info.ConditionDesc;
            this.ConditionText[0].fontFamily = Define.DollarFontFamily;
          } else {
            this.ConditionText[1].node.active = true;
            this.ConditionText[1].string = info.ConditionDesc;
            this.ConditionText[1].fontFamily = Define.DollarFontFamily;
          }

          if (info.Show == ShowType.SingleGame && info.GameID) {
            //  Tools.IsTada要改Tools.IsTadaCasino
            // if ( Tools.IsTadaCasino )
            // {
            this.RewardTexts[0].string = LocaleStringManager.GetInstance().GetGameName(info.GameID); // }
            // else
            // {
            //     this.GameText[ 0 ].string = LocaleStringManager.GetInstance().GetGameName( info.GameID );
            // }

            this.RedictNode.active = info.GameID.toString() != Define.NOW_GAME_ID && !Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.AllChangeGameImport);
          } else {
            var brand = LocaleStringManager.GetInstance().GetString(Tools.IsTada ? Define.StringKey.BRAND_TADA : Define.StringKey.BRAND_JILI);
            var gameType = LocaleStringManager.GetInstance().GetString(Define.StringKey.DAILY_PLAY_SLOT_GAME);
            var str = gameType.replace("{0}", brand); //  Tools.IsTada要改Tools.IsTadaCasino
            // if ( Tools.IsTadaCasino )
            // {

            this.RewardTexts[0].string = Tools.StringFormat(str, Define.SERIES_GAME_NAME); // }
            // else
            // {
            //     this.GameText[ 0 ].string = Tools.StringFormat( str, Define.SERIES_GAME_NAME );
            // }

            this.RedictNode.active = false;
          } // this.CompNode.getComponent( Sprite ).enabled = !this.RedictNode.active;
          // this.LockNode.getComponent( Sprite ).enabled = !this.RedictNode.active;


          if (info.Vip == 100) {
            this.FxNode.active = true; // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     this.FxNode.getComponent( cc.Animation ).play();
            // }
          } else {
            this.FxNode.active = false;
          }

          this.LockNode.active = info.Lock == true;
          this.TypeTag.forEach(function (node, index) {
            node.active = false;
          });

          if (info.Vip == 100) {
            this.TypeTag[4].active = true;
          } else if (info.Show == ShowType.Universal) {
            this.TypeTag[0].active = true;
          } else if (info.Show == ShowType.SingleGame) {
            this.TypeTag[1].active = true;
          } // 先清掉之前殘留的


          this.m_rewardCell[0].CleanGiftCb();

          for (var i = 1; i < this.m_rewardCell.length; i++) {
            this.m_rewardCell[i].node.active = false;
          }

          var index = 0;

          if (giftPack.length > 1) {
            var openGift = function openGift(isOpen) {
              //  開啟禮物介面
              _this3.m_closeAllRewardLayoutCb && _this3.m_closeAllRewardLayoutCb();
              _this3.m_rewardLayout.active = isOpen;

              _this3.OnRotation(_this3.m_isLandscape);
            };

            this.m_rewardCell[index].SetGiftBox(openGift, this.m_itemNode);
            index = 1;
          }

          for (var _i = 0; _i < giftPack.length; _i++) {
            var _idx = giftPack[_i].ItemInfo ? giftPack[_i].ItemID : null;

            var itemNode = null;

            if (index == 0) {
              // 只有第一個有背板開關需求
              itemNode = this.m_itemNode;
            }

            this.m_rewardCell[index].SetCellRes(giftPack[_i], m_bottombar, itemNode, _idx);
            index++;
          } // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {


          if (this.m_info.Show === ShowType.SingleGame && this.m_infoBtnNode) {
            this.m_infoBtnNode.active = false;
          } // }


          return this.updateProgress(info);
        };

        _proto.updateDataCoin = function updateDataCoin(itemInfo) {
          if (itemInfo.ItemID == 2000) {
            this.rewardType = MissionRewardType.LobbyMallCoin; //  Tools.IsTada要改Tools.IsTadaCasino
            // if ( !Tools.IsTadaCasino )
            // {
            //     this.RewardTexts[ 0 ].string = `${itemInfo.ItemCount}`;
            //     this.RewardImg.node.active = true;
            // }

            if (this.m_itemNode && this.m_redDiamondNode) {
              this.m_redDiamondNode.active = true;
              this.m_itemNode.active = false;
              this.m_itemNumLabel.node.active = false;

              if (this.m_redDiamondNum) {
                this.m_redDiamondNum.string = itemInfo.ItemCount.toString();
              }
            }
          }
        };

        _proto.updateDataItemCard = function updateDataItemCard(itemInfo, cardNum, idx) {
          var _this4 = this;

          this.m_itemInfo = itemInfo;
          this.m_itemNum = cardNum;
          this.m_itemInfo.bet = this.m_extraManager.GetDisplayValue(this.m_itemInfo.bet); // 非尊榮卡的卡片一律改叫 "Item Card"

          if (itemInfo.star != 8 && itemInfo.star != 7 && itemInfo.star != 6) {
            var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.DAILY_COMMON_ITEM);
            itemInfo.title = str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
            itemInfo.title = Tools.CustomStringFormat(itemInfo.title, {
              Star: ItemList.GetInstance().GetStar(itemInfo.star ? itemInfo.star : 0)
            });
          } //  Tools.IsTada要改Tools.IsTadaCasino
          // if ( !Tools.IsTadaCasino )
          // {
          //     this.RewardTexts[ 0 ].string = itemInfo.title;
          // }


          if (this.m_itemNode && this.m_redDiamondNode) {
            this.m_itemNode.active = true;
            this.m_itemNumLabel.node.active = true;
            this.m_redDiamondNode.active = false;

            if (cardNum === 1) {
              this.m_itemNumLabel.string = "";
            } else {
              this.m_itemNumLabel.string = "*" + cardNum.toString();
            }

            if (!ItemList.GetInstance().GetGameSpriteAtlas() && idx !== undefined) {
              ItemList.GetInstance().AddListener(idx.toString(), function () {
                _this4.m_itemIconSprite.spriteFrame = ItemList.GetInstance().GetItemIcon(itemInfo.icon);
              });
            } else {
              this.m_itemIconSprite.spriteFrame = ItemList.GetInstance().GetItemIcon(itemInfo.icon);
            }
          }
        }
        /**
         * 更新進度
         * @param info
         * @ret 任務狀態 MissionDetailStatus
         */
        ;

        _proto.updateProgress = function updateProgress(info) {
          var progress = info.CurrentCount / info.TotalCount;

          if (progress < 0.1) {
            this.Progress.barSprite.type = Sprite.Type.TILED;
            this.Progress.barSprite.spriteFrame = this.ProgressBarSpriteFrame[1];
          } else {
            this.Progress.barSprite.type = Sprite.Type.SLICED;
            this.Progress.barSprite.spriteFrame = this.ProgressBarSpriteFrame[0];
          }

          this.Progress.progress = progress;
          this.ProgressText.string = "(" + (info.CurrentCount > info.TotalCount ? info.TotalCount : info.CurrentCount) + "/" + info.TotalCount + ")";
          var color1 = info.Show == ShowType.Universal && info.Vip != 100 ? "p" : "g";

          if (this.m_bgNodes.length === 2) {
            // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {
            this.m_bgNodes[0].active = true;
            this.m_bgNodes[1].active = false; // }
            // else
            // {
            //     this.m_bgNodes[ 0 ].active = ( info.Show == 1 && info.Vip != 100 );
            //     this.m_bgNodes[ 1 ].active = !this.m_bgNodes[ 0 ].active;
            // }
          }

          if (info.CurrentCount >= info.TotalCount) {
            if (this.m_bgNodes.length != 2) {
              // this.StateText.string = LocaleStringManager.GetInstance().GetString( Define.StringKey.DAILY_COMPLETE );
              this.ani.play("DailyMissionList_Com_" + color1);
              this.RewardTexts[0].color = color(255, 0, 0);
            }

            this.status = MissionDetailStatus.Complete;
          } else if (info.Lock == false) {
            if (this.m_bgNodes.length != 2) {
              // this.StateText.string = LocaleStringManager.GetInstance().GetString( Define.StringKey.DAILY_UNFINISHED );
              this.ani.play("DailyMissionList_Def_" + color1);
              this.RewardTexts[0].color = color(255, 0, 0);
            }

            this.status = MissionDetailStatus.Running;
          } else {
            if (this.m_bgNodes.length != 2) {
              this.ani.play("DailyMissionList_Def_" + color1);
              this.RewardTexts[0].color = color(255, 0, 0);
            }

            this.status = MissionDetailStatus.Lock;
          }

          return this.status;
        };

        _proto.showInfo = function showInfo() {
          // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {
          var bottomBar = this.m_extraManager.node.getComponent(BottombarManager);

          if (bottomBar) {
            switch (this.rewardType) {
              case MissionRewardType.Item:
                var icon = ItemList.GetInstance().GetItemIcon(this.m_itemInfo.icon); // let itemTitle = LocaleStringManager.GetInstance().GetString( Define.StringKey.BACKPACK_TXT_GAME ) + this.m_itemInfo.gameName;

                var itemTitle = this.m_itemInfo.gameName;
                var itemDataCopy = Tools.shallowCopy(this.m_itemInfo);
                var infoText = ItemList.GetInstance().GetItemInfoText(itemDataCopy, 2);
                var desc = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_TXT_INFO) + "\n" + infoText.gameDesc;
                bottomBar.OpenCommonText(this.m_itemInfo.title, desc, itemTitle, icon, this.m_itemNum);
                break;

              case MissionRewardType.LobbyMallCoin:
                var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.REWARD_RUBY_DESC);
                str = str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
                bottomBar.OpenCommonText(LocaleStringManager.GetInstance().GetString(Define.StringKey.REWARD_RUBY_TITLE), str);
            }
          }

          if (this.m_extraManager.RookieHintManager) {
            this.m_extraManager.RookieHintManager.CloseHint(Define.RookieHintType.MISSION_MENU);
          }

          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
        };

        _proto.redictToOtherGame = function redictToOtherGame() {
          var gameID = this.m_info.GameID;
          var gameName = LocaleStringManager.GetInstance().GetGameName(gameID);
          MsgBox.getInstance().ShowFullMessageBox(Define.StringKey.CHANGE_GAME_HINT, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, [gameName], function () {
            LifeSocket.GetInstance().ReqUrl(gameID, Define.BTN_CLICK_EVENT.MISSION_OTHER_GAME);
          });
        };

        _proto.playCompAni = function playCompAni() {
          // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     if ( this.tweenComp )
          //     {
          //         this.tweenComp.stop();
          //     }
          //     // let animation = this.CompNode.getChildByName("ani").getComponent(cc.Animation)
          //     this.tweenComp = cc.tween( this.CompNode.getChildByName( "complete" ) ).repeatForever( cc.tween().to( 0, { opacity: 255 } ).delay( 5 ).to( 0, { opacity: 0 } ).delay( 1 ) ).start();
          //     // animation.play();
          // }
          // else
          // {
          this.CompNode.active = true; // }
        };

        return DailyMissionItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ani", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_bgNodes", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "GameText", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "ConditionText", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "RewardInfoText", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "RewardTexts", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "RewardImg", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "Progress", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "ProgressText", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "TypeTag", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_tagNameSprites", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "CompNode", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "LockNode", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "RedictNode", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "gameIcon", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "ProgressBarSpriteFrame", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "FxNode", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "m_redDiamondNode", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "m_redDiamondNum", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "m_itemNode", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "m_itemIconSprite", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "m_itemNumLabel", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "m_infoBtnNode", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "m_rewardLayout", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "m_over3Back", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "m_rewardCell", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "m_rewardOrTypeTxt", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class)); // export interface MissionInfo
      // {
      //     ChainID: number,
      //     ConditionDesc: string,
      //     CurrentCount: number
      //     Date: string,
      //     Finished: boolean,
      //     ItemCount: number,
      //     ItemID: number,
      //     TotalCount: number,
      //     Vip: number,
      //     Show: number,
      //     Lock: boolean,
      //     MissionIndex: number,
      //     GameID: number,
      //     ExtendID: number,
      // }

      var MissionRewardType;

      (function (MissionRewardType) {
        MissionRewardType[MissionRewardType["Item"] = 0] = "Item";
        MissionRewardType[MissionRewardType["LobbyMallCoin"] = 1] = "LobbyMallCoin";
      })(MissionRewardType || (MissionRewardType = exports('MissionRewardType', {})));

      var MissionDetailStatus;

      (function (MissionDetailStatus) {
        MissionDetailStatus[MissionDetailStatus["Running"] = 0] = "Running";
        MissionDetailStatus[MissionDetailStatus["Complete"] = 1] = "Complete";
        MissionDetailStatus[MissionDetailStatus["Lock"] = 2] = "Lock";
      })(MissionDetailStatus || (MissionDetailStatus = exports('MissionDetailStatus', {})));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DailyMissionManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConnectManager.ts', './Define.ts', './LocaleStringManager.ts', './Tools.ts', './MissionProtocal.ts', './Wallet.ts', './missionCProto.mjs_cjs=&original=.js', './gaiaProto.mjs_cjs=&original=.js', './GaiaManager.ts', './gaiaProto.js', './missionCProto.js'], function (exports) {
  'use strict';

  var _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, log, ConnectManager, Define, LocaleStringManager, Tools, MissionReqData, walletManger, gaiaManager, _cjsExports, _cjsExports$1;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }, function (module) {
      ConnectManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      MissionReqData = module.MissionReqData;
    }, function (module) {
      walletManger = module.walletManger;
    }, null, null, function (module) {
      gaiaManager = module.gaiaManager;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      _cjsExports$1 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f9855eVGsFO57gbC57nUAEp", "DailyMissionManager", undefined);

      var DailyMissionManager = /*#__PURE__*/function () {
        function DailyMissionManager() {
          this.m_mission = null;
          this.m_createViewCb = null;
        }

        var _proto = DailyMissionManager.prototype;

        _proto.OnLoad = function OnLoad(debris) {
          this.m_mission = debris;
        };

        _proto.OnDestroy = function OnDestroy() {
          this.m_mission = null;
        };

        _proto.init = function init(controller, getNowMission, icon, timeText, isLandscape, callback) {
          var _this$m_mission;

          (_this$m_mission = this.m_mission) == null ? void 0 : _this$m_mission.init(controller, getNowMission, icon, timeText, isLandscape, callback);
        };

        _proto.NewInit = function NewInit() {
          var _this$m_createViewCb; // if ( Tools.CheckSwitchOff( Define.SwitchOffKeyDefine.CloseSideFeatures ) )
          // {
          //     return;
          // }


          log("New Init", this.m_createViewCb);

          var getNowDailyMissionInfo = function getNowDailyMissionInfo(cb) {
            var data = new _cjsExports.gaiaProto.MissionDailyReq();
            data.aid = Number(Define.APP.GetAID());
            data.token = Define.APP.GetAToken();
            data.lang = Tools.ConvertLanguageToFull(LocaleStringManager.CurrLang);
            data.isNow = true;

            if (walletManger.HasWallet) {
              data.currencynumber = walletManger.CurencyID;
            }

            log("getNowDailyMissionInfo", data);
            var req = new MissionReqData.GetDailyMission();
            req.reqData = _cjsExports.gaiaProto.MissionDailyReq.encode(data).finish();
            ConnectManager.GetInstance().SendCommand(req, function (ack) {
              gaiaManager.CheckAck(ack, function (type, data) {
                var info = _cjsExports$1.missionProto.DailyMissionDataResponse.decode(data);

                log("getNowDailyMissionInfo", info);

                if (info.error == undefined || info.error == 0) {
                  // if ( info.message )
                  // {
                  //     const missionInfo: proto.missionProto.IDailyMissionInfo = JSON.parse( info.message );
                  //     cb( missionInfo );
                  // }
                  if (info.messageb) {
                    var missionInfo = _cjsExports$1.missionProto.DailyMissionInfo.decode(info.messageb);

                    cb(missionInfo);
                  }
                }
              });
            }, false, true);
          };

          (_this$m_createViewCb = this.m_createViewCb) == null ? void 0 : _this$m_createViewCb.call(this, "", getNowDailyMissionInfo, function () {});
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          var _this$m_mission2;

          (_this$m_mission2 = this.m_mission) == null ? void 0 : _this$m_mission2.OnRotation(isLandscape);
        };

        _proto.ConvertMissionList = function ConvertMissionList(missionReward, nowChips) {
          if (this.m_mission) {
            return this.m_mission.ConvertMissionList(missionReward, nowChips);
          } else {
            return 0;
          }
        };

        _proto.ShowGetRedDiamond = /*#__PURE__*/function () {
          var _ShowGetRedDiamond = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(rewardNum) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!this.m_mission) {
                      _context.next = 3;
                      break;
                    }

                    _context.next = 3;
                    return this.m_mission.ShowGetRedDiamond(rewardNum);

                  case 3:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function ShowGetRedDiamond(_x) {
            return _ShowGetRedDiamond.apply(this, arguments);
          }

          return ShowGetRedDiamond;
        }();

        _proto.OpenUI = function OpenUI() {
          var _this$m_mission3;

          (_this$m_mission3 = this.m_mission) == null ? void 0 : _this$m_mission3.openUI();
        };

        _proto.CloseIcon = function CloseIcon() {
          var _this$m_mission4;

          (_this$m_mission4 = this.m_mission) == null ? void 0 : _this$m_mission4.CloseIcon();
        };

        _proto.RefreshMissionList = function RefreshMissionList(callback) {
          var _this$m_mission5;

          (_this$m_mission5 = this.m_mission) == null ? void 0 : _this$m_mission5.refreshMissionList(function () {
            callback == null ? void 0 : callback();
          });
        };

        _proto.LockDailyEnable = function LockDailyEnable(islock) {
          var _this$m_mission6;

          (_this$m_mission6 = this.m_mission) == null ? void 0 : _this$m_mission6.LockDailyEnable(islock);
        };

        _proto.ShowComplete = function ShowComplete() {
          var _this$m_mission7;

          (_this$m_mission7 = this.m_mission) == null ? void 0 : _this$m_mission7.ShowComplete();
        };

        _createClass(DailyMissionManager, [{
          key: "CreateViewCb",
          set: function set(v) {
            this.m_createViewCb = v;
          }
        }, {
          key: "HasMission",
          get: function get() {
            return !!this.m_mission;
          }
        }, {
          key: "HasRefreshMissionList",
          set: function set(v) {
            if (this.m_mission) {
              this.m_mission.hasRefreshMissionList = v;
            }
          }
        }, {
          key: "EventCb",
          set: function set(cb) {
            if (this.m_mission) {
              this.m_mission.eventCb = cb;
            }
          }
        }]);

        return DailyMissionManager;
      }();

      var missionManager = exports('missionManager', new DailyMissionManager());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DailyMissionRewardCell.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LocaleStringManager.ts', './Define.ts', './SoundManager.ts', './ItemList.ts', './Tools.ts', './BottombarManager.ts', './DailyMission.ts', './AppManager.ts', './BuffManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Animation, Sprite, Label, Node, SpriteAtlas, v3, Component, LocaleStringManager, Define, SoundManager, ItemList, Tools, BottombarManager, CollectCardID, TaDaBuffID, GameCoinID, LobbyMallCoinID, AppManager, BuffManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Sprite = module.Sprite;
      Label = module.Label;
      Node = module.Node;
      SpriteAtlas = module.SpriteAtlas;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      ItemList = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      BottombarManager = module.default;
    }, function (module) {
      CollectCardID = module.CollectCardID;
      TaDaBuffID = module.TaDaBuffID;
      GameCoinID = module.GameCoinID;
      LobbyMallCoinID = module.LobbyMallCoinID;
    }, function (module) {
      AppManager = module.default;
    }, function (module) {
      BuffManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "ca6c3Y8c19CTrjLAA4VDLu5", "DailyMissionRewardCell", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AtlasName = ["DailyMission_Icon_Coin_", "DailyMission_Icon_Ruby_", "DailyMission_Icon_gift", "Collection_card_06_b"];
      var DailyMissionRewardCell = exports('default', (_dec = property(Animation), _dec2 = property({
        type: Sprite,
        tooltip: "道具卡圖"
      }), _dec3 = property({
        type: Label,
        tooltip: "道具卡張數"
      }), _dec4 = property({
        type: Sprite,
        tooltip: "獎項圖片"
      }), _dec5 = property({
        type: Label,
        tooltip: "獎勵數目"
      }), _dec6 = property({
        type: Node,
        tooltip: "禮包"
      }), _dec7 = property({
        type: Node,
        tooltip: "禮包 i"
      }), _dec8 = property({
        type: SpriteAtlas,
        tooltip: "合圖"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DailyMissionRewardCell, _Component);

        function DailyMissionRewardCell() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "ani", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_cardSprite", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_cardNum", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rewardSprite", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rewardNum", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_gift", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_giftInfoIcon", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_missionAtlas", _descriptor8, _assertThisInitialized(_this));

          _this.m_giftInfo = void 0;
          _this.m_itemInfo = void 0;
          _this.m_extraManager = void 0;
          _this.m_isGiftBox = false;
          _this.m_giftBoxOpenCb = null;
          _this.m_isOpen = false;
          _this.m_itemNum = 0;
          _this.m_buffNode = null;
          return _this;
        }

        var _proto = DailyMissionRewardCell.prototype; // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          var _this2 = this;

          this.node.on(Node.EventType.TOUCH_END, function (event) {
            if (_this2.m_giftBoxOpenCb) {
              _this2.m_isOpen = !_this2.m_isOpen;

              _this2.m_giftBoxOpenCb(_this2.m_isOpen);
            } else {
              _this2.ShowInfo();
            }
          });
        };

        _proto.OnRotation = function OnRotation(isLandscape) {// if ( isLandscape )
          // {
          //     this.node.getComponent( Animation ).play( "Clip_DailyMission_MissionCell_Landscape" );
          //     this.FxNode.getComponent( Animation ).play( "Clip_DailyMission_Special_FX_Landscape" );
          // }
          // else
          // {
          //     this.node.getComponent( Animation ).play( "Clip_DailyMission_MissionCell_Portrait" );
          //     this.FxNode.getComponent( Animation ).play( "Clip_DailyMission_Special_FX_Portrait" );
          // }
        };

        _proto.CleanGiftCb = function CleanGiftCb() {
          this.m_giftBoxOpenCb = null;
        };

        _proto.SetGiftBox = function SetGiftBox(cb, itemBackNode) {
          if (this.m_buffNode) {
            this.m_buffNode.removeFromParent();
            BuffManager.GetInstance().ReturnBuffNode(this.m_buffNode, this.m_buffNode.name);
            this.m_buffNode = null;
          }

          this.m_giftBoxOpenCb = cb;
          this.m_isGiftBox = true;
          this.m_gift.active = true;
          this.m_giftInfoIcon.active = true;
          this.m_cardSprite.node.active = false;
          this.m_cardNum.node.active = false;
          this.m_rewardSprite.node.active = false;
          this.m_rewardNum.node.active = false;

          if (itemBackNode) {
            itemBackNode.active = false;
          }
        };

        _proto.SetCellRes = function SetCellRes(giftInfo, extraManager, itemBackNode, idx) {
          var _this3 = this;

          if (this.m_buffNode) {
            this.m_buffNode.removeFromParent();
            BuffManager.GetInstance().ReturnBuffNode(this.m_buffNode, this.m_buffNode.name);
            this.m_buffNode = null;
          }

          this.node.active = true;
          this.m_gift.active = false;
          this.m_giftInfoIcon.active = false;
          this.m_giftInfo = giftInfo;
          this.m_extraManager = extraManager;

          if (giftInfo.ItemInfo) {
            this.m_itemInfo = giftInfo.ItemInfo;
          }

          var itemId = giftInfo.ItemID;

          if (giftInfo.ItemInfo) {
            this.m_cardSprite.node.active = true;
            this.m_cardNum.node.active = true;
            this.m_rewardSprite.node.active = false;
            this.m_rewardNum.node.active = false;

            if (!ItemList.GetInstance().GetGameSpriteAtlas() && idx) {
              ItemList.GetInstance().AddListener(idx.toString(), function () {
                _this3.m_cardSprite.spriteFrame = ItemList.GetInstance().GetItemIcon(giftInfo.ItemInfo.icon);
              });
            } else {
              this.m_cardSprite.spriteFrame = ItemList.GetInstance().GetItemIcon(giftInfo.ItemInfo.icon);
            }

            this.m_cardNum.string = giftInfo.ItemCount.toString();
          } else {
            this.m_cardSprite.node.active = false;
            this.m_cardNum.node.active = false;
            this.m_rewardSprite.node.active = true;
            this.m_rewardNum.node.active = true;
            var imgName = "";
            var sprite;
            var num = 0;

            switch (itemId) {
              case LobbyMallCoinID:
                imgName = AtlasName[1] + "4";
                sprite = this.m_missionAtlas.getSpriteFrame(imgName);
                this.m_rewardSprite.spriteFrame = sprite;
                num = giftInfo.ItemCount;

                if (itemBackNode) {
                  itemBackNode.active = false;
                }

                if (num > 0) {
                  this.m_rewardNum.string = num.toString();
                } else {
                  this.m_rewardNum.string = "";
                }

                break;

              case GameCoinID:
                imgName = AtlasName[0] + "4";
                sprite = this.m_missionAtlas.getSpriteFrame(imgName);
                this.m_rewardSprite.spriteFrame = sprite;
                num = giftInfo.ItemCount;

                if (itemBackNode) {
                  itemBackNode.active = false;
                }

                if (num > 0) {
                  this.m_rewardNum.string = num.toString();
                } else {
                  this.m_rewardNum.string = "";
                }

                break;

              case TaDaBuffID:
                this.m_rewardSprite.spriteFrame = null;
                this.m_rewardNum.string = "";
                var nodeName = giftInfo.ExtendID.toString();

                if (itemBackNode) {
                  itemBackNode.active = true;
                }

                if (giftInfo.ItemCount && giftInfo.ItemCount > 1) {
                  nodeName = nodeName + "+" + giftInfo.ItemCount.toString();
                }

                this.m_buffNode = BuffManager.GetInstance().GetBuffNode(nodeName);

                if (this.m_buffNode) {
                  this.m_buffNode.scale = v3(0.6, 0.6, 1);
                  this.m_rewardSprite.node.addChild(this.m_buffNode);
                } else {
                  var addChildCb = function addChildCb(node) {
                    if (node) {
                      _this3.m_buffNode = node;
                      console.error('mission cell', _this3.m_buffNode.name, giftInfo.ItemCount);
                      _this3.m_buffNode.scale = v3(0.6, 0.6, 1);

                      _this3.m_rewardSprite.node.addChild(_this3.m_buffNode);
                    }
                  };

                  AppManager.GetBuffCardNode(giftInfo.ExtendID, addChildCb, giftInfo.ItemCount);
                }

                break;

              case CollectCardID:
                imgName = AtlasName[3];
                sprite = this.m_missionAtlas.getSpriteFrame(imgName);
                this.m_cardSprite.node.active = true;
                this.m_cardNum.node.active = true;
                this.m_rewardSprite.node.active = false;
                this.m_rewardNum.node.active = false;
                this.m_cardSprite.spriteFrame = sprite;
                this.m_cardNum.string = "";

                if (itemBackNode) {
                  itemBackNode.active = true;
                }

                break;
            }
          }
        };

        _proto.ShowInfo = function ShowInfo() {
          var itemId = this.m_giftInfo ? this.m_giftInfo.ItemID : null;
          var bottomBar = this.m_extraManager.node.getComponent(BottombarManager);

          if (bottomBar && itemId) {
            switch (itemId) {
              case LobbyMallCoinID:
                {
                  var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.REWARD_RUBY_DESC);
                  str = str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
                  bottomBar.OpenCommonText(LocaleStringManager.GetInstance().GetString(Define.StringKey.REWARD_RUBY_TITLE), str);
                }
                break;

              case GameCoinID:
                {
                  bottomBar.OpenCommonText(LocaleStringManager.GetInstance().GetString(Define.StringKey.REWARD_COIN_TITLE), LocaleStringManager.GetInstance().GetString(Define.StringKey.REWARD_COIN_DESC));
                }
                break;

              case TaDaBuffID:
                {
                  var buffName = "BUFF_TITLE";
                  var buffInfo = "BUFF_DESC";

                  if (this.m_buffNode) {
                    console.error('Check BuffData', this.m_buffNode["BuffData"]);
                    buffName = this.m_buffNode["BuffData"].buffName;
                    buffInfo = this.m_buffNode["BuffData"].info;
                  }

                  bottomBar.OpenCommonText(buffName, buffInfo);
                }
                break;

              case CollectCardID:
                {
                  bottomBar.OpenCommonText(LocaleStringManager.GetInstance().GetString("Define.StringKey.REWARD_COLLECTION_TITLE"), LocaleStringManager.GetInstance().GetString("Define.StringKey.REWARD_COLLECTION_DESC"));
                }
                break;

              default:
                var icon = ItemList.GetInstance().GetItemIcon(this.m_itemInfo.icon); // let itemTitle = LocaleStringManager.GetInstance().GetString( Define.StringKey.BACKPACK_TXT_GAME ) + this.m_itemInfo.gameName;

                var itemTitle = this.m_itemInfo.gameName;
                var itemDataCopy = Tools.shallowCopy(this.m_itemInfo);
                var infoText = ItemList.GetInstance().GetItemInfoText(itemDataCopy, 2);
                var desc = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_TXT_INFO) + "\n" + infoText.gameDesc;
                bottomBar.OpenCommonText(this.m_itemInfo.title, desc, itemTitle, icon, this.m_itemNum);
                break;
            }
          }

          if (this.m_extraManager.RookieHintManager) {
            this.m_extraManager.RookieHintManager.CloseHint(Define.RookieHintType.MISSION_MENU);
          }

          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
        };

        _createClass(DailyMissionRewardCell, [{
          key: "BuffNode",
          get: function get() {
            return this.m_buffNode;
          },
          set: function set(n) {
            this.m_buffNode = n;
          }
        }]);

        return DailyMissionRewardCell;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ani", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_cardSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_cardNum", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_rewardSprite", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_rewardNum", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_gift", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_giftInfoIcon", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_missionAtlas", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DataStruct.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createClass, cclegacy;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('ConnectionDataStruct', void 0);

      cclegacy._RF.push({}, "3a744+yqxtGMIYKXAwD1lZ+", "DataStruct", undefined);

      var ConnectionDataStruct;

      (function (_ConnectionDataStruct) {
        var CommonNotify = function CommonNotify() {
          this.status = void 0;
          this.msg = void 0;
        };

        _ConnectionDataStruct.CommonNotify = CommonNotify;

        var CashFlowNotify = function CashFlowNotify() {
          this.differMoney = void 0;
          this.playerMoney = void 0;
        };

        _ConnectionDataStruct.CashFlowNotify = CashFlowNotify;

        var DataStruct = function DataStruct() {};

        DataStruct.CommonNotify = CommonNotify;
        DataStruct.CashFlowNotify = CashFlowNotify;
        _ConnectionDataStruct.DataStruct = DataStruct;
        var RequestMethod;

        (function (RequestMethod) {
          RequestMethod[RequestMethod["Get"] = 0] = "Get";
          RequestMethod[RequestMethod["Post"] = 1] = "Post";
        })(RequestMethod || (RequestMethod = {}));

        _ConnectionDataStruct.RequestMethod = RequestMethod;
        var ErrorHandleType;

        (function (ErrorHandleType) {
          ErrorHandleType[ErrorHandleType["Ignore"] = 0] = "Ignore";
          ErrorHandleType[ErrorHandleType["Handle"] = 1] = "Handle";
        })(ErrorHandleType || (ErrorHandleType = {}));

        _ConnectionDataStruct.ErrorHandleType = ErrorHandleType;

        var ProtocolData = /*#__PURE__*/function () {
          function ProtocolData() {
            this.method = 0;
            this.url = "";
            this.type = ErrorHandleType.Ignore;
            this.reqData = null;
            this.info = null;
          }

          _createClass(ProtocolData, [{
            key: "Type",
            get: function get() {
              return this.type;
            }
          }, {
            key: "Method",
            get: function get() {
              return this.method;
            }
          }, {
            key: "URL",
            get: function get() {
              return this.url;
            }
          }]);

          return ProtocolData;
        }();

        _ConnectionDataStruct.ProtocolData = ProtocolData;

        var BigWinReplayReq = function BigWinReplayReq() {
          this.info = function () {};

          this.check = function () {};

          this.replay = function (index) {};
        };

        _ConnectionDataStruct.BigWinReplayReq = BigWinReplayReq;
      })(ConnectionDataStruct || (ConnectionDataStruct = exports('ConnectionDataStruct', {})));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Debris.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConnectionManager.ts', './Define.ts', './EnvironmentConfig.ts', './LocaleStringManager.ts', './SoundManager.ts', './Tools.ts', './ItemList.ts', './BottombarManager.ts', './CommonWebPage.ts', './BackpackManager.ts', './DebrisManager.ts', './MsgBox.ts', './NotificationManager.ts', './CellComponent.ts', './debrisproto.mjs_cjs=&original=.js', './TimeBool.ts', './LocalStorageManager.ts', './debrisproto.js'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, Animation, WebView, Sprite, Label, instantiate, SpriteAtlas, js, tween, Component, ConnectionManager, Define, EnvironmentConfig, LocaleStringManager, SoundManager, Tools, ItemList, BottombarManager, CommonWebPage, backpackManager, debrisManager, MsgBox, NotificationManager, CellComponent, TimeBool, LocalStorageManager, _cjsExports;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      Animation = module.Animation;
      WebView = module.WebView;
      Sprite = module.Sprite;
      Label = module.Label;
      instantiate = module.instantiate;
      SpriteAtlas = module.SpriteAtlas;
      js = module.js;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      ConnectionManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      ItemList = module.default;
    }, function (module) {
      BottombarManager = module.default;
    }, function (module) {
      CommonWebPage = module.default;
    }, function (module) {
      backpackManager = module.backpackManager;
    }, function (module) {
      debrisManager = module.debrisManager;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      NotificationManager = module.default;
    }, function (module) {
      CellComponent = module.default;
    }, null, function (module) {
      TimeBool = module.default;
    }, function (module) {
      LocalStorageManager = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18;

      cclegacy._RF.push({}, "e4427FhTvZD/aQveh7Ztjex", "Debris", undefined);

      var CHECK_TIME = 10;
      var BaseTime = 10;
      var RangeTime = 5;
      var SRedeemPageNum = 4;
      var Time = {
        Min: 60,
        HOUR: 3600,
        DAY: 86400
      };
      var TabName = ["Debris_Activity", "Debris_SRedeem", "Debris_ARedeem", "Debris_BRedeem", "Debris_CRedeem"];
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Debris = exports('default', (_dec = property({
        type: Node,
        tooltip: "橫版內容"
      }), _dec2 = property({
        type: Prefab,
        tooltip: "橫版的cell"
      }), _dec3 = property({
        type: Node,
        tooltip: "直版內容"
      }), _dec4 = property({
        type: Prefab,
        tooltip: "直版的cell"
      }), _dec5 = property({
        type: Animation,
        tooltip: "內容的直橫版切換"
      }), _dec6 = property({
        type: WebView,
        tooltip: "活動頁"
      }), _dec7 = property({
        type: Prefab,
        tooltip: "Common WebPage"
      }), _dec8 = property({
        type: Node,
        tooltip: "亮起的按鈕"
      }), _dec9 = property({
        type: Node,
        tooltip: "紅點"
      }), _dec10 = property({
        type: Sprite,
        tooltip: "標題"
      }), _dec11 = property({
        type: Label,
        tooltip: "標籤文字"
      }), _dec12 = property({
        type: Sprite,
        tooltip: "頁簽標題-暗"
      }), _dec13 = property({
        type: Sprite,
        tooltip: "頁簽標題-亮"
      }), _dec14 = property({
        type: Label,
        tooltip: "押注提示"
      }), _dec15 = property({
        type: Label,
        tooltip: "剩餘時間"
      }), _dec16 = property({
        type: Label,
        tooltip: "兌換道具"
      }), _dec17 = property({
        type: Label,
        tooltip: "獎勵"
      }), _dec18 = property({
        type: Label,
        tooltip: "兌換數量"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Debris, _Component);

        function Debris() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_contentNodeL", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_cellPrefabL", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentNodeS", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_cellPrefabS", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentAnim", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_webView", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_commonWebPagePrefab", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lightNodes", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_redPointNodes", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_titleSprite", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tabTitleLabels", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_darkTabTitleSprites", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lightTabTitleSprites", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betHintLabel", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_leftTimeLabel", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_exchangeItemLabel", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_exchangeAwardLabel", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_exchangeAmountLabel", _descriptor18, _assertThisInitialized(_this));

          _this.m_activityCb = null;
          _this.m_playerInfoCb = null;
          _this.m_getDebrisCb = null;
          _this.m_exchangeCb = null;
          _this.m_iconBtnCb = null;
          _this.m_debrisAtlas = null;
          _this.m_cellListL = [];
          _this.m_cellListS = [];
          _this.m_checkTween = null;
          _this.m_timeCounter = 0;
          _this.m_checkTimer = null;
          _this.m_isInit = false;
          _this.m_activityNo = 0;
          _this.m_fallEndTime = null;
          _this.m_endTime = null;
          _this.m_selectIdx = 4;
          _this.m_debrisInfoList = null;
          _this.m_minBets = null;
          _this.m_atlas = null;
          _this.m_isCheckActive = false;
          _this.m_extraManager = null;
          _this.m_bottomBar = null;
          _this.m_commonWebPage = null;
          return _this;
        }

        var _proto = Debris.prototype;

        _proto.onLoad = function onLoad() {
          debrisManager.OnLoad(this);
        };

        _proto.onDestroy = function onDestroy() {
          debrisManager.OnDestroy();
        };

        _proto.Init = function Init(manager, activityCb, playerInfoCb, getDebrisCb, exchangeCb, iconBtnCb) {
          var _this2 = this;

          this.m_extraManager = manager;
          this.m_activityCb = activityCb;
          this.m_playerInfoCb = playerInfoCb;
          this.m_getDebrisCb = getDebrisCb;
          this.m_exchangeCb = exchangeCb;
          this.m_iconBtnCb = iconBtnCb;
          this.m_isInit = true;
          this.SetTxt();
          this.LoadDebris();
          this.m_bottomBar = this.m_extraManager.node.getComponent(BottombarManager);
          var ratio = this.m_bottomBar.Wallet.Ratio;
          EnvironmentConfig.COLLECT_URL = EnvironmentConfig.COLLECT_URL.replace("{ratio}", Tools.strip(ratio).toString());

          if (this.m_webView) {
            this.m_webView.url = EnvironmentConfig.COLLECT_URL;
            this.m_webView.node.active = true;
          } else {
            var node = instantiate(this.m_commonWebPagePrefab);
            this.node.addChild(node);
            this.m_commonWebPage = node.getComponent(CommonWebPage);

            this.m_commonWebPage.CloseCb = function () {
              _this2.OnSelectPage(null, SRedeemPageNum.toString());
            };

            this.m_commonWebPage.Show(EnvironmentConfig.COLLECT_URL, this.m_bottomBar.IsLandscape);
            this.m_commonWebPage.SetTitle(LocaleStringManager.GetInstance().GetString(Define.StringKey.DEBRIS_EVENT));
          }

          this.m_checkTimer = new TimeBool();
          this.m_checkTimer.UseDT(true);
        };

        _proto.CheckFirstDebris = function CheckFirstDebris() {
          var key = Define.AID + ":" + Define.NOW_GAME_ID + ":DebrisTimes";
          var value = LocalStorageManager.GetInt(key);
          value = value || 0;
          var maxValue = Define.DEBRIS_TIMES;

          if (value < maxValue) {
            LocalStorageManager.SetInt(key, value + 1);
          } else {
            this.m_commonWebPage.node.active = false;
          }
        };

        _proto.SetTxt = function SetTxt(isTitle) {
          if (isTitle === void 0) {
            isTitle = false;
          }

          if (!isTitle) {
            this.SetTitle();
          }

          if (this.m_tabTitleLabels.length > 1) {
            Tools.SetFont(this.m_tabTitleLabels[0]);
            this.m_tabTitleLabels[0].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.DEBRIS_EVENT);
            var type = ["", "C", "B", "A", "S"];

            for (var i = 1; i < this.m_tabTitleLabels.length; i++) {
              Tools.SetFont(this.m_tabTitleLabels[i]);
              this.m_tabTitleLabels[i].string = type[i] + "-" + LocaleStringManager.GetInstance().GetString(Define.StringKey.DEBRIS_EXCHANGE);
            }
          }

          if (this.m_exchangeAmountLabel) {
            Tools.SetFont(this.m_exchangeAmountLabel);
            this.m_exchangeAmountLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.DEBRIS_AMOUNT);
          }

          if (this.m_exchangeAwardLabel) {
            Tools.SetFont(this.m_exchangeAwardLabel);
            this.m_exchangeAwardLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.DEBRIS_AWARD);
          }

          if (this.m_exchangeItemLabel) {
            Tools.SetFont(this.m_exchangeItemLabel);
            this.m_exchangeItemLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.DEBRIS_ITEM);
          }

          if (this.m_atlas) {
            // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {
            this.m_titleSprite.spriteFrame = this.m_atlas.getSpriteFrame("Debris_Title");
            this.m_extraManager.SetDebrisBtnTitle(this.m_atlas.getSpriteFrame("Debris_IconName"));

            for (var _i = 0; _i < this.m_darkTabTitleSprites.length; _i++) {
              this.m_darkTabTitleSprites[_i].spriteFrame = this.m_atlas.getSpriteFrame(TabName[_i]);
              this.m_lightTabTitleSprites[_i].spriteFrame = this.m_atlas.getSpriteFrame(TabName[_i] + "_On");
            } // }
            // else
            // {
            //     this.m_titleSprite.spriteFrame = this.m_atlas.getSpriteFrame( "txt_Collect" );
            //     this.m_extraManager.SetDebrisBtnTitle( this.m_atlas.getSpriteFrame( "txt_Collect" ) );
            // }

          }

          Tools.SetFont(this.m_leftTimeLabel);
          Tools.SetFont(this.m_betHintLabel);

          for (var _i2 = 0; _i2 < this.m_cellListS.length; _i2++) {
            if (this.m_cellListS[_i2]) {
              for (var j = 0; j < this.m_cellListS[_i2].length; j++) {
                this.m_cellListS[_i2][j].SetTxt();
              }
            }
          }

          for (var _i3 = 0; _i3 < this.m_cellListL.length; _i3++) {
            if (this.m_cellListL[_i3]) {
              for (var _j = 0; _j < this.m_cellListL[_i3].length; _j++) {
                this.m_cellListL[_i3][_j].SetTxt();
              }
            }
          }
        };

        _proto.OpenCommonText = function OpenCommonText(title, content, itemTilte, itemIconSprite, itemNum) {
          this.m_bottomBar.OpenCommonText(title, content, itemTilte, itemIconSprite, itemNum);
        };

        _proto.SetTitle = function SetTitle() {
          var _this3 = this; // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {


          var path = Tools.GetFilePath("AsttText/" + LocaleStringManager.CurrLang + "/%s/Debris/Debris");
          Define.OtherBundle.load(path, SpriteAtlas, function (error, assets) {
            if (error) {
              _this3.SetTitle();

              return;
            }

            _this3.m_atlas = assets;

            _this3.SetTxt(true);
          }); // }
          // else
          // {
          //     Define.CommonBundle.load( "AsttText/" + LocaleStringManager.CurrLang + "/Collection/AutoAtlas", cc.SpriteAtlas, ( error: Error, assets: cc.SpriteAtlas ) =>
          //     {
          //         if ( error )
          //         {
          //             this.SetTitle();
          //             return;
          //         }
          //         this.m_atlas = assets;
          //         this.SetTxt( true );
          //     } );
          // }
        };

        _proto.LoadDebris = function LoadDebris() {
          var _this4 = this;

          var path = Tools.GetFilePath("Astt/%s/Debris/DebrisImg/DebrisAtlas");
          Define.CommonBundle.load(path, SpriteAtlas, function (err, assets) {
            if (err) {
              _this4.LoadDebris();

              return;
            }

            _this4.m_debrisAtlas = assets;

            if (!backpackManager.ItemPlist) {
              var checkItemInfo = function checkItemInfo() {
                if (backpackManager.ItemPlist) {
                  _this4.m_activityCb && _this4.m_activityCb();

                  _this4.unschedule(checkItemInfo);
                }
              };

              _this4.schedule(checkItemInfo, 1);
            } else {
              _this4.m_activityCb && _this4.m_activityCb();
            }
          });
        };

        _proto.Process = function Process(dt) {
          if (this.m_checkTimer) {
            this.m_checkTimer.Update(dt * 1000);

            if (this.m_checkTimer.ToBool()) {
              this.m_checkTimer.Start(CHECK_TIME * 1000);
              var now = Date.now();

              if (now > this.m_endTime) {
                this.m_timeCounter = 0;
              } else {
                this.m_timeCounter = this.m_endTime - now;
              }
            }
          }

          if (this.m_timeCounter > 0) {
            this.m_timeCounter -= dt * 1000;
            var left = Math.floor(this.m_timeCounter / 1000);
            var day = Math.floor(left / Time.DAY);
            left = left - day * Time.DAY;
            var hour = Math.floor(left / Time.HOUR);
            left = left - hour * Time.HOUR;
            var min = Math.floor(left / Time.Min);
            left = left - min * Time.Min;
            var str = js.formatStr(LocaleStringManager.GetInstance().GetString(Define.StringKey.DEBRIS_LEFT_TIME), day, hour, min);
            this.m_leftTimeLabel.string = str;
          } else {
            if (!this.m_isCheckActive && this.m_endTime != null) {
              var _this$m_activityCb;

              this.m_isCheckActive = true;
              this.m_endTime = null;
              (_this$m_activityCb = this.m_activityCb) == null ? void 0 : _this$m_activityCb.call(this);
            }
          }
        };

        _proto.OnSelectPage = function OnSelectPage(event, eventData) {
          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
          var idx = Number(eventData);

          if (!isNaN(idx)) {
            this.m_selectIdx = idx;

            if (this.m_webView) {
              this.m_webView.node.active = idx === 0;
            } else {
              this.m_commonWebPage.node.active = idx === 0;
            }

            for (var i = 0; i < this.m_lightNodes.length; i++) {
              this.m_lightNodes[i].active = i === idx;
            }

            for (var _i4 = 0; _i4 < this.m_cellListL.length; _i4++) {
              //0會是undefine
              if (this.m_cellListL[_i4]) {
                for (var j = 0; j < this.m_cellListL[_i4].length; j++) {
                  this.m_cellListL[_i4][j].node.active = _i4 === idx;
                }
              }
            }

            for (var _i5 = 0; _i5 < this.m_cellListS.length; _i5++) {
              //0會是undefine
              if (this.m_cellListS[_i5]) {
                for (var _j2 = 0; _j2 < this.m_cellListS[_i5].length; _j2++) {
                  this.m_cellListS[_i5][_j2].node.active = _i5 === idx;
                }
              }
            }

            if (this.m_selectIdx !== 0) {
              var bottomBar = this.m_extraManager.node.getComponent(BottombarManager);
              var ratio = bottomBar.Wallet.Ratio;
              this.m_betHintLabel.string = js.formatStr(LocaleStringManager.GetInstance().GetString(Define.StringKey.DEBRIS_BET_HINT), Tools.times(this.m_minBets[this.m_selectIdx - 1], ratio).toString());
            }
          }
        };

        _proto.GetDebrisIcon = function GetDebrisIcon(no) {
          if (this.m_debrisInfoList) {
            for (var i = 0; i < this.m_debrisInfoList.length; i++) {
              if (this.m_debrisInfoList[i].no === no) {
                return this.m_debrisAtlas.getSpriteFrame(this.m_debrisInfoList[i].icon.toString());
              }
            }
          }

          return null;
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          if (!this.m_commonWebPage) {
            if (isLandscape) {
              this.node.getComponent(Animation).play("ViewL");
            } else {
              this.node.getComponent(Animation).play("ViewS");
            }
          } else {
            if (isLandscape) {
              this.node.getComponent(Animation).play("Clip_Common_TagFrame_Landscape");
              this.m_contentAnim.play("Clip_Debris_RedeemPage_Landscape");
            } else {
              this.node.getComponent(Animation).play("Clip_Common_TagFrame_Portrait");
              this.m_contentAnim.play("Clip_Debris_RedeemPage_Portrait");
            }

            this.m_commonWebPage.OnRotation(isLandscape);
          }
        }
        /**@ch 顯示兌換頁 */
        ;

        _proto.Show = function Show(isLandscape) {
          this.node.active = true;
          this.OnRotation(isLandscape);
          this.m_extraManager.SetDebrisBtnRedPoint(false);
          this.CheckFirstDebris();
          ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.DEBRISE_VIEW_OPEN, 1, isLandscape));
        }
        /**@ch 隱藏兌換頁 */
        ;

        _proto.Hide = function Hide() {
          this.node.active = false;
        };

        _proto.CloseDebris = function CloseDebris() {
          this.m_iconBtnCb(false);
          this.Hide();

          if (this.m_checkTween) {
            this.m_checkTween.stop();
            this.m_checkTween = null;
          }
        };

        _proto.SetCheckCounter = function SetCheckCounter() {
          var _this5 = this;

          if (this.m_checkTween) {
            this.m_checkTween.stop();
            this.m_checkTween = null;
          }

          var time = BaseTime + Math.floor(Math.random() * RangeTime);
          this.m_checkTween = tween(this).delay(time).call(function () {
            _this5.ReqGetDebris();
          }).start();
        } //請求
        ;

        _proto.ReqExchange = function ReqExchange(formula, amount) {
          this.m_exchangeCb && this.m_exchangeCb(formula, amount, this.m_activityNo);
        };

        _proto.ReqGetDebris = function ReqGetDebris() {
          this.m_getDebrisCb && this.m_getDebrisCb();
        } //回應
        ;

        _proto.OnRecvActivity = function OnRecvActivity(info) {
          if (typeof info === "string") {
            var bytes = Tools.DecodeProtoString(info);
            info = _cjsExports.debrisprotocol.ActivityOutput.decode(bytes);
          }

          this.m_checkTimer.Clear();

          if (!info || !(info.Debris && info.Debris.length > 0) || !(info.minbet && info.minbet.length > 0)) {
            this.CloseDebris();
            return;
          }

          if (Date.now() >= Tools.times(Number(info.end.seconds), 1000)) {
            this.CloseDebris();
            return;
          }

          this.m_checkTimer.Start(CHECK_TIME * 1000);
          this.m_activityNo = info.no;
          this.m_debrisInfoList = info.Debris;
          this.m_minBets = info.minbet;

          if (this.m_selectIdx !== 0) {
            this.m_betHintLabel.string = js.formatStr(LocaleStringManager.GetInstance().GetString(Define.StringKey.DEBRIS_BET_HINT), this.m_minBets[this.m_selectIdx - 1].toString());
          } //server只給到秒


          this.m_fallEndTime = Tools.times(Number(info.fall.seconds), 1000);
          this.m_endTime = Tools.times(Number(info.end.seconds), 1000);
          this.m_timeCounter = this.m_endTime - Date.now(); //清除舊資料

          for (var i = 0; i < this.m_cellListL.length; i++) {
            if (this.m_cellListL[i]) {
              while (this.m_cellListL[i].length > 0) {
                var cell = this.m_cellListL[i].pop();
                cell.node.removeFromParent();
                cell.node.destroy();
              }
            }
          }

          for (var _i6 = 0; _i6 < this.m_cellListS.length; _i6++) {
            if (this.m_cellListS[_i6]) {
              while (this.m_cellListS[_i6].length > 0) {
                var _cell = this.m_cellListS[_i6].pop();

                _cell.node.removeFromParent();

                _cell.node.destroy();
              }
            }
          } //設定新資料


          for (var _i7 = 0; _i7 < info.formula.length; _i7++) {
            //橫版
            var nodeL = instantiate(this.m_cellPrefabL);
            this.m_contentNodeL.addChild(nodeL);
            var cellL = nodeL.getComponent(CellComponent);
            cellL.Init(this, info.formula[_i7], info.ItemGameDesc);

            if (!this.m_cellListL[info.formula[_i7].level]) {
              this.m_cellListL[info.formula[_i7].level] = [];
            }

            this.m_cellListL[info.formula[_i7].level].push(cellL);

            nodeL.active = info.formula[_i7].level === this.m_selectIdx; //直版

            var nodeS = instantiate(this.m_cellPrefabS);
            this.m_contentNodeS.addChild(nodeS);
            var cellS = nodeS.getComponent(CellComponent);
            cellS.Init(this, info.formula[_i7], info.ItemGameDesc);

            if (!this.m_cellListS[info.formula[_i7].level]) {
              this.m_cellListS[info.formula[_i7].level] = [];
            }

            this.m_cellListS[info.formula[_i7].level].push(cellS);

            nodeS.active = info.formula[_i7].level === this.m_selectIdx;
          }

          this.m_playerInfoCb && this.m_playerInfoCb(this.m_activityNo);
        }
        /**@ch 需update玩家兌換資訊 */
        ;

        _proto.OnRecvPlayerInfo = function OnRecvPlayerInfo(info) {
          if (!info) {
            this.CloseDebris();
            return;
          }

          if (typeof info === "string") {
            var bytes = Tools.DecodeProtoString(info);
            info = _cjsExports.debrisprotocol.PlayerInfoAck.decode(bytes);
          }

          if (info.result === 0 || info.result === undefined) {
            var canChanges = [];

            for (var i = 0; i < this.m_cellListL.length; i++) {
              if (this.m_cellListL[i]) {
                for (var j = 0; j < this.m_cellListL[i].length; j++) {
                  var canChange = this.m_cellListL[i][j].UpdateInfo(info);

                  if (!canChanges[i]) {
                    canChanges[i] = canChange;
                  }
                }
              }
            }

            for (var _i8 = 0; _i8 < this.m_cellListS.length; _i8++) {
              if (this.m_cellListS[_i8]) {
                for (var _j3 = 0; _j3 < this.m_cellListS[_i8].length; _j3++) {
                  this.m_cellListS[_i8][_j3].UpdateInfo(info);
                }
              }
            }

            for (var _i9 = 0; _i9 < this.m_redPointNodes.length; _i9++) {
              if (this.m_redPointNodes[_i9]) {
                this.m_redPointNodes[_i9].active = canChanges[_i9];
              }
            }

            if (this.m_isInit) {
              this.m_isInit = false;
              this.m_iconBtnCb && this.m_iconBtnCb(true);
              this.SetCheckCounter();
            }
          }
        }
        /**@ch 獲得碎片 */
        ;

        _proto.OnRecvGetDebris = function OnRecvGetDebris(info) {
          if (!info && info !== "") {
            this.CloseDebris();
            return;
          }

          if (typeof info === "string") {
            var bytes = Tools.DecodeProtoString(info);
            info = _cjsExports.debrisprotocol.PlayerGetAck.decode(bytes);
          }

          if (info.result === 0 || info.result === undefined) {
            if (info.get) {
              this.m_playerInfoCb && this.m_playerInfoCb(this.m_activityNo);
              this.m_extraManager.SetDebrisBtnRedPoint(true);
            }

            NotificationManager.GetInstance().UpdateDebrisNotify(info.get); //還沒到掉落結束

            if (Date.now() <= this.m_fallEndTime) {
              this.SetCheckCounter();
            }
          }
        }
        /**@ch 兌換道具卡相關 */
        ;

        _proto.OnRecvExchange = function OnRecvExchange(info) {
          if (!info) {
            this.CloseDebris();
            return;
          }

          if (typeof info === "string") {
            var bytes = Tools.DecodeProtoString(info);
            info = _cjsExports.debrisprotocol.ExchangeDebrisAck.decode(bytes);
          }

          if (info.result === 0 || info.result === undefined) {
            if ((info.awardtype & Define.DAILYMISSION_REWARD_TYPE.ItemCard) > 0) {
              var setting = {};
              setting.contextKey = Define.StringKey.SIGN_IN_CONGRATS;
              setting.itemSpriteFrame = ItemList.GetInstance().GetItemIcon(info.iicon);
              setting.itemNum = info.amount;
              setting.titleKey = MsgBox.DEFAULT_TITLE_KEY;
              setting.showCancelBtn = false;
              setting.showConfirmBtn = true;
              setting.showCloseBtn = false;
              MsgBox.getInstance().PushMessageBoxSetting(setting);
              backpackManager.ShowRedpoint(true);
              backpackManager.ShowGameRedpoint(true);
            }

            if ((info.awardtype & Define.DAILYMISSION_REWARD_TYPE.MallCoin) > 0) {
              this.m_extraManager.ShowGetRedDiamond(info.amount);
            }

            this.m_playerInfoCb && this.m_playerInfoCb(this.m_activityNo);
          }
        };

        return Debris;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_contentNodeL", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_cellPrefabL", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_contentNodeS", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_cellPrefabS", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_contentAnim", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_webView", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_commonWebPagePrefab", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_lightNodes", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_redPointNodes", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_titleSprite", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_tabTitleLabels", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_darkTabTitleSprites", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_lightTabTitleSprites", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_betHintLabel", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_leftTimeLabel", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_exchangeItemLabel", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "m_exchangeAwardLabel", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "m_exchangeAmountLabel", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DebrisBtn.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Button, Node, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Button = module.Button;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "87a634yo2lJZ6Tk/A6lhJOq", "DebrisBtn", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DebrisBtn = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "標題"
      }), _dec2 = property({
        type: Button,
        tooltip: "按鈕"
      }), _dec3 = property({
        type: Node,
        tooltip: "紅點"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DebrisBtn, _Component);

        function DebrisBtn() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_titleSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_btn", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_redPointNode", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(DebrisBtn, [{
          key: "TitleSprite",
          get: function get() {
            return this.m_titleSprite;
          }
        }, {
          key: "Btn",
          get: function get() {
            return this.m_btn;
          }
        }, {
          key: "RedPointNode",
          get: function get() {
            return this.m_redPointNode;
          }
        }]);

        return DebrisBtn;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_titleSprite", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_btn", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_redPointNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DebrisCell.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Label, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "f4d05ZyE8VIiLHOwruTqfcu", "DebrisCell", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DebrisCell = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "碎片圖示"
      }), _dec2 = property({
        type: Label,
        tooltip: "數量"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DebrisCell, _Component);

        function DebrisCell() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_debrisSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_numLabel", _descriptor2, _assertThisInitialized(_this));

          _this.m_needNum = 0;
          _this.m_num = 0;
          _this.m_changeNum = 1;
          return _this;
        }

        var _proto = DebrisCell.prototype;

        _proto.Init = function Init(debris, num) {
          this.m_debrisSprite.spriteFrame = debris;
          this.m_needNum = num;
          this.m_changeNum = 1;
          this.UpdateNum(0);
        };

        _proto.UpdateNum = function UpdateNum(num) {
          this.m_num = num;
          this.m_numLabel.string = num + "/" + this.m_needNum * this.m_changeNum;
        };

        _proto.UpdataNeedNum = function UpdataNeedNum(num) {
          this.m_changeNum = num;
          this.m_numLabel.string = this.m_num + "/" + this.m_needNum * this.m_changeNum;
        };

        _createClass(DebrisCell, [{
          key: "NumLabel",
          get: function get() {
            return this.m_numLabel;
          }
        }, {
          key: "NeedNum",
          get: function get() {
            return this.m_needNum;
          }
        }, {
          key: "Num",
          get: function get() {
            return this.m_num;
          }
        }]);

        return DebrisCell;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_debrisSprite", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_numLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DebrisManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConnectManager.ts', './Define.ts', './DebrisProtocal.ts', './Wallet.ts', './gaiaProto.mjs_cjs=&original=.js', './GaiaManager.ts', './debrisproto.mjs_cjs=&original=.js', './Protocol.ts', './LocaleStringManager.ts', './debrisproto.js', './gaiaProto.js'], function (exports) {
  'use strict';

  var _createClass, cclegacy, log, ConnectManager, Define, DebrisReqData, walletManger, gaiaManager, BackpackProtocol, LocaleStringManager, _cjsExports, _cjsExports$1;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }, function (module) {
      ConnectManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      DebrisReqData = module.DebrisReqData;
    }, function (module) {
      walletManger = module.walletManger;
    }, null, function (module) {
      gaiaManager = module.gaiaManager;
    }, null, function (module) {
      BackpackProtocol = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      _cjsExports$1 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9cb37cV8rVJCJ1UxOC8FS7X", "DebrisManager", undefined);

      var DebrisCommandType = {
        PROTOCOL_TYPE_DEBRIS_AINFO: 56,
        PROTOCOL_TYPE_DEBRIS_PINFO: 57,
        PROTOCOL_TYPE_DEBRIS_PGET: 58,
        PROTOCOL_TYPE_DEBRIS_EXCHANGE: 59
      };
      var DebrisManager = exports('DebrisManager', /*#__PURE__*/function () {
        function DebrisManager() {
          this.m_debris = null;
          this.m_createViewCb = null;
        }

        var _proto = DebrisManager.prototype;

        _proto.OnLoad = function OnLoad(debris) {
          this.m_debris = debris;
        };

        _proto.OnDestroy = function OnDestroy() {
          this.m_debris = null;
        };

        _proto.Init = function Init(manager, activityCb, playerInfoCb, getDebrisCb, exchangeCb, iconBtnCb) {
          var _this$m_debris;

          (_this$m_debris = this.m_debris) == null ? void 0 : _this$m_debris.Init(manager, activityCb, playerInfoCb, getDebrisCb, exchangeCb, iconBtnCb);
        };

        _proto.NewInit = function NewInit() {
          var _this = this,
              _this$m_createViewCb; // if ( Tools.CheckSwitchOff( Define.SwitchOffKeyDefine.CloseSideFeatures ) )
          // {
          //     return;
          // }


          var activityCb = function activityCb() {
            var data = new _cjsExports$1.gaiaProto.DebrisAInfoReq();
            data.aid = Number(Define.APP.GetAID());
            data.token = Define.APP.GetAToken();
            data.lang = BackpackProtocol.Language[LocaleStringManager.CurrLang];

            if (walletManger.HasWallet) {
              data.currencynumber = walletManger.CurencyID;
            }

            var req = new DebrisReqData.DebrisActivity();
            req.reqData = _cjsExports$1.gaiaProto.DebrisAInfoReq.encode(data).finish();
            ConnectManager.GetInstance().SendCommand(req, function (ack) {
              gaiaManager.CheckAck(ack, function (type, data) {
                _this.OnRecvAck(type, data);
              });
            }, false, true);
          };

          var playerInfoCb = function playerInfoCb(activityNo) {
            var data = new _cjsExports$1.gaiaProto.DebrisPInfoReq();
            data.aid = Number(Define.APP.GetAID());
            data.token = Define.APP.GetAToken();
            data.ano = activityNo;

            if (walletManger.HasWallet) {
              data.currencynumber = walletManger.CurencyID;
            }

            var req = new DebrisReqData.DebrisPlayer();
            req.reqData = _cjsExports$1.gaiaProto.DebrisPInfoReq.encode(data).finish();
            ConnectManager.GetInstance().SendCommand(req, function (ack) {
              gaiaManager.CheckAck(ack, function (type, data) {
                _this.OnRecvAck(type, data);
              });
            }, false, true);
          };

          var getDebrisCb = function getDebrisCb() {
            var data = new _cjsExports$1.gaiaProto.DebrisPGetReq();
            data.aid = Number(Define.APP.GetAID());
            data.token = Define.APP.GetAToken();

            if (walletManger.HasWallet) {
              data.currencynumber = walletManger.CurencyID;
            }

            var req = new DebrisReqData.DebrisGet();
            req.reqData = _cjsExports$1.gaiaProto.DebrisPGetReq.encode(data).finish();
            ConnectManager.GetInstance().SendCommand(req, function (ack) {
              gaiaManager.CheckAck(ack, function (type, data) {
                _this.OnRecvAck(type, data);
              });
            }, false, true);
          };

          var exchangeCb = function exchangeCb(formula, amount, activityno) {
            var data = new _cjsExports$1.gaiaProto.DebrisExchangeReq();
            data.aid = Number(Define.APP.GetAID());
            data.token = Define.APP.GetAToken();
            data.fno = formula;
            data.amount = amount;
            data.ano = activityno;

            if (walletManger.HasWallet) {
              data.currencynumber = walletManger.CurencyID;
            }

            var req = new DebrisReqData.DebrisExchange();
            req.reqData = _cjsExports$1.gaiaProto.DebrisExchangeReq.encode(data).finish();
            ConnectManager.GetInstance().SendCommand(req, function (ack) {
              gaiaManager.CheckAck(ack, function (type, data) {
                _this.OnRecvAck(type, data);
              });
            }, false, true);
          };

          (_this$m_createViewCb = this.m_createViewCb) == null ? void 0 : _this$m_createViewCb.call(this, activityCb, playerInfoCb, getDebrisCb, exchangeCb);
        };

        _proto.OnRecvAck = function OnRecvAck(type, data) {
          log("OnRecvAck", type, data);

          switch (type) {
            case DebrisCommandType.PROTOCOL_TYPE_DEBRIS_AINFO:
              {
                var _this$m_debris2;

                var _info = _cjsExports.debrisprotocol.ActivityOutput.decode(data);

                log("PROTOCOL_TYPE_DEBRIS_AINFO", _info);
                (_this$m_debris2 = this.m_debris) == null ? void 0 : _this$m_debris2.OnRecvActivity(_info);
                break;
              }

            case DebrisCommandType.PROTOCOL_TYPE_DEBRIS_PINFO:
              {
                var _this$m_debris3;

                var _info2 = _cjsExports.debrisprotocol.PlayerInfoAck.decode(data);

                log("PROTOCOL_TYPE_DEBRIS_PINFO", _info2);
                (_this$m_debris3 = this.m_debris) == null ? void 0 : _this$m_debris3.OnRecvPlayerInfo(_info2);
                break;
              }

            case DebrisCommandType.PROTOCOL_TYPE_DEBRIS_PGET:
              {
                var _this$m_debris4;

                var _info3 = _cjsExports.debrisprotocol.PlayerGetAck.decode(data);

                log("PROTOCOL_TYPE_DEBRIS_PGET", _info3);
                (_this$m_debris4 = this.m_debris) == null ? void 0 : _this$m_debris4.OnRecvGetDebris(_info3);
                break;
              }

            case DebrisCommandType.PROTOCOL_TYPE_DEBRIS_EXCHANGE:
              {
                var _this$m_debris5;

                var _info4 = _cjsExports.debrisprotocol.ExchangeDebrisAck.decode(data);

                log("PROTOCOL_TYPE_DEBRIS_EXCHANGE", _info4);
                (_this$m_debris5 = this.m_debris) == null ? void 0 : _this$m_debris5.OnRecvExchange(_info4);
                break;
              }
          }
        };

        _proto.Process = function Process(dt) {
          var _this$m_debris6;

          (_this$m_debris6 = this.m_debris) == null ? void 0 : _this$m_debris6.Process(dt);
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          var _this$m_debris7;

          (_this$m_debris7 = this.m_debris) == null ? void 0 : _this$m_debris7.OnRotation(isLandscape);
        };

        _proto.SetTxt = function SetTxt(isTitle) {
          var _this$m_debris8;

          if (isTitle === void 0) {
            isTitle = false;
          }

          (_this$m_debris8 = this.m_debris) == null ? void 0 : _this$m_debris8.SetTxt(isTitle);
        };

        _proto.Show = function Show(isLandscape) {
          var _this$m_debris9;

          (_this$m_debris9 = this.m_debris) == null ? void 0 : _this$m_debris9.Show(isLandscape);
        };

        _proto.OnRecvActivity = function OnRecvActivity(info) {
          var _this$m_debris10;

          (_this$m_debris10 = this.m_debris) == null ? void 0 : _this$m_debris10.OnRecvActivity(info);
        };

        _proto.OnRecvPlayerInfo = function OnRecvPlayerInfo(info) {
          var _this$m_debris11;

          (_this$m_debris11 = this.m_debris) == null ? void 0 : _this$m_debris11.OnRecvPlayerInfo(info);
        };

        _proto.OnRecvGetDebris = function OnRecvGetDebris(info) {
          var _this$m_debris12;

          (_this$m_debris12 = this.m_debris) == null ? void 0 : _this$m_debris12.OnRecvGetDebris(info);
        };

        _proto.OnRecvExchange = function OnRecvExchange(info) {
          var _this$m_debris13;

          (_this$m_debris13 = this.m_debris) == null ? void 0 : _this$m_debris13.OnRecvExchange(info);
        };

        _createClass(DebrisManager, [{
          key: "CreateViewCb",
          set: function set(v) {
            this.m_createViewCb = v;
          }
        }]);

        return DebrisManager;
      }());
      var debrisManager = exports('debrisManager', new DebrisManager());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DebrisProtocal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DataStruct.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, ConnectionDataStruct;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ConnectionDataStruct = module.ConnectionDataStruct;
    }],
    execute: function () {
      exports('DebrisReqData', void 0);

      cclegacy._RF.push({}, "f90a5j7iF1Oc4ng3lzKWipP", "DebrisProtocal", undefined);

      var DebrisReqData;

      (function (_DebrisReqData) {
        var DebrisActivity = /*#__PURE__*/function (_ConnectionDataStruct) {
          _inheritsLoose(DebrisActivity, _ConnectionDataStruct);

          function DebrisActivity() {
            var _this;

            _this = _ConnectionDataStruct.call(this) || this;
            _this.type = ConnectionDataStruct.ErrorHandleType.Ignore;
            _this.method = ConnectionDataStruct.RequestMethod.Post;
            _this.url = "/debris/ActivityInfoProto";
            _this.reqData = null;
            return _this;
          }

          return DebrisActivity;
        }(ConnectionDataStruct.ProtocolData);

        _DebrisReqData.DebrisActivity = DebrisActivity;

        var DebrisGet = /*#__PURE__*/function (_ConnectionDataStruct2) {
          _inheritsLoose(DebrisGet, _ConnectionDataStruct2);

          function DebrisGet() {
            var _this2;

            _this2 = _ConnectionDataStruct2.call(this) || this;
            _this2.type = ConnectionDataStruct.ErrorHandleType.Ignore;
            _this2.method = ConnectionDataStruct.RequestMethod.Post;
            _this2.url = "/debris/GetDebrisProto";
            _this2.reqData = null;
            return _this2;
          }

          return DebrisGet;
        }(ConnectionDataStruct.ProtocolData);

        _DebrisReqData.DebrisGet = DebrisGet;

        var DebrisPlayer = /*#__PURE__*/function (_ConnectionDataStruct3) {
          _inheritsLoose(DebrisPlayer, _ConnectionDataStruct3);

          function DebrisPlayer() {
            var _this3;

            _this3 = _ConnectionDataStruct3.call(this) || this;
            _this3.type = ConnectionDataStruct.ErrorHandleType.Ignore;
            _this3.method = ConnectionDataStruct.RequestMethod.Post;
            _this3.url = "/debris/PlayerInfoProto";
            _this3.reqData = null;
            return _this3;
          }

          return DebrisPlayer;
        }(ConnectionDataStruct.ProtocolData);

        _DebrisReqData.DebrisPlayer = DebrisPlayer;

        var DebrisExchange = /*#__PURE__*/function (_ConnectionDataStruct4) {
          _inheritsLoose(DebrisExchange, _ConnectionDataStruct4);

          function DebrisExchange() {
            var _this4;

            _this4 = _ConnectionDataStruct4.call(this) || this;
            _this4.type = ConnectionDataStruct.ErrorHandleType.Ignore;
            _this4.method = ConnectionDataStruct.RequestMethod.Post;
            _this4.url = "/debris/ExchangeDebrisProto";
            _this4.reqData = null;
            return _this4;
          }

          return DebrisExchange;
        }(ConnectionDataStruct.ProtocolData);

        _DebrisReqData.DebrisExchange = DebrisExchange;
      })(DebrisReqData || (DebrisReqData = exports('DebrisReqData', {})));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Define.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createClass, cclegacy, Enum, size, v3;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Enum = module.Enum;
      size = module.size;
      v3 = module.v3;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4364179z4hOF59Lm7UYZZkE", "Define", undefined);

      var ItemStateReason;

      (function (ItemStateReason) {
        ItemStateReason[ItemStateReason["PLAYING"] = 0] = "PLAYING";
        ItemStateReason[ItemStateReason["USING"] = 1] = "USING";
      })(ItemStateReason || (ItemStateReason = {}));

      var ZOrder;

      (function (ZOrder) {
        ZOrder[ZOrder["EFFECTVIEW"] = 10] = "EFFECTVIEW";
        ZOrder[ZOrder["EFTWIN"] = 15] = "EFTWIN";
        ZOrder[ZOrder["HINT"] = 16] = "HINT";
        ZOrder[ZOrder["BACKPACK"] = 20] = "BACKPACK";
        ZOrder[ZOrder["DISCOUNT"] = 21] = "DISCOUNT";
        ZOrder[ZOrder["DEBRIS"] = 22] = "DEBRIS";
        ZOrder[ZOrder["FEATURES"] = 23] = "FEATURES";
        ZOrder[ZOrder["VOLATILITY"] = 25] = "VOLATILITY";
        ZOrder[ZOrder["JACKPOTDESC"] = 26] = "JACKPOTDESC";
        ZOrder[ZOrder["JACKPOTRESULT"] = 27] = "JACKPOTRESULT";
        ZOrder[ZOrder["RANKING"] = 28] = "RANKING";
        ZOrder[ZOrder["ITEMINFO"] = 29] = "ITEMINFO";
        ZOrder[ZOrder["ROOKIE"] = 30] = "ROOKIE";
        ZOrder[ZOrder["PLAY_READY"] = 31] = "PLAY_READY";
        ZOrder[ZOrder["WEBVIEW"] = 40] = "WEBVIEW";
        ZOrder[ZOrder["NOTIFY"] = 999] = "NOTIFY";
      })(ZOrder || (ZOrder = {}));

      var BtnZOrder;

      (function (BtnZOrder) {
        BtnZOrder[BtnZOrder["MISSION"] = 10] = "MISSION";
        BtnZOrder[BtnZOrder["ICONBOX"] = 20] = "ICONBOX";
      })(BtnZOrder || (BtnZOrder = {}));

      var EventWebViewType;

      (function (EventWebViewType) {
        EventWebViewType[EventWebViewType["None"] = 0] = "None";
        EventWebViewType[EventWebViewType["Promote"] = 1] = "Promote";
      })(EventWebViewType || (EventWebViewType = {}));

      var DIRACTION; // 客製化wedget   命名方式:   按鈕_方向

      (function (DIRACTION) {
        DIRACTION[DIRACTION["L"] = 0] = "L";
        DIRACTION[DIRACTION["S"] = 1] = "S";
      })(DIRACTION || (DIRACTION = {}));

      var WIDGET;

      (function (WIDGET) {
        WIDGET[WIDGET["BACKPAG_BOTTOM"] = 0] = "BACKPAG_BOTTOM";
        WIDGET[WIDGET["BACKPAG_LEFT"] = 1] = "BACKPAG_LEFT";
      })(WIDGET || (WIDGET = {}));

      var CommonTextType;

      (function (CommonTextType) {
        CommonTextType[CommonTextType["FAVOR"] = 0] = "FAVOR";
      })(CommonTextType || (CommonTextType = {}));

      var Style;

      (function (Style) {
        Style[Style["ORG"] = 0] = "ORG";
        Style[Style["DICE"] = 1] = "DICE";
        Style[Style["SUBMIT"] = 3] = "SUBMIT";
      })(Style || (Style = {}));

      var Define = exports('default', /*#__PURE__*/function () {
        function Define() {} // 錯誤發生旗標
        // static HORIZONTAL_SIZE = null;
        // static VERTICLE_SIZE = null;
        //----------------
        //下列數值應由遊戲端自行在正確時機設定,不要從共用改
        // account id,aid
        // apiid
        // apiid
        // 當前gameid
        // 當前gameid
        // 系列遊戲名
        //----------------

        /**由GameAppA設定，不要自己修改*/
        // Line code
        //Sub Agent Code
        //預設押注(平台)
        //是否需要延後下次SPIN
        //延後的時間，原本預設3000
        //sso login回應內錢包的幣別
        //自動玩局數設定上限
        //自動玩指定局數設定按鈕數值
        //檢查有無CLIENTMODE 
        // Symbol特殊樣式
        // 換皮style
        // 防沉迷間隔

        /**廠商返回大廳時的網址 */
        //----------------
        //完整版本號，等同顯示在遊戲左下角的字串
        //0:直版，1：橫版

        /**
         *  是否延遲時間進入遊戲
         */


        Define.IsWaitingEnterGame = function IsWaitingEnterGame(cb) {
          if (Define.StartSceneTime >= 0) {
            var t = cb && cb(3000);
            Define.StartSceneTime = -1;
            var waittingOnce = t <= Define.EnterGameTime;
            return waittingOnce;
          }

          return false;
        } //相關的都要一起設定，背包語系要另外增加
        ;

        Define.Wait = function Wait(component, time) {
          return new Promise(function (resolve) {
            component.scheduleOnce(function () {
              resolve();
            }, time);
          });
        } //道具卡狀態
        ;

        Define.SetCanUseItemCard = function SetCanUseItemCard(is, reason) {
          if (reason === void 0) {
            reason = ItemStateReason.PLAYING;
          }

          this.m_canUseItemCard = is;
          this.m_cantUseReason = reason;
        } // 各種開關
        ;

        Define.SetSwitchOffKeys = function SetSwitchOffKeys(keys) {
          this.m_switchOffKeys = keys;
        } //關閉intro loading用key
        ;

        Define.GLIAutoPlaySingleWinRate = function GLIAutoPlaySingleWinRate() {
          this.AUTOPLAY_SINGLE_WIN_RATE = 100;
        };

        Define.OnExit = function OnExit() {
          Define.ERROR_OCCUR = false; // 錯誤發生旗標

          Define.VERSION = "0.107"; //----------------
          //下列數值應由遊戲端自行在正確時機設定,不要從共用改

          Define.DEFAULT_AID = "-1";
          Define.AID = Define.DEFAULT_AID; // account id,aid

          Define.API_ID = "0"; // apiid

          Define.SITE_ID = 0; // apiid

          Define.NOW_GAME_ID = "0"; // 當前gameid

          Define.CURRENCY_NUMBER = 0; // 當前gameid

          Define.SERIES_GAME_NAME = "Jili"; // 系列遊戲名

          Define.ALIVE_INTERVAL = null;
          Define.FreeSpinRemain = 0; //----------------

          /**由GameAppA設定，不要自己修改*/

          Define.PLATFORM_VER = "";
          Define.LINE_CODE = -1; // Line code

          Define.SUB_AGENT_CODE = -1; //Sub Agent Code

          Define.IS_LOBBY_OPEN = false;
          Define.IS_DEMO = false;
          Define.IS_DELAY_TO_NEXT = false; //是否需要延後下次SPIN

          Define.DEALY_TIME = 0; //延後的時間，原本預設3000

          Define.SSO_CURRENCY_NUMBER = []; //sso login回應內錢包的幣別

          Define.AUTOPLAY_MAX_ROUND = 999; //自動玩局數設定上限

          Define.AUTOPLAY_ROUND_BTN = []; //自動玩指定局數設定按鈕數值

          Define.HAS_CLIENTMODE = false; //檢查有無CLIENTMODE 

          Define.REGION = "";
          Define.DEPOSIT_URL = null;
          Define.REALITY_CHECK_INTERVAL = 900;
          Define.HOME_URL = null;
          Define.AsttWallentEventKey = "Astt";
          Define.Platform = "";
          Define.LobbyMode = -1;
          Define.GAME_VERSION = ""; //完整版本號，等同顯示在遊戲左下角的字串

          Define.CommonBundle = null;
          Define.GameBundle = null;
          Define.CURRENCY_CHANGE_ENABLE = false;
          Define.CAN_DROP_ITEM_CARD = false;
          Define.BAR_DIFF_HEIGHT = 0;
          Define.APP = null;
          Define.DollarSymbol = "";
          Define.DollarSymbolSuffix = "";
          /** 優先顯示貨幣符號 or 貨幣名稱 */

          Define.DollorSymbolDisplayPriority = true;
          Define.DollarFontFamily = "Arial";
          Define.DefaultFont = null;
          Define.DefaultExtraFont = null;
          Define.GLI_Default_DollarSymbol = "$";
          Define.IsSyncFromWS = false;
          Define.IsLifeSocketClose = true;
          Define.LifeSocketReqUrl = null;
          Define.FormBtnClickParams = null;
          Define.SendBtnClickEvent = null;
          Define.IsIntroNodeActive = true;
          this.m_canUseItemCard = true;
          this.m_cantUseReason = ItemStateReason.PLAYING;
          this.m_switchOffKeys = [];
          this.TOKEN = "";
          this.AddEventWebview = null;
          this.RemoveEventWebview = null;
        };

        _createClass(Define, null, [{
          key: "CanUseItemCard",
          get: function get() {
            return this.m_canUseItemCard;
          }
        }, {
          key: "CantUseReason",
          get: function get() {
            return this.m_cantUseReason;
          }
        }, {
          key: "SwitchOffKeys",
          get: function get() {
            return this.m_switchOffKeys;
          }
        }]);

        return Define;
      }());
      Define.ERROR_OCCUR = false;
      Define.VERSION = "0.127";
      Define.Layer2D = 1 << 25;
      Define.DEFAULT_AID = "-1";
      Define.AID = Define.DEFAULT_AID;
      Define.API_ID = "0";
      Define.SITE_ID = 0;
      Define.NOW_GAME_ID = "0";
      Define.CURRENCY_NUMBER = 0;
      Define.SERIES_GAME_NAME = "Jili";
      Define.ALIVE_INTERVAL = null;
      Define.PLATFORM_VER = "";
      Define.LINE_CODE = -1;
      Define.SUB_AGENT_CODE = -1;
      Define.BET_LEVEL = -1;
      Define.IS_LOBBY_OPEN = false;
      Define.IS_DEMO = false;
      Define.IS_DELAY_TO_NEXT = false;
      Define.DEALY_TIME = 0;
      Define.SSO_CURRENCY_NUMBER = [];
      Define.AUTOPLAY_MAX_ROUND = 999;
      Define.AUTOPLAY_ROUND_BTN = [];
      Define.HAS_CLIENTMODE = false;
      Define.REGION = "";
      Define.FEATURE_TIMES = -1;
      Define.DEBRIS_TIMES = 1;
      Define.DEPOSIT_URL = null;
      Define.CLIENTMODE_ID = {
        MAX_ROUND: 1,
        //自動玩最大局數
        DELAY_TIME: 2,
        //每局間隔時間
        ROUND_BTN: 3,
        //自動玩局數快捷
        FEATURE_TIMES: 4,
        //特色主動顯示次數
        DEPOSIT_URL: 5,
        //加值網址{ eventId: 5, value: [ "https://test-wb-demo.jlfafafa3.com/player/login" ] }
        REALITY_CHECK_INTERVAL: 6,
        //防沉迷機制時間
        SYMBOL_STYLE: 7 //symbol樣式

      };
      Define.Style = Enum(Style);
      Define.SeasonStyle = {
        ORG: "00",
        XMAS: "01"
      };
      Define.REALITY_CHECK_INTERVAL = 180;
      Define.FreeSpinRemain = 0;
      Define.HOME_URL = null;
      Define.AsttWallentEventKey = "Astt";
      Define.Platform = "";
      Define.PlatformType = {
        WEB: "web",
        APP: "app"
      };
      Define.IsGiftCodeOpen = false;
      Define.LobbyMode = -1;
      Define.LobbyModeType = {
        None: -1,
        CLOSE: 0,
        TO_JILI: 1,
        TO_URL: 2,
        USING_IFRAME: 3,
        CHANGE_IFRAME: 4
      };
      Define.SERVER_RET_TYPE = {
        SERVER_SUCCESS: 0,
        //正常				
        SERVER_ERROR_SEATE: 799,
        // 錯誤狀態				
        SERVER_NOUSE: 899,
        // 無用				
        SERVER_MAINTAIN: 231,
        // 維護中				
        SERVER_SHUTDOWN: 232,
        // 關機中				
        SERVER_NEED_UID: 233,
        // 需要UID				
        SERVER_NEED_LOGIN: 234,
        // 沒有玩家				
        SERVER_TOKEN_ERROR: 235 // TOKEN 錯誤				

      };
      Define.AckType = {
        login: 0,
        exchangeChips: 2,
        info: 11,
        spin: 12,
        buyBonus: 36,
        heartBeat: 98,
        serverMsg: 99
      };
      Define.HEART_BEAT_STATE = {
        NOTIFY: 97,
        //SERVER 通知訊息
        MAINTAIN: 98,
        //SERVER 維護中
        CLOSE: 99 //SERVER 關閉

      };
      Define.GAME_VERSION = "";
      Define.EVN = {
        DEFAULT: 0,
        TEST: 1,
        UAT: 2,
        AUTO: 3,
        NEW_TEST: 4 // TEST_GLI: 5,

      };
      Define.SchemeKey = "wv2g";
      Define.WebViewEvent = {
        Close: "CloseWebView"
      };
      Define.CommonBundleName = "";
      Define.OtherBundleName = "other";
      Define.CommonBundle = null;
      Define.OtherBundle = null;
      Define.GameBundle = null;
      Define.CURRENCY_CHANGE_ENABLE = false;
      Define.CAN_DROP_ITEM_CARD = false;
      Define.DEFAULT_LANDSCAPE_SIZE = size(1136, 640);
      Define.BAR_DIFF_HEIGHT = 0;
      Define.LOGO_BASE_DIFF = [v3(0, -26), v3(0, 0)];
      Define.StartSceneTime = -1;
      Define.EnterGameTime = 10;
      Define.DelayEnterGameTime = 3;
      Define.FullLang = {
        CN: "zh-CN",
        EN: "en-US",
        TH: "th-TH",
        VN: "vi-VN",
        ID: "id-ID",
        HI: "hi-IN",
        TA: "ta-IN",
        MM: "my-MM",
        JP: "ja-JP",
        MS: "ms-MY",
        KO: "ko-KR",
        BN: "bn-IN",
        ES: "es-AR",
        PT: "pt-BR",
        IT: "it-IT",
        SE: "sv-SE",
        DE: "de-DE",
        DADK: "da-DK",
        RORO: "ro-RO",
        NLNL: "nl-NL",
        TRTR: "tr-TR",
        RURU: "ru-RU",
        GRGR: "gr-GR",
        FRFR: "fr-FR"
      };
      Define.Lang = {
        CN: "cn",
        EN: "en",
        TH: "th",
        VN: "vn",
        ID: "id",
        HI: "hi",
        TA: "ta",
        MM: "mm",
        JP: "jp",
        MS: "ms",
        KO: "ko",
        BN: "bn",
        ES: "es",
        PT: "pt",
        IT: "it",
        SE: "se",
        DE: "de",
        DADK: "da",
        RORO: "ro",
        NLNL: "nl",
        TRTR: "trTR",
        RURU: "ruRU",
        GRGR: "grGR",
        FRFR: "frFR"
      };
      Define.RevertDotLang = [Define.Lang.VN, Define.Lang.ES, Define.Lang.PT, Define.Lang.IT, Define.Lang.SE, Define.Lang.DE, Define.Lang.DADK, Define.Lang.RORO, Define.Lang.NLNL, Define.Lang.TRTR, Define.Lang.FRFR];
      Define.TADA_BANNED_LANG = [Define.Lang.TH, Define.Lang.VN, Define.Lang.ID, Define.Lang.HI, Define.Lang.TA, Define.Lang.MM, Define.Lang.MS, Define.Lang.BN];
      Define.GENERAL_RET = Enum({
        SUCCESS: 0,
        // 成功
        ERROR_GENERAL_CHECK_ERROR: 211,
        // 驗證失敗
        ERROR_GENERAL_REPEAT_LOGIN: 236,
        // 重複登入
        ERROR_GENERAL_NO_UID: 233,
        // 沒有uid；*** API後不會使用到了 ***
        ERROR_GENERAL_TIME_OUT: 4,
        // 逾時
        ERROR_GENERAL_NOT_JOINED: 5,
        // 尚未加入；*** API後不會使用到了 ***
        ERROR_SERVER_MAINTAIN: 231,
        // Game Server 維護
        //------- 100以後為遊戲使用
        ERROR_GAME_IS_FREE: 102,
        // 目前為 FreeBet
        ERROR_GAME_NOT_FREE: 103,
        // 目前並不是 FreeBet
        ERROR_WRONG_FREE_TYPE: 104,
        // FREE_TYPE 錯誤
        ERROR_SYSTEM_FAIL: 251,
        // server 錯誤
        ERROR_GAME_WRONG_BET: 301,
        // Bet錯誤
        ERROR_GAME_NO_COIN: 302,
        // 金幣不足
        ERROR_GAME_NO_COIN_SINGLE: 305,
        //----------FREE SPIN ACK錯誤
        FREESPIN_ABNORMAL: 315,
        // FREESPIN 錯誤
        //----------體驗SPIN ACK錯誤
        ERROR_TRIAL_FAIL: 421,
        // trial下注錯誤
        ERROR_TRIAL_BETFAIL: 422,
        // trial錯誤
        ERROR_TRIAL_END: 423,
        // trial結束
        //----------內購SPIN ACK錯誤
        ERROR_BUY_BONUS_CLOSED: 431,
        ERROR_BUY_BONUS_NO_COIN: 432,
        // 免費贈金
        ERROR_SERVER_TRIAL_BETFAIL: 433,
        // 體驗下注失敗
        ERROR_SERVER_TRIAL_END: 434 // 體驗活動結束

      });
      Define.GAP_RET = Enum({
        SUCCESS: 0,
        // 成功
        ERROR_GAP_INVALID_SSOKEY: 3,
        // SSOKEY驗證失敗
        ERROR_GAP_NOT_SERVICE: 4,
        // 未服務區域
        ERROR_GAP_SERVER_MAINTAIN: 12,
        // 平台維修
        ERROR_GAP_UNKNOWN: 87 // 未知錯誤

      });
      Define.GAME_ID = {
        DEFAULT: 0,
        CF:
        /**/
        1,
        // 錢龍捕魚
        CSH:
        /**/
        2,
        // 秦皇
        //目前沒 3 新遊戲可以使用
        TKS:
        /**/
        4,
        // 關雲長
        CHILLI:
        /**/
        5,
        // 火熱辣椒
        LTS:
        /**/
        6,
        // 發財樹 
        DOFULI:
        /**/
        7,
        // 金龍
        DOFULII:
        /**/
        8,
        // 鑽石
        FD:
        /**/
        9,
        // 舞龍爭霸
        GEM:
        /**/
        10,
        // 寶石派對
        TQS:
        /**/
        11,
        // 女王
        CS:
        /**/
        12,
        // 財神
        WS:
        /**/
        13,
        // 爵色舞台
        HB:
        /**/
        14,
        // 超爆
        KK:
        /**/
        15,
        // 金剛
        KK2:
        /**/
        16,
        // 金剛2
        SH:
        /**/
        17,
        // 上海甜心
        SH2:
        /**/
        18,
        // 搖滾甜心
        GEM2:
        /**/
        19,
        // 寶石西遊
        CF2:
        /**/
        20,
        // 錢龍捕魚2
        OLS:
        /**/
        21,
        // 發發發
        TWKS:
        /**/
        22,
        // 極速三倍悟空
        GEM3:
        /**/
        23,
        // 糖果寶貝
        QNZZ:
        /**/
        24,
        // 搶莊家牛牛
        TBZZ:
        /**/
        25,
        // 通比牛牛
        SH3:
        /**/
        26,
        // 海島甜心
        SSS:
        /**/
        27,
        // 極速777
        QZSG:
        /**/
        28,
        // 搶莊三公
        QZDN:
        /**/
        29,
        // 公牌搶莊牛牛
        SH4:
        /**/
        30,
        // 人魚甜心
        QZGF:
        /**/
        31,
        // 搶莊極速炸金花
        CF3:
        /**/
        32,
        // 錢龍捕魚3
        PP:
        /**/
        33,
        // 極速豬來了
        OLS2:
        /**/
        35,
        // 瘋狂777
        BBC:
        /**/
        36,
        // 包青天
        SH5:
        /**/
        37,
        // 東方明珠
        FS:
        /**/
        38,
        // 封神
        OLS3:
        /**/
        40,
        // 瘋狂一路發
        XYY:
        /**/
        43,
        // 喜洋洋
        LFS:
        /**/
        44,
        // 鑽石派對
        CBT:
        /**/
        45,
        // 瘋狂搶金樂
        BS:
        /**/
        46,
        // 砸球
        BFS:
        /**/
        47,
        // 衝鋒野牛
        LGB:
        /**/
        48,
        // 霸金磚
        FH:
        /**/
        49,
        // 超級王牌
        MC:
        /**/
        51,
        // 極速錢來也
        CK:
        /**/
        52,
        // 辣椒王
        RB2:
        /**/
        53,
        // 搖滾甜心2
        LC:
        /**/
        54,
        // 幸運糖
        SE:
        /**/
        55,
        // 超級8
        HS:
        /**/
        56,
        // 火熱7
        CSHY:
        /**/
        57,
        // 少年秦皇
        PLY:
        /**/
        59,
        // 朕的美人
        GQ:
        /**/
        58,
        // 黃金艷后
        DT:
        /**/
        61,
        // 龍虎鬥-API
        DICE:
        /**/
        62,
        // 骰子競猜-API
        SUD:
        /**/
        63,
        // 七上下-API
        BL:
        /**/
        64,
        // 競猜大廳-API
        ROLL:
        /**/
        66,
        // 數字競猜-API
        MP:
        /**/
        67,
        // 猴子派對
        EM:
        /**/
        68,
        // 真好賺
        JS:
        /**/
        69,
        // 跳跳羊
        TP:
        /**/
        72,
        // TeenPatti
        TPAK:
        /**/
        75,
        // TeenPatti2_AK47
        NC:
        /**/
        76,
        // 夜店(嗨翻夜)
        BK:
        /**/
        77,
        // 拳王
        AG2:
        /**/
        78,
        // 秘境奪寶
        AB:
        /**/
        79,
        // AndarBahar
        WEBLOBBY:
        /**/
        80,
        // 大廳網頁
        CSUS:
        /**/
        81,
        // CrazySeven
        MW:
        /**/
        85,
        // MegaWays
        BOG:
        /**/
        87,
        // 黃金之書
        LL:
        /**/
        89,
        // luckylady
        IFFF:
        /**/
        91,
        // 象財神
        CRH:
        /**/
        92,
        // 瘋狂砲手
        RM:
        /**/
        94,
        // Rummy
        USA_BK:
        /**/
        95,
        // 拳王歐美版
        IG:
        /**/
        96,
        // RR背包  
        SR:
        /**/
        100,
        // 真有錢
        MS:
        /**/
        101,
        // 梅杜莎    
        RS2:
        /**/
        102,
        // RomaX    
        MW2:
        /**/
        103,
        // 印加帝國
        TW:
        /**/
        106,
        // TwinWins
        SS:
        /**/
        107,
        // SunnyShow
        MW3:
        /**/
        108,
        // 阿拉丁
        FG:
        /**/
        109,
        // FortuneGems
        ALI:
        /**/
        110,
        // 阿里巴巴
        NK:
        /**/
        111,
        // 數字之王
        PK:
        /**/
        113,
        // 撲克之王
        AA:
        /**/
        115,
        // 王牌特務
        TAXI:
        /**/
        116,
        // 午夜狂飆
        P89:
        /**/
        117,
        // poker89
        USA_NC:
        /**/
        120,
        // 嗨翻夜歐美版
        RM2:
        /**/
        121,
        // Rummy2
        B1:
        /**/
        122,
        // 一代賓果
        DOTD:
        /**/
        126,
        // 慶典之月
        CB:
        /**/
        127,
        // callbreak
        LUDO:
        /**/
        128,
        // ludo
        THOR:
        /**/
        130,
        //索爾 
        PRM:
        /**/
        132,
        // poolrummy
        MW4:
        /**/
        134,
        // 超級王牌MW
        ME:
        /**/
        135,
        // 瑪雅
        SAMBA:
        /**/
        136,
        // 森巴
        GE:
        /**/
        137,
        // 金礦
        USA_FH:
        /**/
        138,
        // 超級王牌歐美版
        B2:
        /**/
        139,
        // 二代賓果
        USA_FG:
        /**/
        140,
        // FortuneGems歐美版
        USA_AA:
        /**/
        141,
        // 王牌特務歐美版
        BH:
        /**/
        142,
        // 賞金獵人
        B3:
        /**/
        143,
        // 三代賓果
        CAI:
        /**/
        144,
        // 吉利財神
        LN:
        /**/
        145,
        // 招財貓
        FB:
        /**/
        146,
        // 足球
        B4:
        /**/
        147,
        // 四代賓果
        B5:
        /**/
        148,
        // 五代賓果
        B6:
        /**/
        149,
        // 六代賓果
        B7:
        /**/
        150,
        // 七代賓果
        B8:
        /**/
        151,
        // 八代賓果
        BAC:
        /**/
        152,
        // baccarat
        USA_BFS:
        /**/
        155,
        // 衝鋒野牛
        USA_MS:
        /**/
        156,
        // 梅杜莎歐美版
        USA_MC:
        /**/
        157,
        //錢來也歐美版
        TP3:
        /**/
        159,
        // teenpatti joker
        CB2:
        /**/
        160,
        // callbreak2
        BAC2:
        /**/
        161,
        // baccarat2
        LUDOQ:
        /**/
        163,
        // ludo quick
        PIRATE:
        /**/
        164,
        // 海盜女王
        USA_BOG:
        /**/
        165,
        // 黃金之書
        USA_TAXI:
        /**/
        166,
        // 急速狂飆
        USA_DOTD:
        /**/
        167,
        // 慶典之月
        USA_ME:
        /**/
        168,
        // 瑪雅
        USA_SAMBA:
        /**/
        169,
        // 森巴
        USA_GE:
        /**/
        170,
        // 金礦
        SC:
        /**/
        171,
        // 罪惡都市
        IBINGO:
        /**/
        172,
        // 精靈賓果
        B10:
        /**/
        174,
        // 十代賓果
        CNY:
        /**/
        176,
        // 功夫虎
        PLI1:
        /**/
        179,
        // Win Drop
        LOE:
        /**/
        180,
        // 埃及遺產
        WA:
        /**/
        181,
        // 百搭王牌
        GJ:
        /**/
        183,
        // 黃金小丑
        RSX2:
        /**/
        184,
        // 羅馬換皮
        FG2:
        /**/
        185,
        // 鞋貓劍客
        MC2:
        /**/
        186,
        // 錢來也換皮
        C72:
        /**/
        187,
        // crazy 7 2代換皮
        USA_MW3:
        /**/
        188,
        // 阿拉丁 送審
        GA:
        /**/
        189,
        // 超級王牌換皮(皇家王牌)
        PETRA:
        /**/
        191,
        // 黃金神廟
        DF:
        /**/
        193,
        // 惡魔之火
        SL:
        /**/
        198,
        //糖果樂園
        USA_THOR:
        /**/
        201,
        //雷神 送審
        USA_CAI:
        /**/
        202,
        // 財神 送審
        PHOENIX:
        /**/
        208,
        // 鳳凰
        AP:
        /**/
        209,
        // 帝國女祭司
        FB2:
        /**/
        213,
        // 足球2(UFA)
        KA:
        /**/
        214,
        // 亞瑟王
        USA_WR:
        /**/
        218,
        // 急速狂飆歐美版
        USA_LN:
        /**/
        222,
        // 招財貓歐美版
        FGP:
        /**/
        223,
        // 迦羅寶石plus
        CTK:
        /**/
        225,
        // 印度板球
        WITCH:
        /**/
        226,
        // 魔女之夜
        AFR:
        /**/
        228,
        // 浴血戰士
        CTS:
        /**/
        230,
        // 孟加拉板球
        BB:
        /**/
        238,
        // 孟加拉甜心
        DBG:
        /**/
        239,
        // 印度警察
        PS:
        /**/
        240,
        // 派對明星
        USA_PIRATE:
        /**/
        243,
        // 海盜女王 (歐美版)
        USA_BH:
        /**/
        244,
        // 賞金獵人 (歐美版)
        USA_CNY:
        /**/
        245,
        // 功夫虎歐美版
        USA_WA:
        /**/
        246,
        // 百搭王牌 歐美
        USA_SL:
        /**/
        247,
        // 糖果樂園 歐美
        USA_GJ:
        /**/
        251,
        // 黃金小丑 歐美
        ZEUS:
        /**/
        252,
        // 宙斯
        DL:
        /**/
        258,
        // 惡魔之火2
        BFS2:
        /**/
        259,
        // 野牛2
        TPH:
        /**/
        263,
        // 三隻小豬
        PW:
        /**/
        299,
        // 魔藥巫師
        FG3:
        /**/
        300,
        // 迦羅寶石3
        JPJ:
        /**/
        301,
        // 彩金小丑
        MP2:
        /**/
        303,
        // 叢林派對(猴子派對2)
        USA_AP:
        /**/
        304,
        // 女祭司 歐美
        ENTITY:
        /**/
        308,
        // 實體道具卡
        SAMURAI: 376,
        // 日本武士
        USA_DF:
        /**/
        380,
        // 惡魔之火 (歐美版)
        USA_FGP:
        /**/
        381,
        // 迦羅寶石plus (歐美版)
        TCT: 399,
        //三幣瑞龍
        SAD:
        /**/
        403 // 超級王牌豪華版

      };
      Define.TADA_ICONS = [// Define.GAME_ID.RS2,     //羅馬
      Define.GAME_ID.PLI1 //PLINKO EMPIRE
      ];
      Define.UFA_ICONS = [Define.GAME_ID.RSX2, Define.GAME_ID.FG2, Define.GAME_ID.MC2, Define.GAME_ID.C72, Define.GAME_ID.GA, Define.GAME_ID.FB2];
      Define.GLI_GAME_ID = [Define.GAME_ID.CSUS, // CrazySeven
      Define.GAME_ID.USA_BK, // 拳王歐美版
      Define.GAME_ID.USA_NC, // 嗨翻夜歐美版
      Define.GAME_ID.USA_FH, // 超級王牌歐美版
      Define.GAME_ID.USA_FG, // FortuneGems歐美版
      Define.GAME_ID.USA_AA, // 王牌特務歐美版
      Define.GAME_ID.USA_MC, // 錢來也歐美版
      Define.GAME_ID.USA_BFS, // 衝鋒野牛歐美版
      Define.GAME_ID.USA_MS, // 梅杜莎歐美版
      Define.GAME_ID.USA_MW3, Define.GAME_ID.USA_PIRATE, // 海盜女王 (歐美版)
      Define.GAME_ID.USA_CNY, // 功夫虎 (歐美版)
      Define.GAME_ID.USA_BH, // 賞金獵人 (歐美版)
      Define.GAME_ID.USA_SL, // 糖果樂園 歐美
      Define.GAME_ID.USA_GJ, // 黃金小丑 歐美
      Define.GAME_ID.USA_DF, // 惡魔之火 (歐美版)
      Define.GAME_ID.USA_FGP, // 迦羅寶石plus (歐美版)
      Define.GAME_ID.USA_WA // 百搭王牌 歐美
      ];
      Define.BMM_GAME_ID = [Define.GAME_ID.USA_BOG, // 黃金之書
      Define.GAME_ID.USA_ME, // 瑪雅
      Define.GAME_ID.USA_GE, // 金礦
      Define.GAME_ID.USA_BFS, // 衝鋒野牛歐美版
      Define.GAME_ID.USA_MW3, Define.GAME_ID.USA_CAI, Define.GAME_ID.USA_THOR, Define.GAME_ID.USA_DOTD, // 慶典之月
      Define.GAME_ID.USA_SAMBA, Define.GAME_ID.USA_WR, Define.GAME_ID.USA_LN, // 招財貓歐美版
      Define.GAME_ID.USA_PIRATE, // 海盜女王 (歐美版)
      Define.GAME_ID.USA_BH, // 賞金獵人 (歐美版)
      Define.GAME_ID.USA_CNY, // 功夫虎 (歐美版)
      Define.GAME_ID.USA_NC, // 嗨翻夜歐美版
      Define.GAME_ID.USA_FH, // 超級王牌歐美版
      Define.GAME_ID.USA_SL, // 糖果樂園 歐美
      Define.GAME_ID.USA_GJ, // 黃金小丑 歐美
      Define.GAME_ID.USA_DF, // 惡魔之火 (歐美版)
      Define.GAME_ID.USA_FGP, // 迦羅寶石plus (歐美版)
      Define.GAME_ID.USA_WA // 百搭王牌 歐美
      ];
      Define.ZOrder = Enum(ZOrder);
      Define.BtnZOrder = Enum(BtnZOrder);
      Define.WIDGET = Enum(WIDGET);
      Define.DIRACTION = Enum(DIRACTION);
      Define.CommonTextType = Enum(CommonTextType);
      Define.AutoShowOrder = Enum({
        // RECOMMAND: 0,
        SKY_BAR: 0,
        SIGN_IN: 1
      });
      Define.RookieHintType = Enum({
        SPIN_BTN: 0,
        BET_BTN: 1,
        MISSION_BTN: 2,
        MISSION_MENU: 3
      });
      Define.RewardInfoDataType = Enum({
        COIN: 0,
        RUBY: 1,
        BACKPACK_ITEM: 2,
        SLOT_ITEM: 3,
        FISH_ITEM: 4,
        FISH_SKIN: 5,
        VIP_POINT: 6,
        EVENT_POINT: 7,
        EVENT_ENERGY: 8,
        ALBUM_CARD: 9,
        //集卡冊卡片
        ALBUM_REWARD: 10,
        BOOK_REWARD: 11,
        CHALLENGE_POINT: 12,
        BUFF: 13
      });
      Define.MHB_GAME_ID = [// 2, 9, 17, 30, 35, 38, 46, 47, 49, 51
      Define.GAME_ID.CSH, // 秦皇
      Define.GAME_ID.FD, // 舞龍爭霸
      Define.GAME_ID.SH, // 上海甜心
      Define.GAME_ID.SH4, // 人魚甜心
      Define.GAME_ID.OLS2, // 瘋狂777
      Define.GAME_ID.FS, // 封神
      Define.GAME_ID.BS, // 砸球
      Define.GAME_ID.BFS, // 衝鋒野牛
      Define.GAME_ID.FH, // 超級王牌
      Define.GAME_ID.MC // 極速錢來也
      ];
      Define.SOUND_PATH = {
        MP3: "AsttSound/",
        OGG: "AsttSound_OGG/"
      };
      Define.SOUND_FILE = {
        COMMON_BTN: "COMMON_BTN",
        COMMON_CANCEL_BTN: "COMMON_CANCEL_BTN",
        COMMON_TURNING: "COMMON_TURNING",
        COMMON_CHECKBOX_OFF: "COMMON_CHECKBOX_OFF",
        COMMON_CHECKBOX_ON: "COMMON_CHECKBOX_ON",
        ITEM_CARD_USE: "Item_card_use",
        NOTIFY_HINT: "ai_hint"
      };
      Define.AudioClips = {
        COMMON_BTN: null,
        COMMON_CANCEL_BTN: null,
        COMMON_TURNING: null,
        COMMON_CHECKBOX_OFF: null,
        COMMON_CHECKBOX_ON: null,
        ITEM_CARD_USE: null,
        NOTIFY_HINT: null
      };
      Define.PROTOCOL = {
        LOGIN: 0,
        PHASE_EVENT: 10,
        // 階段流失率
        CLICK_EVENT: 20,
        // 按鈕點擊log
        MAIL_REQ: 30,
        // 信件請求
        VERIFY_EVENT: 40,
        // 驗證LOG
        SUBAGENTSERVICE_REQ: 50,
        // subagent請求
        VIP: 60,
        // VIP資訊
        PROMOTION: 70,
        // 推薦遊戲
        FAVORITE: 80,
        // 收藏列表
        FAVORITE_ADD: 81,
        // 加入收藏
        FAVORITE_REMOVE: 82,
        // 移除收藏
        DEBRIS_ACTIVITY: 91,
        //碎片-活動
        DEBRIS_PLAYER_INFO: 92,
        //碎片-玩家狀態
        DEBRIS_GETDEBRIS: 93,
        //碎片-碎片數量
        DEBRIS_EXCHANGE: 94 //碎片-兌換

      };
      Define.StringKey = {
        // 地BAR主體
        BALANCE: "BALANCE",
        WIN: "WIN",
        //  需要文案
        NET: "NET : ",
        DEMO_WIN: "DEMO_WIN",
        BET: "BET",
        EXTRA_BET: "EXTRA_BET",
        ITEM_BET: "ITEM_BET",
        DEMO_BET: "DEMO_BET",
        SPEED_HINT: "SPEED_HINT",
        AUTO_HINT0: "AUTO_HINT0",
        AUTO_HINT1: "AUTO_HINT1",
        // msgBox
        MSGBOX_CONFIRM: "MSGBOX_CONFIRM",
        // 確定
        MSGBOX_CANCEL: "MSGBOX_CANCEL",
        // 取消
        MSGBOX_EXIT: "MSGBOX_EXIT",
        // 離開
        MSGBOX_CONTINUE: "MSGBOX_CONTINUE",
        // 繼續
        MSGBOX_HISTORY: "MSGBOX_HISTORY",
        // 遊戲歷程
        MSGBOX_LOGIN_FAIL: "MSGBOX_LOGIN_FAIL",
        // 無法連接登入伺服器。
        MSGBOX_LOGIN_USER_NAME_NOT_FOUND: "MSGBOX_LOGIN_USER_NAME_NOT_FOUND",
        // 此為未註冊的帳號，請您至官方網頁\n加入會員再使用會員帳號登入。
        MSGBOX_LOGIN_DUPLICATE_LOGIN: "MSGBOX_LOGIN_DUPLICATE_LOGIN",
        // 系統偵測到您的帳號已從其他裝置登入，請重新登入。
        MSGBOX_SERVER_MAINTAIN: "MSGBOX_SERVER_MAINTAIN",
        // SERVER 維護中
        MSGBOX_MAINTAIN_HINT: "MSGBOX_MAINTAIN_HINT",
        //停機維護提示
        MSGBOX_MAINTAIN_TYPE0: "MSGBOX_MAINTAIN_TYPE0",
        //例行維護
        MSGBOX_MAINTAIN_TYPE1: "MSGBOX_MAINTAIN_TYPE1",
        //臨時維護
        MSGBOX_ERROR_GENERAL_TIME_OUT: "MSGBOX_ERROR_GENERAL_TIME_OUT",
        // 登入失敗，帳號重覆登入或尚未完全登出，請稍待3~5分鐘再嘗試登入。
        MSGBOX_CONNECT_FAIL: "MSGBOX_CONNECT_FAIL",
        // 無法連接伺服器，請確認維護時間，並稍後再試。
        MSGBOX_ERROR_GAP_TIME_OUT: "MSGBOX_ERROR_GAP_TIME_OUT",
        // 與平台失去連線，請重新登入以繼續遊玩。
        MSGBOX_WEBSERVICE_CONNECT_FAIL: "MSGBOX_WEBSERVICE_CONNECT_FAIL",
        // 無法連接伺服器(Webservice)，請確認維護時間，並稍後再試。
        MSGBOX_NOT_SERVICE: "MSGBOX_NOT_SERVICE",
        //未服務區域
        MSGBOX_TITLE_SYSTEM_INFO: "MSGBOX_TITLE_SYSTEM_INFO",
        // 系統訊息
        MSGBOX_MONEY_NOT_ENOUGH_DOWN_BET: "MSGBOX_MONEY_NOT_ENOUGH_DOWN_BET",
        // 您的餘額不足，請減少押注以繼續遊玩。
        MSGBOX_MONEY_NOT_ENOUGH: "MSGBOX_MONEY_NOT_ENOUGH",
        // 您的餘額不足，請兌換更多籌碼以繼續遊玩。
        MSGBOX_TIME_OUT: "MSGBOX_TIME_OUT",
        // 您的連線已逾時，請稍後再試。
        MSGBOX_SPIN_STATE_ERR: "MSGBOX_SPIN_STATE_ERR",
        // 您的網路不穩定，請稍後再試。
        MSGBOX_SPIN_OTHER_FAIL: "MSGBOX_SPIN_OTHER_FAIL",
        // 您的網路不穩定，請稍後再試。
        MSGBOX_RELOGIN_SYNC: "MSGBOX_RELOGIN_SYNC",
        // 您的網路不穩定，正在幫您同步資料。
        MSGBOX_CURRENCY_CHANGE: "MSGBOX_CURRENCY_CHANGE",
        // 服務器財產更新通知：獲得%s籌碼
        MSGBOX_DISCONNECT_RELOGIN: "MSGBOX_DISCONNECT_RELOGIN",
        // 感謝您的耐心等候，已經幫您重新連線，歡迎繼續遊玩！
        MSGBOX_TITLE_QUICK_MOD: "MSGBOX_TITLE_QUICK_MOD",
        // 您似乎想要加快遊戲節奏，是否開啟加速功能？\n您隨時可在菜單中關閉此功能。
        MSGBOX_QUICK_MOD: "MSGBOX_QUICK_MOD",
        // 加速模式
        MSGBOX_TOUCHPANEL_SPIN: "MSGBOX_TOUCHPANEL_SPIN",
        // TouchPanel提示
        MSGBOX_CANT_FULLSCREEN: "MSGBOX_CANT_FULLSCREEN",
        // 全螢幕提示
        MSGBOX_RESYNC: "MSGBOX_RESYNC",
        // 資料同步
        MSGBOX_AWARD_INFO: "MSGBOX_AWARD_INFO",
        // 活動中獎提示
        MSGBOX_AWARD_INFO_ITEM: "MSGBOX_AWARD_INFO_ITEM",
        // 活動中獎提示(道具卡)
        MSGBOX_ONLOADING: "MSGBOX_ONLOADING",
        // 資源加載中
        MSGBOX_HISTORY_UNABLE_HINT: "MSGBOX_HISTORY_UNABLE_HINT",
        // 歷程禁用提示
        MSGBOX_UNSHOW_BACK: "MSGBOX_UNSHOW_BACK",
        // 恢復表演
        MSGBOX_DEPOSIT: "MSGBOX_DEPOSIT",
        // 是否前往儲值                
        MSGBOX_MAX_REWARD: "MSGBOX_MAX_REWARD",
        //最大獎勵
        MSGBOX_REALITY_CHECK: "MSGBOX_REALITY_CHECK",
        // 防沉迷訊息
        //APP 返回大廳
        CONFIRM_BACK_TO_LOBBY: "CONFIRM_BACK_TO_LOBBY",
        // 確認返回大廳視窗
        //APP 新手教學
        ROOKIE_CLICK_SPIN: "ROOKIE_CLICK_SPIN",
        // 點擊SPIN按鈕開始遊戲
        ROOKIE_CLICK_BET: "ROOKIE_CLICK_BET",
        // 點擊BET按鈕切換押注
        ROOKIE_CLICK_MISSION: "ROOKIE_CLICK_MISSION",
        // 點擊MISSION按鈕切換押注
        ROOKIE_TRY_MISSION: "ROOKIE_TRY_MISSION",
        // 嘗試任務
        //intro
        INTRO_CONTINUE: "INTRO_CONTINUE",
        //AUTO
        AUTO_PLAY_PANEL_START: "AUTO_PLAY_PANEL_START",
        AUTO_PLAY_PANEL_CANEL: "AUTO_PLAY_PANEL_CANEL",
        AUTO_PLAY_PANEL_STOP: "AUTO_PLAY_PANEL_STOP",
        AUTO_PLAY_PANEL_QUICKSTOP: "AUTO_PLAY_PANEL_QUICKSTOP",
        AUTO_PLAY_PANEL_QUICKSTOP_EFFECT: "AUTO_PLAY_PANEL_QUICKSTOP_EFFECT",
        AUTO_PLAY_PANEL_TOTALROUND: "AUTO_PLAY_PANEL_TOTALROUND",
        AUTO_PLAY_PANEL_TOTALROUND_2: "AUTO_PLAY_PANEL_TOTALROUND_2",
        AUTO_PLAY_PANEL_SINGLE_AWARD: "AUTO_PLAY_PANEL_SINGLE_AWARD",
        AUTO_PLAY_PANEL_COIN: "AUTO_PLAY_PANEL_COIN",
        AUTO_PLAY_PANEL_ENTER_FREEGAME: "AUTO_PLAY_PANEL_ENTER_FREEGAME",
        AUTO_PLAY_PANEL_GOT_JP: "AUTO_PLAY_PANEL_GOT_JP",
        AUTO_PLAY_PANEL_CLOSE_EFFECT: "AUTO_PLAY_PANEL_CLOSE_EFFECT",
        AUTO_PLAY_START_AUTO: "AUTO_PLAY_START_AUTO",
        AUTO_PLAY_STOP_AUTO: "AUTO_PLAY_STOP_AUTO",
        AUTO_PLAY_PANEL_COIN_LESS: "AUTO_PLAY_PANEL_COIN_LESS",
        AUTO_PLAY_PANEL_WINNING_MORE: "AUTO_PLAY_PANEL_WINNING_MORE",
        AUTO_PLAY_PANEL_CHIPS_GREAT: "AUTO_PLAY_PANEL_CHIPS_GREAT",
        AUTO_PLAY_PANEL_CHIPS_LESS: "AUTO_PLAY_PANEL_CHIPS_LESS",
        AUTO_PLAY_HINT_START: "AUTO_PLAY_HINT_START",
        AUTO_PLAY_HINT_END: "AUTO_PLAY_HINT_END",
        SPEED_PANEL_START: "SPEED_PANEL_START",
        SPEED_PANEL_STOP: "SPEED_PANEL_STOP",
        // 對話系統
        CHAT_SYSTEM_TXT: "CHAT_SYSTEM_TXT_",
        CHAT_SYSTEM_SP_TXT: "CHAT_SYSTEM_SP_TXT_",
        BOTTOM_BAR_LOGINDEX_TITLE: "BOTTOM_BAR_LOGINDEX_TITLE",
        BOTTOM_BAR_BACK_TO_GAME: "BOTTOM_BAR_BACK_TO_GAME",
        BOTTOM_BAR_BACK_GAME_HISTORY: "BOTTOM_BAR_BACK_GAME_HISTORY",
        BOTTOM_BAR_BACK_GAME_DESCRIPTION: "BOTTOM_BAR_BACK_GAME_DESCRIPTION",
        WARNING_CLICK_TOO_FAST: "WARNING_CLICK_TOO_FAST",
        // 特色頁
        FEATURES_BTN: "FEATURES_BTN",
        FEATURES_FIRE_NUN: "FEATURES_FIRE_NUN",
        FEATURES_FIRE_INFO_L: "FEATURES_FIRE_INFO_L",
        FEATURES_FIRE_INFO_S: "FEATURES_FIRE_INFO_S",
        FEATURES_VOLATILITY_TEXT: "FEATURES_VOLATILITY_TEXT",
        FEATURES_HISTORY_ROUND: "FEATURES_HISTORY_ROUND",
        // DEMO
        FEATURES_DEMO_PLAYING: "FEATURES_DEMO_PLAYING",
        // 背包
        BACKPACK_TAB_USE: "BACKPACK_TAB_USE",
        // 可使用
        BACKPACK_TAB_ALL: "BACKPACK_TAB_ALL",
        // 所有
        BACKPACK_TAB_MSG: "BACKPACK_TAB_MSG",
        // 個人訊息
        BACKPACK_WEBVIEW_TITTLE: "BACKPACK_WEBVIEW_TITTLE",
        // 道具歷程
        BACKPACK_TXT_GAME: "BACKPACK_TXT_GAME",
        // 對應遊戲
        BACKPACK_TXT_BET: "BACKPACK_TXT_BET",
        // 押注額度
        BACKPACK_TXT_VIP: "BACKPACK_TXT_VIP",
        // VIP限制
        BACKPACK_TXT_PROPERTY: "BACKPACK_TXT_PROPERTY",
        // 財產限制
        BACKPACK_TXT_PROPERTY_UP: "BACKPACK_TXT_PROPERTY_UP",
        // 以上
        BACKPACK_TXT_TIME_BAR: "BACKPACK_TXT_TIME_BAR_",
        // 時限的bar
        BACKPACK_TXT_TIME: "BACKPACK_TXT_TIME",
        // 時限
        BACKPACK_TXT_TIMEOUT: "BACKPACK_TXT_TIMEOUT",
        // 時限
        BACKPACK_TXT_INFO: "BACKPACK_TXT_INFO",
        // 說明
        BACKPACK_TXT_OWN: "BACKPACK_TXT_OWN",
        // 擁有卡片數
        BACKPACK_TXT_AVAILABLE: "BACKPACK_TXT_AVAILABLE",
        // 可用卡片數
        BACKPACK_BTN_USE: "BACKPACK_BTN_USE",
        // 使用
        RRBACKPACK_BTN_USE: "RRBACKPACK_BTN_USE",
        // 立即前往使用
        BACKPACK_AWARD: "BACKPACK_AWARD",
        // 贏分提示
        BACKPACK_REFUSED_REASON: "BACKPACK_REFUSED_REASON_",
        // 拒絕原因
        BACKPACK_GET_ITEM: "BACKPACK_GET_ITEM",
        // 獲得道具卡提示
        BACKPACK_WARNING: "BACKPACK_WARNING_",
        // 道具卡使用警告
        BACKPACK_WARNING2: "BACKPACK_WARNING2_",
        // 道具卡使用警告
        BACKPACK_WARNING3: "BACKPACK_WARNING3_",
        // 道具卡使用警告
        BACKPACK_WARNING4: "BACKPACK_WARNING4_",
        // 道具卡使用警告
        BACKPACK_NO_ITEM: "BACKPACK_NO_ITEM",
        //無道具卡提示
        // FREE SPIN
        FREESPINS_END: "FREESPINS_END",
        // FREESPINS_END 贏分提示
        FREESPIN_BET: "FREESPIN_BET",
        // FREESPIN_BET 贏分提示
        // gameID
        GAMEID: "GAMEID_",
        //JILI遊戲名稱
        TADA_GAMEID: "TADA_GAMEID_",
        //TaDa遊戲名稱
        // 道具卡
        ITEM_TITLE: "ITEM_TITLE_",
        // 道具卡標題
        ITEM_DESC: "ITEM_DESC_",
        // 道具卡敘述
        ITEM_DESC_GAME: "ITEM_DESC_GAME_",
        JILI_ITEM_NAME: "JILI_ITEM_NAME",
        TADA_ITEM_NAME: "TADA_ITEM_NAME",
        GF_GIFTCARD: "GF_GIFTCARD",
        // 實體道具卡
        PH_IPHONE: "PH_IPHONE",
        // 實體道具卡(iPhone)
        // 個人訊息
        PRIVATE_MSG_ITEM_GET: "PRIVATE_MSG_ITEM_GET",
        // 獲得道具卡
        PRIVATE_MSG_ITEM_USE: "PRIVATE_MSG_ITEM_USE",
        // 使用道具卡
        PRIVATE_MSG_ITEM_TIMEOUT: "PRIVATE_MSG_ITEM_TIMEOUT",
        // 道具卡過期
        // 活動排行榜
        RANK_A_TO_B_RANK: "RANK_A_TO_B_RANK",
        // 第%s名~第%s名
        RANK_END: "RANK_END",
        // 已結束
        RANK_LAST_ORDER: "RANK_LAST_ORDER",
        // 倒數XX時間
        RANK_LESS_X_MIN: "RANK_LESS_X_MIN",
        // 剩餘X分鐘
        RANK_ORDER: "RANK_ORDER",
        // 第%s名
        RANK_OUT_OF_RANK: "RANK_OUT_OF_RANK",
        // 未入榜
        RANK_READY: "RANK_READY",
        // 即將開始
        RANK_REFRESH: "RANK_REFRESH",
        // (每 5 分鐘更新 1 次)
        RANK_TOTAL_WIN_LIST: "RANK_TOTAL_WIN_LIST",
        // 總贏分榜
        RANK_BONUS_MSG: "RANK_BONUS_MSG",
        // 加倍訊息
        RANK_CHECK: "RANK_CHECK",
        // 查看
        RANK_BONUS_REMAIN_TIME: "RANK_BONUS_REMAIN_TIME",
        // 加倍剩餘時間
        RANK_RANK: "RANK_RANK",
        // 排名
        RANK_NAME: "RANK_NAME",
        // 名稱
        RANK_POINT: "RANK_POINT",
        // 分數
        RANK_TYPE: "RANK_TYPE_",
        // 排行榜種類
        // 每日神秘任務
        DAILY_COMPLETE: "DAILY_COMPLETE",
        // 已完成
        DAILY_UNFINISHED: "DAILY_UNFINISHED",
        // 未完成
        DAILY_COMMING_SOON: "DAILY_COMMING_SOON",
        // 敬請期待
        DAILY_DESC_TITLE: "DAILY_DESC_TITLE",
        // 任務說明標題
        DAILY_DESC_CONTENT: "DAILY_DESC_CONTENT",
        // 任務說明內容
        DAILY_DESC_SINGLE_GAME: "DAILY_DESC_SINGLE_GAME",
        // 任務說明單一遊戲
        DAILY_REFRESH: "DAILY_REFRESH",
        // 任務更新時間說明
        DAILY_REWARD: "DAILY_REWARD",
        // 任務獎勵
        DAILY_PROMOTE: "DAILY_PROMOTE",
        // 任務宣傳
        DAILY_COMMON_ITEM: "DAILY_COMMON_ITEM",
        // 通用道具卡名稱
        DAILY_PLAY_GAME_NAME: "DAILY_PLAY_GAME_NAME",
        // 遊玩XX遊戲
        DAILY_PLAY_COMMON_GAME: "DAILY_PLAY_COMMON_GAME",
        // 遊玩JILI遊戲
        DAILY_PLAY_SLOT_GAME: "DAILY_PLAY_SLOT_GAME",
        // Slot遊戲
        DAILY_PLAY_POKER_GAME: "DAILY_PLAY_POKER_GAME",
        // 撲克遊戲
        DAILY_PLAY_TADA_GAME: "DAILY_PLAY_TADA_GAME",
        // 遊玩TADA遊戲
        DAILY_TOMORROW: "DAILY_TOMORROW",
        // "XX/X"的任務
        DAILY_DESC_CONTENT_INDO: "DAILY_DESC_CONTENT_INDO",
        // 印度撲克任務說明內容
        DAILY_COMPLETE_INDO: "DAILY_COMPLETE_INDO",
        // 印度撲克任務完成
        // 商城得獎提示
        REWARD_RUBY: "REWARD_RUBY",
        // 恭喜獲得紅寶石
        REWARD_CLICK_MALL: "REWARD_CLICK_MALL",
        // 請至信件領取
        REWARD_RUBY_TITLE: "REWARD_RUBY_TITLE",
        // 红宝石说明
        REWARD_RUBY_DESC: "REWARD_RUBY_DESC",
        // 红宝石为商城货币，可以在商城购买道具卡。
        //  要加文案
        REWARD_COIN_TITLE: "Coin Description",
        // 遊戲幣說明title
        REWARD_COIN_DESC: "The Basic currency to play games.",
        // 遊戲幣說明
        //  要加文案
        SHOW_REWARD_COLLECT_CARD: "SHOW_REWARD_COLLECT_CARD",
        SHOW_REWARD_MISSION: "Complete Daily Missions",
        //  要加文案
        UNLOCK: "UNLOCK",
        //優惠
        RECOMMEND_TITLE: "RECOMMEND_TITLE",
        //推薦標題
        RECOMMEND_HINT: "RECOMMEND_HINT",
        //推薦遊戲提示
        SIGN_IN_TITLE: "SIGN_IN_TITLE",
        //簽報標題
        SIGN_IN_CONGRATS: "SIGN_IN_CONGRATS",
        //恭喜獲得
        SIGN_IN_GOT: "SIGN_IN_GOT",
        //已領取
        SIGN_IN_GET: "SIGN_IN_GET",
        //領取
        SIGN_IN_BOX: "SIGN_IN_BOX",
        //vip提示
        SIGN_IN_BTN_HINT: "SIGN_IN_BTN_HINT",
        //按鈕提示      
        SIGN_IN_VIP0: "SIGN_IN_VIP0",
        //vip0提示
        SIGN_IN_VIP0_LOCK: "SIGN_IN_VIP0_LOCK",
        //vip0鎖提示
        SIGN_IN_VIP_LOCK_1: "SIGN_IN_VIP_LOCK_1",
        //vip鎖提示前半
        SIGN_IN_VIP_LOCK_2: "SIGN_IN_VIP_LOCK_2",
        //vip鎖提示後半           
        SIGN_IN_START: "SIGN_IN_START",
        //可以簽到描述
        SIGN_IN_FINISHED: "SIGN_IN_FINISHED",
        //簽到完畢描述
        SIGN_IN_UNABLED: "SIGN_IN_UNABLED",
        //不可簽到描述
        SIGN_IN_SUCCESS: "SIGN_IN_SUCCESS",
        //簽到成功描述
        SIGN_IN_PREPARING: "SIGN_IN_PREPARING",
        //簽到準備中描述
        SIGN_IN: "SIGN_IN",
        //簽到
        SIGNED_IN: "SIGNED_IN",
        //已簽到
        SIGN_IN_FINISHED_LOOP: "SIGN_IN_FINISHED_LOOP",
        //簽到完畢描述(循環)
        SIGN_IN_UNABLED_LOOP: "SIGN_IN_UNABLED_LOOP",
        //不可簽到描述(循環)
        SIGN_IN_PREPARING_LOOP: "SIGN_IN_PREPARING_LOOP",
        //簽到準備中描述(循環)
        SIGN_IN_NET_ERROR: "SIGN_IN_NET_ERROR",
        //簽到網路錯誤
        SIGN_IN_HINT: "SIGN_IN_HINT",
        //簽到提示
        SIGN_IN_NOTICE: "SIGN_IN_NOTICE",
        //簽到預告
        SIGN_IN_NOTICE_GET: "SIGN_IN_NOTICE_GET",
        //簽到預告-有資格
        SIGN_IN_NOTICE_NOGET: "SIGN_IN_NOTICE_NOGET",
        //簽到預告-無資格
        SIGN_IN_NOTICE_BOX: "SIGN_IN_NOTICE_BOX",
        //簽到預告-有寶箱
        SIGN_IN_NOTICE_NOBOX: "SIGN_IN_NOTICE_NOBOX",
        //簽到預告-無資格
        SIGN_IN_NOTICE_UPGRADE: "SIGN_IN_NOTICE_UPGRADE",
        //簽到預告-升級提示
        SIGN_IN_NOTICE_GET_HINT: "SIGN_IN_NOTICE_GET_HINT",
        //簽到預告-取得提示
        FAVOR_TITLE: "FAVOR_TITLE",
        //收藏標題
        FAVOR_REMOVE_HINT: "FAVOR_REMOVE_HINT",
        //移除收藏提示
        FAVOR_AUTO_REMOVE_HINT: "FAVOR_AUTO_REMOVE_HINT",
        //自動移除收藏提示
        FAVOR_ADD_HINT: "FAVOR_ADD_HINT",
        //增加收藏提示
        FAVOR_INVALID_HINT: "FAVOR_INVALID_HINT",
        //無效操作提示
        FAVOR_HINT: "FAVOR_HINT",
        //收藏文字
        FAVOR_DESC: "FAVOR_DESC_",
        //收藏說明
        FAVOR_BIG_DESC: "FAVOR_BIG_DESC",
        //場景大愛心收藏
        FAVOR_NOTHING_DESC: "FAVOR_NOTHING_DESC",
        //無收藏的提示
        FAVOR_INFO: "FAVOR_INFO",
        //收藏說明 的標題
        CHANGE_GAME_HINT: "CHANGE_GAME_HINT",
        //跳轉遊戲提示
        BIG_WIN_REPLAY_TITLE: "BIG_WIN_REPLAY_TITLE",
        //大獎重播標題
        FEATURES_TITLE: "FEATURES_TITLE",
        //特色文字
        EVENT_TITLE: "EVENT_TITLE",
        //活動頁標題
        //虎榜
        TIGGER_RANK_TITLE: "TIGGER_RANK_TITLE",
        //倍率榜
        TIGGER_RANK_RESET: "TIGGER_RANK_RESET",
        //重置提示
        TIGGER_RANK_REFRESH: "TIGGER_RANK_REFRESH",
        //刷新提示
        TIGGER_RANK_OUTSIDE: "TIGGER_RANK_OUTSIDE",
        //不在榜內
        TIGGER_RANK_RANK: "TIGGER_RANK_RANK",
        //排名
        TIGGER_RANK_NAME: "TIGGER_RANK_NAME",
        //名稱
        TIGGER_RANK_ODDS: "TIGGER_RANK_ODDS",
        //倍率
        TIGGER_RANK_TIME: "TIGGER_RANK_TIME",
        //時間
        //洗碼
        // TRIAL_SIGN_UP: "TRIAL_SIGN_UP",                         //立即体验
        // TRIAL_GIVE_UP: "TRIAL_GIVE_UP",                         //放弃体验
        // TRIAL_CONTINUE: "TRIAL_CONTINUE",                       //继续体验
        // TRIAL_LEFT: "TRIAL_LEFT",                               //领奖并离开
        // TRIAL_STOP_DESC: "TRIAL_STOP_DESC",                     //無獎離開提示
        // TRIAL_STOP_AWARD_DESC: "TRIAL_STOP_AWARD_DESC",         //有獎離開提示
        // TRIAL_AWARD_DESC: "TRIAL_AWARD_DESC",                   //獎勵取得提示
        TRIAL_AWARD_RECORD_DESC: "TRIAL_AWARD_RECORD_DESC",
        //記錄用獎勵提示
        TRIAL_END_RECORD_DESC: "TRIAL_END_RECORD_DESC",
        //記錄用沒獎勵
        // TRIAL_MAX_AWARD_DESC: "TRIAL_MAX_AWARD_DESC",           //最高獎勵取得提示
        // TRIAL_TARGET_WIN: "TRIAL_TARGET_WIN",                   //目标赢分
        // TRIAL_TARGET_AWARD: "TRIAL_TARGET_AWARD",               //目标奖励
        // TRIAL_AWARD_UPGRADE: "TRIAL_AWARD_UPGRADE",             //升级宝箱
        // TRIAL_NOW_WIN: "TRIAL_NOW_WIN",                         //当前奖励
        // TRIAL_UPGRADE_WIN: "TRIAL_UPGRADE_WIN",                 //升级所需赢分
        // TRIAL_END_DESC: "TRIAL_END_DESC",                       //無獎勵結束提示
        // TRIAL_LVL_HINT: "TRIAL_LVL_HINT",                       //階段提示
        // TRIAL_QUOTA_FULL_DESC: "TRIAL_QUOTA_FULL_DESC",         //名額已滿
        TRIAL_REFUSED_REASON: "TRIAL_REFUSED_REASON_",
        //拒絕理由
        TRIAL_RECORD: "TRIAL_RECORD",
        //紀錄
        TRIAL_INFO: "TRIAL_INFO",
        //說明
        TRIAL_FAVOR: "TRIAL_FAVOR",
        //收藏提示
        //免费赠金
        FREEWINCASH: "FREEWINCASH",
        //免费赠金
        FREEWINCASH_FREE: "FREEWINCASH_FREE",
        //免费
        FREEWINCASH_WINCASH: "FREEWINCASH_WINCASH",
        //赠金
        FREEWINCASH_DESC_1: "FREEWINCASH_DESC_1",
        //{ 试玩币 }仅能于活动中使用，无实际价值。
        FREEWINCASH_DESC_2: "FREEWINCASH_DESC_2",
        //"剩余{試玩币}"的实际奖励将会根据货币价值进行转换，转换比例：1{ 試玩币 }=0.5游戏币。
        FREEWINCASH_DESC_3: "FREEWINCASH_DESC_3",
        //如遇特殊状况，{品牌名}保有修改、变更或暂停本活动之权利。
        FREEWINCASH_DESC_4: "FREEWINCASH_DESC_4",
        //本活动所产生的任何相关异议及问题，{品牌名}保有最终解释权。
        FREEWINCASH_TAEGEY: "FREEWINCASH_TAEGEY",
        //{ 赢分 }目标
        FREEWINCASH_TIER: "FREEWINCASH_TIER",
        //第{0]阶{ 赢分 } 目标 & gt;& gt;第{ 0 }阶{ 赢分 } 目标 
        FREEWINCASH_GIVEUP: "FREEWINCASH_GIVEUP",
        //放弃挑战
        FREEWINCASH_CONTINUE_CHALLENGE: "FREEWINCASH_CONTINUE_CHALLENGE",
        //继续挑战 
        FREEWINCASH_CHALLENGE: "FREEWINCASH_CHALLENGE",
        //立即挑战
        FREEWINCASH_GIVEUPWIN: "FREEWINCASH_GIVEUPWIN",
        // 放弃赢钱 
        FREEWINCASH_WINMORECASH: "FREEWINCASH_WINMORECASH",
        //继续赢钱
        FREEWINCASH_WINCASHNOW: "FREEWINCASH_WINCASHNOW",
        //立即赢钱
        FREEWINCASH_FORFEIT: "FREEWINCASH_FORFEIT",
        //放弃
        FREEWINCASH_CONTINUE: "FREEWINCASH_CONTINUE",
        //继续
        FREEWINCASH_JOIN: "FREEWINCASH_JOIN",
        //加入
        FREEWINCASH_CANCEL: "FREEWINCASH_CANCEL",
        //取消
        FREEWINCASH_CONFIRM: "FREEWINCASH_CONFIRM",
        //确定
        FREEWINCASH_COLLECTANDLEAVE: "FREEWINCASH_COLLECTANDLEAVE",
        //领奖并离开
        FREEWINCASH_WIN: "FREEWINCASH_WIN",
        //赢分 
        FREEWINCASH_BET: "FREEWINCASH_BET",
        //押注
        FREEWINCASH_TXT_1: "FREEWINCASH_TXT_1",
        //没有达成任何奖励，确定离开活动？\n（当前活动将结束）
        FREEWINCASH_TXT_2: "FREEWINCASH_TXT_2",
        //点击确定后将会离开活动，\n确定领取当前奖励并离开？\n（当前活动将结束）
        FREEWINCASH_TXT_4: "FREEWINCASH_TXT_4",
        //名额已满
        FREEWINCASH_PLAYING1: "FREEWINCASH_PLAYING1",
        //游戏进行中
        FREEWINCASH_PLAYING2: "FREEWINCASH_PLAYING2",
        //道具卡使用中
        FREEWINCASH_TXT_5: "FREEWINCASH_TXT_5",
        //恭喜您赢得奖励，\n已派送到您的{ 背包 } 中。
        FREEWINCASH_TXT_6: "FREEWINCASH_TXT_6",
        //恭喜您达成所有目标，{ 活动名 } 结束。\n已派发奖励至您的{ 背包 }！
        FREEWINCASH_BACKPACK: "FREEWINCASH_BACKPACK",
        // 背包
        FREEWINCASH_WALLET: "FREEWINCASH_WALLET",
        // 钱包 
        FREEWINCASH_COINS: "FREEWINCASH_COINS",
        // ｛品牌名｝币
        FREEWINCASH_DEMOCOINS: "FREEWINCASH_DEMOCOINS",
        // ｛试玩币
        FREEWINCASH_INSTRUCTION: "FREEWINCASH_INSTRUCTION",
        // 说明
        FREEWINCASH_INSTRUCTION_1: "FREEWINCASH_INSTRUCTION_1",
        // 免费获得赢钱机会！
        FREEWINCASH_INSTRUCTION_2: "FREEWINCASH_INSTRUCTION_2",
        // 参加即可获得｛試玩币｝
        FREEWINCASH_INSTRUCTION_3: "FREEWINCASH_INSTRUCTION_3",
        // 达成指定｛赢分｝就能获得奖励。
        FREEWINCASH_INSTRUCTION_4: "FREEWINCASH_INSTRUCTION_4",
        // 活动时间
        FREEWINCASH_INSTRUCTION_5: "FREEWINCASH_INSTRUCTION_5",
        // 活动奖励
        FREEWINCASH_INSTRUCTION_6: "FREEWINCASH_INSTRUCTION_6",
        // 游戏道具卡，使用即可进入特色游戏。
        FREEWINCASH_INSTRUCTION_7: "FREEWINCASH_INSTRUCTION_7",
        // 指定游戏币
        FREEWINCASH_INSTRUCTION_8: "FREEWINCASH_INSTRUCTION_8",
        // 指定游戏币，数量取决于达成目标后您剩下的｛試玩币｝。
        FREEWINCASH_MESSAGE_1: "FREEWINCASH_MESSAGE_1",
        // 奖励名额已满，活动结束。当前进度将不进行保留。
        FREEWINCASH_MESSAGE_2: "FREEWINCASH_MESSAGE_2",
        // 参加名额已满，活动结束。
        FREEWINCASH_MESSAGE_3: "FREEWINCASH_MESSAGE_3",
        // 您的餘額不足。\n（當前活動將結束）
        // 內購
        BUY_BONUS_BUY: "BUY_BONUS_BUY",
        //购买
        BUY_BONUS_FEATURE: "BUY_BONUS_FEATURE",
        //特色
        BUY_BONUS_DES_BUY_NOW: "BUY_BONUS_DES_BUY_NOW",
        //直接购买特色游戏，购买后立即使用
        BUY_BONUS_DES_FREE: "BUY_BONUS_DES_FREE",
        //免费游戏 N 局
        BUY_BONUS_DES_BONUS: "BUY_BONUS_DES_BONUS",
        //特色游戏 N 局
        BUY_BONUS_DES_BET: "BUY_BONUS_DES_BET",
        //押注
        BUY_BONUS_DES_COST: "BUY_BONUS_DES_COST",
        //金额
        BUY_BONUS_DES_TOTAL_PAID: "BUY_BONUS_DES_TOTAL_PAID",
        //總押注
        BUY_BONUS_DES_TOTAL_PRICE: "BUY_BONUS_DES_TOTAL_PRICE",
        //總金額
        BUY_BONUS_DES_TIMES: "BUY_BONUS_DES_TIMES",
        //购买次数
        BUY_BONUS_BUY_AND_PLAY: "BUY_BONUS_BUY_AND_PLAY",
        //购买并使用
        BUY_BONUS_MSG_MONEY_NOT_ENOUGH: "BUY_BONUS_MSG_MONEY_NOT_ENOUGH",
        //您的余额不足，无法购买本商品。
        BUY_BONUS_MSG_BUYING_LIMIT_REACHED: "BUY_BONUS_MSG_BUYING_LIMIT_REACHED",
        //购买次数已用尽。
        BUY_BONUS_MSG_CLOSED: "BUY_BONUS_MSG_CLOSED",
        BUY_BONUS_ITEM_EXPLAIN: "BUY_BONUS_ITEM_EXPLAIN",
        CHANGE_CURRENCY_TITLE: "CHANGE_CURRENCY_TITLE",
        //幣值切換通知
        CHANGE_CURRENCY: "CHANGE_CURRENCY",
        //幣值切換通知
        // 特色遊玩
        FEATURES_DEMO_GO_BACK_REAL: "FEATURES_DEMO_GO_BACK_REAL",
        //點擊確定將回到真錢模式
        FEATURES_DEMO_BTN_TXT: "FEATURES_DEMO_BTN_TXT",
        //按鈕
        FEATURES_DEMO_INFO_1: "FEATURES_DEMO_INFO_1",
        //資訊1
        FEATURES_DEMO_INFO_2: "FEATURES_DEMO_INFO_2",
        //資訊2
        FEATURES_DEMO_REAL_MODE: "FEATURES_DEMO_REAL_MODE",
        //返回真錢提示
        FEATURES_DEMO_MODE: "FEATURES_DEMO_MODE",
        //特色遊玩模式
        FEATURES_DEMO_SELECTION: "FEATURES_DEMO_SELECTION",
        //特色遊玩選則提示
        //通知
        NOTIFY_ITEM_1: "NOTIFY_ITEM_1",
        //通知有道具卡尚未使用
        NOTIFY_ITEM_2: "NOTIFY_ITEM_2",
        //通知有未到可用時間的道具卡
        NOTIFY_JILILV: "NOTIFY_JILILV",
        // 智慧即時訊息JILI LV內容
        NOTIFY_SIGNIN: "NOTIFY_SIGNIN",
        // 智慧即時訊息簽到滿80%內容
        NOTIFY_DAILY: "NOTIFY_DAILY",
        // 智慧即時訊息任務提示內容
        NOTIFY_BUYBONUS: "NOTIFY_BUYBONUS",
        // 智慧即時訊息內購
        NOTIFY_DEBRIS: "NOTIFY_DEBRIS",
        // 智慧即時訊息碎片收集
        NOTIFY_TOP50: "NOTIFY_TOP50",
        // 智慧即時訊息碎片收集TOP50
        // 自選起伏
        VOLATILITY_INFO: "VOLATILITY_INFO",
        //起伏度標題
        VOLATILITY_TEXT: "VOLATILITY_TEXT",
        //起伏度內容
        // 聯合彩金機制
        JACKPOT_TEXT: "JACKPOT_TEXT",
        BRAND_JILI: "BRAND_JILI",
        BRAND_TADA: "BRAND_TADA",
        JACKPOT_DESC_TEXT_1: "JACKPOT_DESC_TEXT_1",
        JACKPOT_DESC_TEXT_2: "JACKPOT_DESC_TEXT_2",
        JACKPOT_BET_TEXT_1: "JACKPOT_BET_TEXT_1",
        JACKPOT_BET_TEXT_2: "JACKPOT_BET_TEXT_2",
        JACKPOT_BET_TEXT_3: "JACKPOT_BET_TEXT_3",
        JACKPOT_BET_TEXT_1b: "JACKPOT_BET_TEXT_1b",
        JACKPOT_BET_TEXT_2b: "JACKPOT_BET_TEXT_2b",
        JACKPOT_BET_TEXT_3b: "JACKPOT_BET_TEXT_3b",
        JACKPOT_BET_TEXT_1c: "JACKPOT_BET_TEXT_1c",
        JACKPOT_BET_TEXT_2c: "JACKPOT_BET_TEXT_2c",
        JACKPOT_BET_TEXT_3c: "JACKPOT_BET_TEXT_3c",
        JACKPOT_BET_TEXT: "JACKPOT_BET_TEXT",
        JACKPOT_AWARD_TEXT: "JACKPOT_AWARD_TEXT",
        JACKPOT_WIN_TEXT: "JACKPOT_WIN_TEXT",
        JACKPOT_AWARDTYPE_TEXT: "JACKPOT_AWARDTYPE_TEXT",
        JACKPOT_DATE_TEXT: "JACKPOT_DATE_TEXT",
        JACKPOT_WINNER_TEXT: "JACKPOT_WINNER_TEXT",
        JACKPOT_AMOUNT_TEXT: "JACKPOT_AMOUNT_TEXT",
        JACKPOT_GRAND_TEXT: "JACKPOT_GRAND_TEXT",
        JACKPOT_MAJOR_TEXT: "JACKPOT_MAJOR_TEXT",
        JACKPOT_MINI_TEXT: "JACKPOT_MINI_TEXT",
        JACKPOT_GONGRATS_TEXT: "JACKPOT_GONGRATS_TEXT",
        SLOT_JACKPOT: "SLOT_JACKPOT",
        SLOT_JACKPOT_OTHER: "SLOT_JACKPOT_OTHER",
        //滿額必開
        MHB_TEXT: "MHB_TEXT",
        MHB_DESC_BTN_THIS: "MHB_DESC_BTN_THIS",
        MHB_DESC_BTN_OTHER: "MHB_DESC_BTN_OTHER",
        MHB_DESC_TEXT_1: "MHB_DESC_TEXT_1",
        MHB_DESC_TEXT_2: "MHB_DESC_TEXT_2",
        MHB_WINNER_TEXT: "MHB_WINNER_TEXT",
        MHB_AMOUNT_TEXT: "MHB_AMOUNT_TEXT",
        MHB_DATE_TEXT: "MHB_DATE_TEXT",
        MHB_INFO: "MHB_INFO",
        MHB_INFO_TITLE: "MHB_INFO_TITLE",
        //碎片
        DEBRIS_ITEM: "DEBRIS_ITEM",
        DEBRIS_AWARD: "DEBRIS_AWARD",
        DEBRIS_AMOUNT: "DEBRIS_AMOUNT",
        DEBRIS_EXCHANGE: "DEBRIS_EXCHANGE",
        DEBRIS_LEFT: "DEBRIS_LEFT",
        DEBRIS_LEFT_TIME: "DEBRIS_LEFT_TIME",
        DEBRIS_BET_HINT: "DEBRIS_BET_HINT",
        DEBRIS_EVENT: "DEBRIS_EVENT",
        DEBRIS_NOT_ENOUGH: "DEBRIS_NOT_ENOUGH",
        //Gift Code
        GIFT_CODE_1: "GIFT_CODE_1",
        GIFT_CODE_2: "GIFT_CODE_2",
        GIFT_CODE_3: "GIFT_CODE_3",
        GIFT_ERROR_CODE: "GIFT_ERROR_CODE_"
      };
      Define.StringKeyGame = {};
      Define.APP = null;
      Define.DollarSymbol = "";
      Define.DollarSymbolSuffix = "";
      Define.DollorSymbolDisplayPriority = true;
      Define.DollarFontFamily = "Arial";
      Define.DefaultFont = null;
      Define.DefaultExtraFont = null;
      Define.IsSyncFromWS = false;
      Define.TransactionMode = {
        Normal: 0,
        Single: 1,
        SingleSync: 2
      };
      Define.PHASE_ENTERING_EVENT = {
        WEBVIEW_LAUNCH: 90,
        //網頁啟動時
        CREATOR_LAUNCH: 100,
        //Creator啟動時 - Scene加載完成(OnLoad)時呼叫
        CHECK_LANG: 101,
        //使用Client端語系
        GET_LANG: 102,
        //取得語系設定
        FEATURE_VIEW_INIT: 103,
        //新Loading初始化
        LOGIN_GAP: 200,
        //執行登入GAP平台(串接Api才需要)
        LOGIN_GAP_END: 201,
        //取得登入GAP平台結果
        SOCKET_RESULT: 250,
        //Life Socket Service回應
        SOCKET_CONNECTION_TIME: 251,
        //Life Socket連線次數
        SOCKET_CONNECTION_ERROR: 252,
        //Life Socket連線錯誤
        LOADING_GAME_VEIEW_END: 260,
        //主場載入完成
        LOGIN_GAME: 300,
        //執行登入GameServer
        LOGIN_GAME_END: 301,
        //取得登入GameServer結果
        GET_SETTING: 350,
        //取得遊戲設定結果
        GAME_LOADING: 400,
        //選擇機台後的Loading
        GAME_MAIN_STAGE: 500,
        //遊戲設定完成
        CLOSE_INTRO: 501,
        //關閉新Loading頁
        PLAY_LEADING: 502,
        //播放前導
        BALANCE_ENOUGH: 503,
        //進入時財產足以押注
        OPEN_INTRO: 504,
        //新Loading頁按鈕彈起
        FIRST_SPIN: 600,
        //進遊戲後首次SPIN
        LOGIN_GAME_RELOGIN: 900,
        //執行登入GameServer，發生Relogin事件
        TRIGGER_TIMEOUT: 998,
        //發生逾時
        TIMEOUT: 999,
        //發生逾時，有回來
        GL_LOG: 1000,
        //使用canvas數量
        ROUT_CHANGE: 1001 //觸發線路切換Log
        // 10000 ~ 19999 號會給APP大廳使用,請不要Event Log用到這個範圍

      };
      Define.RealItemsMap = {
        13081001: Define.StringKey.PH_IPHONE //IPhone14

      };
      Define.ROUTE = {
        NCR: 1,
        //安迅
        CHIEF: 2 //是方

      };
      Define.VERIFY_EVENT = {
        SYNC_CHIPS: 100,
        SYNC_WIN: 101,
        SYNC_PLATE: 102
      };
      Define.TIMEOUT_COMMAND = {
        LOGIN: 0,
        GAME_INFO: 1,
        UPGRADE: 2,
        SPIN: 3,
        FREE_SPIN: 4,
        CHOOSE: 5
      };
      Define.FavorSymbol = {
        BIG: "b",
        RECOMMAND_FAVOR: "rf",
        FAVOR: "f",
        RECOMMAND: "r",
        TRIAL: "t"
      };
      Define.BTN_CLICK_EVENT = {
        WEB_SITE: 1,
        // 網址
        AUTOPLAY: 30,
        // 自動玩
        AUTOPLAY_STOP: 31,
        // 自動玩(局數)
        SPIN: 40,
        // 開始
        STOP: 41,
        // 停止
        FEATURESVIEW: 50,
        // 特色按鈕(數量)
        FEATURES_DEMO_1: 51,
        // 特色選單中(特色1)
        FEATURES_DEMO_2: 52,
        // 特色選單中(特色2)
        FEATURES_DEMO_3: 53,
        // 特色選單中(特色3)
        FEATURES_DEMO_4: 54,
        // 特色選單中(特色4)
        FEATURES_DEMO_5: 55,
        // 特色選單中(特色5)
        FEATURES_DEMO_NOW_PLAY: 56,
        // 特色頁中(立即點擊試玩)
        FEATURES_DEMO_IDLE: 57,
        // 特色選單中因閒置跳出(回到真錢模式)
        FEATURES_DEMO_BACK_REAL: 58,
        // 點擊回到真錢模式
        FEATURES_DEMO_MENU: 59,
        // 點擊特色選單
        HARDSTOP_ON: 60,
        // 遊戲加速紐
        HARDSTOP_OFF: 61,
        // 遊戲加速紐(局數)
        RATIO: 70,
        // 遊戲說明(Web)
        DESC: 71,
        // 遊戲說明(跑馬燈)
        SOUND_ON: 80,
        // 音樂音效(靜音)開
        SOUND_OFF: 81,
        // 音樂音效(靜音)(秒數)
        HISTORY: 90,
        // 遊戲歷程
        WISEAUTO: 100,
        // 智能託管
        CLICK_PLATE: 105,
        // 點擊盤面
        SPACE_SPIN: 110,
        // 空白鍵可當作SPIN
        WISEAUTO_TOTAL: 120,
        // 智能託管-總局數(回傳所有值)
        WISEAUTO_FORCE_NON_MANUAL_STOP: 130,
        // 智能託管-條件停止
        WISEAUTO_FORCE_MANUAL_STOP: 131,
        // 智能託管-手動停止
        WISEAUTO_FORCE_OTHER_STOP: 132,
        // 智能託管-其他條件停止
        BACKPACK: 140,
        // 背包
        BACKPACK_GAMETAB: 141,
        // 道具分頁
        BACKPACK_ALLTAB: 142,
        // 所有分頁
        BACKPACK_MSGTAB: 143,
        // 訊息分頁
        BACKPACK_CHANGE_GAME: 144,
        // 背包跳轉遊戲
        RECOMMEND_CLICK: 150,
        // 點擊推薦按鈕
        TREATURE_BOX_CLICK: 151,
        // 點擊簽到寶箱
        SIGN_IN_INFO_CLICK: 152,
        // 點擊簽到資訊
        BOOKMARK_CLICK: 153,
        // 點擊頁簽
        TRIAL_CLICK: 160,
        // 點擊體驗活動
        RECOM_CHANGE_GAME: 200,
        // 推薦換遊戲
        RECOM_FAVOR_ADD: 201,
        // 推薦增加收藏
        RECOM_FAVOR_REMOVE: 202,
        // 推薦移除收藏
        FAVOR_CHANGE_GAME: 210,
        // 收藏換遊戲
        FAVOR_FAVOR_ADD: 211,
        // 收藏增加收藏
        FAVOR_FAVOR_REMOVE: 212,
        // 收藏移除收藏
        RECOMF_CHANGE_GAME: 220,
        // 推薦收藏換遊戲
        RECOMF_FAVOR_ADD: 221,
        // 推薦收藏增加收藏
        RECOMF_FAVOR_REMOVE: 222,
        // 推薦收藏移除收藏
        TRIAL_FAVOR_ADD: 223,
        // 洗碼增加收藏
        BIG_FAVOR_ADD: 225,
        // 場景內收藏
        BIG_WIN_REPLAY: 230,
        // 大獎重播
        LIKE_CHANGE_GAME: 240,
        // 猜你喜歡換遊戲
        BUY_BONUS: 250,
        // FG內購
        VOLATILITY_CLOSE: 259,
        // 自選起伏按鈕(自動關閉)
        VOLATILITY: 260,
        // 自選起伏按鈕
        VOLATILITY_HIGH: 261,
        // 自選起伏按鈕(高起伏)
        VOLATILITY_LOW: 262,
        // 自選起伏按鈕(低起伏)
        VOLATILITY_QUEST: 263,
        // 自選起伏按鈕(問號)
        NOTIFY_OTHER_GAME: 264,
        // 點擊通知跳轉到其他遊戲
        NOTIFY_HISTORY_ICON: 265,
        // 點擊歷史通知
        INDOLOBBY_CHANGE_GAME: 266,
        // 印度大廳內切換遊戲
        INDOLOBBY_BUTTON_EVENT: 267,
        // 印度大廳內按鈕點擊
        MISSION_OTHER_GAME: 268,
        // 任務跳轉到其他遊戲
        DEBRISE_VIEW_OPEN: 270,
        //開啟碎片介面
        INDOLOBBY_GAME_COUNT: 271,
        // 印度大廳顯示幾款遊戲的LOG
        JP_CHANGE_GAME: 281,
        // 聯合彩金跳轉遊戲
        MHB_CHANGE_GAME: 291,
        // 滿額必開跳轉遊戲
        TOP50_CHANGE_GAME: 292,
        // 龍虎跳轉遊戲
        PLATFORM_ERROR_MESSAGE: 300,
        // 平台錯誤訊息log
        INGAME: 600,
        // 遊戲內用
        GAME_ERROR: 601,
        //遊戲錯誤LOG
        SYNC_CHIPS: 602,
        //財產同步差異過大
        CHANGE_CHIPS: 603,
        //財產同步差異過大
        CLOSE_GAME: 700 //關閉遊戲

      };
      Define.PHASE_RESULT = {
        SUCCESS: 0,
        TIMEOUT: 1,
        NOT_LOGIN_YET: 2,
        REPEAT_LOGIN: 3,
        INVALID_SSOKEY: 4,
        INVALID_TOKEN: 5,
        NOT_ALLOW_REGION: 6,
        SERVER_MAINTAIN: 7,
        UNKNOWN: 99
      };
      Define.GL_RESULT = {
        TRUE: 0,
        FALSE: 1
      };
      Define.SOUND_OGG_ENABLE = false;
      Define.TagType = Enum({
        None: 0,
        Hot: 1,
        New: 2,
        Event: 3
      });
      Define.TagName = ["", "hot_", "new_", "event_"];
      Define.BuyBonusTag = Enum({
        None: 0,
        Hot: 1,
        Event: 2
      });
      Define.BetMode = Enum({
        Normal: 0,
        Item: 1,
        ExtraBet: 2,
        FreeSpin: 3,
        Trail: 4
      });
      Define.CurrencyBetIcon = {
        "default": "BottomBar_Bet",
        USD: "BottomBar_Bet_01"
      };
      Define.BetIcon = {
        JILI_Default: "BottomBar_Bet",
        TADA_Default: "BottomBar_Bet_01",
        BMM_Default: "BottomBar_Bet"
      };
      Define.SpinBtn = {
        BottomBar_Btn_L: "BottomBar_Btn_L",
        BottomBar_Spin_01: "BottomBar_Spin_01"
      };
      Define.FreeSpinBtn = {
        FreeSpin_Word: "BottomBar_Btn_FreeSpin_2",
        FreeSpin_Arrow: "BottomBar_Btn_FreeSpin_1",
        FreeSpin_BG: "BottomBar_Btn_FreeSpin_BG",
        PrizeUp_Word: "BottomBar_Btn_Bonus"
      };
      Define.LineSetting = {
        org: 1,
        sec: 2,
        street: 3,
        bc: 4,
        americas: 5,
        americas_str: 6
      };
      Define.ResFolderName = {
        org: "framework",
        sec: "framework_2",
        street: "framework_1.5",
        bc: "framework_bc",
        india: "framework_india",
        india2: "framework_india_2",
        // india2 = jili star
        americas: "framework_americas",
        americas_str: "framework_americas_1.5"
      };
      Define.BarPath = "Astt/%s/bottombar/BarNode_share";
      Define.AutoPlaySettingPanel = "Astt/%s/autoPlay/AutoPlaySettingPanel";
      Define.AutoPlaySettingPanel_DFI = "Astt/%s/autoPlay/AutoPlaySettingPanel_DFI";
      Define.AutoPlaySettingPanel_DFIII = "Astt/%s/autoPlay/AutoPlaySettingPanel_DFIII";
      Define.AutoPlaySettingPanel_BS = "Astt/%s/autoPlay/AutoPlaySetting_BS";
      Define.AutoPlaySetting_AG2 = "Astt/%s/autoPlay/AutoPlaySetting_AG2";
      Define.AutoPlaySetting_FD = "Astt/%s/autoPlay/AutoPlaySetting_FD";
      Define.AutoPlaySettingPanel_MS = "Astt/%s/autoPlay/AutoPlaySettingPanel_MS";
      Define.DiscountBtn = "Astt/%s/discount/Prefab/WinMore_IconBtn";
      Define.DepositBtn = "Astt/%s/Common/Prefab/Common_QuicklyRecharge";
      Define.DebrisBtnPath = {
        ORG: "Astt/%s/Debris/Prefab/Debris_IconBtn",
        AMERICAS: "Astt/%s/Debris/Prefab/Debris_IconBtn"
      };
      Define.DailyMissionBtn = "Astt/%s/dailyMission/Prefab/DailyMission_IconBtn";
      Define.NewDailyMissionBtn = "Astt/%s/dailyMission/Prefab/DailyMission_IconBtn_02";
      Define.DebrisViewPath = {
        ORG: "Astt/%s/Debris/Prefab/Debris",
        AMERICAS: "Astt/%s/Debris/Prefab/Debris"
      };
      Define.BuyBonusPath = {
        ORG: "Astt/%s/buyBonus/Prefab/BuyBonus",
        AMERICAS: "Astt/%s/buyBonus/Prefab/BuyBonus",
        BTN: "Astt/%s/buyBonus/Prefab/BuyBonus_IconBtn"
      };
      Define.TrialPath = {
        ORG: "Astt/%s/Trial/Prefab/Trial",
        AMERICAS: "Astt/%s/Trial/Prefab/Trial"
      };
      Define.TrialBtnPath = {
        ORG: "Astt/%s/Trial/Prefab/Trial_IconBtn",
        AMERICAS: "Astt/%s/Trial/Prefab/Trial_IconBtn"
      };
      Define.UFAApiID = [1003, 1072];
      Define.WebNoMenu = [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1003];
      Define.NoSymbolApiID = [8, 4];
      Define.AUTOPLAY_SINGLE_WIN_RATE = 10;
      Define.CbKey = {
        BottomBar: "bar",
        Backpack: "backpack",
        ItemInfo: "itemInfo",
        Volatility: "volatility",
        SignIn: "signin",
        Discount: "discount",
        Trial: "trial",
        Favor: "favor",
        Debris: ":debris",
        BuyBonus: "buybonus",
        Deposit: "Deposit"
      };
      Define.DAILYMISSION_REWARD_TYPE = {
        ItemCard: 1,
        MallCoin: 2,
        ForceFg: 4,
        RaceTicket: 8,
        Gift: 16,
        GameCoin: 32,
        TaDaBuff: 64,
        CollectCard: 128
      };
      Define.REPLAY_ANI_DELAY_TIME = 1.75;
      Define.ErrorStatus = Enum({
        PlatFormRetry: 99,
        PlatForm: 100,
        Game: 200,
        Spin: 300,
        Unknow: 999
      });
      Define.SwitchOffKeyDefine = Enum({
        ShopingMall: 1,
        // 內購
        SmartMessage: 2,
        // 智能訊息
        Promotion: 3,
        // 推薦收藏
        TreasureChest: 4,
        // 百寶箱ICON
        GameHistory: 5,
        // 歷程
        FeaturedDisplay: 6,
        // 特色遊玩功能
        CoinAccuracy: 7,
        // 強制鎖小數點
        CurrencySymbol: 8,
        // 關閉幣別符號
        ItemBoxImport: 9,
        // 背包跳轉
        AllChangeGameImport: 10,
        // 遊戲跳轉
        AutoPlay: 11,
        // 自動玩
        IsDelay: 12,
        // 是否需要延遲進入下一局，有的話要延遲
        CloseSpeedUp: 13,
        // 關閉快停
        CloseBackpack: 14,
        // 關閉背包
        Trail: 15,
        // 洗碼(免費贈金)
        ShowAutoSetting: 16,
        // 自動玩需先開啟設定面板 (遊戲端使用)
        NoSoundUnder1: 17,
        // 贏分大於1倍才能有音效 (遊戲端使用)
        NoQuickSpin: 18,
        // 禁用空白鍵、盤面的Spin功能 (遊戲端使用)
        RatioOnView: 19,
        // 遊戲說明按鈕(?那顆)要在主畫面 (公版使用)
        ShowPlateformVer: 20,
        // 顯示平台版本號 (公版使用)
        ShowTime: 21,
        // 顯示時間 (公版使用)
        ShowPlayTime: 22,
        // 顯示遊玩時間 (公版使用)
        BlockLobbyOff: 23,
        // 區塊鍊競猜大廳關閉(未開啟)
        NoRedSpot: 24,
        // 不顯示紅點
        CloseVip: 25,
        // 不顯示VIP資訊
        CloseBuyBonusInfo: 26,
        // 不顯示內購的說明按鈕
        CloseSettingInfo: 27,
        // 不顯示設定內說明頁按鈕
        UseKilo: 28,
        // 使用千位數縮寫
        ClickAutoSetting: 29,
        // 送審自動玩面板選項打開
        CloseBuyBonusAdd: 30,
        // buybonus面板加減關閉
        RemoveDecimal: 31,
        // 小數點後移除
        ShowBuyBonusBetInfo: 32,
        // 開啟BuyBonus押注資訊
        CloseWinTxtWithZero: 33,
        // 贏分為0時關閉WIN文字
        ShowNetWin: 34,
        // 顯示淨利
        CloseSideFeatures: 35,
        // 關閉周邊機制 (送審用;buybonus不受此限制)
        RealityCheck: 36,
        // 防沉迷機制
        CloseJPList: 37,
        // 關閉JP中獎歷史紀錄
        DisableSettingInfo: 38,
        // 不啟用說明頁按鈕 (送審規範：Spin和FG時說明頁按鈕不可點擊)
        CloseManual: 39 // 關閉特色描述 (送審規範：不顯示特色描述)

      });
      Define.ClientErrorCode = Enum({
        ReceiveSpinAckAgain: -99,
        ClientTimeOut: -98,
        PlateError: -97
      });
      Define.BetColumnLimit = 5;
      Define.BetLowLvl = 2;
      Define.BetUpLvl = 12;
      Define.BetStorageKey = ":BetValue";
      Define.IsLifeSocketClose = true;
      Define.LifeSocketReqUrl = null;
      Define.SpeedRange = [500, 1000, 1500, 2000, Number.MAX_SAFE_INTEGER];
      Define.MaxSpeedLvl = 4;
      Define.FormBtnClickParams = null;
      Define.SendBtnClickEvent = null;
      Define.GameReason = Enum(ItemStateReason);
      Define.m_canUseItemCard = true;
      Define.m_cantUseReason = ItemStateReason.PLAYING;
      Define.m_switchOffKeys = [];
      Define.CloseIntroKey = "CloseIntro";
      Define.MissionIsOpenedKey = "MissionIsOpenedKey";
      Define.TOKEN = "";
      Define.AddEventWebview = null;
      Define.RemoveEventWebview = null;
      Define.WebviewType = EventWebViewType.None;
      Define.EventWebviewType = Enum(EventWebViewType);
      Define.IsIntroNodeActive = true;
      Define.TestRankType = -1;
      Define.BMMApi = {
        UKGC: 1006,
        MALTA: 1007,
        SPAIN: 1008,
        DENMARK: 1009,
        ROMANIA: 1010,
        SWEDEN: 1011,
        PORTUGAL: 1012,
        SWITZERLAND: 1013,
        COLOMBIA: 1014,
        GREECE: 1015,
        NETHERLANDS: 1016,
        ITALY: 1017,
        GERMANY: 1018
      };
      Define.BMMRequest = {
        OutsideInfo: [1007],
        BetDollerSymbol: [1006, 1007]
      };
      Define.MGAApi = 995;
      Define.GLI_Default_DollarSymbol = "$";
      Define.GLIApi = {
        AMERICAS: 999,
        COLOMBIA: 997
      };
      Define.SpinType = {
        Normal: 0,
        Twice: 1
      };
      Define.BdType = {
        None: 0,
        Item: 1,
        BuyBonus: 2,
        FreeSpin: 3
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Discount.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LifeSocket.ts', './ConnectionManager.ts', './Tools.ts', './Define.ts', './LocaleStringManager.ts', './MsgBox.ts', './BottombarManager.ts', './Recommend.ts', './SignIn.ts', './LocalStorageManager.ts', './Favor.ts', './BigFavorHint.ts', './BigWinReplay.ts', './TiggerRank.ts', './EnvironmentConfig.ts', './promotion.mjs_cjs=&original=.js', './Request.ts', './Wallet.ts', './promotion.js'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, WebView, Node, Layout, Sprite, Animation, Prefab, SpriteFrame, log, instantiate, error, UITransform, Button, Component, LifeSocket, ConnectionManager, Tools, Define, LocaleStringManager, MsgBox, BottombarManager, BigFavorUser, Recommend, SignIn, LocalStorageManager, Favor, BigFavorHint, BigWinReplay, TiggerRank, EnvironmentConfig, Request, DEFAULT_REQUEST_OPTIONS, walletManger, _cjsExports;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      WebView = module.WebView;
      Node = module.Node;
      Layout = module.Layout;
      Sprite = module.Sprite;
      Animation = module.Animation;
      Prefab = module.Prefab;
      SpriteFrame = module.SpriteFrame;
      log = module.log;
      instantiate = module.instantiate;
      error = module.error;
      UITransform = module.UITransform;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      ConnectionManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      BottombarManager = module.default;
      BigFavorUser = module.BigFavorUser;
    }, function (module) {
      Recommend = module.default;
    }, function (module) {
      SignIn = module.default;
    }, function (module) {
      LocalStorageManager = module.default;
    }, function (module) {
      Favor = module.default;
    }, function (module) {
      BigFavorHint = module.default;
    }, function (module) {
      BigWinReplay = module.default;
    }, function (module) {
      TiggerRank = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, null, function (module) {
      Request = module.Request;
      DEFAULT_REQUEST_OPTIONS = module.DEFAULT_REQUEST_OPTIONS;
    }, function (module) {
      walletManger = module.walletManger;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18;

      cclegacy._RF.push({}, "4b11aWDpHNHjofkfo8a8SDk", "Discount", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FavorPrefab = "Astt/%s/discount/Prefab/WinMore_Popular_Page";
      var SignInPrefab = "Astt/%s/discount/Prefab/WinMore_FreeGift_Page";
      var RecommendPrefab = "Astt/%s/discount/Prefab/WinMore_Popular_Page";
      var BigWinReplayPrefab = "Astt/%s/discount/bigwin";
      var TiggerRankPrefab = "Astt/%s/discount/Prefab/WinMore_Top50_Page"; // NEW

      var LocaleImgName = {
        DiscountBtn: "img_Discount_label",
        DiscountBtn_Tada: "WinMore_IconName",
        DiscountTitle: "img_Discount_label",
        DiscountTitle_Tada: "WinMore_Title"
      };
      var TIME_OUT = 5000;

      var PageBtn = function PageBtn() {
        this.PageName = "";
        this.BtnNode = null;
        this.BtnState = null;
        this.LabelNode = null;
        this.RedPointNode = null;
        this.ViewNode = null;
        this.CheckBg = null;
      }; // enum Btn_Name
      // {
      //     RECOMMEND_TITLE,       //推薦標題
      //     SIGN_IN_TITLE,         //簽報標題
      //     FAVOR_TITLE,           //收藏標題
      //     TIGGER_RANK_TITLE,     //倍率榜
      //     BIG_WIN_REPLAY_TITLE,  //大獎重播標題
      // }


      var PageName = exports('PageName', {
        Recommand: "recommend",
        SignIn: "signin",
        Favor: "favor",
        bigWinReplay: "bigwin",
        Features: "features",
        TigerRank: "tigerrank",
        EventWebview: "eventwebview",
        mhb: "mhb",
        JP: "jp"
      }); // 頁籤顯示順序

      var Order; // 圖片

      (function (Order) {
        Order[Order["eventwebview"] = 0] = "eventwebview";
        Order[Order["tigerrank"] = 1] = "tigerrank";
        Order[Order["signin"] = 2] = "signin";
        Order[Order["recommend"] = 3] = "recommend";
        Order[Order["favor"] = 4] = "favor";
        Order[Order["jp"] = 5] = "jp";
        Order[Order["mhb"] = 6] = "mhb";
        Order[Order["features"] = 7] = "features";
        Order[Order["bigwin"] = 8] = "bigwin";
      })(Order || (Order = {}));

      var Sheet;

      (function (Sheet) {
        Sheet[Sheet["eventwebview"] = 0] = "eventwebview";
        Sheet[Sheet["tigerrank"] = 1] = "tigerrank";
        Sheet[Sheet["recommend"] = 2] = "recommend";
        Sheet[Sheet["favor"] = 3] = "favor";
        Sheet[Sheet["signin"] = 4] = "signin";
        Sheet[Sheet["bigwin"] = 5] = "bigwin";
        Sheet[Sheet["features"] = 6] = "features";
        Sheet[Sheet["jp"] = 7] = "jp";
        Sheet[Sheet["mhb"] = 8] = "mhb";
      })(Sheet || (Sheet = {}));

      var PageTitleSprite = ["WinMore_Events", "WinMore_TOP50", "WinMore_Popular", "WinMore_Favorites", "WinMore_FreeGift", "WinMore_TOP50", "WinMore_Features", "WinMore_LinkJP", "WinMore_MHB"];
      var RecordKey = "FavorShows";
      var BlockApiId = [];
      var Discount = exports('default', (_dec = property({
        type: WebView,
        tooltip: "活動頁"
      }), _dec2 = property({
        type: Node,
        tooltip: "優惠主畫面"
      }), _dec3 = property({
        type: Layout,
        tooltip: "頁簽背景"
      }), _dec4 = property({
        type: Layout,
        tooltip: "頁簽文字"
      }), _dec5 = property({
        type: Sprite,
        tooltip: "按鈕上的推薦文字(改用動態載入)"
      }), _dec6 = property({
        type: Sprite,
        tooltip: "優惠標題"
      }), _dec7 = property({
        type: Node,
        tooltip: "載入遮罩"
      }), _dec8 = property({
        type: Node,
        tooltip: "基本畫面"
      }), _dec9 = property({
        type: Animation,
        tooltip: "簽到提示動畫"
      }), _dec10 = property({
        type: Prefab,
        tooltip: "新頁簽按鈕"
      }), _dec11 = property({
        type: Prefab,
        tooltip: "新頁簽按鈕(TADA)：Common_TagBtn"
      }), _dec12 = property({
        type: Node,
        tooltip: "Logo"
      }), _dec13 = property({
        type: Node,
        tooltip: "Other Logo"
      }), _dec14 = property({
        type: Node,
        tooltip: "TaDa Casino"
      }), _dec15 = property({
        type: BigFavorHint,
        tooltip: "大愛心提示介面"
      }), _dec16 = property({
        type: SpriteFrame,
        tooltip: "紅點圖片"
      }), _dec17 = property({
        type: SpriteFrame,
        tooltip: "(暗)標題圖片 (照 enum(Sheet) 的順序)"
      }), _dec18 = property({
        type: SpriteFrame,
        tooltip: "(亮)標題圖片 (照 enum(Sheet) 的順序)"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Discount, _Component);

        function Discount() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_eventWebView", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_discountViewNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_backPageLayout", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_namePageLayout", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_discountSprite", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_discountTitleSprite", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_loadingMaskNode", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_baseViewNode", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_signInHintAnim", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_backPageBtnPrefabNew", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_backPageBtnPrefabNew_TADA", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_logoNode", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_otherLogoNode", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tadaCasinoLogoNode", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_bigFavorHint", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_redPointSpriteFrame", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_titleSprite_Off", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_titleSprite_On", _descriptor18, _assertThisInitialized(_this));

          _this.m_isInitEnd = false;
          _this.m_bottomBar = null;
          _this.m_currentTouchName = null;
          _this.m_isLandscape = false;
          _this.m_isSignInChecked = false;
          _this.m_isRecommendFinished = false;
          _this.m_localeSpriteAtlas = null;
          _this.m_recommend = null;
          _this.m_signIn = null;
          _this.m_favor = null;
          _this.m_bigWin = null;
          _this.m_tiggerRank = null;
          _this.m_loadingTime = TIME_OUT;
          _this.m_isCountDown = false;
          _this.m_defaultPageName = null;
          _this.m_pageBtnArray = new Array();
          _this.m_viewArray = new Array();
          _this.m_reqReplayInfo = null;
          _this.m_reqReplay = null;
          _this.m_isAddFavorByBig = false;
          _this.m_isBlockByApiId = false;
          _this.m_isFirstShoFavor = true;
          _this.m_showList = null;
          _this.m_isOpenWebView = false;
          _this.m_recommendCb = null;
          _this.m_newRecommendCb = null;
          _this.m_recommendCloseCb = null;
          _this.m_favorInfoCbs = Array();
          _this.m_onRotationCbs = {};
          _this.m_showCbs = {};
          _this.m_isLoadBtn = false;
          return _this;
        }

        var _proto = Discount.prototype;
        /**
         * 建議遊戲功能開啟的CB
         */

        _proto.SetRecommendCb = function SetRecommendCb(v) {
          this.m_recommendCb = v;
        };

        _proto.SetRecommendCloseCb = function SetRecommendCloseCb(v) {
          this.m_recommendCloseCb = v;
        };

        _proto.SetFavorInfoCb = function SetFavorInfoCb(v) {
          this.m_favorInfoCbs.push(v);
        };

        _proto.onLoad = function onLoad() {
          try {
            var _key2 = Define.AID + ":" + RecordKey;

            this.m_showList = LocalStorageManager.GetObject(_key2);

            for (var i = 0; i < this.m_showList.length; i++) {
              var gameId = Number(Define.NOW_GAME_ID);

              if (gameId === this.m_showList[i]) {
                this.m_isFirstShoFavor = false;
                break;
              }
            }
          } catch (error) {}
        };

        _proto.Process = function Process(dt) {
          if (this.m_signIn) {
            this.m_signIn.Process(dt);
          }

          if (this.m_bigWin) {
            this.m_bigWin.Process(dt);
          }

          if (this.m_isCountDown) {
            this.m_loadingTime -= dt * 1000;

            if (this.m_loadingTime <= 0) {
              if (this.m_signIn) {
                this.m_signIn.TimeOutHandle();
              }

              if (this.m_favor) {
                this.m_favor.TimeOutHandle();
              }

              this.HideMask();
            }
          }
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          this.m_isLandscape = isLandscape; // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {

          if (this.m_isLandscape) {
            this.node.getComponent(Animation).play("Clip_Common_TagFrame_Landscape");
          } else {
            this.node.getComponent(Animation).play("Clip_Common_TagFrame_Portrait");
          } // }


          if (this.m_recommend) {
            this.m_recommend.OnRotation(this.m_isLandscape);
          }

          if (this.m_favor) {
            this.m_favor.OnRotation(this.m_isLandscape);
          }

          if (this.m_signIn) {
            this.m_signIn.OnRotation(this.m_isLandscape);
          }

          if (this.m_bigWin) {
            this.m_bigWin.OnRotation(this.m_isLandscape);
          }

          if (this.m_tiggerRank) {
            this.m_tiggerRank.OnRotation(this.m_isLandscape);
          }

          this.EventWebViewLandScape();

          for (var _key3 in this.m_onRotationCbs) {
            if (Object.prototype.hasOwnProperty.call(this.m_onRotationCbs, _key3)) {
              var element = this.m_onRotationCbs[_key3];
              element && element(isLandscape);
            }
          }
        } //提前設定
        ;

        _proto.SetManager = function SetManager(extraManager) {
          this.m_bottomBar = extraManager;
        };

        _proto.Init = function Init(extraManager, vipSpriteFrames, appVipSpriteFrames, stateReqFunc, signInReqFunc, reqReplay) {
          var _this2 = this;

          this.m_bottomBar = extraManager;
          var paramApiId = Number(Tools.GetLinkParameterByName("apiId"));

          for (var i = 0; i < BlockApiId.length; i++) {
            if (Number(Define.API_ID) === BlockApiId[i] || paramApiId === BlockApiId[i]) {
              this.m_isBlockByApiId = true;
              break;
            }
          }

          if (this.m_isBlockByApiId) {
            return;
          }

          this.SetLogoIcon(); // LifeSocket.GetInstance().SetRecommendCb( ( gameIds: number[], tags: number[][], mall: number[], dau: number[] ) =>

          this.SetRecommendCb(function (gameIds, tags, mall, dau, top) {
            if (top === void 0) {
              top = null;
            }

            log("SetRecommendCb CheckSwitchOff:", Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.Promotion));

            if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.Promotion)) {
              return;
            }

            var path = Tools.GetFilePath(RecommendPrefab); // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {
            //     path = Tools.GetFilePath( RecommendPrefab_v2 );
            // }

            Define.CommonBundle.load(path, Prefab, function (err, prefab) {
              if (err) {
                log("err:", err);
                return;
              }

              log("SetRecommendCb path:", path);
              var node = instantiate(prefab);
              _this2.m_recommend = node.getComponent(Recommend);
              node.active = false;

              _this2.m_baseViewNode.addChild(node);

              _this2.m_recommend.SetContentPadding();

              _this2.m_recommend.InitRecommendGameIcon(_this2, _this2.m_isLandscape, gameIds, tags, mall, dau, function () {
                if (_this2.m_localeSpriteAtlas) {
                  _this2.m_recommend.SetTxt(_this2.m_localeSpriteAtlas);
                }

                _this2.AddPageBtn(_this2.m_recommend.node, PageName.Recommand, Define.StringKey.RECOMMEND_TITLE);
              }, top);

              _this2.m_bottomBar.sendTestLog(3003);
            });
          });
          LifeSocket.GetInstance().SetRecommendCloseCb(function () {
            _this2.RemoveBtn(PageName.Recommand);
          });
          this.SetRecommendCloseCb(function () {
            _this2.RemoveBtn(PageName.Recommand);
          });
          this.ReqPromotionInfo();

          var cb = function cb(info) {
            if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.Promotion)) {
              return;
            }

            var path = Tools.GetFilePath(FavorPrefab); // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {
            //     path = Tools.GetFilePath( FavorPrefab_v2 );
            // }

            Define.CommonBundle.load(path, Prefab, function (err, prefab) {
              if (err) {
                return;
              }

              if (info && info.Enabled) {
                if (_this2.m_favor === null) {
                  var node = instantiate(prefab);
                  _this2.m_favor = node.getComponent(Favor);

                  _this2.m_baseViewNode.addChild(node);
                }

                _this2.m_favor.node.active = false;

                _this2.m_favor.FavorInit(_this2, _this2.m_isLandscape, info, _this2.m_isAddFavorByBig, _this2.m_bottomBar, function () {
                  if (_this2.m_localeSpriteAtlas) {
                    _this2.m_favor.SetTxt(_this2.m_localeSpriteAtlas);
                  }

                  _this2.AddPageBtn(_this2.m_favor.node, PageName.Favor, Define.StringKey.FAVOR_TITLE);

                  if (info.Expired !== null) {
                    for (var _i = 0; _i < info.Expired.length; _i++) {
                      MsgBox.getInstance().ShowMessageBoxFormat(Define.StringKey.FAVOR_AUTO_REMOVE_HINT, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, [LocaleStringManager.GetInstance().GetGameName(info.Expired[_i])]);
                    }
                  }

                  if (_this2.m_isAddFavorByBig && _this2.m_bigFavorHint) {
                    if (info.Enabled && info.Favorites) {
                      var isFind = false;

                      for (var _i2 = 0; _i2 < info.Favorites.length; _i2++) {
                        if (info.Favorites[_i2] === Number(Define.NOW_GAME_ID)) {
                          isFind = true;
                          break;
                        }
                      }

                      if (isFind) {
                        var _cb = function _cb() {
                          _this2.m_isAddFavorByBig = false;
                          _this2.m_bigFavorHint.node.active = true;

                          _this2.m_bigFavorHint.SetIcon(Tools.Icons[Number(Define.NOW_GAME_ID)], Number(Define.NOW_GAME_ID));

                          _this2.m_bottomBar.SetFavorBtnVisible(false, BigFavorUser.BigWin);
                        };

                        var iconSpriteFrame = Tools.Icons[Number(Define.NOW_GAME_ID)];

                        if (!iconSpriteFrame) {
                          Tools.LoadIcon(LocaleStringManager.CurrLang, Number(Define.NOW_GAME_ID), _cb);
                        } else {
                          _cb();
                        }
                      }
                    }

                    _this2.m_isAddFavorByBig = false;
                  }
                });

                _this2.m_bottomBar.SetFavorBtnVisible(info.BigWined, BigFavorUser.BigWin);
              } else {
                _this2.m_bottomBar.SetFavorBtnVisible(false, BigFavorUser.BigWin);

                _this2.RemoveBtn(PageName.Favor);

                if (_this2.m_recommend) {
                  _this2.m_recommend.UpdateFavorState(null, true);
                }
              }

              _this2.m_bottomBar.sendTestLog(3004);
            });
          };

          LifeSocket.GetInstance().SetFavorInfoCb(cb);
          this.SetFavorInfoCb(cb);
          this.ReqFavoriteInfo();

          if (stateReqFunc && signInReqFunc) {
            var _path = Tools.GetFilePath(SignInPrefab); // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {
            //     path = Tools.GetFilePath( SignInPrefab_v2 );
            // }


            Define.CommonBundle.load(_path, Prefab, function (err, prefab) {
              if (err) {
                return;
              }

              var node = instantiate(prefab);
              _this2.m_signIn = node.getComponent(SignIn);
              node.active = false;

              _this2.m_baseViewNode.addChild(node);

              _this2.m_signIn.Init(_this2.m_isLandscape, extraManager, _this2, vipSpriteFrames, appVipSpriteFrames, stateReqFunc, signInReqFunc, function () {
                if (_this2.m_localeSpriteAtlas) {
                  _this2.m_signIn.SetTxt(_this2.m_localeSpriteAtlas);
                }

                _this2.AddPageBtn(_this2.m_signIn.node, PageName.SignIn, Define.StringKey.SIGN_IN_TITLE);
              }, function () {
                _this2.RemoveBtn(PageName.SignIn);
              });

              _this2.m_bottomBar.SetTrialEndCb(function () {
                _this2.m_signIn.ReqSignInState();
              });

              _this2.m_bottomBar.sendTestLog(3005);
            });
          } // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     if ( this.m_bottomBar.FeaturesView )
          //     {
          //         this.AddPageBtn( null, PageName.Features, Define.StringKey.FEATURES_TITLE );
          //     }
          // }
          // 大獎重播 --------------------------------------------------------------------------------------


          log("reqReplay reqReplay:", reqReplay);

          if (reqReplay) {
            this.m_reqReplayInfo = reqReplay.info;
            this.m_reqReplay = reqReplay.replay;
            reqReplay.check();
          }

          log("reqReplay this.m_reqReplayInfo:", this.m_reqReplayInfo); // 虎榜 --------------------------------------------------------------------------------------

          var path = Tools.GetFilePath(TiggerRankPrefab); // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {
          //     path = Tools.GetFilePath( TiggerRankPrefab_v2 );
          // }

          log("TiggerRankPrefab path:", path);
          Define.CommonBundle.load(path, Prefab, function (err, prefab) {
            if (err) {
              return;
            }

            var node = instantiate(prefab);
            _this2.m_tiggerRank = node.getComponent(TiggerRank);

            if (_this2.m_tiggerRank) {
              node.active = false;

              _this2.m_baseViewNode.addChild(node);

              _this2.m_tiggerRank.Init(_this2.m_isLandscape, function () {
                if (_this2.m_localeSpriteAtlas) {
                  _this2.m_tiggerRank.SetTxt();
                }

                _this2.AddPageBtn(_this2.m_tiggerRank.node, PageName.TigerRank, Define.StringKey.TIGGER_RANK_TITLE);

                var key = Define.AID + ":" + Define.NOW_GAME_ID + ":FeatureTimes";
                var value = LocalStorageManager.GetInt(key);
                var maxValue = Define.FEATURE_TIMES >= 0 ? Define.FEATURE_TIMES : 1;

                if (value && value > maxValue) {
                  _this2.m_defaultPageName = PageName.TigerRank;
                }
              }, function () {
                _this2.RemoveBtn(PageName.TigerRank);
              });

              _this2.m_tiggerRank.OnRotation(_this2.m_isLandscape);
            } else {
              error("this.m_tiggerRank is null");
            }

            _this2.m_bottomBar.sendTestLog(3006);
          });
          this.m_bottomBar.SetTrialEndCb(function () {
            _this2.SortBtn();
          });
          log("Define.AddEventWebview");

          Define.AddEventWebview = function () {
            // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     this.m_eventWebView.url = EnvironmentConfig.ACTION_URL + `?game=${Define.NOW_GAME_ID}&token=${Define.TOKEN}`;
            //     this.EventWebViewLandScape();
            //     this.AddPageBtn( this.m_eventWebView.node, PageName.EventWebview, Define.StringKey.EVENT_TITLE );
            // } else
            // {
            _this2.AddPageBtn(null, PageName.EventWebview, Define.StringKey.EVENT_TITLE); // }


            _this2.m_bottomBar.sendTestLog(3007);
          };

          Define.RemoveEventWebview = function () {
            _this2.RemoveBtn(PageName.EventWebview);
          };

          log("Discount Init DONE");
        };

        _proto.SetLogoIcon = function SetLogoIcon() {
          Tools.LoadIcon(LocaleStringManager.CurrLang, Number(Define.NOW_GAME_ID), null);

          if (this.m_logoNode) {
            if (Tools.Line != Define.LineSetting.americas && Tools.Line != Define.LineSetting.americas_str) {
              var spriteFrame = Tools.UsingLogoSpriteFrame();

              if (spriteFrame) {
                if (Tools.OtherLogo && this.m_otherLogoNode) {
                  this.m_otherLogoNode.active = true;
                  this.m_logoNode.active = false;
                  this.m_otherLogoNode.getComponent(Sprite).spriteFrame = spriteFrame;
                } else {
                  this.m_logoNode.active = true; // this.m_logoNode.getComponent( cc.Sprite ).spriteFrame = spriteFrame;
                }
              } else {
                this.m_logoNode.active = false;
              }
            } else {
              //TaDa
              if (Tools.IsTadaCasino && this.m_tadaCasinoLogoNode) {
                this.m_logoNode.active = false;
                this.m_tadaCasinoLogoNode.active = true;
              }
            }
          }
        };

        _proto.EventWebViewLandScape = function EventWebViewLandScape() {
          if (this.m_isLandscape) {
            // this.m_eventWebView.node.setContentSize( 841, 422 );
            this.m_eventWebView.node.getComponent(UITransform).setContentSize(841, 422);
          } else {
            // this.m_eventWebView.node.setContentSize( 521, 744 );
            this.m_eventWebView.node.getComponent(UITransform).setContentSize(521, 744);
          }
        };

        _proto.BigWinReplayInit = function BigWinReplayInit() {
          var _this3 = this;

          var path = Tools.GetFilePath(BigWinReplayPrefab);
          Define.CommonBundle.load(path, Prefab, function (err, prefab) {
            if (err) {
              return;
            }

            var node = instantiate(prefab);

            _this3.m_baseViewNode.addChild(node);

            _this3.m_bigWin = node.getComponent(BigWinReplay);
            _this3.m_bigWin.node.active = false;

            _this3.m_bigWin.Init(_this3, _this3.m_isLandscape, _this3.m_bottomBar, _this3.m_reqReplayInfo, _this3.m_reqReplay, function () {
              if (_this3.m_localeSpriteAtlas) {
                _this3.m_bigWin.SetTxt(_this3.m_localeSpriteAtlas);
              }

              _this3.AddPageBtn(_this3.m_bigWin.node, PageName.bigWinReplay, Define.StringKey.BIG_WIN_REPLAY_TITLE);
            });

            _this3.m_bottomBar.sendTestLog(3008);
          });
        } // AddFeaturesPageBtn()
        // {
        //     this.AddPageBtn( null, PageName.Features, Define.StringKey.FEATURES_TITLE );
        // }
        ;

        _proto.SetTxt = function SetTxt(spriteAtlas) {
          // this.m_localeSpriteAtlas = spriteAtlas;
          this.m_localeSpriteAtlas = !this.m_localeSpriteAtlas ? LocaleStringManager.GetInstance().GetCommonAtlas() : this.m_localeSpriteAtlas; // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {

          if (LocaleStringManager.CurrLang != Define.Lang.EN) {
            // this.m_discountSprite.spriteFrame = spriteAtlas.getSpriteFrame( LocaleImgName.DiscountBtn_Tada );
            this.m_discountTitleSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName.DiscountTitle_Tada);
            this.SetTitleSprite();
          } // }
          // else
          // {
          //     if ( LocaleStringManager.CurrLang != Define.Lang.CN )
          //     {
          //         let lang = "_" + LocaleStringManager.CurrLang;
          //         this.m_discountSprite.spriteFrame = spriteAtlas.getSpriteFrame( LocaleImgName.DiscountBtn + lang );
          //         this.m_discountTitleSprite.spriteFrame = spriteAtlas.getSpriteFrame( LocaleImgName.DiscountTitle + lang );
          //     }
          // }


          if (this.m_signIn) {
            this.m_signIn.SetTxt(this.m_localeSpriteAtlas);
          }

          if (this.m_recommend) {
            this.m_recommend.SetTxt(this.m_localeSpriteAtlas);
          }

          if (this.m_tiggerRank) {
            this.m_tiggerRank.SetTxt();
          }
        };

        _proto.SetTitleSprite = function SetTitleSprite() {
          for (var i = 0; i < PageTitleSprite.length; i++) {
            this.m_titleSprite_Off[i] = this.m_localeSpriteAtlas.getSpriteFrame(PageTitleSprite[i]);
            this.m_titleSprite_On[i] = this.m_localeSpriteAtlas.getSpriteFrame(PageTitleSprite[i] + "_On");
          }
        };

        _proto.CloseIcon = function CloseIcon() {
          this.CloseDiscountBtn();
        };

        _proto.ShowDiscountView = function ShowDiscountView(pageName) {
          if (pageName === void 0) {
            pageName = null;
          }

          this.m_discountViewNode.active = true;
          log("SetPage A ShowDiscountView");
          this.SetPage(pageName);
          log("SetPage A-1 m_showCbs:", this.m_defaultPageName);
          this.m_showCbs[this.m_defaultPageName] && this.m_showCbs[this.m_defaultPageName](this.m_defaultPageName);
          log("SetPage A-2 this.m_signIn:", this.m_signIn);

          if (this.m_signIn) {
            log("SetPage A-3 ShowMask");
            this.ShowMask();
            this.m_signIn.ReqSignInState();
          }

          this.OnRotation(this.m_isLandscape);
        };

        _proto.CloseDiscountView = function CloseDiscountView() {
          this.m_discountViewNode.active = false;
        };

        _proto.IsDiscountViewOpen = function IsDiscountViewOpen() {
          return this.m_discountViewNode.active;
        };

        _proto.ShowDiscountBtn = function ShowDiscountBtn() {
          if (this.m_bottomBar && this.m_bottomBar.IsInTrial || this.m_isBlockByApiId) {
            return;
          }

          this.m_bottomBar.SetDiscountBtnState(true);
        };

        _proto.CloseDiscountBtn = function CloseDiscountBtn() {
          if (this.m_bottomBar) {
            this.m_bottomBar.SetDiscountBtnState(false);
          }

          this.m_discountViewNode.active = false;
        };

        _proto.ShowFavorHint = function ShowFavorHint() {
          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.NoRedSpot)) {
            return;
          }

          if (this.node.active && this.m_defaultPageName === PageName.Favor) ;else {
            for (var i = 0; i < this.m_pageBtnArray.length; i++) {
              var tempPageBtn = this.m_pageBtnArray[i];

              if (tempPageBtn.PageName === PageName.Favor) {
                if (tempPageBtn.RedPointNode) {
                  tempPageBtn.RedPointNode.active = true;

                  if (this.m_bottomBar.DiscountRedPointNode) {
                    this.m_bottomBar.DiscountRedPointNode.active = true;
                  }
                }

                break;
              }
            }
          }
        };

        _proto.ShowSignInHint = function ShowSignInHint(isShow) {
          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.NoRedSpot)) {
            return;
          }

          for (var i = 0; i < this.m_pageBtnArray.length; i++) {
            var tempPageBtn = this.m_pageBtnArray[i];

            if (tempPageBtn.PageName === PageName.SignIn) {
              if (tempPageBtn.RedPointNode) {
                tempPageBtn.RedPointNode.active = isShow;

                if (this.m_bottomBar.DiscountFreeGift) {
                  this.m_bottomBar.DiscountFreeGift.active = isShow;
                }
              }

              break;
            }
          }
        };

        _proto.ShowRedSpotHint = function ShowRedSpotHint(pageName) {
          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.NoRedSpot)) {
            return;
          }

          for (var i = 0; i < this.m_pageBtnArray.length; i++) {
            var tempPageBtn = this.m_pageBtnArray[i];

            if (tempPageBtn.PageName === pageName) {
              if (tempPageBtn.RedPointNode) {
                tempPageBtn.RedPointNode.active = true;

                if (this.m_bottomBar.DiscountRedPointNode) {
                  this.m_bottomBar.DiscountRedPointNode.active = true;
                }
              }

              break;
            }
          }
        };

        _proto.ShowMask = function ShowMask() {
          this.m_loadingTime = TIME_OUT;
          this.m_isCountDown = true;

          if (this.m_loadingMaskNode) {
            this.m_loadingMaskNode.active = true;
          } else {
            error(" this.m_loadingMaskNode is null");
          }
        };

        _proto.HideMask = function HideMask() {
          this.m_isCountDown = false;

          if (this.m_loadingMaskNode) {
            this.m_loadingMaskNode.active = false;
          } else {
            error(" this.m_loadingMaskNode is null");
          }
        };

        _proto.OnRecvSignInState = function OnRecvSignInState(ack) {
          if (this.m_signIn) {
            this.m_signIn.OnRecvSignInState(ack);
          }
        };

        _proto.OnRecvSignIn = function OnRecvSignIn(ack) {
          if (this.m_signIn) {
            this.m_signIn.OnRecvSignIn(ack);
          }
        };

        _proto.OnRecvBigWin = function OnRecvBigWin(ack) {
          if (this.m_bigWin) {
            this.m_bigWin.OnRecvBigWin(ack);
          }
        };

        _proto.SetDefaultShowSignIn = function SetDefaultShowSignIn() {
          for (var i = 0; i < this.m_pageBtnArray.length; i++) {
            var tempPageBtn = this.m_pageBtnArray[i]; // let spriteNode: Node = tempPageBtn.SpriteNode;
            // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     if ( tempPageBtn.PageName === PageName.SignIn )
            //     {
            //         // spriteNode.opacity = 255;
            //         // tempPageBtn.ViewNode.active = true;
            //         tempPageBtn.BtnState.interactable = false;
            //     }
            //     else
            //     {
            //         // spriteNode.opacity = 0;
            //         // tempPageBtn.ViewNode.active = false;
            //         tempPageBtn.BtnState.interactable = true;
            //     }
            // }
          }
        };

        _proto.AddFavor = function AddFavor(gameId, eventNo) {
          if (this.m_favor) {
            this.m_favor.AddFavor(gameId, eventNo);
          }

          if (eventNo === Define.BTN_CLICK_EVENT.BIG_FAVOR_ADD) {
            this.m_isAddFavorByBig = true;
          }
        };

        _proto.RemoveFavor = function RemoveFavor(gameId, eventNo) {
          if (this.m_favor) {
            this.m_favor.RemoveFavor(gameId, eventNo);
          }
        };

        _proto.UpdateFavorState = function UpdateFavorState(list) {
          if (this.m_recommend) {
            this.m_recommend.UpdateFavorState(list);
          }
        };

        _proto.AddPageBtn = function AddPageBtn(view, pageName, nameStringKey, onRotationCb, showCb) {
          var _this4 = this;

          log("AddPageBtn pageName:", pageName);

          if (!this.m_isLoadBtn) {
            this.m_isLoadBtn = true;
            this.m_bottomBar.LoadDiscountBtn();
          }

          this.SetTxt();
          var pageBtn = null;

          for (var i = 0; i < this.m_pageBtnArray.length; i++) {
            if (this.m_pageBtnArray[i].PageName === pageName) {
              pageBtn = this.m_pageBtnArray[i];
            }
          }

          if (pageBtn === null) {
            pageBtn = new PageBtn();
            this.m_pageBtnArray.push(pageBtn); // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     pageBtn.ViewNode = view;
            // } 
            // else
            // {

            if (pageName != PageName.EventWebview) {
              pageBtn.ViewNode = view;
            } // }


            pageBtn.PageName = pageName;

            if (view && !view.parent) {
              this.m_baseViewNode.addChild(view);
            }

            this.m_onRotationCbs[pageName] = onRotationCb;
            onRotationCb && onRotationCb(this.m_isLandscape);
            log("AddPageBtn this.m_showCbs:", this.m_showCbs);
            this.m_showCbs[pageName] = showCb; // pageBtn.BtnNode = instantiate( this.m_backPageBtnPrefab );
            // pageBtn.BtnNode.setContentSize( size( 130, 64 ) );
            // if ( this.m_backPageBtnPrefabNew )
            // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     pageBtn.BtnNode = cc.instantiate( this.m_backPageBtnPrefabNew );
            //     pageBtn.BtnNode.setContentSize( cc.size( 135, 46 ) );
            //     pageBtn.BtnState = pageBtn.BtnNode.getComponent( cc.Button );
            //     //多一層，避免因為文字長度影響排版
            //     pageBtn.LabelNode = new cc.Node();
            //     // pageBtn.LabelNode.setContentSize( cc.size( 130, 64 ) );
            //     pageBtn.LabelNode.setContentSize( cc.size( 135, 46 ) );
            //     let tempNode = new cc.Node();
            //     tempNode.name = "LabelString";
            //     tempNode.color = cc.color( 208, 199, 173 );
            //     pageBtn.LabelNode.addChild( tempNode );
            //     tempNode.setPosition( 0, -10 );
            //     let label: cc.Label = tempNode.addComponent( cc.Label );
            //     label.fontSize = 26;
            //     label.string = LocaleStringManager.GetInstance().GetString( nameStringKey );
            //     if ( !label.font )
            //     {
            //         label.font = Define.DefaultFont;
            //     }
            // }
            // else
            // {
            // America line

            pageBtn.BtnNode = instantiate(this.m_backPageBtnPrefabNew_TADA); // pageBtn.BtnNode.setContentSize( cc.size( 152, 85 ) );

            pageBtn.BtnState = pageBtn.BtnNode.getComponent(Button); //多一層，避免因為文字長度影響排版

            pageBtn.LabelNode = pageBtn.BtnNode.getChildByName("TagName");
            pageBtn.LabelNode.getComponent(Sprite).spriteFrame = this.m_titleSprite_Off[Sheet[pageName]];
            pageBtn.CheckBg = pageBtn.BtnNode.getChildByName("CheckBg");
            pageBtn.CheckBg.active = false; // }

            pageBtn.BtnNode.on(Node.EventType.TOUCH_START, function (event) {
              event.propagationImmediateStopped = true;
              event.propagationStopped = true; // event.stopPropagationImmediate();
              // event.stopPropagation();

              if (_this4.m_currentTouchName == null) {
                _this4.m_currentTouchName = event.target.name;
              } else {
                if (event.target && event.target.active == false) {
                  _this4.m_currentTouchName = event.target.name;
                }
              }
            });
            pageBtn.BtnNode.on(Node.EventType.TOUCH_CANCEL, function (event) {
              if (_this4.m_currentTouchName == event.target.name) {
                _this4.m_currentTouchName = null;
              }
            });
            pageBtn.BtnNode.on(Node.EventType.TOUCH_END, function (event) {
              if (_this4.m_currentTouchName != event.target.name) {
                return;
              }

              _this4.m_currentTouchName = null;
              log("SetPage A pageBtn.BtnNode.on");

              _this4.SetPage(pageName);

              _this4.m_bottomBar.SendClickEvent(Define.BTN_CLICK_EVENT.BOOKMARK_CLICK, pageName);
            }); //先產生sprite，不塞圖，排序後才能決定圖樣
            // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     if ( pageName == PageName.Features )
            //     {
            //         pageBtn.BtnState.interactable = true;
            //     }
            //     else
            //     {
            //         pageBtn.BtnState.interactable = false;
            //     }
            //     //紅點
            //     if ( this.m_redPointSpriteFrame )
            //     {
            //         pageBtn.RedPointNode = new cc.Node();
            //         pageBtn.RedPointNode.position = cc.v3( 53, 19 );
            //         pageBtn.LabelNode.addChild( pageBtn.RedPointNode );
            //         let redPointSprite: cc.Sprite = pageBtn.RedPointNode.addComponent( cc.Sprite );
            //         redPointSprite.spriteFrame = this.m_redPointSpriteFrame;
            //         pageBtn.RedPointNode.active = false;
            //     }
            // } 
            // else
            // {

            if (pageBtn.BtnNode.getChildByName("TagName").getChildByName("RedSpot")) {
              pageBtn.RedPointNode = pageBtn.BtnNode.getChildByName("TagName").getChildByName("RedSpot");
              pageBtn.RedPointNode.active = false;
            }

            if (pageName === PageName.Recommand || pageName === PageName.EventWebview) {
              this.ShowRedSpotHint(pageName);
            } // }

          }

          this.SortBtn();
        };

        _proto.RemoveBtn = function RemoveBtn(pageName) {
          log("RemoveBtn pageName:", pageName);

          for (var i = 0; i < this.m_pageBtnArray.length; i++) {
            if (this.m_pageBtnArray[i].PageName === pageName) {
              var pageBtn = this.m_pageBtnArray.splice(i, 1)[0];

              if (pageBtn.BtnNode) {
                pageBtn.BtnNode.removeFromParent();
              } // pageBtn.SpriteNode.removeFromParent();


              if (pageBtn.LabelNode) {
                pageBtn.LabelNode.removeFromParent();
              }

              if (pageBtn.ViewNode) {
                pageBtn.ViewNode.active = false;
              }

              this.SortBtn();

              if (this.m_discountViewNode) {
                // this.m_discountViewNode.active = true;
                log("SetPage A m_discountViewNode");
                this.SetPage();
              }

              break;
            }
          }
        };

        _proto.SortBtn = function SortBtn() {
          var tempList = new Array();

          for (var i = 0; i < Object.keys(Order).length / 2; i++) {
            tempList.push(null);
          }

          for (var _i3 = 0; _i3 < this.m_pageBtnArray.length; _i3++) {
            tempList[Order[this.m_pageBtnArray[_i3].PageName]] = this.m_pageBtnArray[_i3];
          } // reset


          this.m_pageBtnArray = new Array();

          for (var _i4 = 0; _i4 < tempList.length; _i4++) {
            if (tempList[_i4]) {
              this.m_pageBtnArray.push(tempList[_i4]);
            }
          } //要塞fasle，避免被清除


          if (this.m_backPageLayout) {
            this.m_backPageLayout.node.removeAllChildren();
          }

          if (this.m_namePageLayout) {
            this.m_namePageLayout.node.removeAllChildren();
          } // this.m_upPageLayout.node.removeAllChildren( false );


          for (var _i5 = 0; _i5 < this.m_pageBtnArray.length; _i5++) {
            var tempPageBtn = this.m_pageBtnArray[_i5];

            if (!tempPageBtn.BtnNode.parent) {
              if (this.m_backPageLayout) {
                this.m_backPageLayout.node.addChild(tempPageBtn.BtnNode);
              }
            } // let spriteNode: Node = tempPageBtn.SpriteNode;
            // if ( !spriteNode.parent )
            // {
            //     this.m_upPageLayout.node.addChild( spriteNode );
            // }
            // let sprite: Sprite = spriteNode.getComponent( Sprite )
            // if ( !sprite )
            // {
            //     sprite = spriteNode.addComponent( Sprite )
            // }
            // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     if ( tempPageBtn.PageName != PageName.Features )
            //     {
            //         if ( this.m_defaultPageName ) 
            //         {
            //             if ( tempPageBtn.PageName === this.m_defaultPageName )
            //             {
            //                 tempPageBtn.ViewNode.active = true;
            //                 // spriteNode.opacity = 255;
            //                 tempPageBtn.BtnState.interactable = false;
            //             }
            //             else
            //             {
            //                 tempPageBtn.ViewNode.active = false;
            //                 // spriteNode.opacity = 0;
            //                 tempPageBtn.BtnState.interactable = true;
            //             }
            //         }
            //         else
            //         {
            //             if ( i === 0 )
            //             {
            //                 tempPageBtn.ViewNode.active = true;
            //                 // spriteNode.opacity = 255;
            //                 tempPageBtn.BtnState.interactable = false;
            //             }
            //             else
            //             {
            //                 tempPageBtn.ViewNode.active = false;
            //                 // spriteNode.opacity = 0;
            //                 tempPageBtn.BtnState.interactable = true;
            //             }
            //         }
            //     }
            // } 
            // else
            // {


            if (this.m_defaultPageName) {
              if (tempPageBtn.PageName === this.m_defaultPageName) {
                if (tempPageBtn.ViewNode) {
                  tempPageBtn.ViewNode.active = true;
                }

                if (tempPageBtn.PageName == PageName.EventWebview) {
                  log("SetPage 2 pageName:", tempPageBtn.PageName); // this.openEventWebView();
                }
              } else {
                if (tempPageBtn.ViewNode) {
                  tempPageBtn.ViewNode.active = false;
                }
              }
            } else {
              if (_i5 === 0) {
                if (tempPageBtn.ViewNode) {
                  tempPageBtn.ViewNode.active = true;
                }

                if (tempPageBtn.PageName == PageName.EventWebview) {
                  log("SetPage 3 pageName:", tempPageBtn.PageName); // this.openEventWebView();
                }
              } else {
                if (tempPageBtn.ViewNode) {
                  tempPageBtn.ViewNode.active = false;
                }
              }
            } // }
            // if ( i === 0 || i === Page_Limit - 1 )
            // {
            //     sprite.spriteFrame = this.m_upPageSideSpriteFrame;
            //     if ( i === 0 )
            //     {
            //         spriteNode.scaleX = 1;
            //     }
            //     else
            //     {
            //         spriteNode.scaleX = -1;
            //     }
            // }
            // else
            // {
            //     sprite.spriteFrame = this.m_upPageCenterSpriteFrame;
            // }


            if (this.m_namePageLayout) {
              this.m_namePageLayout.node.addChild(tempPageBtn.LabelNode);
            }
          }

          if (this.m_pageBtnArray.length > 0 && !Define.IS_DEMO) {
            this.ShowDiscountBtn();
          } else {
            this.CloseDiscountBtn();
          }
        };

        _proto.OnFeatureClose = function OnFeatureClose() {
          this.m_eventWebView.node.active = this.m_isOpenWebView;
        };

        _proto.openEventWebView = function openEventWebView() {
          // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {
          if (this.m_bottomBar) {
            var bottomBar = this.m_bottomBar.node.getComponent(BottombarManager);
            var baseUrl = EnvironmentConfig.PROMOTE_ACTION_URL;
            var url = baseUrl + ("&game=" + Define.NOW_GAME_ID + "&token=" + Define.TOKEN + "&ratio=" + walletManger.Ratio);
            log(" openEventWebView url:", url);
            bottomBar.OpenCommonWebPage(url, "", true);
          } // }

        };

        _proto.SetPage = function SetPage(pageName) {
          if (pageName === void 0) {
            pageName = null;
          } // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str &&
          //     pageName == PageName.Features )
          // {
          //     this.m_bottomBar.ShowFeatures( () =>
          //     {
          //         this.OnFeatureClose();
          //     } );
          //     if ( this.m_eventWebView.node.active )
          //     {
          //         this.m_eventWebView.node.active = false;
          //     }
          //     return;
          // }
          // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     if ( pageName === null )
          //     {
          //         this.m_defaultPageName = this.m_defaultPageName ? this.m_defaultPageName : this.m_pageBtnArray[ 0 ].PageName;
          //     }
          //     else
          //     {
          //         this.m_defaultPageName = pageName;
          //     }
          //     this.m_isOpenWebView = this.m_defaultPageName === PageName.EventWebview;
          // } 
          // else
          // {


          if (pageName === null) {
            // this.m_defaultPageName = this.m_defaultPageName ? this.m_defaultPageName : this.m_pageBtnArray[ 0 ].PageName;
            this.m_defaultPageName = this.m_defaultPageName ? this.m_defaultPageName : this.m_pageBtnArray[this.m_pageBtnArray.length - 1].PageName;
          } else {
            if (pageName != PageName.EventWebview) {
              this.m_defaultPageName = pageName;
            }
          }

          this.m_isOpenWebView = pageName === PageName.EventWebview;

          if (this.m_isOpenWebView) {
            log("SetPage 1 pageName:", pageName);
            this.openEventWebView();

            for (var i = 0; i < this.m_pageBtnArray.length; i++) {
              var tempPageBtn = this.m_pageBtnArray[i];

              if (tempPageBtn.PageName === PageName.EventWebview) {
                if (tempPageBtn.RedPointNode) {
                  tempPageBtn.RedPointNode.active = false;
                }

                break;
              }
            }

            this.CheckDiscountRedPoint();
            return;
          } // }


          log("SetPage 2 this.m_defaultPageName:", this.m_defaultPageName);
          log("SetPage 2 pageName:", pageName);
          log("SetPage 2 this.m_pageBtnArray:", this.m_pageBtnArray);
          var isFind = false;

          for (var _i6 = 0; _i6 < this.m_pageBtnArray.length; _i6++) {
            // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str &&
            //     this.m_pageBtnArray[ i ].PageName == PageName.Features )
            // {
            //     isFind = true;
            //     continue;
            // }
            if (this.m_pageBtnArray[_i6].PageName === this.m_defaultPageName) {
              isFind = true; // this.m_pageBtnArray[ i ].SpriteNode.opacity = 255;
              // this.m_pageBtnArray[ i ].BtnState.interactable = false;
              //  特色頁還沒串

              if (this.m_pageBtnArray[_i6].ViewNode) {
                this.m_pageBtnArray[_i6].ViewNode.active = true;
              }

              this.CheckView(this.m_defaultPageName); // if ( Tools.Line !== Define.LineSetting.americas &&
              //     Tools.Line !== Define.LineSetting.americas_str )
              // {
              //     this.m_pageBtnArray[ i ].BtnState.interactable = false;
              //     this.m_pageBtnArray[ i ].LabelNode.getChildByName( "LabelString" ).color = cc.color( 36, 30, 8 );
              // }
              //  else
              // {
              // this.m_pageBtnArray[ i ].BtnState.node.getChildByName( "CheckBg" ).active = true;

              log("SetPage CheckBg:", this.m_pageBtnArray[_i6].PageName, this.m_pageBtnArray[_i6].CheckBg.active);
              this.m_pageBtnArray[_i6].CheckBg.active = true;
              this.m_pageBtnArray[_i6].CheckBg.getChildByName("TagName_On").getComponent(Sprite).spriteFrame = this.m_titleSprite_On[Sheet[this.m_pageBtnArray[_i6].PageName]]; // 改變文字顏色

              this.m_pageBtnArray[_i6].LabelNode.getComponent(Sprite).spriteFrame = this.m_titleSprite_On[Sheet[this.m_pageBtnArray[_i6].PageName]]; // }

              if (this.m_defaultPageName == PageName.Recommand) ;else if (this.m_defaultPageName == PageName.Favor) {
                this.m_favor.UpdateArrowState();
              }
            } else {
              // this.m_pageBtnArray[ i ].SpriteNode.opacity = 0;
              // this.m_pageBtnArray[ i ].BtnState.interactable = true;
              if (this.m_pageBtnArray[_i6].ViewNode) {
                this.m_pageBtnArray[_i6].ViewNode.active = false;
              } // if ( Tools.Line !== Define.LineSetting.americas &&
              //     Tools.Line !== Define.LineSetting.americas_str )
              // {
              //     this.m_pageBtnArray[ i ].BtnState.interactable = true;
              //     this.m_pageBtnArray[ i ].LabelNode.getChildByName( "LabelString" ).color = cc.color( 208, 199, 173 );
              // }
              // else
              // {


              this.m_pageBtnArray[_i6].CheckBg.active = false; // 改變文字顏色

              this.m_pageBtnArray[_i6].LabelNode.getComponent(Sprite).spriteFrame = this.m_titleSprite_Off[Sheet[this.m_pageBtnArray[_i6].PageName]]; // }
            }
          }

          if (!isFind) {
            var pageBtn = this.m_pageBtnArray[0]; // pageBtn.SpriteNode.opacity = 255;
            // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     pageBtn.BtnState.interactable = false;
            // }
            //  特色頁還沒串

            if (pageBtn.ViewNode) {
              pageBtn.ViewNode.active = true;
            }

            this.m_defaultPageName = pageBtn.PageName;
          }

          if (this.m_defaultPageName === PageName.Favor || this.m_defaultPageName === PageName.Recommand) {
            if (this.m_isFirstShoFavor && this.m_defaultPageName === PageName.Favor) {
              this.m_isFirstShoFavor = false;

              var _key4 = Define.AID + ":" + RecordKey;

              if (!this.m_showList) {
                this.m_showList = new Array();
              }

              this.m_showList.push(Number(Define.NOW_GAME_ID));
              LocalStorageManager.SetString(_key4, JSON.stringify(this.m_showList));
              this.m_favor.AutoShowHint();
            }

            for (var _i7 = 0; _i7 < this.m_pageBtnArray.length; _i7++) {
              var _tempPageBtn = this.m_pageBtnArray[_i7];

              if (_tempPageBtn.PageName === this.m_defaultPageName) {
                if (_tempPageBtn.RedPointNode) {
                  _tempPageBtn.RedPointNode.active = false;
                }

                break;
              }
            }
          }

          this.CheckDiscountRedPoint();
        };

        _proto.CheckDiscountRedPoint = function CheckDiscountRedPoint() {
          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.NoRedSpot)) {
            return;
          }

          if (this.m_bottomBar.DiscountRedPointNode && this.m_bottomBar.DiscountRedPointNode.active) {
            for (var i = 0; i < this.m_pageBtnArray.length; i++) {
              if (this.m_pageBtnArray[i].RedPointNode && this.m_pageBtnArray[i].RedPointNode.active) {
                this.m_bottomBar.DiscountRedPointNode.active = true;
                break;
              } else {
                this.m_bottomBar.DiscountRedPointNode.active = false;
              }
            }
          }
        };

        _proto.CheckView = function CheckView(pageName) {
          if (pageName === PageName.Recommand && this.m_recommend) {
            this.m_recommend.OnRotation(this.m_isLandscape);
          } else if (pageName === PageName.Favor && this.m_favor) {
            this.m_favor.OnRotation(this.m_isLandscape);
          } else if (pageName === PageName.SignIn && this.m_signIn) {
            this.m_signIn.OnRotation(this.m_isLandscape);
          } else if (pageName === PageName.TigerRank && this.m_tiggerRank) {
            this.m_tiggerRank.OnRotation(this.m_isLandscape);
          } else if (this.m_onRotationCbs[pageName]) {
            this.m_onRotationCbs[this.m_defaultPageName](this.m_isLandscape);
          }
        } // 從LifeService拆分出來 ---------------------------------------------------
        // 推薦遊戲
        ;

        _proto.ReqPromotionInfo = function ReqPromotionInfo() {
          var _this5 = this; // New


          var data = new _cjsExports.promotionProto.PromotionRequest();
          data.accountID = Number(Define.APP.GetAID());
          data.apiID = Number(Define.APP.GetApiID());
          data.loginGameID = Number(Define.NOW_GAME_ID);

          var body = _cjsExports.promotionProto.PromotionRequest.encode(data).finish();

          var url = EnvironmentConfig.SERVICE_URL + "promotionservice/OnLoginV3";
          Request(ConnectionManager.HTTP_METHOD.TYPE_POST, url, {}, body, DEFAULT_REQUEST_OPTIONS, true).then(function (res) {
            //  測試用網址
            if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
              res.ok = true;
            }

            log("ReqData res.ok:", res.ok);

            if (res.ok) {
              //  測試用網址
              if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
                var ack = {
                  "cmdType": 2,
                  "content": {
                    "Enabled": true,
                    "Games": [159, 85, 2, 30, 18, 13],
                    "Labels": [[0], [0], [0], [1], [1], [1]],
                    "Mall": [0, 1, 1, 1, 0, 0],
                    "DAU": [21034, 20875, 21589, 21431, 17619, 16825]
                  }
                };

                _this5.OnRecvAck(ack);
              } else {
                _this5.NewOnRecvAck(res.protoData);
              }
            }
          });

          if (!ConnectionManager.getInstance().CheckSetting(Define.PROTOCOL.PROMOTION) && Define.AID != "-1" && Define.API_ID != "0") {
            ConnectionManager.getInstance().AddSetting(Define.PROTOCOL.PROMOTION, ConnectionManager.CONNECT_TYPE.TYPE_HTTP, null, null, EnvironmentConfig.SERVICE_URL + "promotionservice/OnLoginV2?apiId=" + Define.API_ID + "&accountId=" + Define.AID + "&logingameId=" + Define.NOW_GAME_ID);
          } // if ( EnvironmentConfig.ENV_TYPE === Define.EVN.TEST )
          // {
          //     //  測試用 ack
          //     let ack = { "cmdType": 2, "content": { "Enabled": true, "Games": [ 159, 85, 2, 30, 18, 13 ], "Labels": [ [ 0 ], [ 0 ], [ 0 ], [ 1 ], [ 1 ], [ 1 ] ], "Mall": [ 0, 1, 1, 1, 0, 0 ], "DAU": [ 21034, 20875, 21589, 21431, 17619, 16825 ] } }
          //     this.OnRecvAck( ack )
          // } else
          // {
          //     ConnectionManager.getInstance().SendCommand( Define.PROTOCOL.PROMOTION, null, null, null, ( ack ) =>
          //     {
          //         this.OnRecvAck( ack )
          //     } );
          // }

        } // Server回應
        ;

        _proto.NewOnRecvAck = function NewOnRecvAck(data) {
          var bytes = new Uint8Array(data);

          var info = _cjsExports.promotionProto.GamePromotionCommand.decode(bytes); // console.error( 'promotion NewOnRecvAck info', info )


          if (info && info.enabled && this.m_recommendCb) {
            var info_games = [];
            var info_tags = new Array();
            var info_malls = [];
            var info_daus = [];
            var info_tops = [];

            for (var i = 0; i < info.list.length; i++) {
              info_games.push(info.list[i].gameID);
              info_tags.push(info.list[i].labels);
              info_malls.push(info.list[i].mall);
              info_daus.push(info.list[i].dAU);
              info_tops.push(info.list[i].top);
            } // console.error( "promotion NewOnRecvAck data", info_games, info_tags, info_malls, info_daus, info_tops )


            this.m_recommendCb(info_games, info_tags, info_malls, info_daus, info_tops);
          } else if (info && !info.enabled && this.m_recommendCloseCb) {
            this.m_recommendCloseCb();
          }
        };

        _proto.OnRecvAck = function OnRecvAck(ack) {
          if (ack == false) {
            return;
          }

          var info = ack.content;
          if (info && info.Enabled && info.Games && this.m_recommendCb) ;else if (info && !info.Enabled && this.m_recommendCloseCb) {
            this.m_recommendCloseCb();
          }
        } // 收藏遊戲資訊
        ;

        _proto.ReqFavoriteInfo = function ReqFavoriteInfo() {
          var _this6 = this;

          if (!ConnectionManager.getInstance().CheckSetting(Define.PROTOCOL.FAVORITE) && Define.AID != "-1" && Define.API_ID != "0") {
            ConnectionManager.getInstance().AddSetting(Define.PROTOCOL.FAVORITE, ConnectionManager.CONNECT_TYPE.TYPE_HTTP, null, null, EnvironmentConfig.SERVICE_URL + "favoriteservice/OnLogin?apiId=" + Define.API_ID + "&accountId=" + Define.AID + "&logingameId=" + Define.NOW_GAME_ID + "&alterId=" + 0);
          }

          if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
            //  測試用 ack
            var ack = {
              "cmdType": 4,
              "content": {
                "Enabled": true,
                "Favorites": [2, 85, 103, 122, 159],
                "Promotions": null,
                "Expired": null,
                "DAU": [21589, 20716, 20875, 19048, 21034],
                "BigWined": false
              }
            };
            this.OnRecvAckFavorite(ack);
          } else {
            ConnectionManager.getInstance().SendCommand(Define.PROTOCOL.FAVORITE, null, null, null, function (ack) {
              _this6.OnRecvAckFavorite(ack);
            });
          } // if ( EnvironmentConfig.ENV_TYPE === Define.EVN.TEST )
          // {
          //     //  測試用 ack
          //     let ack = { "cmdType": 4, "content": { "Enabled": true, "Favorites": [ 2, 85, 103, 122, 159 ], "Promotions": null, "Expired": null, "DAU": [ 21589, 20716, 20875, 19048, 21034 ], "BigWined": false } }
          //     this.OnRecvAckFavorite( ack )
          // }

        } // Server回應
        ;

        _proto.OnRecvAckFavorite = function OnRecvAckFavorite(ack) {
          if (ack == false) {
            return;
          }

          var info = ack.content;

          if (this.m_favorInfoCbs && info) {
            for (var i = 0; i < this.m_favorInfoCbs.length; i++) {
              this.m_favorInfoCbs[i](info);
            }
          }
        };

        _createClass(Discount, [{
          key: "SignInHintAnim",
          get: function get() {
            return this.m_signInHintAnim;
          }
        }, {
          key: "GameId",
          get: function get() {
            return Number(Define.NOW_GAME_ID);
          }
        }]);

        return Discount;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_eventWebView", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_discountViewNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_backPageLayout", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_namePageLayout", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_discountSprite", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_discountTitleSprite", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_loadingMaskNode", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_baseViewNode", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_signInHintAnim", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_backPageBtnPrefabNew", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_backPageBtnPrefabNew_TADA", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_logoNode", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_otherLogoNode", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_tadaCasinoLogoNode", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_bigFavorHint", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_redPointSpriteFrame", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "m_titleSprite_Off", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "m_titleSprite_On", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LoadPrefabManager.ts', './EvtReceiver.ts', './Tools.ts', './SoundManager.ts', './Define.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, error, instantiate, Animation, AnimationClip, tween, v3, log, ParticleSystem2D, Vec2, TweenSystem, Label, Enum, Node, LoadPrefabManager, EvtReceiver, Tools, SoundManager, Define;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      error = module.error;
      instantiate = module.instantiate;
      Animation = module.Animation;
      AnimationClip = module.AnimationClip;
      tween = module.tween;
      v3 = module.v3;
      log = module.log;
      ParticleSystem2D = module.ParticleSystem2D;
      Vec2 = module.Vec2;
      TweenSystem = module.TweenSystem;
      Label = module.Label;
      Enum = module.Enum;
      Node = module.Node;
    }, function (module) {
      LoadPrefabManager = module.default;
    }, function (module) {
      EvtReceiver = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Define = module.default;
    }],
    execute: function () {
      var _EffectView$WIN_EFFEC;

      cclegacy._RF.push({}, "bc3c97zP8pM2I5NAob2S72W", "EffectView", undefined);
      /**
       * Created by HuiRu on 2018/06/26.
       **/


      var EffectView = exports('default', /*#__PURE__*/function (_Node) {
        _inheritsLoose(EffectView, _Node); //common win effect args
        //common get coin effect resources
        //common get coin effect args
        //for all
        // private m_winEffectFiles: string[] = [ null, null, null, null, null, ];


        function EffectView() {
          var _this;

          _this = _Node.call(this) || this;
          _this.m_awardBoardFile = EffectView.EFFECT_ROOT + "win/awardBoard";
          _this.m_effectList = {};
          _this.m_timeLineList = {};
          _this.m_winEffCbFunc = null;
          _this.m_currentWinEffect = null;
          _this.m_currentWinEffectTimeline = null;
          _this.m_awardBoard = null;
          _this.m_awardBoardTimeline = null;
          _this.m_txtWinValue = null;
          _this.m_durRollMoneyTick = EffectView.MONEY_ROLL_TIME;
          _this.m_moneyRealValue = 0;
          _this.m_moneyRollValue = 0;
          _this.m_bgMaskNode = null;
          _this.m_commonGetCoinCbFunc = null;
          _this.m_commonGetCoinMidCbFunc = null;
          _this.m_commonGetCoinEff = null;
          _this.m_commonGetCoinTline = null;
          _this.m_updateMoneyEff = null;
          _this.m_updateMoneyTline = null;
          _this.m_getCoinParticle = null;
          _this.m_odds = [3, 5, 10, 20, 30];
          _this.m_winEffectFiles = [null, null, EffectView.EFFECT_ROOT + EffectView.FILE_PATH.BIG_WIN, EffectView.EFFECT_ROOT + EffectView.FILE_PATH.MEGA_WIN, EffectView.EFFECT_ROOT + EffectView.FILE_PATH.SUPER_WIN];
          _this.m_coinEffects = [2, 3, 5, 5, 5];
          _this.m_coinTimes = [2, 2, 5, 5, 5];
          _this.m_soundNameByOdds = [];
          _this.m_isAutoCheckFloat = false;
          _this.m_rotateCoins = {};
          _this.m_controller = void 0;
          _this.m_appearPtc = void 0;
          _this.m_coinEffect = void 0;
          _this.m_loadedSound = void 0;
          _this.m_isLandscape = false;
          _this.m_LandscapeRate = 1;
          _this.m_winType = void 0;
          _this.m_nowPlaySoundID = null;
          _this.m_bottombarView = void 0;
          _this.m_loadedSound = false;
          return _this;
        }

        var _proto = EffectView.prototype;

        _proto.Init = function Init(controller) {
          this.m_controller = controller;
        };

        _proto.LoadSound = function LoadSound() {
          this.m_loadedSound = true;
        };

        _proto.OnUpdate = function OnUpdate(dt) {
          this.RollWinMoney(dt);
        }
        /**
         * @argument loadResCB 開始播放時的回呼     
         */
        ;

        _proto.ShowWinAndCoinEffect = function ShowWinAndCoinEffect(winSetting, coinSetting, loadResCB) {
          if (loadResCB === void 0) {
            loadResCB = null;
          }

          loadResCB = loadResCB || function () {};

          var loadId = LoadPrefabManager.getInstance().GetManagerId(loadResCB);
          this.ShowWinEffect(winSetting, loadId);

          if (winSetting.playCoinAtWinEffect === undefined || winSetting.playCoinAtWinEffect === true) {
            this.playCoinEffect(coinSetting, loadId);
          }

          LoadPrefabManager.getInstance().StartLoad(loadId);
        }
        /** 
        @ effectFile: 要播哪組特效
        @ winValue: 中獎金額，傳 null 就表示不顯示預設的跑分板
        @ cbFunc: 特效結束的 callback function
        @ yPos: 特效 y 軸位置設定，傳 null 表示用預設位置
        @ cbFuncBtoM: BigWin 要過渡到 MegaWin 時的 callback function
        @ cbFuncMtoS: MegaWin 要過渡到 SuperWin 時的 callback function
        @ isLoop: 是否播放Loop階段
        */
        ;

        _proto.ShowWinEffect = function ShowWinEffect(winSetting, managerId) {
          var _this2 = this;

          if (managerId === void 0) {
            managerId = -1;
          } // public ShowWinEffect(effectFile, winValue, cbFunc, yPos = 0, cbFuncBtoM = null, cbFuncMtoS = null, isLoop = false, managerId: number = -1) {


          var effectFile = winSetting.effectFile;
          var winValue = winSetting.winValue;
          var cbFunc = winSetting.cbFunc;
          var yPos = winSetting.yPos;
          var deltaY = winSetting.deltaY;
          var cbFuncBtoM = winSetting.cbFuncBtoM;
          var cbFuncMtoS = winSetting.cbFuncMtoS;
          var cbFuncPlaying = winSetting.cbFuncPlaying;
          var isLoop = winSetting.isLoop || false;
          var rollTime = winSetting.rollTime; //award board setup --

          if (winValue == null) {
            if (this.m_awardBoard) {
              this.m_awardBoard.active = false;
              this.m_awardBoardTimeline.stop();
            }

            return;
          }

          var loadResCB = function loadResCB() {
            if (_this2.m_bgMaskNode) {
              _this2.m_bgMaskNode.active = true;
            }

            log("LoadPrefabManager CB", winValue);
            yPos = yPos != null && yPos || EffectView.DEFAULT_Y;

            _this2.m_effectList[effectFile].setPosition(v3(EffectView.DesignSize.width / 2, yPos));

            _this2.m_effectList[effectFile].active = true;

            _this2.m_timeLineList[effectFile].play(EffectView.ANI_LABEL.ACT);

            _this2.m_currentWinEffect = _this2.m_effectList[effectFile];
            _this2.m_currentWinEffectTimeline = _this2.m_timeLineList[effectFile];
            _this2.m_currentWinEffectTimeline.name = effectFile;
            deltaY = effectFile == EffectView.FILE_PATH.JACKPOT ? 180 : deltaY != null ? deltaY : 230;

            _this2.m_awardBoard.setPosition(v3(EffectView.DesignSize.width / 2, yPos - deltaY));

            _this2.m_awardBoard.active = true;

            _this2.m_awardBoardTimeline.play(EffectView.ANI_LABEL.ACT);

            _this2.SetWinValue(winValue, rollTime);

            if (cbFuncPlaying) {
              cbFuncPlaying();
            }
          };

          var loadId = managerId;

          if (managerId == -1) {
            loadId = LoadPrefabManager.getInstance().GetManagerId(loadResCB);
          }

          var soundFile = EffectView.WIN_EFFECT_SOUND_NAME[effectFile]; // Inanna.GetSoundMgr():PlayEffect( "InannaResource", soundFile, false )

          this.m_winEffCbFunc = cbFunc;

          if (this.m_effectList[effectFile] == null) {
            LoadPrefabManager.getInstance().AddLoad(loadId);
            Define.GameBundle.load(effectFile, function (err, prefab) {
              if (err) {
                error(err.message || err);
                return;
              }

              var effect = instantiate(prefab);
              effect.active = false;

              _this2.addChild(effect); // effect.setSiblingIndex( EffectView.EFF_ZORDER.WIN_EFFECT );


              Tools.SetZIndex(effect, EffectView.EFF_ZORDER.WIN_EFFECT);
              var effTimeLine = effect.getComponent(Animation);
              EvtReceiver.Pack(effect, function (frameName) {
                if (frameName == EffectView.ANI_FRAME_EVENT.ENDING) {
                  if (_this2.m_awardBoard && _this2.m_awardBoard.active) {
                    _this2.m_awardBoardTimeline.play(EffectView.ANI_LABEL.ENDING);
                  }
                } else if (frameName == EffectView.ANI_FRAME_EVENT.LOOP) {
                  if (isLoop) {
                    effTimeLine.play(EffectView.ANI_LABEL.LOOP);
                    var obj = effTimeLine.getState(EffectView.ANI_LABEL.LOOP);
                    obj.wrapMode = AnimationClip.WrapMode.Loop;
                  }
                } else if (frameName == EffectView.ANI_FRAME_EVENT.B_TO_M) {
                  //Inanna.GetSoundMgr().PlayEffect( "InannaResource", "Common_mega_win", false )
                  if (_this2.m_awardBoard && _this2.m_awardBoard.active) {
                    tween(_this2.m_txtWinValue).by(0.25, {
                      scale: v3(1.5, 1.5, 1.5)
                    }).by(0.1, {
                      scale: v3(0.9, 0.9, 0.9)
                    }).start();
                  }

                  if (cbFuncBtoM) {
                    cbFuncBtoM();
                  }
                } else if (frameName == EffectView.ANI_FRAME_EVENT.M_TO_S) {
                  // Inanna.GetSoundMgr().PlayEffect( "InannaResource", "Common_super_win", false )
                  if (_this2.m_awardBoard && _this2.m_awardBoard.active) {
                    tween(_this2.m_txtWinValue).by(0.25, {
                      scale: v3(1.5, 1.5, 1.5)
                    }).by(0.1, {
                      scale: v3(0.9, 0.9, 0.9)
                    }).start();
                  }

                  if (cbFuncMtoS) {
                    cbFuncMtoS();
                  }
                } else if (frameName == EffectView.ANI_FRAME_EVENT.END) {
                  log("ANI_FRAME_EVENT.END");

                  _this2.OnAnimationEnd();

                  if (_this2.m_winEffCbFunc) {
                    _this2.m_winEffCbFunc();
                  }
                }
              });
              effect.active = false;
              _this2.m_effectList[effectFile] = effect;
              _this2.m_timeLineList[effectFile] = effTimeLine;
              LoadPrefabManager.getInstance().OnLoaded(loadId);
            });
          } else {
            if (managerId == -1) {
              loadResCB();
            } else {
              LoadPrefabManager.getInstance().AddOnLoadedCallback(loadId, loadResCB);
            }

            return;
          }

          if (this.m_awardBoard == null) {
            LoadPrefabManager.getInstance().AddLoad(loadId);
            Define.GameBundle.load(this.m_awardBoardFile, function (err, prefab) {
              if (err) {
                error(err.message || err);
                return;
              }

              _this2.m_awardBoard = instantiate(prefab);

              _this2.addChild(_this2.m_awardBoard); // this.m_awardBoard.setSiblingIndex( EffectView.EFF_ZORDER.AWARD_BOARD );


              Tools.SetZIndex(_this2.m_awardBoard, EffectView.EFF_ZORDER.AWARD_BOARD);
              _this2.m_awardBoard.active = false;
              _this2.m_awardBoardTimeline = _this2.m_awardBoard.getComponent(Animation);
              _this2.m_txtWinValue = _this2.m_awardBoard.getChildByName("win_value_label");
              LoadPrefabManager.getInstance().OnLoaded(loadId);
            });
          }

          if (managerId == -1) {
            LoadPrefabManager.getInstance().StartLoad(loadId);
          } else {
            LoadPrefabManager.getInstance().AddOnLoadedCallback(loadId, loadResCB);
          }
        };

        _proto.WinEffect = function WinEffect() {
          if (this.m_currentWinEffectTimeline) {
            this.m_currentWinEffectTimeline.play(EffectView.ANI_LABEL.ENDING, false);
          }
        } //@ durTime. 滾錢的持續時間
        ;

        _proto.SetWinValue = function SetWinValue(value, durTime, startValue) {
          if (durTime === void 0) {
            durTime = null;
          }

          if (startValue === void 0) {
            startValue = 0;
          }

          this.m_moneyRealValue = Tools.strip(value);
          this.m_moneyRollValue = startValue;
          durTime = durTime == null && EffectView.MONEY_ROLL_TIME || durTime;
          this.m_durRollMoneyTick = Tools.strip(durTime);
        };

        _proto.RollWinMoney = function RollWinMoney(tick) {
          // log(tick, this.m_moneyRollValue, this.m_moneyRealValue);
          this.m_moneyRealValue = Tools.strip(this.m_moneyRealValue);
          this.m_moneyRollValue = Tools.strip(this.m_moneyRollValue);

          if (this.m_moneyRollValue < this.m_moneyRealValue) {
            var tickCount = Tools.divide(this.m_durRollMoneyTick, Tools.strip(tick));
            var intaval = Tools.divide(Tools.strip(this.m_moneyRealValue - this.m_moneyRollValue), tickCount);
            var style = Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT;

            if (this.m_isAutoCheckFloat) {
              if (this.m_moneyRealValue.toString().indexOf(".") > -1) {
                style = Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT;
              } else {
                style = Tools.FORMAT_NUMBER_TYPE.NONE_DOT;
              }
            } //this.m_moneyRollValue =  Math.ceil(this.m_moneyRollValue + intaval);


            this.m_moneyRollValue = Tools.strip(this.m_moneyRollValue + intaval);

            if (this.m_moneyRollValue > this.m_moneyRealValue) {
              this.m_moneyRollValue = this.m_moneyRealValue;
            } // this.m_txtWinValue.getComponent(cc.Label).string = Math.ceil(this.m_moneyRollValue).toString();


            Tools.SetLabelString(this.m_txtWinValue, this.m_moneyRollValue, style);
            this.m_durRollMoneyTick = Tools.strip(this.m_durRollMoneyTick - tick);
          }
        };

        _proto.SetWinMoneyToMax = function SetWinMoneyToMax() {// this.m_moneyRollValue = this.m_moneyRealValue
          // if (this.m_txtWinValue) {
          //     this.m_txtWinValue.getComponent(cc.Label).string = Math.ceil(this.m_moneyRollValue).toString();
          // }
        };

        _proto.IsRollMoneyEnd = function IsRollMoneyEnd() {
          return this.m_moneyRollValue == this.m_moneyRealValue;
        };

        _proto.StopAnimation = function StopAnimation(cancelCallBack) {
          if (this.m_currentWinEffectTimeline) {
            this.m_currentWinEffectTimeline.stop();
          }

          if (this.m_awardBoard) {
            this.m_awardBoard.active = false;
            this.m_awardBoardTimeline.stop();
          }

          if (cancelCallBack != true) {
            if (this.m_winEffCbFunc) {
              this.m_winEffCbFunc();
            }
          }

          this.m_winEffCbFunc = null;
          this.OnAnimationEnd();
        };

        _proto.OnAnimationEnd = function OnAnimationEnd() {
          if (this.m_currentWinEffect) {
            this.m_currentWinEffect.active = false;
          }

          if (this.m_controller) {
            this.m_controller.Hide();
          }

          if (this.m_bgMaskNode) {
            this.m_bgMaskNode.active = false;
          }

          this.m_moneyRealValue = 0;
          this.m_moneyRollValue = 0;
        };

        _proto.playCoinEffect = function playCoinEffect(coinSetting, loadId) {
          var _this3 = this;

          if (loadId === void 0) {
            loadId = -1;
          }

          var level = coinSetting.level;
          var position = coinSetting.position;
          var time = coinSetting.time;

          if (time == undefined) {
            time = 0;
          }

          var zOrder = coinSetting.zOrder;

          if (zOrder == undefined) {
            zOrder = 0;
          }

          var viewParent = coinSetting.parent;
          this.stopCoinEffectImmly();
          var resource = EffectView.COIN_EFFECT_LIST[level];
          resource = Tools.GetFilePath(resource);

          if (!resource) {
            return;
          }

          log("~~~~~~~~~~~~~~~~~~~~~~", coinSetting, time, zOrder);

          var loadAllResCB = function loadAllResCB() {
            // let p1: ParticleSystem2D = this.m_coinEffect.getChildByName("Particle_1").getComponent(ParticleSystem2D);
            // let p2: ParticleSystem2D = this.m_coinEffect.getChildByName("Particle_2").getComponent(ParticleSystem2D);
            _this3.m_coinEffect.setPosition(v3(position.x, position.y));

            if (viewParent == undefined || viewParent == null) {
              _this3.addChild(_this3.m_coinEffect);

              Tools.SetZIndex(_this3.m_coinEffect, 0);
            } else {
              viewParent.addChild(_this3.m_coinEffect); // this.m_coinEffect.setSiblingIndex( zOrder );

              Tools.SetZIndex(_this3.m_coinEffect, zOrder);
            }

            if (time != 0) {
              tween(_this3).delay(time).call(function () {
                _this3.stopCoinEffect();
              }).start();
            }
          };

          if (loadId != -1) {
            LoadPrefabManager.getInstance().AddOnLoadedCallback(loadId, loadAllResCB);
            LoadPrefabManager.getInstance().AddLoad(loadId);
          } //this.m_coinEffect = cc.CSLoader.createNode(resource)


          Define.CommonBundle.load(resource, function (err, prefab) {
            log("LoadRes ", resource);

            if (err) {
              error(err.message || err);
              return;
            }

            _this3.m_coinEffect = instantiate(prefab);

            if (!_this3.m_coinEffect) {
              log("SlotBottomBarView.playCoinEffect m_coinEffect is null");
              return;
            }

            if (loadId == -1) {
              loadAllResCB();
            } else {
              LoadPrefabManager.getInstance().OnLoaded(loadId);
            }
          });
        };

        _proto.stopCoinEffectImmly = function stopCoinEffectImmly() {
          if (this.m_coinEffect == null || !this.m_coinEffect.removeFromParent) {
            return;
          }

          this.m_coinEffect.removeFromParent();
          this.m_coinEffect = null;
        };

        _proto.stopCoinEffect = function stopCoinEffect() {
          if (this.m_coinEffect == null) {
            return;
          }

          if (this.m_coinEffect) {
            var p1 = this.m_coinEffect.getChildByName("Particle_1").getComponent(ParticleSystem2D);
            var p2 = this.m_coinEffect.getChildByName("Particle_2").getComponent(ParticleSystem2D);

            if (p1) {
              p1.stopSystem();
            }

            if (p2) {
              p2.stopSystem();
            }
          }
        };

        _proto.ShowCommonEffect = function ShowCommonEffect(winMoney, betMoney, winSetting, coinSetting, playSound) {
          if (winSetting === void 0) {
            winSetting = null;
          }

          if (coinSetting === void 0) {
            coinSetting = null;
          }

          if (playSound === void 0) {
            playSound = false;
          }

          winSetting = winSetting || {};
          coinSetting = coinSetting || {};
          var bigpos = new Vec2(EffectView.DesignSize.width / 2, EffectView.DesignSize.height);
          var smallpos = new Vec2(EffectView.DesignSize.width / 2 - 10, 145);
          playSound = this.m_loadedSound && playSound;
          var soundName = undefined;
          var odds = winMoney / betMoney;

          if (this.m_bottombarView) {
            winMoney = this.m_bottombarView.GetDisplayValue(winMoney);
          }

          for (var i = this.m_odds.length - 1; i >= 0; i--) {
            if (odds >= this.m_odds[i]) {
              coinSetting.level = this.m_coinEffects[i];

              if (this.m_coinEffects[i] == 5) {
                coinSetting.position = coinSetting.position ? coinSetting.position : bigpos;
              } else {
                coinSetting.position = coinSetting.smallPosition ? coinSetting.smallPosition : coinSetting.position ? coinSetting.position : smallpos;
              }

              if (coinSetting.time == undefined || coinSetting.time <= 0) {
                coinSetting.time = this.m_coinTimes[i];
              }

              if (this.m_coinEffects[i] == 5) {
                winSetting.effectFile = this.m_winEffectFiles[i];
                winSetting.winValue = winMoney;
                this.SetWinType(i);
                this.ShowWinAndCoinEffect(winSetting, coinSetting);
              } else {
                this.playCoinEffect(coinSetting);
              }

              soundName = this.m_soundNameByOdds[i];
              break;
            }
          }

          if (soundName != undefined) {
            this.m_nowPlaySoundID = SoundManager.getInstance().Play(soundName, false);
          }

          if (coinSetting.time == undefined) {
            coinSetting.time = 0;
          }

          return coinSetting.time;
        };

        _proto.SkipEffect = function SkipEffect() {
          this.stopCoinEffect();
          TweenSystem.instance.ActionManager.removeAllActionsFromTarget(this);

          if (this.m_currentWinEffectTimeline) {
            var name = this.m_currentWinEffectTimeline.name;
            var style = Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT;

            if (name == EffectView.FILE_PATH.BIG_WIN || name == EffectView.FILE_PATH.MEGA_WIN || name == EffectView.FILE_PATH.SUPER_WIN) {
              this.m_moneyRollValue = Tools.strip(this.m_moneyRollValue);
              this.m_moneyRealValue = Tools.strip(this.m_moneyRealValue);

              if (this.m_moneyRollValue == this.m_moneyRealValue) {
                this.m_awardBoardTimeline.play(EffectView.ANI_LABEL.ENDING);
                this.m_currentWinEffectTimeline.setCurrentTime(5);
              } else {
                if (this.m_isAutoCheckFloat) {
                  if (this.m_moneyRealValue.toString().indexOf(".") > -1) {
                    style = Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT;
                  } else {
                    style = Tools.FORMAT_NUMBER_TYPE.NONE_DOT;
                  }
                }

                Tools.SetLabelString(this.m_txtWinValue, this.m_moneyRealValue, style);
                this.m_currentWinEffectTimeline.setCurrentTime(3.8);
              }

              this.m_currentWinEffectTimeline = null;
            }

            this.m_moneyRollValue = this.m_moneyRealValue;
          }
        };

        _proto.SkipEffectSound = function SkipEffectSound() {
          if (this.m_nowPlaySoundID) {
            SoundManager.getInstance().Stop(this.m_nowPlaySoundID);
            this.m_nowPlaySoundID = null;
          }
        }
        /**
         * 設定是否自動忽略小數點(未設定則為預設)
         */
        ;

        _proto.SetAutoCheckFloat = function SetAutoCheckFloat(isSet) {
          this.m_isAutoCheckFloat = isSet;
        }
        /**
         * 設定跳錢的倍率(未設定則為預設)
         */
        ;

        _proto.SetOdds = function SetOdds(odds) {
          this.m_odds = odds;
        }
        /**
         * 設定贏分時的特效(未設定則為預設)
         */
        ;

        _proto.SetWinEffectFiles = function SetWinEffectFiles(winEffectFiles) {
          this.m_winEffectFiles = winEffectFiles;
        }
        /**
         * 設定特效的得分版路徑(未設定則為預設)
         */
        ;

        _proto.SetAwardBoardFile = function SetAwardBoardFile(awardBoardFile) {
          this.m_awardBoardFile = awardBoardFile;
        }
        /**
         * 設定金幣特效的等級(未設定則為預設)
         */
        ;

        _proto.SetEffectLevels = function SetEffectLevels(coinEffects) {
          this.m_coinEffects = coinEffects;
        }
        /**
         * 設定跳錢的時間(未設定則為預設)
         */
        ;

        _proto.SetEffectTimes = function SetEffectTimes(coinTimes) {
          this.m_coinTimes = coinTimes;
        }
        /**
         * 設定特效的音效(未設定則為預設)
         */
        ;

        _proto.SetSoundNameByOdds = function SetSoundNameByOdds(soundNameByOdds) {
          this.m_soundNameByOdds = soundNameByOdds;
        }
        /**
         * 設定中獎時的背景壓黑遮罩 
         */
        ;

        _proto.SetBGMaskNode = function SetBGMaskNode(node) {
          if (node != null) {
            this.m_bgMaskNode = node;
          }
        }
        /**
         * 設定贏分文字大小
         * @param size 
         */
        ;

        _proto.SetWinTextFontSize = function SetWinTextFontSize(size) {
          if (this.m_txtWinValue) {
            this.m_txtWinValue.getComponent(Label).fontSize = size;
          }
        };

        _proto.SetWinType = function SetWinType(type) {
          this.m_winType = type;
        };

        _proto.SetBottombarView = function SetBottombarView(bottombar) {
          this.m_bottombarView = bottombar;
        };

        return EffectView;
      }(Node));
      EffectView.DesignSize = {
        width: 1136,
        height: 640
      };
      EffectView.SOUND_FILE = {
        COMMON_SUPER_WIN: null,
        COMMON_MEGA_WIN: null,
        COMMON_COIN_SMALL: null,
        COMMON_COIN_MEDIUM: null,
        COMMON_BIG_WIN: null
      };
      EffectView.EFFECT_ROOT = "Astt/%s/effect/GameCommonEffect/";
      EffectView.FILE_PATH = {
        BIG_WIN: "win/big_anim",
        MEGA_WIN: "win/mega_anim",
        SUPER_WIN: "win/super_anim",
        JACKPOT: "win/effect_Jackpot",
        BIG_TO_MEGA_WIN: "win/bigToMega_anim",
        BIG_TO_SUPER_WIN: "win/bigToSuper_anim",
        FIVE_OF_A_KIND: "win/5ofa_anim"
      };
      EffectView.WIN_EFFECT_SOUND_NAME = (_EffectView$WIN_EFFEC = {}, _EffectView$WIN_EFFEC[EffectView.FILE_PATH.BIG_WIN] = "Common_big_win", _EffectView$WIN_EFFEC[EffectView.FILE_PATH.MEGA_WIN] = "Common_mega_win", _EffectView$WIN_EFFEC[EffectView.FILE_PATH.SUPER_WIN] = "Common_super_win", _EffectView$WIN_EFFEC[EffectView.FILE_PATH.JACKPOT] = "Common_JP_win", _EffectView$WIN_EFFEC[EffectView.FILE_PATH.BIG_TO_MEGA_WIN] = "Common_big_win", _EffectView$WIN_EFFEC[EffectView.FILE_PATH.BIG_TO_SUPER_WIN] = "Common_big_win", _EffectView$WIN_EFFEC[EffectView.FILE_PATH.FIVE_OF_A_KIND] = "Common_big_win", _EffectView$WIN_EFFEC);
      EffectView.EffectViewUIName = Enum({
        TXT_WIN_MONEY: "label_final_value",
        PARTICLE: "Particle_"
      });
      EffectView.DEFAULT_Y = 400;
      EffectView.PARTICLE_AMOUNT_MAX = 2;
      EffectView.MONEY_ROLL_TIME = 3;
      EffectView.UPDATE_MONEY_CSB = EffectView.EFFECT_ROOT + "common_get_coin/Node_GetCoin01.csb";
      EffectView.COMMON_GET_COIN_CSB = EffectView.EFFECT_ROOT + "common_get_coin/Node_GetCoin02.csb";
      EffectView.GET_COIN_PARTICLE_CSB = EffectView.EFFECT_ROOT + "common_get_coin/Particle/_V3_GetCoin02.plist";
      EffectView.ROTATE_COIN_CSB = EffectView.EFFECT_ROOT + "common_get_coin/Node_CoinRotation01.csb";
      EffectView.TRIAL_COIN_CSB = EffectView.EFFECT_ROOT + "common_get_coin/Node_GetTrialCoin.csb";
      EffectView.COIN_APPEAR_PARTICLE_CSB = EffectView.EFFECT_ROOT + "common_get_coin/Particle/New_CoinShine03.plist";
      EffectView.COMMON_COIN_AMOUNT = 8;
      EffectView.ANI_LABEL = {
        ACT: "main",
        LOOP: "loop",
        ENDING: "ending"
      };
      EffectView.ANI_FRAME_EVENT = {
        MID: "AniMid",
        B_TO_M: "AniBtoM",
        M_TO_S: "AniMtoS",
        ENDING: "AniEnding",
        END: "AniEnd",
        LOOP: "AniLoop"
      };
      EffectView.EFF_ZORDER = {
        COIN_FALL: 1,
        WIN_EFFECT: 2,
        AWARD_BOARD: 3,
        COMMON_GET_COIN: 4,
        GET_TRIAL_COIN: 5
      };
      EffectView.COIN_EFFECT_LIST = {
        1: EffectView.EFFECT_ROOT + "coin/1_SmallGoldCoinFX_1",
        2: EffectView.EFFECT_ROOT + "coin/1_SmallGoldCoinFX_2",
        3: EffectView.EFFECT_ROOT + "coin/1_SmallGoldCoinFX_3",
        4: EffectView.EFFECT_ROOT + "coin/2_BigGoldCoinFX_1",
        5: EffectView.EFFECT_ROOT + "coin/3_MegaGoldCoinFX_1",
        6: EffectView.EFFECT_ROOT + "coin/3_MegaGoldCoinFX_2",
        7: EffectView.EFFECT_ROOT + "coin/3_MegaGoldCoinFX_3"
      };
      EffectView.EFFECT_VIEW_CSB_FILE = "effect/EffectView.csb";
      EffectView.WIN_TYPE = {
        BIG: 2,
        MEGA: 3,
        SUPER: 4
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectWin.ts", ['cc', './Tools.ts', './Define.ts'], function (exports) {
  'use strict';

  var cclegacy, Node, v3, error, instantiate, UIOpacity, BitmapFont, Label, tween, Animation, Tools, Define;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      v3 = module.v3;
      error = module.error;
      instantiate = module.instantiate;
      UIOpacity = module.UIOpacity;
      BitmapFont = module.BitmapFont;
      Label = module.Label;
      tween = module.tween;
      Animation = module.Animation;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      Define = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "cb8b0BjjqNLxqXwzC4sYe3x", "EffectWin", undefined);

      var EFTWIN_PATH = "Astt/%s/bottombar/EftWin";
      var EFTWIN_EFFECT_PATH = "Astt/%s/bottombar/EftWin_effect";
      var EffectWin = exports('default', /*#__PURE__*/function () {
        function EffectWin(controller, isLandscape) {
          this.m_controller = void 0;
          this.m_useEftWinValue = false;
          this.m_eftWinValueFnt = null;
          this.m_eftWinNode = null;
          this.m_eftWinBg = null;
          this.m_eftWinLabel = null;
          this.m_eftWinEft = null;
          this.m_eftWinNodePos = null;
          this.m_lastFinalWinValue = 0;
          this.m_lastTotalWinValue = 0;
          this.m_isEftWinFading = false;
          this.m_isLandscape = false;
          this.m_eftWinActions = [];
          this.m_controller = controller;
          this.m_isLandscape = isLandscape;
        }
        /**
         * @description 設定是否使用特效版
         * @param fntPath 字體路徑
         * @param pos 顯示位置(直版與橫版)
         * @param fontSize 字體大小
         * @param lineHeight 每行高(因每種fnt預設大小不同，需自行在creator中拉個label套套看，否則會有數字不會置中問題)
         */


        var _proto = EffectWin.prototype;

        _proto.SetUseEftWinValue = function SetUseEftWinValue(fntPath, pos, fontSize, lineHeight) {
          var _this = this;

          this.m_useEftWinValue = true;

          if (this.m_useEftWinValue) {
            if (!this.m_eftWinValueFnt) {
              var node = new Node();
              node.position = v3(pos[Number(this.m_isLandscape)]) ? v3(pos[Number(this.m_isLandscape)]) : v3(0, 0);
              this.m_eftWinNodePos = pos;
              this.m_eftWinNode = node;
              this.m_eftWinNode.active = false;
              this.m_controller.node.addChild(this.m_eftWinNode); // this.m_eftWinNode.setSiblingIndex( Define.ZOrder.EFTWIN );

              Tools.SetZIndex(this.m_eftWinNode, Define.ZOrder.EFTWIN);
              var winPath = Tools.GetFilePath(EFTWIN_PATH);
              Define.CommonBundle.load(winPath, function (err, prefab) {
                if (err) {
                  error(err.message || err);
                  return;
                }

                _this.m_eftWinBg = instantiate(prefab);
                _this.m_eftWinBg.getComponent(UIOpacity).opacity = 0;

                _this.m_eftWinNode.addChild(_this.m_eftWinBg); // this.m_eftWinBg.setSiblingIndex( 0 );


                Tools.SetZIndex(_this.m_eftWinBg, 0);
              });
              var effectPath = Tools.GetFilePath(EFTWIN_EFFECT_PATH);
              Define.CommonBundle.load(effectPath, function (err, prefab) {
                if (err) {
                  error(err.message || err);
                  return;
                }

                _this.m_eftWinEft = instantiate(prefab);
                _this.m_eftWinEft.active = false;

                _this.m_eftWinNode.addChild(_this.m_eftWinEft); // this.m_eftWinEft.setSiblingIndex( 1 );


                Tools.SetZIndex(_this.m_eftWinEft, 0);
              });

              if (typeof fntPath === "string") {
                Define.GameBundle.load(fntPath, BitmapFont, function (err, fnt) {
                  if (err) {
                    error(err.message || err);
                    return;
                  }

                  _this.m_eftWinValueFnt = fnt;
                  var node = new Node();
                  node.addComponent(Label);
                  node.addComponent(UIOpacity);
                  _this.m_eftWinLabel = node.getComponent(Label);
                  _this.m_eftWinLabel.string = "";
                  _this.m_eftWinLabel.font = _this.m_eftWinValueFnt;
                  _this.m_eftWinLabel.fontSize = fontSize;
                  _this.m_eftWinLabel.lineHeight = lineHeight;

                  _this.m_eftWinNode.addChild(node); // node.setSiblingIndex( 2 );


                  Tools.SetZIndex(node, 2);
                });
              } else {
                this.m_eftWinValueFnt = fntPath;

                var _node = new Node();

                _node.addComponent(Label);

                this.m_eftWinLabel = _node.getComponent(Label);
                this.m_eftWinLabel.string = "";
                this.m_eftWinLabel.font = this.m_eftWinValueFnt;
                this.m_eftWinLabel.fontSize = fontSize;
                this.m_eftWinLabel.lineHeight = lineHeight;
                this.m_eftWinNode.addChild(_node); // node.setSiblingIndex( 2 );

                Tools.SetZIndex(_node, 2);
              }
            }
          }
        }
        /**
         * @description 必須先SetUseEftWinValue才可使用，使用eftWin建議startSpin清掉地霸分數要delay至少0.2秒不然速度過快容易卡分數在地霸上面
         * @param finalValue 贏分
         * @param totalValue 總贏分(地霸累積用)
         * @param startValue 開始的數字
         */
        ;

        _proto.SetEftWinValue = function SetEftWinValue(finalValue, totalValue, startValue) {
          var _this2 = this;

          if (!this.m_useEftWinValue || !this.m_eftWinNode || !this.m_eftWinBg || !this.m_eftWinLabel || !this.m_eftWinEft) {
            return;
          }

          var times = Tools.divide(1.3, 0.02); // let str = this.m_controller.WinLabel.string.replace( /<.*?>|[^0-9|.]/g, "" );
          // let value = Tools.times( Number( str ), this.m_controller.Wallet.Unit );

          var value = startValue ? startValue : 0;

          if (!totalValue) {
            totalValue = finalValue;
            this.m_controller.SetWinValue(0);
            this.m_controller.SetWinValueWithRunning(finalValue, 1.3);
          } else {
            this.m_controller.SetWinValueWithRunning(totalValue, 1.3);
          }

          var step = Tools.divide(Tools.strip(finalValue - value), times);
          this.m_eftWinNode.active = true;
          this.m_lastFinalWinValue = finalValue;
          this.m_lastTotalWinValue = totalValue;

          if (this.m_eftWinActions.length > 0) {
            while (this.m_eftWinActions.length > 0) {
              this.m_eftWinActions.shift().stop();
            }
          }

          var style;

          if (this.m_controller.GetDisplayValue(finalValue).toString().indexOf(".") > -1) {
            style = Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT;
          } else {
            style = Tools.FORMAT_NUMBER_TYPE.NONE_DOT;
          } // 跑分部分


          var repeatAction = tween(this.m_eftWinNode).repeat(times, tween().call(function () {
            value = Tools.plus(value, step);

            if (value >= finalValue) {
              value = finalValue;
            }

            _this2.m_eftWinLabel.string = Tools.FormatNumberThousands(_this2.m_controller.GetDisplayValue(value), style);
          }).delay(0.02)).call(function () {
            _this2.m_eftWinLabel.string = Tools.FormatNumberThousands(_this2.m_controller.GetDisplayValue(finalValue), style);
          });
          this.m_eftWinActions.push(repeatAction);
          var eftAction = tween(this.m_eftWinNode).call(function () {
            _this2.m_eftWinEft.active = true;

            _this2.m_eftWinEft.getComponent(Animation).play("EftWin_effect");

            _this2.m_eftWinEft.getComponent(Animation).once(Animation.EventType.FINISHED, function () {
              if (_this2.m_eftWinEft) {
                _this2.m_eftWinEft.active = false;
              }
            });
          });
          this.m_eftWinActions.push(eftAction);
          var bgAction = tween(this.m_eftWinNode).call(function () {
            _this2.m_eftWinBg.setScale(v3(1, 1));

            _this2.m_eftWinBg.getComponent(UIOpacity).opacity = 255;

            _this2.m_eftWinBg.getComponent(Animation).play("EftWin");

            var action = tween(_this2.m_eftWinBg).delay(1.8).to(0.35, {
              scale: v3(0, 0, 0)
            }).start();

            _this2.m_eftWinActions.push(action);

            action = tween(_this2.m_eftWinBg.getComponent(UIOpacity)).delay(1.8).to(0.35, {
              opacity: 0
            }).start();

            _this2.m_eftWinActions.push(action);
          });
          this.m_eftWinActions.push(bgAction);
          var labelAction = tween(this.m_eftWinNode).call(function () {
            _this2.m_eftWinLabel.node.setScale(v3(1, 1));

            _this2.m_eftWinLabel.node.getComponent(UIOpacity).opacity = 255;
            _this2.m_eftWinLabel.node.position = v3(0, 0);
            var action = tween(_this2.m_eftWinLabel.node).to(0.15, {
              scale: v3(1.25, 1.25, 1.25)
            }).delay(1.65).call(function () {
              _this2.m_isEftWinFading = true;
            }).to(0.35, {
              scale: v3(0, 0, 0)
            }).call(function () {
              _this2.m_eftWinLabel.string = "";
            }).start();

            _this2.m_eftWinActions.push(action);

            action = tween(_this2.m_eftWinLabel.node.getComponent(UIOpacity)).delay(1.8).to(0.35, {
              opacity: 0
            }).start();

            _this2.m_eftWinActions.push(action);
          });
          this.m_eftWinActions.push(labelAction);
          this.m_isEftWinFading = false;
          var action = tween(this.m_eftWinNode).parallel(bgAction, eftAction, labelAction, repeatAction).delay(2.15).call(function () {
            _this2.m_lastFinalWinValue = 0;
            _this2.m_lastTotalWinValue = 0;
            _this2.m_isEftWinFading = false;
            _this2.m_eftWinNode.active = false;
          }).start();
          this.m_eftWinActions.push(action);
        };

        _proto.SkipEftWinValue = function SkipEftWinValue() {
          var _this3 = this;

          if (this.m_isEftWinFading || !this.m_eftWinNode || !this.m_eftWinBg || !this.m_eftWinLabel || !this.m_eftWinEft) {
            return;
          }

          if (this.m_lastFinalWinValue > 0) {
            var isSetlastFinalWinValue = false;

            if (this.m_eftWinActions.length > 0) {
              while (this.m_eftWinActions.length > 0) {
                this.m_eftWinActions.shift().stop();
              }
            }

            var style;

            if (this.m_controller.GetDisplayValue(this.m_lastFinalWinValue).toString().indexOf(".") > -1) {
              style = Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT;
            } else {
              style = Tools.FORMAT_NUMBER_TYPE.NONE_DOT;
            }

            var bgAction = tween(this.m_eftWinNode).call(function () {
              var action = tween(_this3.m_eftWinBg).call(function () {
                // tween parallel莫名會call兩次action必須擋掉第二次設值
                if (!isSetlastFinalWinValue) {
                  isSetlastFinalWinValue = true;
                  _this3.m_eftWinLabel.string = Tools.FormatNumberThousands(_this3.m_controller.GetDisplayValue(_this3.m_lastFinalWinValue), style);

                  _this3.m_controller.SetWinValue(_this3.m_lastTotalWinValue, true, true);

                  _this3.m_lastFinalWinValue = 0;
                  _this3.m_lastTotalWinValue = 0;
                }
              }).delay(0.4).to(0.2, {
                scale: v3(0, 0, 0)
              }).start();

              _this3.m_eftWinActions.push(action);

              action = tween(_this3.m_eftWinBg.getComponent(UIOpacity)).delay(0.4).to(0.2, {
                opacity: 0
              }).start();

              _this3.m_eftWinActions.push(action);
            });
            this.m_eftWinActions.push(bgAction);
            var labelAction = tween(this.m_eftWinNode).call(function () {
              var action = tween(_this3.m_eftWinLabel.node).delay(0.4).to(0.2, {
                scale: v3(0, 0, 0)
              }).start();

              _this3.m_eftWinActions.push(action);

              action = tween(_this3.m_eftWinLabel.node.getComponent(UIOpacity)).delay(0.4).to(0.2, {
                opacity: 0
              }).start();

              _this3.m_eftWinActions.push(action);
            });
            this.m_eftWinActions.push(labelAction);
            var action = tween(this.m_eftWinNode).parallel(bgAction, labelAction).delay(0.6).call(function () {
              _this3.m_isEftWinFading = false;
              _this3.m_eftWinNode.active = false;
            }).start();
            this.m_eftWinActions.push(action);
          }
        };

        _proto.SetPosition = function SetPosition(pos) {
          this.m_eftWinNodePos = pos;
          this.m_eftWinNode.position = v3(this.m_eftWinNodePos[Number(this.m_isLandscape)]);
        };

        _proto.IsUseEftWin = function IsUseEftWin() {
          return this.m_useEftWinValue;
        };

        _proto.OnRatation = function OnRatation(isLandscape) {
          this.m_isLandscape = isLandscape;

          if (this.m_eftWinNode) {
            this.m_eftWinNode.position = v3(this.m_eftWinNodePos[Number(this.m_isLandscape)]);
          }
        };

        return EffectWin;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnvironmentConfig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createClass, cclegacy;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "cd5312Vr5xFvIoHgCiZ3Xwm", "EnvironmentConfig", undefined);

      var EnvironmentConfig = exports('default', /*#__PURE__*/function () {
        function EnvironmentConfig() {}

        EnvironmentConfig.OnExit = function OnExit() {
          EnvironmentConfig.CURR_ENV = 0;
          EnvironmentConfig.WEBAPI_URL = "https://{{domain}}/";
          EnvironmentConfig.PHASE_URL = "https://{{domain}}/webservice/event/trigger";
          EnvironmentConfig.VERIFY_URL = "https://{{domain}}/webservice/event/assetUpdate";
          EnvironmentConfig.CLICK_URL = "https://{{domain}}/webservice/event/user";
          EnvironmentConfig.MAIL_URL = "https://{{domain}}/rankingservice/user/GetMailList";
          EnvironmentConfig.SUBAGENTSERVICE_URL = "https://{{domain}}/subagentservice/MakeUserSubAgent";
          EnvironmentConfig.SERVICE_URL = "https://{{domain}}/";
          EnvironmentConfig.GAME_SERVER_URL = "https://{{domain}}/";
          EnvironmentConfig.ERROR_URL = "https://{{domain}}/webservice/event/error";
          EnvironmentConfig.RATIO_URL = "https://{{uat}}history.{{domain}}.com/{lang}/intro/{{webName}}?token={token}&game={gameId}{device}";
          EnvironmentConfig.BC_RATIO_URL = "https://{{uat}}wb.{{domain}}.com/{lang}/intro/{{webName}}";
          EnvironmentConfig.HISTORY_URL = "https://{{uat}}history.{{domain}}.com/{lang}/ingame?token={token}&game={gameId}{device}";
          EnvironmentConfig.COLLECT_URL = "https://{{uat}}history.{{domain}}.com/{lang}/action/collect/transfer?token={token}&game={gameId}&ratio={ratio}";
          EnvironmentConfig.BC_HISTORY_URL = "https://{{uat}}wbgamerecord.{{domain}}.com/ingame/gamehistory/index.aspx?token={token}&lang={lang}&game={gameId}";
          EnvironmentConfig.BACKPACK_URL = "https://{{uat}}history.{{domain}}.com/{lang}/ingame/member?game={gameId}&token={token}{device}";
          EnvironmentConfig.MEMBER_URL = "https://{{uat}}history.{{domain}}.com/{lang}/ingame/member/signin?game={gameId}&token={token}{device}";
          EnvironmentConfig.SOCKET_URL = "wss://{{domain}}/lifeservice/ws";
          EnvironmentConfig.SOCKET_URL2 = "wss://{{domain}}/lifeservice/ws2";
          EnvironmentConfig.RANKING_URL = "https://{{domain}}/rankingservice/user/GetRankingList";
          EnvironmentConfig.RANKING_URL2 = "https://{{domain}}/rankingservice/user/GetRankingListV2";
          EnvironmentConfig.NOTIFY_URL = "https://{{domain}}/smartnotice/notice/getReq";
          EnvironmentConfig.ACTION_URL = "https://{{uat}}history.{{domain}}.com/{lang}/action/transfer";
          EnvironmentConfig.PROMOTE_ACTION_URL = "https://{{uat}}history.{{domain}}.com/{lang}/promote/action";
          EnvironmentConfig.PROMOTE_URL = "https://{{uat}}history.{{domain}}.com/{lang}/promote/game";
          EnvironmentConfig.WEB_URL = "https://{{uat}}history.{{domain}}.com/{lang}/ingame/{target}?game={gameId}&token={token}{device}";
          EnvironmentConfig.CLOSE_URL = "https://{{uat}}history.{{domain}}.com/{lang}/ingame/close";
        };

        _createClass(EnvironmentConfig, null, [{
          key: "ENV_TYPE",
          get:
          /**
           *  0:正式環境
           *  1:測試環境
           *  2:UAT
           *  3:自動選uat或正式
           *  4:新二測
           */
          function get() {
            return 1;
          }
        }]);

        return EnvironmentConfig;
      }());
      EnvironmentConfig.CURR_ENV = 0;
      EnvironmentConfig.WEBAPI_URL = "https://{{domain}}/";
      EnvironmentConfig.PHASE_URL = "https://{{domain}}/webservice/event/trigger";
      EnvironmentConfig.VERIFY_URL = "https://{{domain}}/webservice/event/assetUpdate";
      EnvironmentConfig.CLICK_URL = "https://{{domain}}/webservice/event/user";
      EnvironmentConfig.MAIL_URL = "https://{{domain}}/rankingservice/user/GetMailList";
      EnvironmentConfig.SUBAGENTSERVICE_URL = "https://{{domain}}/subagentservice/MakeUserSubAgent";
      EnvironmentConfig.SERVICE_URL = "https://{{domain}}/";
      EnvironmentConfig.GAME_SERVER_URL = "https://{{domain}}/";
      EnvironmentConfig.ERROR_URL = "https://{{domain}}/webservice/event/error";
      EnvironmentConfig.RATIO_URL = "https://{{uat}}history.{{domain}}.com/{lang}/intro?token={token}&game={gameId}{device}&sac={sac}";
      EnvironmentConfig.BC_RATIO_URL = "https://{{uat}}wb.{{domain}}.com/{lang}/intro/{{webName}}?sac={sac}";
      EnvironmentConfig.HISTORY_URL = "https://{{uat}}history.{{domain}}.com/{lang}/ingame?token={token}&game={gameId}{device}&sac={sac}";
      EnvironmentConfig.COLLECT_URL = "https://{{uat}}history.{{domain}}.com/{lang}/action/collect/transfer?token={token}&game={gameId}&ratio={ratio}&sac={sac}";
      EnvironmentConfig.BC_HISTORY_URL = "https://{{uat}}wbgamerecord.{{domain}}.com/ingame/gamehistory/index.aspx?token={token}&lang={lang}&game={gameId}&sac={sac}";
      EnvironmentConfig.BACKPACK_URL = "https://{{uat}}history.{{domain}}.com/{lang}/ingame/member?game={gameId}&token={token}{device}";
      EnvironmentConfig.MEMBER_URL = "https://{{uat}}history.{{domain}}.com/{lang}/ingame/member/signin?game={gameId}&token={token}{device}";
      EnvironmentConfig.SOCKET_URL = "wss://{{domain}}/lifeservice/ws";
      EnvironmentConfig.SOCKET_URL2 = "wss://{{domain}}/lifeservice/ws2";
      EnvironmentConfig.RANKING_URL = "https://{{domain}}/rankingservice/user/GetRankingList";
      EnvironmentConfig.RANKING_URL2 = "https://{{domain}}/rankingservice/user/GetRankingListV2";
      EnvironmentConfig.NOTIFY_URL = "https://{{domain}}/smartnotice/notice/getReq";
      EnvironmentConfig.ACTION_URL = "https://{{uat}}history.{{domain}}.com/{lang}/action/transfer?sac={sac}";
      EnvironmentConfig.PROMOTE_ACTION_URL = "https://{{uat}}history.{{domain}}.com/{lang}/promote/action?sac={sac}";
      EnvironmentConfig.PROMOTE_URL = "https://{{uat}}history.{{domain}}.com/{lang}/promote/game?sac={sac}";
      EnvironmentConfig.WEB_URL = "https://{{uat}}history.{{domain}}.com/{lang}/ingame/{target}?game={gameId}&token={token}{device}&sac={sac}";
      EnvironmentConfig.CLOSE_URL = "https://{{uat}}history.{{domain}}.com/{lang}/ingame/close";
      EnvironmentConfig.TEST_PATH = {
        GAME_SERVER_URL: "http://localhost:12301/gem3",
        ERROR_URL: "",
        WEBAPI_URL: "",
        PHASE_URL: "",
        VERIFY_URL: "",
        RATIO_URL: "",
        HISTORY_URL: "",
        BACKPACK_URL: "",
        MEMBER_URL: "",
        SOCKET_URL: "",
        SOCKET_URL2: "",
        CLICK_URL: "",
        MAIL_URL: "",
        RANKING_URL: "",
        RANKING_URL2: "",
        SUBAGENTSERVICE_URL: "",
        NOTIFY_URL: "",
        ACTION_URL: "",
        // WEB_TEST_URL: "",
        WEB_URL: ""
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnvironmentConfigTestPath.ts", ['cc', './EnvironmentConfig.ts'], function (exports) {
  'use strict';

  var cclegacy, EnvironmentConfig;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      EnvironmentConfig = module.default;
    }],
    execute: function () {
      exports('SetPath', SetPath);

      cclegacy._RF.push({}, "1225fqB5sBKxbjCPREjJFB5", "EnvironmentConfigTestPath", undefined);

      function SetPath() {
        EnvironmentConfig.TEST_PATH = {
          GAME_SERVER_URL: "https://test-wbslot-fd.jlfafafa1.com/",
          ERROR_URL: "https://test-wbslot-fd.jlfafafa1.com/webservice/event/error",
          WEBAPI_URL: "https://test-wb-api.jlfafafa2.com/",
          PHASE_URL: "https://test-wbslot-fd.jlfafafa1.com/webservice/event/trigger",
          VERIFY_URL: "https://test-wbslot-fd.jlfafafa1.com/webservice/event/assetUpdate",
          RATIO_URL: "https://test-wbgamerecord.jlfafafa3.com/Games/tmd/ingame/hall/slot/{{webName}}/index.aspx",
          HISTORY_URL: "https://test-wbgamerecord.jlfafafa3.com/ingame/index.aspx",
          BACKPACK_URL: "https://test-wbgamerecord.jlfafafa3.com/ingame/index.aspx?target=Backpack",
          MEMBER_URL: "https://test-wbgamerecord.jlfafafa3.com/ingame/index.aspx?target=Member",
          SOCKET_URL: "wss://test-wbslot-fd.jlfafafa1.com/lifeservice/ws",
          SOCKET_URL2: "wss://test-wbslot-fd.jlfafafa1.com/lifeservice/ws2",
          CLICK_URL: "https://test-wbslot-fd.jlfafafa1.com/webservice/event/user",
          MAIL_URL: "https://test-wbslot-fd.jlfafafa1.com/rankingservice/user/GetMailList",
          RANKING_URL: "https://test-wbslot-fd.jlfafafa1.com/rankingservice/user/GetRankingList",
          ACTION_URL: "https://test-wbgamerecord.jlfafafa3.com/action/transfer.aspx",
          WEB_URL: "https://{{uat}}wbgamerecord.{{domain}}.com/ingame/index.aspx?target={target}&lang={lang}&game={gameId}&token={token}",
          NOTIFY_URL: "",
          SUBAGENTSERVICE_URL: ""
        };
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ErrorMsgManager.ts", ['cc', './Define.ts', './MsgBox.ts', './Tools.ts'], function (exports) {
  'use strict';

  var cclegacy, Define, MsgBox, Tools;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6c401uy9P9MDb/lGhpNeWM8", "ErrorMsgManager", undefined);

      var ErrorMsgManager = exports('ErrorMsgManager', /*#__PURE__*/function () {
        function ErrorMsgManager() {
          this.m_cbs = null;

          if (ErrorMsgManager._instance) {
            throw new Error("Error: Instantiation failed: Use ErrorManager.getInstance() instead of new.");
          }

          ErrorMsgManager._instance = this;
        }

        ErrorMsgManager.GetInstance = function GetInstance() {
          if (!this._instance) {
            this._instance = new ErrorMsgManager();
          }

          return ErrorMsgManager._instance;
        };

        ErrorMsgManager.OnExit = function OnExit() {
          delete this._instance;
          this._instance = null;
        };

        var _proto = ErrorMsgManager.prototype;

        _proto.SetCb = function SetCb(setting) {
          this.m_cbs = setting;
        }
        /**
         * 負責處理錯誤訊息顯示
         * @param errorType Server給的Error編號
         * @param nowMoney 玩家目前財產
         * @param firstBet 第一階押注金額
         * @param serviceData Server給予的service資料
         */
        ;

        _proto.ShowSpinErr = function ShowSpinErr(errorType, nowMoney, firstBet, serviceData) {
          if (serviceData.ErrorMsg) {
            var _this$m_cbs;

            try {
              var errorMsg = JSON.parse(serviceData.ErrorMsg);
              MsgBox.getInstance().ShowMessageBox(errorMsg.message, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, Tools.CloseGameTab, Tools.GetErrorCode(Define.ErrorStatus.Game, errorType));
            } catch (error) {
              console.error(error);
            }

            (_this$m_cbs = this.m_cbs) == null ? void 0 : _this$m_cbs.StopCb == null ? void 0 : _this$m_cbs.StopCb(true);
          } else if (errorType == Define.GENERAL_RET.ERROR_GAME_NO_COIN) {
            var _this$m_cbs2;

            if (nowMoney < firstBet) {
              MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_MONEY_NOT_ENOUGH);
            } else {
              MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_MONEY_NOT_ENOUGH_DOWN_BET);
            }

            (_this$m_cbs2 = this.m_cbs) == null ? void 0 : _this$m_cbs2.StopCb == null ? void 0 : _this$m_cbs2.StopCb(true);
          } else if (errorType == Define.GENERAL_RET.ERROR_GAME_NO_COIN_SINGLE) {
            var _this$m_cbs3;

            MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_MONEY_NOT_ENOUGH, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, Tools.CloseGameTab, Tools.GetErrorCode(Define.ErrorStatus.Game, errorType));
            (_this$m_cbs3 = this.m_cbs) == null ? void 0 : _this$m_cbs3.StopCb == null ? void 0 : _this$m_cbs3.StopCb(true);
          } else if (errorType === Define.GENERAL_RET.ERROR_BUY_BONUS_CLOSED) {
            var _this$m_cbs4, _this$m_cbs5;

            MsgBox.getInstance().ShowMessageBox(Define.StringKey.BUY_BONUS_MSG_CLOSED);
            (_this$m_cbs4 = this.m_cbs) == null ? void 0 : _this$m_cbs4.StopCb == null ? void 0 : _this$m_cbs4.StopCb(true);
            (_this$m_cbs5 = this.m_cbs) == null ? void 0 : _this$m_cbs5.CloseMallCb == null ? void 0 : _this$m_cbs5.CloseMallCb();
          } else if (errorType === Define.GENERAL_RET.ERROR_BUY_BONUS_NO_COIN) {
            var _this$m_cbs6, _this$m_cbs7;

            MsgBox.getInstance().ShowMessageBox(Define.StringKey.BUY_BONUS_MSG_MONEY_NOT_ENOUGH);
            (_this$m_cbs6 = this.m_cbs) == null ? void 0 : _this$m_cbs6.StopCb == null ? void 0 : _this$m_cbs6.StopCb(true);
            (_this$m_cbs7 = this.m_cbs) == null ? void 0 : _this$m_cbs7.CloseMallCb == null ? void 0 : _this$m_cbs7.CloseMallCb();
          } else if (errorType === Define.GENERAL_RET.FREESPIN_ABNORMAL) {
            var _this$m_cbs8, _this$m_cbs9;

            MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_RELOGIN_SYNC);
            (_this$m_cbs8 = this.m_cbs) == null ? void 0 : _this$m_cbs8.StopCb == null ? void 0 : _this$m_cbs8.StopCb(true);
            (_this$m_cbs9 = this.m_cbs) == null ? void 0 : _this$m_cbs9.ResetFreeSpinCb == null ? void 0 : _this$m_cbs9.ResetFreeSpinCb(serviceData != null && serviceData.freeremain ? serviceData == null ? void 0 : serviceData.freeremain : 0);
          } else {
            var _this$m_cbs10;

            MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_SPIN_STATE_ERR, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, Tools.CloseGameTab, Tools.GetErrorCode(Define.ErrorStatus.Game, errorType));
            (_this$m_cbs10 = this.m_cbs) == null ? void 0 : _this$m_cbs10.StopCb == null ? void 0 : _this$m_cbs10.StopCb(false);
          }
        };

        return ErrorMsgManager;
      }());
      ErrorMsgManager._instance = new ErrorMsgManager();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EvtReceiver.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, log, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      Component = module.Component;
    }],
    execute: function () {
      var _class;

      cclegacy._RF.push({}, "9cd57oopkhBmZJ5o4EZK1tk", "EvtReceiver", undefined);

      var ccclass = _decorator.ccclass;
      var EvtReceiver = exports('default', ccclass(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EvtReceiver, _Component);

        function EvtReceiver() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.m_callback = void 0;
          return _this;
        }

        EvtReceiver.Pack = function Pack(n, cb) {
          n.addComponent(EvtReceiver);
          n.getComponent(EvtReceiver).SetCallback(cb);
        };

        var _proto = EvtReceiver.prototype;

        _proto.EvtReciever = function EvtReciever(evtName) {
          log("AnimEvtReciever: ", evtName);

          if (this.m_callback) {
            this.m_callback(evtName);
          } else {
            log("callback沒有設定，無法處理event: ", evtName);
          }
        };

        _proto.triggerAnimationEvent = function triggerAnimationEvent(evtName) {
          log("triggerAnimationEvent: ", evtName);

          if (this.m_callback) {
            this.m_callback(evtName);
          } else {
            log("callback沒有設定，無法處理event: ", evtName);
          }
        };

        _proto.SetCallback = function SetCallback(cb) {
          this.m_callback = cb;
        };

        _proto.onDestroy = function onDestroy() {
          this.m_callback = null;
        };

        return EvtReceiver;
      }(Component)) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ExchangeNumComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './SoundManager.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Node, Component, Define, LocaleStringManager, SoundManager, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "10a13qqArRGFrckBNES/tNf", "ExchangeNumComponent", undefined);

      var NodeIdx;

      (function (NodeIdx) {
        NodeIdx[NodeIdx["On"] = 0] = "On";
        NodeIdx[NodeIdx["Off"] = 1] = "Off";
      })(NodeIdx || (NodeIdx = {}));

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ExchangeNumComponent = exports('default', (_dec = property({
        type: Label,
        tooltip: "數量"
      }), _dec2 = property({
        type: Label,
        tooltip: "剩餘數量"
      }), _dec3 = property({
        type: Node,
        tooltip: "+節點，[啟用，不可用]"
      }), _dec4 = property({
        type: Node,
        tooltip: "-節點，[啟用，不可用]"
      }), _dec5 = property({
        type: Label,
        tooltip: "不足提示"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ExchangeNumComponent, _Component);

        function ExchangeNumComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_numLabel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_leftNumLabel", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_addNodes", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_subNodes", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_hintLabel", _descriptor5, _assertThisInitialized(_this));

          _this.m_cell = null;
          _this.m_leftNum = 0;
          _this.m_num = 1;
          _this.m_changeTimes = 0;
          _this.m_changeNumCb = null;
          return _this;
        }

        var _proto = ExchangeNumComponent.prototype;

        _proto.Init = function Init(left, cell, changeNumCb) {
          this.m_cell = cell;
          this.m_leftNum = left;
          this.m_changeNumCb = changeNumCb;
          Tools.SetFont(this.m_leftNumLabel);
          Tools.SetFont(this.m_numLabel);
          this.m_leftNumLabel.string = this.m_changeTimes + "/" + this.m_leftNum.toString();
          this.m_numLabel.string = this.m_num.toString();
          this.UpdateState();
        };

        _proto.SetTxt = function SetTxt() {
          this.m_hintLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.DEBRIS_NOT_ENOUGH);
        };

        _proto.ResetNum = function ResetNum() {
          this.m_num = 1;
          this.m_numLabel.string = this.m_num.toString();
          this.UpdateState();
        };

        _proto.DecreaseLeft = function DecreaseLeft(num) {
          this.m_changeTimes = num;
          this.m_leftNumLabel.string = this.m_changeTimes + "/" + this.m_leftNum.toString();
          this.UpdateState();
        };

        _proto.UpdateState = function UpdateState() {
          this.m_hintLabel.node.active = this.m_leftNum != 0 && !this.m_cell.CheckRecipe(1);
          var canAdd = this.m_cell.CheckRecipe(this.m_num + 1);

          if (this.m_changeTimes == this.m_leftNum || this.m_num + this.m_changeTimes == this.m_leftNum) {
            canAdd = false;
          }

          this.m_addNodes[NodeIdx.Off].active = !canAdd;
          this.m_addNodes[NodeIdx.On].active = canAdd;
          var canSub = this.m_num > 1;
          this.m_subNodes[NodeIdx.Off].active = !canSub;
          this.m_subNodes[NodeIdx.On].active = canSub;
        };

        _proto.OnAdd = function OnAdd() {
          var _this$m_changeNumCb;

          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
          this.m_num += 1;

          if (this.m_leftNum - this.m_changeTimes === 0) {
            this.m_num = 1;
          } else if (this.m_num > this.m_leftNum - this.m_changeTimes) {
            this.m_num = this.m_leftNum - this.m_changeTimes;
          } else if (!this.m_cell.CheckRecipe(this.m_num)) {
            this.m_num -= 1;
          }

          this.m_numLabel.string = this.m_num.toString();
          this.UpdateState();
          (_this$m_changeNumCb = this.m_changeNumCb) == null ? void 0 : _this$m_changeNumCb.call(this);
        };

        _proto.OnSub = function OnSub() {
          var _this$m_changeNumCb2;

          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
          this.m_num -= 1;

          if (this.m_leftNum <= 0) {
            this.m_num = this.m_leftNum;
          } else {
            if (this.m_num <= 1) {
              this.m_num = 1;
            }
          }

          this.m_numLabel.string = this.m_num.toString();
          this.UpdateState();
          (_this$m_changeNumCb2 = this.m_changeNumCb) == null ? void 0 : _this$m_changeNumCb2.call(this);
        };

        _createClass(ExchangeNumComponent, [{
          key: "LeftNum",
          get: function get() {
            return this.m_leftNum;
          }
        }, {
          key: "Num",
          get: function get() {
            return this.m_num;
          }
        }, {
          key: "ChangeTimes",
          get: function get() {
            return this.m_changeTimes;
          }
        }]);

        return ExchangeNumComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_numLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_leftNumLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_addNodes", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_subNodes", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_hintLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ExtraManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConnectionManager.ts', './Define.ts', './AppManager.ts', './LocaleStringManager.ts', './LocalStorageManager.ts', './SoundManager.ts', './TimeBool.ts', './Tools.ts', './ItemList.ts', './DailyMission.ts', './FloatView.ts', './JPManager.ts', './MHBManager.ts', './MsgBox.ts', './Rankboard.ts', './TrialView.ts', './VolatilityManager.ts', './BottombarManager.ts', './Discount.ts', './Features.ts', './IconSorter.ts', './ItemInfo.ts', './MayLike.ts', './DebrisBtn.ts', './ItemGet.ts', './ItemBall.ts', './FeaturesDemoSelectComponent.ts', './FeaturesDemoComponent.ts', './MissionBtn.ts', './NotificationManager.ts', './Protocol.ts', './ConnectManager.ts', './AutoShowManager.ts', './EnvironmentConfig.ts', './VipManager.ts', './GroupNode.ts', './BackpackManager.ts', './Wallet.ts', './SignInProtocol.ts', './gaiaProto.mjs_cjs=&original=.js', './GaiaManager.ts', './DebrisManager.ts', './DailyMissionManager.ts', './BuyBonusManager.ts', './TrialManager.ts', './IconBox.ts', './RookieHintManager.ts', './LevelManager.ts', './BuyBonusBtn.ts', './gaiaProto.js'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, v3, _decorator, Sprite, Label, SpriteAtlas, Node, Button, SpriteFrame, Prefab, RichText, ProgressBar, tween, instantiate, sys, TweenSystem, error, log, Animation, Widget, UITransform, ParticleSystem2D, UIRenderer, color, UIOpacity, find, Component, ConnectionManager, Define, AppManager, LocaleStringManager, LocalStorageManager, SoundManager, TimeBool, Tools, ItemList, EventType, FloatView, JPManager, MHBManager, MsgBox, Rankboard, TrialView, TrialInfo, TrialSignUp, TrialGiveUp, VolatilityManager, BottombarManager, SCALE_TIME, BigFavorUser, Discount, PageName, FeaturesView, IconSorter, ItemInfo, MayLike, DebrisBtn, ItemGet, ItemBall, FeaturesDemoSelectComponent, FeaturesDemoComponent, MissionBtn, NotificationManager, BackpackProtocol, ConnectManager, AutoShowManager, EnvironmentConfig, VipManager, GroupNode, backpackManager, walletManger, SignInReqData, gaiaManager, debrisManager, missionManager, buyBonusManager, trialManager, IconBox, IconBoxSeat, RookieHintManager, HintLevel, LevelManager, BuyBonusBtn, _cjsExports;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      v3 = module.v3;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      SpriteAtlas = module.SpriteAtlas;
      Node = module.Node;
      Button = module.Button;
      SpriteFrame = module.SpriteFrame;
      Prefab = module.Prefab;
      RichText = module.RichText;
      ProgressBar = module.ProgressBar;
      tween = module.tween;
      instantiate = module.instantiate;
      sys = module.sys;
      TweenSystem = module.TweenSystem;
      error = module.error;
      log = module.log;
      Animation = module.Animation;
      Widget = module.Widget;
      UITransform = module.UITransform;
      ParticleSystem2D = module.ParticleSystem2D;
      UIRenderer = module.UIRenderer;
      color = module.color;
      UIOpacity = module.UIOpacity;
      find = module.find;
      Component = module.Component;
    }, function (module) {
      ConnectionManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      AppManager = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      LocalStorageManager = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      TimeBool = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      ItemList = module.default;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      FloatView = module.default;
    }, function (module) {
      JPManager = module.default;
    }, function (module) {
      MHBManager = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      Rankboard = module.default;
    }, function (module) {
      TrialView = module.default;
      TrialInfo = module.TrialInfo;
      TrialSignUp = module.TrialSignUp;
      TrialGiveUp = module.TrialGiveUp;
    }, function (module) {
      VolatilityManager = module.default;
    }, function (module) {
      BottombarManager = module.default;
      SCALE_TIME = module.SCALE_TIME;
      BigFavorUser = module.BigFavorUser;
    }, function (module) {
      Discount = module.default;
      PageName = module.PageName;
    }, function (module) {
      FeaturesView = module.default;
    }, function (module) {
      IconSorter = module.default;
    }, function (module) {
      ItemInfo = module.default;
    }, function (module) {
      MayLike = module.default;
    }, function (module) {
      DebrisBtn = module.default;
    }, function (module) {
      ItemGet = module.default;
    }, function (module) {
      ItemBall = module.default;
    }, function (module) {
      FeaturesDemoSelectComponent = module.default;
    }, function (module) {
      FeaturesDemoComponent = module.default;
    }, function (module) {
      MissionBtn = module.default;
    }, function (module) {
      NotificationManager = module.default;
    }, function (module) {
      BackpackProtocol = module.default;
    }, function (module) {
      ConnectManager = module.default;
    }, function (module) {
      AutoShowManager = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      VipManager = module.default;
    }, function (module) {
      GroupNode = module.default;
    }, function (module) {
      backpackManager = module.backpackManager;
    }, function (module) {
      walletManger = module.walletManger;
    }, function (module) {
      SignInReqData = module.SignInReqData;
    }, null, function (module) {
      gaiaManager = module.gaiaManager;
    }, function (module) {
      debrisManager = module.debrisManager;
    }, function (module) {
      missionManager = module.missionManager;
    }, function (module) {
      buyBonusManager = module.buyBonusManager;
    }, function (module) {
      trialManager = module.trialManager;
    }, function (module) {
      IconBox = module.default;
      IconBoxSeat = module.IconBoxSeat;
    }, function (module) {
      RookieHintManager = module.RookieHintManager;
      HintLevel = module.HintLevel;
    }, function (module) {
      LevelManager = module.default;
    }, function (module) {
      BuyBonusBtn = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _dec46, _dec47, _dec48, _dec49, _dec50, _dec51, _dec52, _dec53, _dec54, _dec55, _dec56, _dec57, _dec58, _dec59, _dec60, _dec61, _dec62, _dec63, _dec64, _dec65, _dec66, _dec67, _dec68, _dec69, _dec70, _dec71, _dec72, _dec73, _dec74, _dec75, _dec76, _dec77, _dec78, _dec79, _dec80, _dec81, _dec82, _dec83, _dec84, _dec85, _dec86, _dec87, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _descriptor41, _descriptor42, _descriptor43, _descriptor44, _descriptor45, _descriptor46, _descriptor47, _descriptor48, _descriptor49, _descriptor50, _descriptor51, _descriptor52, _descriptor53, _descriptor54, _descriptor55, _descriptor56, _descriptor57, _descriptor58, _descriptor59, _descriptor60, _descriptor61, _descriptor62, _descriptor63, _descriptor64, _descriptor65, _descriptor66, _descriptor67, _descriptor68, _descriptor69, _descriptor70, _descriptor71, _descriptor72, _descriptor73, _descriptor74, _descriptor75, _descriptor76, _descriptor77, _descriptor78, _descriptor79, _descriptor80, _descriptor81, _descriptor82, _descriptor83, _descriptor84, _descriptor85, _descriptor86, _descriptor87, _class3;

      cclegacy._RF.push({}, "4c2ffmx6GBLjoLuSbIdXAw7", "ExtraManager", undefined);

      var LoadCommonItemCb = function LoadCommonItemCb(key, cb) {
        this.key = "";
        this.cb = null;
        this.key = key;
        this.cb = cb;
      };

      var NEW_ITEM_EFT = "Astt/%s/backpack/Img/ItemEft";
      var RankBoardPrefab = "Astt/%s/rankboard/Prefab/Ranking";
      var RankBtnPrefab = "Astt/%s/rankboard/Prefab/Ranking_IconBtn";
      var LocaleImgName = {
        AutoPlay: "BottomBar_AutoSpin",
        Bet: "BottomBar_Bet",
        ItemBet: "img_itembet_label",
        FreeSpins_02: "FreeSpins_02",
        Balance: "img_blance_label",
        Spin: "BottomBar_Spin",
        SpinStop_b: "BottomBar_Stop",
        SpinStop: "BottomBar_Stop",
        AutoStop: "BottomBar_AutoStop",
        Win: "img_win_label",
        AutoPlayTittle: "img_hosting_label",
        HostingAutoStop: "img_hosting_stop_label",
        FeaturesBtn: "img_features_label",
        TrialBtn: "TXT_WinMore",
        TrialCoin: "img_Trial_txt6",
        TrialBet: "ExperienceBet",
        FeaturesDemo_btn: "img_feature",
        FeaturesDemo_Win: "img_demo_win",
        FeaturesDemo_bet: "img_demo_bet",
        FeaturesDemoMode: "img_demo_mode",
        FeaturesDemoReal: "img_real_mode",
        FeaturesDemoPlay: "img_F_list",
        FeaturesGoRealDes: "img_back_real",
        FeaturesMenuDes: "img_back_feature",
        DemoMode: "demomode01",
        ReplayStartSprite: "replayer",
        ReplayEndSprite: "replayerend",
        ReplayMode: "bigwin_mode01",
        ReplayBalanceSprite: "bigwin_mode03",
        ReplayBetSprite: "bigwin_mode02",
        ReplayWinSprite: "bigwin_mode04"
      };
      var BackpackBtnAniTime = 1.5;
      var BackpackPrefabPath = {
        ORG: "Astt/%s/backpack/Prefab/Backpack",
        Path3: "/Astt/%s/backpack/Prefab/Backpack"
      };
      var FEATURES_DEMO_BTN_POS = [v3(0, -15), v3(0, -77), v3(0, -139), v3(0, -201), v3(0, -263)];
      var FEATURE_TIMES = 3;
      var BigFavorState = [];
      var CloseLineCode = [4801, 5101, 1];
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ExtraManager = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "押注金額文字圖"
      }), _dec2 = property({
        type: Label,
        tooltip: "押注金額文字"
      }), _dec3 = property({
        type: Label,
        tooltip: "押注金額文字"
      }), _dec4 = property({
        type: Label,
        tooltip: "押注金額文字"
      }), _dec5 = property({
        type: SpriteAtlas,
        tooltip: "共用合圖"
      }), _dec6 = property([Node]), _dec7 = property([Node]), _dec8 = property({
        type: Node,
        tooltip: "FloatView按鈕節點"
      }), _dec9 = property({
        type: Button,
        tooltip: "背包按鈕"
      }), _dec10 = property({
        type: Node,
        tooltip: "背包紅點"
      }), _dec11 = property({
        type: Sprite,
        tooltip: "背包圖示"
      }), _dec12 = property({
        type: Node,
        tooltip: "使用道具卡定位"
      }), _dec13 = property({
        type: SpriteFrame,
        tooltip: "Jili 卡"
      }), _dec14 = property({
        type: Prefab,
        tooltip: "取得道具卡"
      }), _dec15 = property({
        type: Prefab,
        tooltip: "取得道具卡"
      }), _dec16 = property({
        type: Button,
        tooltip: "特色按鈕"
      }), _dec17 = property({
        type: Sprite,
        tooltip: "選單文字"
      }), _dec18 = property({
        type: Button,
        tooltip: "返回真錢"
      }), _dec19 = property({
        type: Sprite,
        tooltip: "返回真錢文字"
      }), _dec20 = property({
        type: Sprite,
        tooltip: "選項"
      }), _dec21 = property({
        type: Node,
        tooltip: "特色遊玩遮罩"
      }), _dec22 = property({
        type: Node,
        tooltip: "反回真錢提示"
      }), _dec23 = property({
        type: Node,
        tooltip: "表演提示"
      }), _dec24 = property({
        type: Node,
        tooltip: "特色模式狀態提示"
      }), _dec25 = property({
        type: Sprite,
        tooltip: "特色模式-財產"
      }), _dec26 = property({
        type: Sprite,
        tooltip: "特色模式文字"
      }), _dec27 = property({
        type: Sprite,
        tooltip: "特色按鈕文字"
      }), _dec28 = property({
        type: Node,
        tooltip: "特色遊玩畫面根結點"
      }), _dec29 = property({
        type: Node,
        tooltip: "特色遊玩選項根結點"
      }), _dec30 = property({
        type: Node,
        tooltip: "排行榜按鈕根"
      }), _dec31 = property({
        type: Button,
        tooltip: "(改用動態載入)"
      }), _dec32 = property({
        type: Node,
        tooltip: "(改用動態載入)"
      }), _dec33 = property({
        type: Label,
        tooltip: "(改用動態載入)"
      }), _dec34 = property(Button), _dec35 = property(Node), _dec36 = property(Label), _dec37 = property(Button), _dec38 = property(Label), _dec39 = property({
        type: Button,
        tooltip: "關閉遊戲按鈕"
      }), _dec40 = property({
        type: Discount,
        tooltip: "優惠功能"
      }), _dec41 = property({
        type: Node,
        tooltip: "優惠按鈕根"
      }), _dec42 = property({
        type: Button,
        tooltip: "優惠按鈕(改用動態載入)"
      }), _dec43 = property({
        type: Node,
        tooltip: "百寶箱紅點(改用動態載入)"
      }), _dec44 = property({
        type: Node,
        tooltip: "百寶箱簽到提示(改用動態載入)"
      }), _dec45 = property({
        type: Button,
        tooltip: "優惠關閉按鈕(背景)"
      }), _dec46 = property({
        type: Button,
        tooltip: "優惠關閉按鈕"
      }), _dec47 = property({
        type: Button,
        tooltip: "大顆的收藏按鈕"
      }), _dec48 = property({
        type: MayLike,
        tooltip: "猜你喜歡介面"
      }), _dec49 = property(Node), _dec50 = property(Node), _dec51 = property(Sprite), _dec52 = property(RichText), _dec53 = property(Sprite), _dec54 = property(Sprite), _dec55 = property(Sprite), _dec56 = property(Sprite), _dec57 = property(Sprite), _dec58 = property(Sprite), _dec59 = property({
        type: Node,
        tooltip: "洗碼"
      }), _dec60 = property({
        type: Sprite,
        tooltip: "洗碼按鈕上文字(改用動態載入)"
      }), _dec61 = property({
        type: Button,
        tooltip: "介面開啟按鈕(改用動態載入)"
      }), _dec62 = property({
        type: ProgressBar,
        tooltip: "洗碼進度"
      }), _dec63 = property({
        type: Node,
        tooltip: "洗碼進度提示節點"
      }), _dec64 = property({
        type: Label,
        tooltip: "洗碼進度累積贏分提示"
      }), _dec65 = property({
        type: Label,
        tooltip: "洗碼進度累積贏分提示(不同顏色的底板)"
      }), _dec66 = property({
        type: Label,
        tooltip: "進度階段提示"
      }), _dec67 = property({
        type: RichText,
        tooltip: "體驗幣金額"
      }), _dec68 = property({
        type: Node,
        tooltip: "Fg內購按鈕根節點"
      }), _dec69 = property({
        type: Node,
        tooltip: "Fg內購跟節點"
      }), _dec70 = property({
        type: Node,
        tooltip: "Fg內購使用"
      }), _dec71 = property({
        type: Label,
        tooltip: "Fg內購使用剩餘次數"
      }), _dec72 = property({
        type: Sprite,
        tooltip: "Fg內購使用圖示"
      }), _dec73 = property({
        type: Sprite,
        tooltip: "Fg內購使用圖示文字"
      }), _dec74 = property({
        type: Node,
        tooltip: "BuyBonus動畫"
      }), _dec75 = property({
        type: Label,
        tooltip: "Buy Bonus單一卡價格"
      }), _dec76 = property({
        type: Label,
        tooltip: "Buy Bonus共花費金額"
      }), _dec77 = property({
        type: Label,
        tooltip: "Buy Bonus單一卡價格標題"
      }), _dec78 = property({
        type: Label,
        tooltip: "Buy Bonus共花費金額標題"
      }), _dec79 = property({
        type: Node,
        tooltip: "Buy Bonus花費金額資訊根"
      }), _dec80 = property({
        type: Button,
        tooltip: "(改用動態載入)"
      }), _dec81 = property({
        type: Sprite,
        tooltip: "(改用動態載入)"
      }), _dec82 = property(Sprite), _dec83 = property({
        type: Node,
        tooltip: "付費遊戲標籤節點:0.hot,1.event"
      }), _dec84 = property({
        type: Sprite,
        tooltip: "付費遊戲 Txt(改用動態載入)"
      }), _dec85 = property({
        type: SpriteFrame,
        tooltip: "FreeSpin bet Img(押注按鈕上的 FREE SPIN字樣)"
      }), _dec86 = property({
        type: IconBox,
        tooltip: "周邊機制ICON BOX"
      }), _dec87 = property({
        type: RookieHintManager,
        tooltip: "新手提示控制"
      }), ccclass(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ExtraManager, _Component);

        function ExtraManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_betSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betLabel", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_BMMbetLabel", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_APPbetLabel", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_commAtlas", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_topLeftNodes", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_topRightNodes", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_floatBaseNode", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_backpackBtn", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_backpackRp", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_backpackSprite", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_usingCardNode", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_jillCardSpriteFrame", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_getItemEft", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_getItemBall", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featuresBtn", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featuresDemoBtnTxt", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featuresGoRealBtn", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featuresGoRealBtnTxt", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featuresMenu", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featuresDemoView", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featuresGoRealDes", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featuresMenuDes", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featuresHint", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featuresDemoModeTxt", _descriptor25, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_demoModeTxt", _descriptor26, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featuresSprite", _descriptor27, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featuresDemoRootNode", _descriptor28, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featuresDemoSelectRootNode", _descriptor29, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rankingBtnRoot", _descriptor30, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rankingBtn", _descriptor31, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rankingAnim", _descriptor32, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rankingLabel", _descriptor33, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_dailyBtn", _descriptor34, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_dailyAnim", _descriptor35, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_dailyLabel", _descriptor36, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lobbyBtn", _descriptor37, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lobbyLable", _descriptor38, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_closeGameBtn", _descriptor39, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_discount", _descriptor40, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_discountBtnRoot", _descriptor41, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_discountBtn", _descriptor42, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_discountRedPointNode", _descriptor43, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_discountFreeGift", _descriptor44, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_discountBgCloseBtn", _descriptor45, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_discountCloseBtn", _descriptor46, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_favorBtn", _descriptor47, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_mayLikeView", _descriptor48, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_bigWinReplayMask", _descriptor49, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_bigWinReplayAni", _descriptor50, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_replayBetSprite", _descriptor51, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_replayBetValue", _descriptor52, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_replayStartAniSprite", _descriptor53, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_replayEndAniSprite", _descriptor54, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_replayModeTxt", _descriptor55, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_replayBetTxt", _descriptor56, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_replayWinTxt", _descriptor57, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_replayBalanceTxt", _descriptor58, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_trial", _descriptor59, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_trialSprite", _descriptor60, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_trialBtn", _descriptor61, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_trialProgressBar", _descriptor62, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_trialProgressHintNode", _descriptor63, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_trialTotalWinLabel", _descriptor64, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_trialTotalWinLabel_Under", _descriptor65, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_trialProgressLvlLabel", _descriptor66, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_trialCoinLabel", _descriptor67, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusRoot", _descriptor68, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusView", _descriptor69, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusUsed", _descriptor70, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusRemainTimes", _descriptor71, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusIcon", _descriptor72, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusIconTxt", _descriptor73, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusAnimNode", _descriptor74, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusNumPrice", _descriptor75, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusCumulativePrice", _descriptor76, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusPriceTitle", _descriptor77, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusCumulativePriceTitle", _descriptor78, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusPriceRoot", _descriptor79, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusBtn", _descriptor80, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusSprite", _descriptor81, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusTag", _descriptor82, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusTagNode", _descriptor83, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyBonusTxt", _descriptor84, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_FreeSpinBetImgSpriteFrame", _descriptor85, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_iconBox", _descriptor86, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rookieHintManager", _descriptor87, _assertThisInitialized(_this));

          _this.m_isLandscape = true;
          _this.m_isSmall = false;
          _this.m_isLow = false;
          _this.m_bottomBarManager = null;
          _this.m_localeSpriteAtlas = null;
          _this.m_topLeftIcon = null;
          _this.m_topRightIcon = null;
          _this.m_backpackNode = null;
          _this.m_isOpenBackpackOnLoading = false;
          _this.m_isBackpackIconAni = false;
          _this.m_itemInfo = void 0;
          _this.m_backpackExcTimer = void 0;
          _this.m_loadCommonItemCbs = new Array();
          _this.m_getItem = null;
          _this.m_featuresView = null;
          _this.m_selectFDFunc = null;
          _this.m_closeFDNotifyCb = null;
          _this.m_featuresNum = 0;
          _this.m_oriBet = 0;
          _this.m_demoBetIdx = 0;
          _this.m_demoBetIdxError = false;
          _this.m_hasUnshow = false;
          _this.m_isFeaturesDemo = false;
          _this.m_isFeaturesDemoLoaded = false;
          _this.m_isInitFreaturesDemo = false;
          _this.m_haveFeaturesDemoMode = false;
          _this.m_isFeaturesDemoMode = false;
          _this.m_isNowInDemoMenu = false;
          _this.m_lockAutoEnableByFeatures = false;
          _this.m_featuresDemoIsPlay = [];
          _this.m_featuresDemoPlayLimit = [1, 1, 1, 1, 1];
          _this.m_featuresDemoBtns = new Array();
          _this.m_isFeaturesDemoBtnsLoaded = [false, false, false, false, false];
          _this.m_isFirstFeaturesDemo = false;
          _this.m_canPlayFeaturesDemo = false;
          _this.m_featuresDemoTimer = void 0;
          _this.m_featuresDemoSelectComp = null;
          _this.m_featuresDemoComp = null;
          _this.m_rankingView = void 0;
          _this.m_setCanAutoShowRankboardUI = false;
          _this.m_discountSprite = null;
          _this.m_canShowReplay = false;
          _this.m_isNowReplay = false;
          _this.m_originalDollarSymbol = "";
          _this.m_replayUnit = 1;
          _this.m_depositBtn = null;
          _this.m_isInTrial = false;
          _this.m_trialCoins = 0;
          _this.m_nowTrialTotalWin = 0;
          _this.m_nowTrialTotalBet = 0;
          _this.m_isBuyBonusOpen = false;
          _this.m_buyFGTxt = null;
          _this.m_openAllBtnCb = null;
          _this.m_closeAllBtnCb = null;
          _this.m_debrisNode = null;
          _this.m_debrisBtn = null;
          _this.needSortBtn = true;
          _this.m_lobbyBtnPosAnim = null;
          _this.m_cumulativePaid = 0;
          _this.m_CustomWidgetAmerica = {};
          return _this;
        }

        var _proto = ExtraManager.prototype;

        _proto.GetCustomWidgetAmerica = function GetCustomWidgetAmerica(key, diraction) {
          if (this.m_CustomWidgetAmerica[key]) {
            return this.m_CustomWidgetAmerica[key][Number(diraction)];
          } else {
            return null;
          }
        };

        _proto.SetCustomWidgetAmerica = function SetCustomWidgetAmerica(key, value) {
          // diraction : [ Define.DIRACTION.S , Define.DIRACTION.L ]
          return this.m_CustomWidgetAmerica[key] = value;
        };

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          Define.IS_DEMO = Boolean(Tools.GetLinkParameterByName("demo"));
          this.m_backpackExcTimer = new TimeBool();
          this.m_backpackExcTimer.UseDT(true);
          this.m_featuresDemoTimer = new TimeBool();
          this.m_topLeftIcon = new IconSorter(["iconBox", "mission", "jackpot", "musthitby", "ranking"], this.m_topLeftNodes); //this.m_topRightIcon = new IconSorter( [ Define.CbKey.Discount, Define.CbKey.Trial, Define.CbKey.Favor ], this.m_topRightNodes );

          this.m_topRightIcon = new IconSorter([Define.CbKey.BuyBonus, Define.CbKey.Discount, Define.CbKey.Debris, Define.CbKey.Favor, Define.CbKey.Trial, Define.CbKey.Deposit], this.m_topRightNodes);
          this.m_bottomBarManager = this.node.getComponent(BottombarManager);
          this.m_backpackBtn.node.active = false; //MARK設定創建

          backpackManager.CreateViewCb = function (plistPath, reqDataFunc, reqUseFunc, reqMsgFunc, reqCleanMsgFunc, reqAlltabDataFunc, isLockNum) {
            _this2.BackpackInit(plistPath, reqDataFunc, reqUseFunc, reqMsgFunc, reqCleanMsgFunc, reqAlltabDataFunc, isLockNum);
          };

          debrisManager.CreateViewCb = function (activityCb, playerInfoCb, getDebrisCb, exchangeCb) {
            _this2.DebrisInit(activityCb, playerInfoCb, getDebrisCb, exchangeCb);
          };

          missionManager.CreateViewCb = function (plistPath, getNowMission, compCb) {
            _this2.DailyMissionInit(plistPath, getNowMission, compCb);
          };

          buyBonusManager.CreateViewCb = function (info, startCb, endCb) {
            _this2.BuyBonusInit(info, startCb, endCb);
          };

          trialManager.CreateViewCb = function (gameCb, gameEndCb, gameChangeBetCb, infoCbOuter, signUpCbOuter, giveUpCbOuter) {
            // this.TrialViewInit( gameCb, gameEndCb, gameChangeBetCb, infoCbOuter, signUpCbOuter, giveUpCbOuter );
            _this2.LoadTrialBtn(gameCb, gameEndCb, gameChangeBetCb, infoCbOuter, signUpCbOuter, giveUpCbOuter);
          };

          if (
          /*Tools.IsTadaCasino &&*/
          this.m_iconBox) {
            this.m_iconBox.node.active = true;
            Tools.SetZIndex(this.m_iconBox.node, Define.BtnZOrder.ICONBOX); // this.m_iconBox.BtnAnim.play( "Clip_IconBox_Close" );

            this.m_topLeftIcon.AddIcon("iconBox", [this.m_iconBox.node]).Sort().Reorder();
            this.m_iconBox.node.getComponent(FloatView).ResetPosition();
            tween(this.m_iconBox.node).delay(0.5).call(function () {
              _this2.m_iconBox.node.active = false;
            }).start();
          }
        };

        _proto.start = function start() {
          var _this3 = this;

          if (this.m_discount) {
            this.m_discount.node.zIndex = Define.ZOrder.DISCOUNT;
          }

          if ((Define.IS_DEMO || this.m_bottomBarManager.IsGLIGames || this.m_bottomBarManager.IsBMMGames) && this.m_featuresBtn) {
            this.m_featuresBtn.node.active = false;

            if (this.m_featuresSprite) {
              this.m_featuresSprite.node.active = false;
            }
          } //  set Deposit btn


          if (Define.DEPOSIT_URL) {
            var path = Tools.GetFilePath(Define.DepositBtn);
            Define.CommonBundle.load(path, function (err, prefab) {
              _this3.m_depositBtn = instantiate(prefab);

              _this3.m_floatBaseNode.addChild(_this3.m_depositBtn);

              _this3.m_topRightIcon.AddIcon(Define.CbKey.Deposit, [_this3.m_depositBtn]).Sort().Reorder();

              if (_this3.m_discountBtn) {
                _this3.m_discountBtnRoot.getComponent(FloatView).ResetPosition();
              }

              if (_this3.m_favorBtn) {
                _this3.m_favorBtn.node.getComponent(FloatView).ResetPosition();
              }

              if (_this3.m_debrisNode) {
                _this3.m_debrisNode.getComponent(FloatView).ResetPosition();
              }

              if (_this3.m_trialBtn) {
                _this3.m_trialBtn.node.getComponent(FloatView).ResetPosition();
              }

              if (_this3.m_buyBonusRoot) {
                _this3.m_buyBonusRoot.getComponent(FloatView).ResetPosition();
              }

              _this3.m_depositBtn.getComponent(FloatView).ResetPosition();

              _this3.m_depositBtn.on(Node.EventType.TOUCH_START, function (event) {
                // event.stopPropagationImmediate();
                // event.stopPropagation();
                event.propagationImmediateStopped = true;
                event.propagationStopped = true;

                if (_this3.m_bottomBarManager.CurrentTouchName == null && _this3.m_lobbyBtn.interactable) {
                  _this3.m_bottomBarManager.CurrentTouchName = event.target.name;

                  if (_this3.m_depositBtn.getComponent(FloatView)) {
                    _this3.m_depositBtn.getComponent(FloatView).OnTouchStart(event.getUILocation());
                  }
                } else {
                  if (event.target && event.target.active == false) {
                    _this3.m_bottomBarManager.CurrentTouchName = event.target.name;
                  }
                }
              });

              _this3.m_depositBtn.on(Node.EventType.TOUCH_MOVE, function (event) {
                if (_this3.m_bottomBarManager.CurrentTouchName == event.target.name) {
                  _this3.m_bottomBarManager.CurrentTouchName = event.target.name;

                  if (_this3.m_depositBtn.getComponent(FloatView)) {
                    _this3.m_depositBtn.getComponent(FloatView).OnTouchMove(event.getUILocation());
                  }
                } else {
                  if (event.target && event.target.active == false) {
                    _this3.m_bottomBarManager.CurrentTouchName = event.target.name;
                  }
                }
              });

              _this3.m_depositBtn.on(Node.EventType.TOUCH_CANCEL, function (event) {
                if (_this3.m_bottomBarManager.CurrentTouchName == event.target.name) {
                  _this3.m_bottomBarManager.CurrentTouchName = null;
                }
              });

              _this3.m_depositBtn.on(Node.EventType.TOUCH_END, function (event) {
                if (_this3.m_bottomBarManager.CurrentTouchName != event.target.name) {
                  return;
                }

                _this3.m_bottomBarManager.CurrentTouchName = null;

                var cb = function cb() {
                  var target = sys.OS.IOS && Tools.IsNativeWebView() ? "_self" : "_blank";
                  window.open(Define.DEPOSIT_URL, target);
                };

                if (_this3.m_depositBtn.getComponent(FloatView)) {
                  _this3.m_depositBtn.getComponent(FloatView).OnTouchEnd(event.getUILocation(), cb);
                } else {
                  cb();
                }
              });
            });
          } //if ( AppManager.LobbyBridge )


          if (sys.isNative || AppManager.LobbyData || this.AppWebViewCheck()) {
            if (!sys.isNative && AppManager.LobbyData && !AppManager.LobbyData.backUrl) {
              // LobbyData沒有backUrl 不開啟返回大廳按鈕
              return;
            }

            this.m_lobbyBtn.node.active = true; // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )

            if (this.m_iconBox) {
              var _cb = function _cb() {
                _this3.m_iconBox.CloseMenu();
              };

              AppManager.SetOpenSkyBar(_cb);
            }

            if (this.m_lobbyLable) {
              // this.m_topLeftIcon.AddIcon( "lobby", [ this.m_lobbyBtn.node ] ).Sort().Reorder();
              if (LocaleStringManager.CurrLang == "cn") {
                this.m_lobbyLable.string = "返回大廳";
              } else {
                this.m_lobbyLable.string = "Back to lobby";
              } // this.m_rankingBtn.node.getComponent( FloatView ).ResetPosition();
              // this.m_dailyBtn.node.getComponent( FloatView ).ResetPosition();


              JPManager.GetInstance().ResetPosition();
              MHBManager.GetInstance().ResetPosition();
            }

            if (AppManager.LobbyData && AppManager.LobbyData.isHideMember) {
              TweenSystem.instance.ActionManager.removeAllActionsFromTarget(this.m_floatBaseNode);
              this.m_floatBaseNode.active = false;

              if (this.m_backpackBtn) {
                this.m_backpackBtn.node.active = false;
              }
            }
          }

          if (this.m_closeGameBtn && Number(Define.API_ID) == Define.MGAApi) {
            this.m_closeGameBtn.node.active = true;
          }

          if (this.m_rookieHintManager) {
            // let hintTargets: Node[] =
            //     [
            //         this.m_bottomBarManager.SpinBtn.node.parent,
            //         this.m_bottomBarManager.BetBtn.node.parent,
            //         this.m_dailyBtn.node,
            //     ];
            this.m_rookieHintManager.SetTargetPosNode(this.m_bottomBarManager.SpinBtn.node.parent);
            this.m_rookieHintManager.SetTargetPosNode(this.m_bottomBarManager.BetBtn.node.parent);
          }
        };

        _proto.LoadDiscountBtn = function LoadDiscountBtn() {
          var _this4 = this;

          var path = Tools.GetFilePath(Define.DiscountBtn);
          Define.CommonBundle.load(path, function (err, prefab) {
            if (err) {
              error(err.message || err);
              _this4.LoadDiscountBtn;
            }

            var node = instantiate(prefab);

            if (
            /*Tools.IsTadaCasino &&*/
            _this4.m_iconBox) {
              _this4.m_iconBox.SetBtnSeat(node, IconBoxSeat.WinMore);

              _this4.OnRotation(_this4.m_isLandscape);

              _this4.m_discountBtnRoot.active = false;
            } else {
              _this4.m_discountBtnRoot.addChild(node);
            }

            _this4.m_discountBtn = node.getComponent(Button);
            _this4.m_discountRedPointNode = node.getChildByName("Bg").getChildByName("RedSpot");
            _this4.m_discountFreeGift = node.getChildByName("icon_free_gift");
            _this4.m_discountSprite = node.getChildByName("IconName").getComponent(Sprite);

            if (_this4.m_localeSpriteAtlas) {
              _this4.m_discountSprite.spriteFrame = _this4.m_localeSpriteAtlas.getSpriteFrame("WinMore_IconName");
            } // 推薦遊戲


            if (_this4.m_discountBtn) {
              log(" this.m_discountBtn 1 ", _this4.m_discountBtn.interactable, _this4.m_discount);

              _this4.m_discountBtn.node.on(Node.EventType.TOUCH_START, function (event) {
                log(" this.m_discountBtn 3 ", _this4.m_bottomBarManager.CurrentTouchName); // event.stopPropagationImmediate();
                // event.stopPropagation();

                event.propagationImmediateStopped = true;
                event.propagationStopped = true;

                if (_this4.m_bottomBarManager.CurrentTouchName == null && _this4.m_discountBtn.interactable) {
                  _this4.m_bottomBarManager.CurrentTouchName = event.target.name; // this.m_discountBtn.node.getComponent( FloatView ).OnTouchStart( event.getLocation() );

                  if (
                  /*!Tools.IsTadaCasino*/
                  !_this4.m_iconBox) {
                    _this4.m_discountBtnRoot.getComponent(FloatView).OnTouchStart(event.getUILocation());
                  }
                } else {
                  if (event.target && event.target.active == false) {
                    _this4.m_bottomBarManager.CurrentTouchName = event.target.name;
                  }
                }
              });

              _this4.m_discountBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
                if (_this4.m_bottomBarManager.CurrentTouchName == event.target.name) {
                  _this4.m_bottomBarManager.CurrentTouchName = null;
                }
              });

              _this4.m_discountBtn.node.on(Node.EventType.TOUCH_MOVE, function (event) {
                if (_this4.m_bottomBarManager.CurrentTouchName == event.target.name) {
                  _this4.m_bottomBarManager.CurrentTouchName = event.target.name; // this.m_discountBtn.node.getComponent( FloatView ).OnTouchMove( event.getLocation() );

                  if (
                  /*!Tools.IsTadaCasino*/
                  !_this4.m_iconBox) {
                    _this4.m_discountBtnRoot.getComponent(FloatView).OnTouchMove(event.getUILocation());
                  }
                } else {
                  if (event.target && event.target.active == false) {
                    _this4.m_bottomBarManager.CurrentTouchName = event.target.name;
                  }
                }
              });

              _this4.m_discountBtn.node.on(Node.EventType.TOUCH_END, function (event) {
                log(" this.m_discountBtn 4 ", _this4.m_bottomBarManager.CurrentTouchName);

                if (_this4.m_bottomBarManager.CurrentTouchName != event.target.name) {
                  return;
                }

                _this4.m_bottomBarManager.CurrentTouchName = null;

                var cb = function cb() {
                  log(" this.m_discountBtn 2 ", _this4.m_discountBtn.interactable, _this4.m_discount);

                  if (_this4.m_discountBtn.interactable && _this4.m_discount) {
                    _this4.m_bottomBarManager.CloseAllMenu();

                    _this4.m_discount.ShowDiscountView();

                    ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.RECOMMEND_CLICK, Define.PHASE_RESULT.SUCCESS, _this4.m_isLandscape));
                  }
                }; // this.m_discountBtn.node.getComponent( FloatView ).OnTouchEnd( event.getLocation(), cb );


                if (
                /*!Tools.IsTadaCasino*/
                !_this4.m_iconBox) {
                  _this4.m_discountBtnRoot.getComponent(FloatView).OnTouchEnd(event.getUILocation(), cb);
                } else {
                  cb();
                }
              });
            }

            _this4.SetDiscountBtnState(!Define.IS_DEMO);
          });
        };

        _proto.AppWebViewCheck = function AppWebViewCheck() {
          var apiId = Number(Define.API_ID);

          if (window.top != window.self && apiId <= 300 && apiId >= 100) {
            return true;
          }

          return false;
        };

        _proto.update = function update(dt) {
          if (this.m_backpackExcTimer) {
            this.m_backpackExcTimer.Update(dt * 1000);

            if (this.m_backpackExcTimer.ToBool()) {
              this.PlayBackpackBtnAni();
              this.m_backpackExcTimer.Start(BackpackBtnAniTime * 1000);
            }
          }

          if (this.m_featuresDemoTimer.ToBool()) {
            this.m_featuresDemoTimer.Clear();
            ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.FEATURES_DEMO_IDLE, "", this.m_isLandscape));
            this.LeaveFeaturesDemoMsg();
          }

          if (this.m_discount) {
            this.m_discount.Process(dt);
          }

          debrisManager.Process(dt); // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {

          if (this.m_rankingView) {
            this.m_rankingView.UpdateActionTime_TADA();
          } // }

        };

        _proto.SetOpenCloseBtnCb = function SetOpenCloseBtnCb(openCb, closeCb) {
          this.m_openAllBtnCb = openCb;
          this.m_closeAllBtnCb = closeCb;
        };

        _proto.OnRotation = function OnRotation(isLandscape, isSmall, isLow) {
          var _this5 = this;

          if (isSmall === void 0) {
            isSmall = false;
          }

          if (isLow === void 0) {
            isLow = false;
          }

          this.m_isLandscape = isLandscape;
          this.m_isSmall = isSmall;
          this.m_isLow = isLow;
          backpackManager.OnRotation(isLandscape, isSmall);
          buyBonusManager.OnRotation(isLandscape);

          if (this.m_itemInfo) {
            this.m_itemInfo.OnRotation(this.m_isLandscape, isSmall);
          }

          if (this.m_featuresView) {
            this.m_featuresView.OnRotation(isLandscape);
          }

          if (this.m_discount) {
            this.m_discount.OnRotation(isLandscape);
          }

          if (this.m_rankingView) {
            this.m_rankingView.OnRotation(isLandscape, isSmall);
          }

          if (this.m_getItem) {
            if (isLandscape) {
              this.m_getItem.getComponent(Animation).play('Clip_Backpack_ItemCard_Get_Landscape');
            } else {
              this.m_getItem.getComponent(Animation).play('Clip_Backpack_ItemCard_Get_Portrait');
            }
          }

          for (var i = 0; i < this.m_topLeftNodes.length; i++) {
            var base = 110;
            var widget = this.m_topLeftNodes[i].getComponent(Widget);

            if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
              if (isLandscape) {
                widget.top = 63 + base * i;
                widget.left = 76;
              } else {
                widget.top = 60 + base * i;
                widget.left = 68;
              }
            } else if (
            /*( sys.isNative || AppManager.LobbyData )*/
            this.m_lobbyBtn.node.active && (Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str)) {
              // 為了lobbyback調整位置
              base = 100;

              if (isLandscape) {
                widget.top = 135 + base * i;
                widget.left = 76;
              } else {
                widget.top = 195 + base * i;
                widget.left = 63;
              }
            } else {
              if (isLandscape) {
                widget.top = 63 + base * i;
                widget.left = 76;
              } else {
                // widget.top = 129 + base * i;
                widget.top = 60 + base * i;
                widget.left = 68;
              }
            }
          }

          if (this.m_topLeftIcon) {
            this.scheduleOnce(function () {
              _this5.m_topLeftIcon.Reorder();
            }, 0);
          }

          for (var _i = 0; _i < this.m_topRightNodes.length; _i++) {
            var _base = 110;

            var _widget = this.m_topRightNodes[_i].getComponent(Widget);

            if (isLandscape) {
              // if ( this.m_buyBonusBtn && this.m_buyBonusBtn.node.active )
              // {
              //     widget.top = 170 + base * i;
              //     widget.right = 71;
              // }
              // else
              // {
              _widget.top = 60 + _base * _i;
              _widget.right = 76; // }
            } else {
              // if ( this.m_buyBonusBtn && this.m_buyBonusBtn.node.active )
              // {
              //     widget.top = 168 + base * i;
              //     widget.right = 73;
              // }
              // else
              // {
              _widget.top = 60 + _base * _i;
              _widget.right = 68; // }
            }
          }

          if (this.m_topRightIcon) {
            this.scheduleOnce(function () {
              _this5.m_topRightIcon.Reorder();
            }, 0);
          }

          var baseViewSize = this.m_bottomBarManager.FloatViewSize;
          var extraWidthRange = (baseViewSize.width - Define.DEFAULT_LANDSCAPE_SIZE.width) / 2;
          extraWidthRange = extraWidthRange > 0 ? extraWidthRange : 0;
          var extraHeightRange = (baseViewSize.height - Define.DEFAULT_LANDSCAPE_SIZE.width) / 2;
          extraHeightRange = extraHeightRange > 0 ? extraHeightRange : 0;

          if (this.m_backpackBtn) {
            var _widget2 = this.m_backpackBtn.node.getComponent(Widget);

            if (_widget2) {
              if (isLandscape) {
                // if ( Tools.Line === Define.LineSetting.americas )
                // {
                _widget2.bottom = 119;
                _widget2.left = 10.5;
                var bot = this.GetCustomWidgetAmerica(Define.WIDGET.BACKPAG_BOTTOM, isLandscape);

                if (bot) {
                  _widget2.bottom = bot;
                }

                var lft = this.GetCustomWidgetAmerica(Define.WIDGET.BACKPAG_LEFT, isLandscape);

                if (lft) {
                  _widget2.left = lft;
                } // }
                // else
                // {
                //     widget.bottom = 191;
                //     widget.left = 24;
                // }

              } else {
                // if ( isSmall )
                // {
                //     if ( isLow )
                //     {
                //         widget.bottom = 246 + extraHeightRange - 52;
                //     }
                //     else
                //     {
                //         widget.bottom = 246 + extraHeightRange;
                //     }
                // }
                // else
                // {
                // widget.bottom = 283 + extraHeightRange;
                // }
                // if ( Tools.Line === Define.LineSetting.americas )
                // {
                _widget2.bottom = 177 + Define.BAR_DIFF_HEIGHT;
                _widget2.left = 24;

                var _bot = this.GetCustomWidgetAmerica(Define.WIDGET.BACKPAG_BOTTOM, isLandscape);

                if (_bot) {
                  _widget2.bottom = _bot;
                }

                var _lft = this.GetCustomWidgetAmerica(Define.WIDGET.BACKPAG_LEFT, isLandscape);

                if (_lft) {
                  _widget2.left = _lft;
                } // }
                // else if ( Tools.Line === Define.LineSetting.street )
                // {
                //     widget.left = 8;
                // }
                // else
                // {
                //     widget.left = 14;
                // }

              }
            }
          } // if ( this.m_buyBonusRoot )
          // {
          //     let widget: Widget = this.m_buyBonusRoot.getComponent( Widget );
          //     let widget2: Widget = this.m_buyBonusUsed.getComponent( Widget );
          //     // if ( widget && widget2 &&
          //     //     ( Tools.Line === Define.LineSetting.americas ||
          //     //         Tools.Line === Define.LineSetting.americas_str ) )
          //     if ( widget && widget2 )
          //     {
          //         if ( isLandscape )
          //         {
          //             widget.top = 20;
          //             widget2.top = 63;
          //         }
          //         else
          //         {
          //             widget.top = 17;
          //             widget2.top = 60;
          //         }
          //     }
          // }


          if (this.m_lobbyBtn && (Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str)) {
            if (isLandscape) {
              // widget.top = 10;
              // widget.left = 20;
              this.m_lobbyBtn.node.setPosition(-495, 275);
            } else {
              // widget.top = 70;
              // widget.left = 10;
              this.m_lobbyBtn.node.setPosition(-257, 527);
            }
          }

          missionManager.OnRotation(isLandscape);
          debrisManager.OnRotation(isLandscape);

          if (this.m_featuresDemoComp) {
            this.m_featuresDemoComp.OnRotation(isLandscape);
          }

          if (this.m_floatBaseNode) {
            this.m_floatBaseNode.getComponent(UITransform).setContentSize(this.m_bottomBarManager.FloatViewSize);
            this.m_floatBaseNode.children.forEach(function (node) {
              if (node.getComponent(FloatView)) {
                node.getComponent(FloatView).SetDiffPos();
              }
            });
          }

          if (this.m_rookieHintManager) {
            this.m_rookieHintManager.OnRotation(isLandscape);
          }
        };

        _proto.GetDisplayValue = function GetDisplayValue(value) {
          return this.m_bottomBarManager.GetDisplayValue(value);
        };

        _proto.CheckLineCode = function CheckLineCode() {
          if (Define.LINE_CODE > 0 && Define.API_ID == "8") {
            for (var i = 0; i < CloseLineCode.length; i++) {
              if (CloseLineCode[i] === Define.LINE_CODE) {
                return true;
              }
            }
          }

          return false;
        };

        _proto.SetTxt = function SetTxt() {
          this.m_localeSpriteAtlas = !this.m_localeSpriteAtlas ? LocaleStringManager.GetInstance().GetCommonAtlas() : this.m_localeSpriteAtlas;

          if (this.BetLabel) {
            this.BetLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BET);
          }

          if (this.m_localeSpriteAtlas) {
            var lang = ""; //"_" + LocaleStringManager.CurrLang;

            var imgName = LocaleImgName; // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {
            //     imgName = LocaleImgName_TaDa;
            //     lang = "";
            // }

            if (this.m_betSprite) {
              this.m_betSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.Bet + lang);
            }

            if (this.m_featuresView) {
              this.m_featuresView.SetTxt();
            }

            if (this.m_featuresSprite) {
              this.m_featuresSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.FeaturesBtn + lang);
            }

            if (this.m_demoModeTxt) {
              this.m_demoModeTxt.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.DemoMode + lang);
            }

            if (this.m_featuresNum > 0) {
              for (var i = 0; i < this.m_featuresNum; i++) {
                if (this.m_featuresDemoBtns[i]) {
                  var txt = this.m_featuresDemoBtns[i].getChildByName("Txt").getComponent(Sprite);

                  var _lang = "_" + LocaleStringManager.CurrLang;

                  txt.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.FeaturesDemo_btn + (i + 1) + _lang);
                }
              }
            }

            if (this.m_featuresDemoBtnTxt) {
              this.m_featuresDemoBtnTxt.getComponent(Sprite).spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.FeaturesDemoPlay + lang);
            }

            if (this.m_featuresGoRealBtnTxt) {
              this.m_featuresGoRealBtnTxt.getComponent(Sprite).spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.FeaturesDemoReal + lang);
            }

            if (this.m_bigWinReplayMask) {
              this.m_replayBetSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.Bet + lang);
              this.m_replayStartAniSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.ReplayStartSprite + lang);
              this.m_replayEndAniSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.ReplayEndSprite + lang);
              this.m_replayModeTxt.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.ReplayMode + lang);
              this.m_replayBetTxt.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.ReplayBetSprite + lang);
              this.m_replayWinTxt.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.ReplayWinSprite + lang);
              this.m_replayBalanceTxt.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.ReplayBalanceSprite + lang);
            }

            if (this.m_discount) {
              this.m_discount.SetTxt(this.m_localeSpriteAtlas);
            }

            if (this.m_discountSprite) {
              this.m_discountSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame("WinMore_IconName");
            }

            if (this.m_mayLikeView) {
              this.m_mayLikeView.SetTxt();
            } // this.m_trialSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame( LocaleImgName.TrialBtn );
            // this.m_trialCoinSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame( LocaleImgName.TrialCoin + lang );
            // if ( this.m_trial )
            // {
            //     this.m_trial.SetTxt( this.m_localeSpriteAtlas );
            // }


            if (buyBonusManager.HasBuyBonus) {
              // if ( Tools.Line === Define.LineSetting.americas ||
              //     Tools.Line === Define.LineSetting.americas_str )
              // {
              buyBonusManager.SetSpriteAtlas(this.m_localeSpriteAtlas);
              this.m_buyBonusTxt.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame("BuyBonus_IconName"); // }
              // else
              // {
              //     let path = "Astt/framework/bottombar/Img/BuyFG/" + LocaleStringManager.CurrLang + "/Buy_FG_Txt01";
              //     Define.CommonBundle.load( path, cc.SpriteFrame,
              //         ( err: Error, spriteFrame: cc.SpriteFrame ) =>
              //         {
              //             if ( err ) { cc.error( err.message || err ); return; }
              //             this.m_buyFGTxt = spriteFrame;
              //             this.m_buyBonusView.SetSpriteAtlas( this.m_localeSpriteAtlas, spriteFrame );
              //             this.m_buyBonusTxt.spriteFrame = spriteFrame;
              //         }
              //     );
              // }
              // this.m_buyBonusView.SetSpriteAtlas( this.m_localeSpriteAtlas );
              // this.m_buyBonusTxt.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame( "Buy_FG_Txt01" );
            }

            if (VolatilityManager.GetInstance()) {
              VolatilityManager.GetInstance().SetTxt();
            }
          }

          debrisManager.SetTxt();

          if (this.m_featuresDemoComp) {
            this.m_featuresDemoComp.SetTxt();
          }

          if (this.m_featuresDemoSelectComp) {
            this.m_featuresDemoSelectComp.SetTxt();
          }

          if (sys.isNative || AppManager.LobbyData) {
            // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            if (this.m_lobbyLable) {
              // this.m_topLeftIcon.AddIcon( "lobby", [ this.m_lobbyBtn.node ] ).Sort().Reorder();
              if (LocaleStringManager.CurrLang == "cn") {
                this.m_lobbyLable.string = "返回大廳";
              } else {
                this.m_lobbyLable.string = "Back to lobby";
              }
            }
          }

          this.BuyBonusPriceTitle = LocaleStringManager.GetInstance().GetString(Define.StringKey.BUY_BONUS_DES_COST);

          if (!this.BuyBonusPriceTitle.font) {
            // this.m_totalPriceLabelTxt.font = Define.DefaultFont;
            Tools.SetFont(this.BuyBonusPriceTitle);
          }

          this.BuyBonusCumulativePriceTitle = LocaleStringManager.GetInstance().GetString(Define.StringKey.BUY_BONUS_DES_TOTAL_PAID);

          if (!this.BuyBonusCumulativePriceTitle.font) {
            // this.m_totalPriceLabelTxt.font = Define.DefaultFont;
            Tools.SetFont(this.BuyBonusCumulativePriceTitle);
          }
        }
        /**
         * 取得commAtlas2
         */
        ;

        _proto.GetCommAtlas = function GetCommAtlas() {
          return this.m_commAtlas;
        };

        _proto.SetNowBet = function SetNowBet(value, isFromBackpack, isFromBuyBonus) {
          if (isFromBackpack === void 0) {
            isFromBackpack = false;
          }

          if (isFromBuyBonus === void 0) {
            isFromBuyBonus = false;
          }

          this.m_bottomBarManager.SetNowBet(value, isFromBackpack, isFromBuyBonus);
        };

        _proto.GetNowBetValue = function GetNowBetValue() {
          return this.m_bottomBarManager.GetNowBetValue();
        };

        _proto.SetEnterFree = function SetEnterFree(autoLock) {
          this.m_bottomBarManager.SetEnterFree(autoLock);
        };

        _proto.SetLeaveFree = function SetLeaveFree(autoLock) {
          this.m_bottomBarManager.SetLeaveFree(autoLock);
        }
        /** 新增一個計時器每十秒才送一次 防止DDOS*/
        ;

        _proto.PushClickToBuffer = function PushClickToBuffer(type) {
          this.m_bottomBarManager.PushClickToBuffer(type);
        };

        _proto.CloseAllMenu = function CloseAllMenu() {
          this.m_bottomBarManager.CloseAllMenu();
        };

        _proto.GetChips = function GetChips() {
          return this.m_bottomBarManager.GetChips();
        };

        _proto.SetTouchEvent = function SetTouchEvent() {
          var _this6 = this; // 背包


          if (this.m_backpackBtn) {
            this.m_backpackBtn.node.on(Node.EventType.TOUCH_START, function (event) {
              // event.stopPropagationImmediate();
              // event.stopPropagation();
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this6.m_bottomBarManager.CurrentTouchName == null && _this6.m_backpackBtn.interactable) {
                _this6.m_bottomBarManager.CurrentTouchName = event.target.name; // this.m_bottomBarManager.SetScaleAction( this.m_backpackBtn.node, true, true );
              } else {
                if (event.target && event.target.active == false) {
                  _this6.m_bottomBarManager.CurrentTouchName = event.target.name;
                }
              }
            });
            this.m_backpackBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              // this.m_bottomBarManager.SetScaleAction( this.m_backpackBtn.node, false, true );
              if (_this6.m_bottomBarManager.CurrentTouchName == event.target.name) {
                _this6.m_bottomBarManager.CurrentTouchName = null;
              }
            });
            this.m_backpackBtn.node.on(Node.EventType.TOUCH_END, function (event) {
              // this.m_bottomBarManager.SetScaleAction( this.m_backpackBtn.node, false, true );
              if (_this6.m_bottomBarManager.CurrentTouchName != event.target.name) {
                return;
              }

              _this6.m_bottomBarManager.CurrentTouchName = null;

              if (_this6.m_backpackBtn.interactable) {
                _this6.m_bottomBarManager.CloseAllMenu();

                _this6.ShowBackpack();

                _this6.PushClickToBuffer(_this6.m_bottomBarManager.CLICK_BUFFER_TYPE.BACKPACK);

                SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
              }
            });
          } // 特色頁
          // this.m_featuresBtn.node.on( cc.Node.EventType.TOUCH_START, ( event: cc.Event.EventTouch ) =>
          // {
          //     event.stopPropagationImmediate();
          //     event.stopPropagation();
          //     if ( this.m_bottomBarManager.CurrentTouchName == null && this.m_featuresBtn.interactable )
          //     {
          //         this.m_bottomBarManager.CurrentTouchName = event.target.getName();
          //         cc.tween( this.m_featuresBtn.node )
          //             .to( SCALE_TIME, { scale: 0.9 } )
          //             .start();
          //     }
          //     else
          //     {
          //         if ( event.target && event.target.active == false )
          //         {
          //             this.m_bottomBarManager.CurrentTouchName = event.target.getName();
          //         }
          //     }
          // } );
          // this.m_featuresBtn.node.on( cc.Node.EventType.TOUCH_CANCEL, ( event ) =>
          // {
          //     cc.tween( this.m_featuresBtn.node )
          //         .to( SCALE_TIME, { scale: 1 } )
          //         .start();
          //     if ( this.m_bottomBarManager.CurrentTouchName == event.target.getName() )
          //     {
          //         this.m_bottomBarManager.CurrentTouchName = null;
          //     }
          // } );
          // this.m_featuresBtn.node.on( cc.Node.EventType.TOUCH_END, ( event ) =>
          // {
          //     cc.tween( this.m_featuresBtn.node )
          //         .to( SCALE_TIME, { scale: 1 } )
          //         .start();
          //     if ( this.m_bottomBarManager.CurrentTouchName != event.target.getName() )
          //     {
          //         return;
          //     }
          //     this.m_bottomBarManager.CurrentTouchName = null;
          //     if ( this.m_featuresBtn.interactable )
          //     {
          //         this.m_bottomBarManager.CloseAllMenu();
          //         this.m_featuresView.Show( this.m_isLandscape );
          //         SoundManager.getInstance().Play( Define.AudioClips.COMMON_BTN );
          //     }
          //     this.PushClickToBuffer( this.m_bottomBarManager.CLICK_BUFFER_TYPE.FEATURES );
          // } );
          //APP返回大廳


          if (this.m_lobbyBtn) {
            this.m_lobbyBtn.node.on(Node.EventType.TOUCH_START, function (event) {
              // event.stopPropagationImmediate();
              // event.stopPropagation();
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this6.m_bottomBarManager.CurrentTouchName == null && _this6.m_lobbyBtn.interactable) {
                _this6.m_bottomBarManager.CurrentTouchName = event.target.name;

                if (_this6.m_lobbyBtn.node.getComponent(FloatView)) {
                  _this6.m_lobbyBtn.node.getComponent(FloatView).OnTouchStart(event.getUILocation());
                }
              } else {
                if (event.target && event.target.active == false) {
                  _this6.m_bottomBarManager.CurrentTouchName = event.target.name;
                }
              }
            });
            this.m_lobbyBtn.node.on(Node.EventType.TOUCH_MOVE, function (event) {
              if (_this6.m_bottomBarManager.CurrentTouchName == event.target.name) {
                _this6.m_bottomBarManager.CurrentTouchName = event.target.name;

                if (_this6.m_lobbyBtn.node.getComponent(FloatView)) {
                  _this6.m_lobbyBtn.node.getComponent(FloatView).OnTouchMove(event.getUILocation());
                }
              } else {
                if (event.target && event.target.active == false) {
                  _this6.m_bottomBarManager.CurrentTouchName = event.target.name;
                }
              }
            });
            this.m_lobbyBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              if (_this6.m_bottomBarManager.CurrentTouchName == event.target.name) {
                _this6.m_bottomBarManager.CurrentTouchName = null;
              }
            });
            this.m_lobbyBtn.node.on(Node.EventType.TOUCH_END, function (event) {
              if (_this6.m_bottomBarManager.CurrentTouchName != event.target.name) {
                return;
              }

              _this6.m_bottomBarManager.CurrentTouchName = null;

              var cb = function cb() {
                var msgSetting = {
                  contextKey: LocaleStringManager.GetInstance().GetString(Define.StringKey.CONFIRM_BACK_TO_LOBBY),
                  titleKey: MsgBox.DEFAULT_TITLE_KEY,
                  showCancelBtn: false,
                  showConfirmBtn: true,
                  showCloseBtn: true,
                  confirmCB: function confirmCB() {
                    AppManager.LeaveGame(true);
                  }
                };
                MsgBox.getInstance().PushMessageBoxSetting(msgSetting); // if ( this.m_lobbyBtn.interactable )
                // {
                //     AppManager.LeaveGame( true );
                // }
              };

              if (_this6.m_lobbyBtn.node.getComponent(FloatView)) {
                _this6.m_lobbyBtn.node.getComponent(FloatView).OnTouchEnd(event.getUILocation(), cb);
              } else {
                cb();
              }
            });
          } // MGA關閉遊戲


          if (this.m_closeGameBtn) {
            this.m_closeGameBtn.node.on(Node.EventType.TOUCH_START, function (event) {
              // event.stopPropagationImmediate();
              // event.stopPropagation();
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this6.m_bottomBarManager.CurrentTouchName == null && _this6.m_closeGameBtn.interactable) {
                _this6.m_bottomBarManager.CurrentTouchName = event.target.name;
              } else {
                if (event.target && event.target.active == false) {
                  _this6.m_bottomBarManager.CurrentTouchName = event.target.name;
                }
              }
            });
            this.m_closeGameBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              if (_this6.m_bottomBarManager.CurrentTouchName == event.target.name) {
                _this6.m_bottomBarManager.CurrentTouchName = null;
              }
            });
            this.m_closeGameBtn.node.on(Node.EventType.TOUCH_END, function (event) {
              if (_this6.m_bottomBarManager.CurrentTouchName != event.target.name) {
                return;
              }

              _this6.m_bottomBarManager.CurrentTouchName = null;
              var msgSetting = {
                // contextKey: LocaleStringManager.GetInstance().GetString( Define.StringKey.CONFIRM_BACK_TO_LOBBY ),
                contextKey: "Are you sure to leave the game?",
                titleKey: MsgBox.DEFAULT_TITLE_KEY,
                showCancelBtn: true,
                showConfirmBtn: true,
                showCloseBtn: true,
                confirmCB: function confirmCB() {
                  Tools.CloseGameTab();
                }
              };
              MsgBox.getInstance().PushMessageBoxSetting(msgSetting);
              ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.CLOSE_GAME, Define.PHASE_RESULT.SUCCESS, _this6.m_isLandscape));
            });
          } // 百寶箱關閉(背景)


          if (this.m_discountBgCloseBtn) {
            this.m_discountBgCloseBtn.node.on(Node.EventType.TOUCH_START, function (event) {
              // event.stopPropagationImmediate();
              // event.stopPropagation();
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this6.m_bottomBarManager.CurrentTouchName == null && _this6.m_discountBgCloseBtn.interactable) {
                _this6.m_bottomBarManager.CurrentTouchName = event.target.name;
              } else {
                if (event.target && event.target.active == false) {
                  _this6.m_bottomBarManager.CurrentTouchName = event.target.name;
                }
              }
            });
            this.m_discountBgCloseBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              if (_this6.m_bottomBarManager.CurrentTouchName == event.target.name) {
                _this6.m_bottomBarManager.CurrentTouchName = null;
              }
            });
            this.m_discountBgCloseBtn.node.on(Node.EventType.TOUCH_END, function (event) {
              if (_this6.m_bottomBarManager.CurrentTouchName != event.target.name) {
                return;
              }

              _this6.m_bottomBarManager.CurrentTouchName = null;

              if (_this6.m_discountBgCloseBtn.interactable && _this6.m_discount) {
                _this6.m_discount.CloseDiscountView();

                AutoShowManager.GetInstance().AutoShowNext();
              }
            });
          } // 百寶箱關閉


          if (this.m_discountCloseBtn) {
            this.m_discountCloseBtn.node.on(Node.EventType.TOUCH_START, function (event) {
              // event.stopPropagationImmediate();
              // event.stopPropagation();
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this6.m_bottomBarManager.CurrentTouchName == null && _this6.m_discountCloseBtn.interactable) {
                _this6.m_bottomBarManager.CurrentTouchName = event.target.name;
                tween(_this6.m_discountCloseBtn.node).to(SCALE_TIME, {
                  scale: v3(0.9, 0.9, 1)
                }).start();
              } else {
                if (event.target && event.target.active == false) {
                  _this6.m_bottomBarManager.CurrentTouchName = event.target.name;
                }
              }
            });
            this.m_discountCloseBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              tween(_this6.m_discountCloseBtn.node).to(SCALE_TIME, {
                scale: v3(1, 1, 1)
              }).start();

              if (_this6.m_bottomBarManager.CurrentTouchName == event.target.name) {
                _this6.m_bottomBarManager.CurrentTouchName = null;
              }
            });
            this.m_discountCloseBtn.node.on(Node.EventType.TOUCH_END, function (event) {
              tween(_this6.m_discountCloseBtn.node).to(SCALE_TIME, {
                scale: v3(1, 1, 1)
              }).start();

              if (_this6.m_bottomBarManager.CurrentTouchName != event.target.name) {
                return;
              }

              _this6.m_bottomBarManager.CurrentTouchName = null;

              if (_this6.m_discountCloseBtn.interactable && _this6.m_discount) {
                _this6.m_discount.CloseDiscountView();

                AutoShowManager.GetInstance().AutoShowNext();
              }
            });
          } // 收藏


          if (this.m_favorBtn) {
            this.m_favorBtn.node.on(Node.EventType.TOUCH_START, function (event) {
              // event.stopPropagationImmediate();
              // event.stopPropagation();
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this6.m_bottomBarManager.CurrentTouchName == null && _this6.m_favorBtn.interactable) {
                _this6.m_bottomBarManager.CurrentTouchName = event.target.name;

                _this6.m_favorBtn.node.getComponent(FloatView).OnTouchStart(event.getUILocation());
              } else {
                if (event.target && event.target.active == false) {
                  _this6.m_bottomBarManager.CurrentTouchName = event.target.name;
                }
              }
            });
            this.m_favorBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              if (_this6.m_bottomBarManager.CurrentTouchName == event.target.name) {
                _this6.m_bottomBarManager.CurrentTouchName = null;
              }
            });
            this.m_favorBtn.node.on(Node.EventType.TOUCH_MOVE, function (event) {
              if (_this6.m_bottomBarManager.CurrentTouchName == event.target.name) {
                _this6.m_bottomBarManager.CurrentTouchName = event.target.name;

                _this6.m_favorBtn.node.getComponent(FloatView).OnTouchMove(event.getUILocation());
              } else {
                if (event.target && event.target.active == false) {
                  _this6.m_bottomBarManager.CurrentTouchName = event.target.name;
                }
              }
            });
            this.m_favorBtn.node.on(Node.EventType.TOUCH_END, function (event) {
              if (_this6.m_bottomBarManager.CurrentTouchName != event.target.name) {
                return;
              }

              _this6.m_bottomBarManager.CurrentTouchName = null;

              var cb = function cb() {
                for (var i = 0; i < BigFavorState.length; i++) {
                  if (BigFavorState[i]) {
                    switch (i) {
                      case BigFavorUser.BigWin:
                        if (_this6.m_favorBtn.interactable && _this6.m_discount) {
                          _this6.m_discount.AddFavor(Number(Define.NOW_GAME_ID), Define.BTN_CLICK_EVENT.BIG_FAVOR_ADD);
                        }

                        break;

                      case BigFavorUser.MayLike:
                        if (_this6.m_favorBtn.interactable && _this6.m_mayLikeView) {
                          _this6.m_mayLikeView.Show();
                        }

                        break;

                      default:
                        _this6.m_favorBtn.node.active = false;
                        break;
                    }

                    break;
                  }
                }
              };

              _this6.m_favorBtn.node.getComponent(FloatView).OnTouchEnd(event.getUILocation(), cb);
            });
          } // 洗碼bar條
          // this.m_trialProgressBar.node.on( cc.Node.EventType.TOUCH_START, ( event: cc.Event.EventTouch ) =>
          // {
          //     event.stopPropagationImmediate();
          //     event.stopPropagation();
          //     if ( this.m_bottomBarManager.CurrentTouchName == null && this.m_trialProgressBar.node.active )
          //     {
          //         this.m_bottomBarManager.CurrentTouchName = event.target.getName();
          //     }
          //     else
          //     {
          //         if ( event.target && event.target.active == false )
          //         {
          //             this.m_bottomBarManager.CurrentTouchName = event.target.getName();
          //         }
          //     }
          // } );
          // this.m_trialProgressBar.node.on( cc.Node.EventType.TOUCH_CANCEL, ( event ) =>
          // {
          //     if ( this.m_bottomBarManager.CurrentTouchName == event.target.getName() )
          //     {
          //         this.m_bottomBarManager.CurrentTouchName = null;
          //     }
          // } );
          // this.m_trialProgressBar.node.on( cc.Node.EventType.TOUCH_END, ( event ) =>
          // {
          //     if ( this.m_bottomBarManager.CurrentTouchName != event.target.getName() )
          //     {
          //         return;
          //     }
          //     this.m_bottomBarManager.CurrentTouchName = null;
          //     if ( this.m_trialProgressBar.node.active )
          //     {
          //         if ( this.m_trial )
          //         {
          //             this.m_trial.ShowTrialView();
          //         }
          //     }
          // } );

        };

        _proto.ShowUIButton = function ShowUIButton(show) {
          if (show === void 0) {
            show = true;
          }

          if (show) {
            if (backpackManager.HasBackpack) {
              this.m_backpackBtn.node.active = true;
              this.m_backpackSprite.node.active = true;
            }

            if (this.m_featuresBtn) {
              this.m_featuresBtn.node.active = false;
            }

            if (this.m_featuresSprite) {
              this.m_featuresSprite.node.active = false;
            }
          } else {
            if (backpackManager.HasBackpack) {
              this.m_backpackBtn.node.active = false;
              this.m_backpackSprite.node.active = false;
            }

            if (this.m_featuresBtn) {
              this.m_featuresBtn.node.active = false;
            }

            if (this.m_featuresSprite) {
              this.m_featuresSprite.node.active = false;
            }
          }
        };

        _proto.OpenWebView = function OpenWebView(url, tittle) {
          this.m_bottomBarManager.OpenWebView(url, tittle);
        };

        _proto.SendClickEvent = function SendClickEvent(eventID, eventStatus) {
          ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, eventID, eventStatus, this.m_isLandscape));
        } //====================背包====================

        /**
        * 初始化背包頁
        * @param plistPath 遊戲道具卡的plist(若遊戲無道具卡可填空字串)
        * @param reqDataFunc 取得背包道具卡的req
        * @param reqUseFunc 使用道具卡的req
        * @param reqMsgFunc 取得個人訊息的req
        * @param reqCleanMsgFunc 個人訊息已讀req
        * @param isLockNum  是否限制一次只能用一張
        */
        ;

        _proto.BackpackInit = function BackpackInit(plistPath, reqDataFunc, reqUseFunc, reqMsgFunc, reqCleanMsgFunc, reqAlltabDataFunc, isLockNum) {
          var _this7 = this;

          if (isLockNum === void 0) {
            isLockNum = false;
          }

          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CloseBackpack)) {
            return;
          }

          if (Define.IS_DEMO || this.CheckLineCode() || this.m_bottomBarManager.IsGLIGames || this.m_bottomBarManager.IsBMMGames) {
            this.m_backpackBtn.node.active = false;
            return;
          }

          Define.CAN_DROP_ITEM_CARD = true;
          this.LoadGetItemEftRes();
          this.LoadBackpackString(function () {
            backpackManager.AutoShow();
          });
          var usingCard = this.m_floatBaseNode.getChildByName(ExtraManager.UIName.USINGCARD);

          if (!this.m_isInTrial) {
            this.m_backpackBtn.node.active = true;
            this.m_backpackSprite.node.active = true;
          }

          var path = Tools.GetFilePath(BackpackPrefabPath.ORG); // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {
          //     path = Tools.GetFilePath( BackpackPrefabPath.Path3 );
          // }

          Define.CommonBundle.load(path, function (err, prefab) {
            if (err) {
              error(err.message || err);
              return;
            }

            _this7.m_backpackNode = instantiate(prefab);

            _this7.node.addChild(_this7.m_backpackNode);

            _this7.m_backpackNode.active = false;
            Tools.SetZIndex(_this7.m_backpackNode, Define.ZOrder.BACKPACK);
            backpackManager.Init(_this7, plistPath, _this7.m_usingCardNode ? _this7.m_usingCardNode : usingCard, _this7.m_backpackRp, reqDataFunc, reqUseFunc, reqMsgFunc, reqCleanMsgFunc, reqAlltabDataFunc);

            _this7.OnRotation(_this7.m_isLandscape, _this7.m_isSmall, _this7.m_isLow);

            if (_this7.m_isOpenBackpackOnLoading) {
              backpackManager.Show(_this7.m_isLandscape);
            }

            backpackManager.SetLockNumControl(isLockNum);

            _this7.BottomBarManager.sendTestLog(3001);
          });
        } // public BackpackNewInit( useCardCb: ( itemid: number, amount: number, ) => void )
        // {
        //     let reqUse = ( itemID, itemIdx, num ) =>
        //     {
        //         if ( Define.APP )
        //         {
        //             let req = new ItemReqData.ItemUseReq();
        //             req.info.aid = Number( Define.APP.GetAID() );
        //             req.info.token = Define.APP.GetAToken();
        //             req.info.itemindex = itemIdx;
        //             req.info.itemid = itemID;
        //             req.info.amount = num;
        //             if ( this.m_bottomBarManager && this.m_bottomBarManager.Wallet )
        //             {
        //                 req.info.currencynumber = this.m_bottomBarManager.Wallet.CurencyID;
        //             }
        //             ConnectManager.GetInstance().SendCommand( req, ( ack ) =>
        //             {
        //                 if ( ack && typeof ack.info === "string" )
        //                 {
        //                     let bytes = Tools.DecodeProtoString( ack.info );
        //                     let info: itemprotocol.itemprotocol.UseCardAck = itemprotocol.itemprotocol.UseCardAck.decode( bytes );
        //                     ack.info = info;
        //                 }
        //                 let data = ack.info;
        //                 let isSuccess = false;
        //                 if ( data.result == 0 )
        //                 {
        //                     isSuccess = true;
        //                     useCardCb && useCardCb( data.itemid, data.amount );
        //                 }
        //                 backpackManager.OnRevUseItemCardAck( isSuccess, data.itemid, data.bet, data.icon, data.amount );
        //             } );
        //         }
        //     };
        //     let reqData = () => 
        //     {
        //         if ( Define.APP )
        //         {
        //             let req = new ItemReqData.ItemDataReq();
        //             req.info.aid = Number( Define.APP.GetAID() );
        //             req.info.token = Define.APP.GetAToken();
        //             req.info.lang = BackpackProtocol.Language[ LocaleStringManager.CurrLang ];
        //             if ( this.m_bottomBarManager && this.m_bottomBarManager.Wallet )
        //             {
        //                 req.info.currencynumber = this.m_bottomBarManager.Wallet.CurencyID;
        //             }
        //             ConnectManager.GetInstance().SendCommand( req, ( ack ) =>
        //             {
        //                 if ( ack && typeof ack.info === "string" )
        //                 {
        //                     let bytes = Tools.DecodeProtoString( ack.info );
        //                     let info: itemprotocol.itemprotocol.ListInfo = itemprotocol.itemprotocol.ListInfo.decode( bytes );
        //                     ack.info = info;
        //                 }
        //                 backpackManager.OnRevItemDataAck( ack );
        //             }, false );
        //         }
        //     }
        //     let reqMsg = () =>
        //     {
        //         if ( Define.APP )
        //         {
        //             let reqMail = new ItemReqData.GetItemMail();
        //             reqMail.info.aid = Number( Define.APP.GetAID() );
        //             reqMail.info.token = Define.APP.GetAToken();
        //             if ( this.m_bottomBarManager && this.m_bottomBarManager.Wallet )
        //             {
        //                 reqMail.info.currencynumber = this.m_bottomBarManager.Wallet.CurencyID;
        //             }
        //             ConnectManager.GetInstance().SendCommand( reqMail, ( ack ) =>
        //             {
        //                 if ( ack && typeof ack.info === "string" )
        //                 {
        //                     let bytes = Tools.DecodeProtoString( ack.info );
        //                     let info: itemprotocol.itemprotocol.GetMailAck = itemprotocol.itemprotocol.GetMailAck.decode( bytes );
        //                     ack.info = info;
        //                 }
        //                 backpackManager.OnRevMsgDataAck( ack );
        //             }, false );
        //         }
        //     }
        //     let reqCleanMsg = () =>
        //     {
        //         let reqMailread = new ItemReqData.GetItemMailRead();
        //         reqMailread.info.aid = Number( Define.APP.GetAID() );
        //         reqMailread.info.token = Define.APP.GetAToken();
        //         if ( this.m_bottomBarManager && this.m_bottomBarManager.Wallet )
        //         {
        //             reqMailread.info.currencynumber = this.m_bottomBarManager.Wallet.CurencyID;
        //         }
        //         ConnectManager.GetInstance().SendCommand( reqMailread, ( ack ) =>
        //         {
        //             //Done
        //             // this.m_backpackView.OnRevMsgCleanDataAck( ack );
        //         }, false );
        //     }
        //     let reqAllGameData = () =>
        //     {
        //         if ( Define.APP )
        //         {
        //             let req = new ItemReqData.ItemAllGameDateReq();
        //             req.info.aid = Number( Define.APP.GetAID() );
        //             req.info.token = Define.APP.GetAToken();
        //             if ( this.m_bottomBarManager && this.m_bottomBarManager.Wallet )
        //             {
        //                 req.info.currencynumber = this.m_bottomBarManager.Wallet.CurencyID;
        //             }
        //             ConnectManager.GetInstance().SendCommand( req, ( ack ) =>
        //             {
        //                 if ( ack && typeof ack.info === "string" )
        //                 {
        //                     let bytes = Tools.DecodeProtoString( ack.info );
        //                     let info: itemprotocol.itemprotocol.ListAllGameInfo = itemprotocol.itemprotocol.ListAllGameInfo.decode( bytes );
        //                     ack.info = info;
        //                 }
        //                 backpackManager.OnRevAllTabDataAck( ack );
        //             }, false );
        //         }
        //     }
        //     // 要設定背包的合圖再哪裡
        //     // path 設定在 GameBundle 底下   ver2.4.3
        //     this.BackpackInit( "", reqData, reqUse, reqMsg, reqCleanMsg, reqAllGameData );
        // }

        /**
         * 載入背包相關字串、總表
         */
        ;

        _proto.LoadBackpackString = function LoadBackpackString(endCb) {
          if (endCb === void 0) {
            endCb = null;
          }

          LocaleStringManager.GetInstance().LoadBackPackStringFile(function () {
            endCb && endCb();
          });
          ItemList.GetInstance().LoadItemList();
        }
        /**
         * 背包相關字串是否已載入完畢
         */
        ;

        _proto.IsBackpackStringLoaded = function IsBackpackStringLoaded() {
          return LocaleStringManager.GetInstance().IsBackpackStringLoaded();
        }
        /**
         * 顯示背包頁
         */
        ;

        _proto.ShowBackpack = function ShowBackpack() {
          if (this.m_backpackBtn.interactable) {
            if (!backpackManager.HasBackpack) {
              this.m_isOpenBackpackOnLoading = true;
              MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_ONLOADING);
            } else {
              backpackManager.Show(this.m_isLandscape);
            }
          }
        };

        _proto.ShowGetItemCard = function ShowGetItemCard(callback) {
          var _this8 = this;

          if (Define.IS_DEMO || this.CheckLineCode()) {
            callback ? callback() : null;
            return;
          }

          var btn_backpack = this.m_backpackBtn.node;
          var node_backpack = btn_backpack.getChildByName(ExtraManager.UIName.IMG_BACKPACKNODE);
          var img_backpack = node_backpack ? node_backpack.getChildByName(ExtraManager.UIName.IMG_BACKPACK) : null;

          if (!node_backpack) {
            node_backpack = btn_backpack;
          }

          var getNode = null;

          if (this.m_getItemEft) {
            getNode = instantiate(this.m_getItemEft);
            getNode.position = Tools.DiffPos(this.node.getComponent(UITransform).anchorPoint, this.m_isLandscape);
            this.node.addChild(getNode);
            this.m_getItem = getNode;
            Tools.SetZIndex(getNode, Define.ZOrder.BACKPACK + 1);

            if (getNode.getComponent(ItemGet)) {
              getNode.getComponent(ItemGet).Show();
              getNode.setPosition(0, getNode.position.y);
            } else {
              getNode.getComponent(Animation).play();
              var label = getNode.getChildByName("panel").getChildByName("label");
              label.getComponent(Label).string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_GET_ITEM);

              if (!label.getComponent(Label).font) {
                label.getComponent(Label).font = Define.DefaultFont;
              }
            }
          }

          var ballNode;
          var cardNode;

          if (
          /*this.m_backpackView &&*/
          this.m_getItemBall) {
            ballNode = instantiate(this.m_getItemBall);
            ballNode.position = Tools.DiffPos(this.node.getComponent(UITransform).anchorPoint, this.m_isLandscape);
            ballNode.position = v3(ballNode.position.x, ballNode.position.y + 130);
            ballNode.setScale(v3(1, 1));
            ballNode.active = false;
            this.node.addChild(ballNode);
            Tools.SetZIndex(ballNode, Define.ZOrder.BACKPACK + 2);

            if (ballNode.getComponent(ItemBall)) {
              ballNode.setPosition(0, ballNode.position.y);
              cardNode = ballNode.getComponent(ItemBall).IconSprite.node;

              if (Tools.UsingLogoSpriteFrame() && this.m_jillCardSpriteFrame) {
                ballNode.getComponent(ItemBall).SetIcon(this.m_jillCardSpriteFrame);
              }
            } else {
              cardNode = ballNode.getChildByName("card");

              if (Tools.UsingLogoSpriteFrame() && this.m_jillCardSpriteFrame) {
                cardNode.getComponent(Sprite).spriteFrame = this.m_jillCardSpriteFrame;
              }
            }
          }

          var pos = node_backpack.parent.getComponent(UITransform).convertToWorldSpaceAR(node_backpack.getPosition());
          var mdd = this.node.getComponent(UITransform).convertToNodeSpaceAR(pos);
          SoundManager.getInstance().Play(Define.AudioClips.ITEM_CARD_USE); // ball.getComponent( cc.Animation ).play();
          // if ( this.m_backpackView )
          // {

          this.m_backpackBtn.interactable = false;
          tween(this.node).delay(0.25).call(function () {
            if (ballNode) {
              ballNode.active = true;
            }
          }).delay(0.94).call(function () {
            if (ballNode) {
              tween(ballNode).call(function () {
                tween(cardNode).to(0.5, {
                  scale: v3(0.33, 0.33, 1)
                }).start();
              }).to(0.5, {
                position: v3(mdd.x, mdd.y)
              }).call(function () {
                if (!ballNode.getComponent(ItemBall)) {
                  ballNode.getChildByName("PP_TouchStar01").getComponent(ParticleSystem2D).stopSystem();
                }

                ballNode.active = false;
              }).start();
            }
          }).delay(0.8).call(function () {
            // let orgScale = ( this.m_bottomBarManager.IsLow ) ? v3( 0.8, 0.8, 1 ) : v3( 1, 1, 1 );
            if (img_backpack) {
              tween(img_backpack).to(0.1, {
                scale: v3(1.5, 1.5, 1)
              }).delay(0.2).to(0.1, {
                scale: v3(1, 1, 1)
              }).start();
            }

            tween(btn_backpack).to(0.1, {
              scale: v3(1.5, 1.5, 1)
            }).delay(0.2).to(0.1, {
              scale: v3(1, 1, 1)
            }).start();
          }).delay(0.5).call(function () {
            _this8.m_backpackBtn.interactable = true;

            if (_this8.m_getItem) {
              _this8.m_getItem.removeFromParent();

              _this8.m_getItem.destroy();

              _this8.m_getItem = null;
            }

            if (ballNode) {
              ballNode.removeFromParent();
              ballNode.destroy();
            } // this.m_backpackView.ShowRedpoint( true );
            // this.m_backpackView.ShowGameRedpoint( true );


            callback ? callback() : null;
          }).start(); // }
          // else
          // {
          //     callback ? callback() : null;
          // }
        };

        _proto.ShowGetRedDiamond = function ShowGetRedDiamond(rewardNum) {
          return missionManager.ShowGetRedDiamond(rewardNum);
        };

        _proto.ShowGetDailyMissionReward = /*#__PURE__*/function () {
          var _ShowGetDailyMissionReward = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(rewardType) {
            var _this9 = this;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!Tools.IsTadaCasino) {
                      _context.next = 2;
                      break;
                    }

                    return _context.abrupt("return");

                  case 2:
                    if (!((rewardType & Define.DAILYMISSION_REWARD_TYPE.ItemCard) > 0)) {
                      _context.next = 5;
                      break;
                    }

                    _context.next = 5;
                    return new Promise(function (resolve) {
                      _this9.ShowGetItemCard(function () {
                        resolve();
                      });
                    });

                  case 5:
                    if (!((rewardType & Define.DAILYMISSION_REWARD_TYPE.MallCoin) > 0)) {
                      _context.next = 8;
                      break;
                    }

                    _context.next = 8;
                    return this.ShowGetRedDiamond(10);

                  case 8:
                    //  新的獎勵方式
                    if ((rewardType & Define.DAILYMISSION_REWARD_TYPE.Gift) > 0) {
                      console.error('DAILYMISSION_REWARD_TYPE.Gift');
                    }

                    if ((rewardType & Define.DAILYMISSION_REWARD_TYPE.GameCoin) > 0) {
                      console.error('DAILYMISSION_REWARD_TYPE.GameCoin');
                    }

                  case 10:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function ShowGetDailyMissionReward(_x) {
            return _ShowGetDailyMissionReward.apply(this, arguments);
          }

          return ShowGetDailyMissionReward;
        }();

        _proto.SetItemBetSprite = function SetItemBetSprite(betMode) {
          if (betMode === void 0) {
            betMode = 0;
          }

          var lang = "_" + LocaleStringManager.CurrLang;

          if (this.m_betSprite) {
            switch (betMode) {
              case Define.BetMode.Item:
                this.m_betSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName.ItemBet + lang);
                break;

              case Define.BetMode.FreeSpin:
                // 先給預設
                this.m_betSprite.spriteFrame = this.m_FreeSpinBetImgSpriteFrame; // 來的及換就換

                var freeSpinAtlas = LocaleStringManager.GetInstance().GetFreeSpinAtlas();

                if (freeSpinAtlas && freeSpinAtlas.getSpriteFrame(LocaleImgName.FreeSpins_02)) {
                  this.m_betSprite.spriteFrame = freeSpinAtlas.getSpriteFrame(LocaleImgName.FreeSpins_02);
                } //  暫代版
                // if ( this.m_localeSpriteAtlas.getSpriteFrame( LocaleImgName.FreeSpin + lang ) )
                // {
                //     this.m_betSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame( LocaleImgName.FreeSpin + lang );
                // } else
                // {
                //     this.m_betSprite.spriteFrame = this.m_FreeSpinBetImgSpriteFrame;
                // }


                break;

              default:
                this.m_betSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName.Bet + lang);
                break;
            }
          }

          if (this.BetLabel) {
            switch (betMode) {
              case Define.BetMode.Item:
                var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.ITEM_BET);
                this.BetLabel.string = str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
                break;
              // case Define.BetMode.FreeSpin:
              //     this.m_betLabel.string = LocaleStringManager.GetInstance().GetString( Define.StringKey.BET );
              //     break;

              default:
                this.BetLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BET);
                break;
            }
          }
        }
        /**
         * 背包是否已開啟
         */
        ;

        _proto.IsShowBackpack = function IsShowBackpack() {
          return this.m_backpackNode ? this.m_backpackNode.active : false;
        }
        /**
         * 背包是否在跑動畫
         */
        ;

        _proto.IsShowItemAni = function IsShowItemAni() {
          return backpackManager.IsPlayingAni;
        }
        /**
         * 是否有紅點
         */
        ;

        _proto.IsShowRedPoint = function IsShowRedPoint() {
          return backpackManager.HasBackpack ? this.m_backpackRp.active : false;
        };

        _proto.SetBackpackBtnAniTimer = function SetBackpackBtnAniTimer(isSet) {
          if (!isSet && !this.IsShowRedPoint()) {
            this.m_backpackExcTimer.Clear();
          } else {
            this.PlayBackpackBtnAni();
            this.m_backpackExcTimer.Clear();
            this.m_backpackExcTimer.Start(BackpackBtnAniTime * 1000);
          }
        }
        /**
        * play背包按鈕動畫
        */
        ;

        _proto.PlayBackpackBtnAni = function PlayBackpackBtnAni() {
          var _this10 = this;

          if (!this.IsShowItemAni() && !this.m_isBackpackIconAni) {
            this.m_isBackpackIconAni = true;

            if (this.m_backpackBtn.node.getComponent(Animation)) {
              this.m_backpackBtn.node.getComponent(Animation).play("Clip_BottomBar_BtnBackpack_New");
              this.m_backpackBtn.node.getComponent(Animation).once(Animation.EventType.FINISHED, function () {
                _this10.m_isBackpackIconAni = false;
              });
            } else {
              this.m_backpackSprite.node.getComponent(Animation).play();
              this.m_backpackSprite.node.getComponent(Animation).once(Animation.EventType.FINISHED, function () {
                _this10.m_isBackpackIconAni = false;
              });
            }
          }
        };

        _proto.LoadGetItemEftRes = function LoadGetItemEftRes() {
          var _this11 = this;

          if (!this.m_getItemEft && !this.m_getItemBall) {
            Define.CommonBundle.load("Astt/framework/bottombar/Item_card_get", function (err, prefab) {
              if (err) {
                error(err.message || err);
                return;
              }

              _this11.m_getItemEft = prefab;
            });
            Define.CommonBundle.load("Astt/framework/bottombar/Item_card_ball", function (err, prefab) {
              if (err) {
                error(err.message || err);
                return;
              }

              _this11.m_getItemBall = prefab;
            });
          }
        };

        _proto.ShowItemInfo = function ShowItemInfo(itemID, desc) {
          var _this12 = this;

          if (!this.m_itemInfo) {
            var _cb2 = function _cb2() {
              Define.CommonBundle.load("Astt/framework/bottombar/ItemInfo", Prefab, function (err, prefab) {
                if (err) {
                  return;
                }

                var node = instantiate(prefab);

                _this12.node.addChild(node);

                Tools.SetZIndex(node, Define.ZOrder.ITEMINFO);
                _this12.m_itemInfo = node.getComponent(ItemInfo);

                _this12.m_itemInfo.init(_this12);

                _this12.m_itemInfo.OnRotation(_this12.m_isLandscape, _this12.m_isSmall);

                if (typeof itemID == "string") {
                  _this12.m_itemInfo.showDesc(itemID, desc);
                } else {
                  _this12.m_itemInfo.show(itemID);
                }
              });
            };

            if (!backpackManager.HasBackpack) {
              this.LoadCommonItem(Define.CbKey.ItemInfo, function (res) {
                ItemList.GetInstance().SetCommonSpriteAtlas(res);

                _cb2();
              });
            } else {
              _cb2();
            }
          } else {
            if (typeof itemID == "string") {
              this.m_itemInfo.showDesc(itemID, desc);
            } else {
              this.m_itemInfo.show(itemID);
            }
          }
        };

        _proto.DiffPos = function DiffPos() {
          return Tools.DiffPos(this.node.getComponent(UITransform).anchorPoint, this.m_isLandscape);
        };

        _proto.LoadCommonItem = function LoadCommonItem(cbKey, cb) {
          var _this13 = this;

          var temp = null;

          for (var i = 0; i < this.m_loadCommonItemCbs.length; i++) {
            if (this.m_loadCommonItemCbs[i].key === cbKey) {
              temp = this.m_loadCommonItemCbs[i];
              temp.cb = cb;
              break;
            }
          }

          if (temp === null) {
            temp = new LoadCommonItemCb(cbKey, cb);
            this.m_loadCommonItemCbs.push(temp);
          }

          var path = Tools.GetFilePath(NEW_ITEM_EFT); // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {
          //     path = Tools.GetFilePath( NEW_ITEM_EFT );
          // }

          Define.CommonBundle.load(path, SpriteAtlas, function (err, spriteAtlas) {
            if (err) {
              error(err.message || err);
              return;
            }

            for (var _i2 = 0; _i2 < _this13.m_loadCommonItemCbs.length; _i2++) {
              _this13.m_loadCommonItemCbs[_i2].cb(spriteAtlas);
            }
          });
        } //====================特色遊玩====================

        /**
        * 初始化特色頁
        * @param imgPath 傳入左右兩張圖的路徑
        * @param txt 傳入左右兩張圖的說明
        * @param fireNum 傳入火球數
        * @param titleSpriteAtlas 遊戲標題合圖
        * @param titleTempName 如合圖內標題名稱不是logo_語系縮寫，請自己帶入logo_要改成的字串
        */
        ;

        _proto.FeaturesInit = function FeaturesInit(imgPath, txt, fireNum, titleSpriteAtlas, titleTempName) {
          var _this14 = this;

          if (titleSpriteAtlas === void 0) {
            titleSpriteAtlas = null;
          }

          if (titleTempName === void 0) {
            titleTempName = null;
          }

          var isBySelf = false;
          this.m_featuresView = new FeaturesView(this, imgPath, txt, fireNum, titleSpriteAtlas, titleTempName, function (view) {
            if (!_this14.m_bottomBarManager.IsGLIGames && !_this14.m_bottomBarManager.IsBMMGames) {
              _this14.m_discount.SetManager(_this14);

              _this14.m_discount.AddPageBtn(view, PageName.Features, "", function (isLandscape) {
                _this14.m_featuresView.OnRotation(isLandscape);
              }, function (pageName) {
                if (pageName === PageName.Features && !isBySelf) {
                  _this14.m_featuresView.SetCloseHint(false);
                }

                isBySelf = false;
              });
            }
          }, function () {
            if (!_this14.m_bottomBarManager.IsGLIGames && !_this14.m_bottomBarManager.IsBMMGames && Tools.Line !== Define.LineSetting.americas && Tools.Line !== Define.LineSetting.americas_str) {
              isBySelf = true; //:先不主動顯示

              _this14.m_discount.ShowDiscountView(PageName.Features);

              _this14.FeaturesView.OnRotation(_this14.m_isLandscape);
            }
          });
        };

        _proto.AutoShowFeatures = /*#__PURE__*/function () {
          var _AutoShowFeatures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var isShow, key, i, result;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.FeaturedDisplay)) {
                      _context2.next = 20;
                      break;
                    }

                    _context2.next = 3;
                    return this.StartFeaturesDemo(true);

                  case 3:
                    isShow = _context2.sent;

                    if (isShow) {
                      _context2.next = 20;
                      break;
                    }

                    key = Define.AID + ":" + Define.NOW_GAME_ID + "FDemo";
                    i = 0;

                  case 7:
                    if (!(i < this.m_featuresNum)) {
                      _context2.next = 20;
                      break;
                    }

                    result = LocalStorageManager.GetInt(key + i);

                    if (!(result == null)) {
                      _context2.next = 14;
                      break;
                    } // 沒值


                    this.SelectFeaturesDemo(i);
                    return _context2.abrupt("break", 20);

                  case 14:
                    if (!(result < this.m_featuresDemoPlayLimit[i])) {
                      _context2.next = 17;
                      break;
                    }

                    this.SelectFeaturesDemo(i);
                    return _context2.abrupt("break", 20);

                  case 17:
                    i++;
                    _context2.next = 7;
                    break;

                  case 20:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function AutoShowFeatures() {
            return _AutoShowFeatures.apply(this, arguments);
          }

          return AutoShowFeatures;
        }();

        _proto.SetFeatruesDesc = function SetFeatruesDesc(txtSpriteFrames) {
          if (this.m_featuresView) {
            this.m_featuresView.SetDesc(txtSpriteFrames);
          }
        };

        _proto.SetFeaturePreferRound = function SetFeaturePreferRound(round) {
          if (this.m_featuresView) {
            this.m_featuresView.SetPreferRound(round);
          }
        };

        _proto.FeaturesAlreadyInit = function FeaturesAlreadyInit() {
          if (this.m_featuresView) {
            return this.m_featuresView.AlreadyInit();
          }

          return false;
        }
        /**
         * 顯示特色頁
         */
        ;

        _proto.ShowFeatures = function ShowFeatures(closeCb) {
          this.m_featuresView.Show(this.m_isLandscape, false, closeCb);
        };

        _proto.IsFeaturesPageOpen = function IsFeaturesPageOpen() {
          if (this.m_discount) {
            // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {
            return this.m_discount.IsDiscountViewOpen(); // }
            // else
            // {
            //     return this.m_featuresView.IsViewOpen();
            // }
          }
        };

        _proto.IsDiscountOpen = function IsDiscountOpen() {
          if (this.m_discount) {
            return this.m_discount.IsDiscountViewOpen();
          }
        }
        /**
         * 檢查是否要秀第一次的特色頁
         */
        ;

        _proto.CheckFirstFeatures = function CheckFirstFeatures() {
          if (!this.m_featuresView) {
            return;
          }

          if (sys.isNative || AppManager.LobbyData) {
            var backpackInfo = AppManager.BackPackInfo;

            if (backpackInfo && backpackInfo.itemindex) {
              this.m_featuresView.Show(this.m_isLandscape, true);
              return;
            }
          }

          var itemIdx = window.location.search.split("itemIdx=")[1];

          if (itemIdx) {
            this.m_featuresView.Show(this.m_isLandscape, true);
            return;
          }

          var key = Define.AID + ":" + Define.NOW_GAME_ID + ":FeatureTimes";
          var value = LocalStorageManager.GetInt(key);
          var maxValue = Define.FEATURE_TIMES >= 0 ? Define.FEATURE_TIMES : FEATURE_TIMES;

          if (value != null) {
            if (value < maxValue) {
              LocalStorageManager.SetInt(key, value + 1);
              this.m_featuresView.Show(this.m_isLandscape, false);
            } else {
              this.m_featuresView.Show(this.m_isLandscape, true);
            }
          } else {
            LocalStorageManager.SetInt(key, 1);

            if (this.m_featuresView) // for test
              {
                this.m_featuresView.Show(this.m_isLandscape, false);
              }
          }
        }
        /**
        * 初始化特色頁DEMO遊戲
        * @param selectFunc   選擇特色後要做的事情
        * @param featuresNum  特色遊戲種類
        * @param betIdx       特色遊戲下注bet idx[demo]
        */
        ;

        _proto.FeaturesDemoInit = function FeaturesDemoInit(selectFunc, featuresNum, betIdx, closeNotifyCb, manualClose) {
          var _this15 = this;

          if (manualClose === void 0) {
            manualClose = false;
          }

          this.m_isInitFreaturesDemo = true;
          this.CheckFeaturesDemo(featuresNum, manualClose);
          this.m_featuresView.SetFeaturesDemoStatus(this.m_isFeaturesDemo);

          if (this.m_isFeaturesDemo) {
            this.m_selectFDFunc = selectFunc;
            this.m_closeFDNotifyCb = closeNotifyCb;
            this.m_featuresNum = featuresNum;

            if (betIdx >= this.m_bottomBarManager.GetBetList().length || betIdx < 0) {
              //idx 有問題
              this.m_demoBetIdxError = true;
            } else {
              this.m_demoBetIdx = betIdx;
            } // 調整選單大小  featuresType.length


            if (this.m_featuresMenu) {
              this.m_featuresMenu.node.getComponent(UITransform).height = (this.m_featuresMenu.node.getComponent(UITransform).height - 15) * this.m_featuresNum + 15; // 生成按鈕

              var _loop = function _loop(i) {
                //cc.loader.loadRes( "Astt/framework/bottombar/Feature_list", ( err, prefab: cc.Prefab ) =>
                Define.CommonBundle.load("Astt/framework/bottombar/Feature_list", function (err, prefab) {
                  if (err) {
                    error(err.message || err);
                    return;
                  }

                  _this15.m_isFeaturesDemoBtnsLoaded[i] = true;
                  _this15.m_featuresDemoBtns[i] = instantiate(prefab);

                  _this15.m_featuresMenu.node.addChild(_this15.m_featuresDemoBtns[i]);

                  _this15.m_featuresDemoBtns[i].position = FEATURES_DEMO_BTN_POS[i];

                  if (_this15.m_localeSpriteAtlas) {
                    var txt = _this15.m_featuresDemoBtns[i].getChildByName("Txt").getComponent(Sprite);

                    var lang = "_" + LocaleStringManager.CurrLang;
                    txt.spriteFrame = _this15.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName.FeaturesDemo_btn + (i + 1) + lang);
                  } // 註冊按鈕事件


                  var features_demo = [Define.BTN_CLICK_EVENT.FEATURES_DEMO_1, Define.BTN_CLICK_EVENT.FEATURES_DEMO_2, Define.BTN_CLICK_EVENT.FEATURES_DEMO_3, Define.BTN_CLICK_EVENT.FEATURES_DEMO_4, Define.BTN_CLICK_EVENT.FEATURES_DEMO_5];

                  _this15.m_featuresDemoBtns[i].on("click", function () {
                    // log
                    ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, features_demo[i], "", _this15.m_isLandscape)); // 觸發選的部分

                    _this15.SelectFeaturesDemo(i);
                  });
                });
              };

              for (var i = 0; i < this.m_featuresNum; i++) {
                _loop(i);
              } // 玩真錢按鈕


              this.m_featuresGoRealBtn.node.on("click", function () {
                //關掉拉開的特色選單
                _this15.m_featuresDemoTimer.Clear();

                _this15.LeaveFeaturesDemoMsg(); // log


                ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.FEATURES_DEMO_BACK_REAL, "", _this15.m_isLandscape));
              });
              this.m_isFeaturesDemoLoaded = true;
            } else {
              if (this.m_featuresDemoSelectRootNode && this.m_featuresDemoRootNode) {
                this.LoadFeatruesDemoSelect();
                this.LoadFeaturesDemo();
              }
            }
          } else {
            this.m_isFeaturesDemoLoaded = true;
            this.m_bottomBarManager.ShowGameScene(false);
          }
        };

        _proto.SetFeaturesDemoBlock = function SetFeaturesDemoBlock() {
          this.m_isFeaturesDemoLoaded = true;
          this.m_bottomBarManager.ShowGameScene(false);
        };

        _proto.LoadFeatruesDemoSelect = function LoadFeatruesDemoSelect() {
          var _this16 = this;

          var path = Tools.GetFilePath("Astt/%s/discount/Prefab/WinMore_FeatureList");
          Define.CommonBundle.load(path, function (err, prefab) {
            if (err) {
              error(err.message || err);

              _this16.LoadFeatruesDemoSelect();

              return;
            }

            var node = instantiate(prefab);
            node.active = false;

            _this16.m_featuresDemoSelectRootNode.addChild(node);

            _this16.m_featuresDemoSelectComp = node.getComponent(FeaturesDemoSelectComponent); // 註冊按鈕事件

            var features_demo = [Define.BTN_CLICK_EVENT.FEATURES_DEMO_1, Define.BTN_CLICK_EVENT.FEATURES_DEMO_2, Define.BTN_CLICK_EVENT.FEATURES_DEMO_3, Define.BTN_CLICK_EVENT.FEATURES_DEMO_4, Define.BTN_CLICK_EVENT.FEATURES_DEMO_5];

            _this16.m_featuresDemoSelectComp.CreateSelection(_this16.m_featuresNum, features_demo, function (idx) {
              // log
              ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, features_demo[idx], "", _this16.m_isLandscape)); // 觸發選的部分

              _this16.SelectFeaturesDemo(idx);
            });

            _this16.m_featuresDemoSelectComp.SetTxt();

            for (var i = 0; i < _this16.m_featuresNum; i++) {
              _this16.m_isFeaturesDemoBtnsLoaded[i] = true;
            }

            if (_this16.m_featuresDemoComp) {
              _this16.m_isFeaturesDemoLoaded = true;

              _this16.m_bottomBarManager.ShowGameScene(false);
            }
          });
        };

        _proto.LoadFeaturesDemo = function LoadFeaturesDemo() {
          var _this17 = this;

          var path = Tools.GetFilePath("Astt/%s/discount/Prefab/WinMore_Features_DemoView");
          Define.CommonBundle.load(path, function (err, prefab) {
            if (err) {
              error(err.message || err);

              _this17.LoadFeaturesDemo();

              return;
            }

            var node = instantiate(prefab);
            node.active = false;

            _this17.m_featuresDemoRootNode.addChild(node);

            _this17.m_featuresDemoComp = node.getComponent(FeaturesDemoComponent);

            _this17.m_featuresDemoComp.OnRotation(_this17.m_isLandscape);

            _this17.m_featuresDemoComp.SetEvent(function () {
              //關掉拉開的特色選單
              _this17.m_featuresDemoTimer.Clear();

              _this17.LeaveFeaturesDemoMsg(); // log


              ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.FEATURES_DEMO_BACK_REAL, "", _this17.m_isLandscape));
            });

            _this17.m_featuresDemoComp.SetTxt();

            if (_this17.m_featuresDemoSelectComp) {
              _this17.m_isFeaturesDemoLoaded = true;

              _this17.m_bottomBarManager.ShowGameScene(false);
            }
          });
        };

        _proto.CheckFeaturesDemo = function CheckFeaturesDemo(featuresNum, manualClose) {
          if (manualClose === void 0) {
            manualClose = false;
          } // 檢查 U SIR DE FOUR


          var key = Define.AID + ":" + Define.NOW_GAME_ID + "FDemo";
          var fdPlayCount = [];
          var isFDShow = false;

          for (var i = 0; i < featuresNum; i++) {
            fdPlayCount.push(LocalStorageManager.GetInt(key + i));
          } // 這裡要判斷484有超過次數


          for (var _i3 = 0; _i3 < featuresNum; _i3++) {
            if (fdPlayCount[_i3] == null) {
              // 第一次 給值
              LocalStorageManager.SetInt(key + _i3, 0);
              fdPlayCount[_i3] = LocalStorageManager.GetInt(key + _i3);
              isFDShow = true;
            } else {
              if (fdPlayCount[_i3] < this.m_featuresDemoPlayLimit[_i3]) {
                isFDShow = true;
                break;
              }
            }
          }

          for (var _i4 = 0; _i4 < featuresNum; _i4++) {
            this.m_featuresDemoIsPlay[_i4] = fdPlayCount[_i4];
          }

          this.m_isFeaturesDemo = isFDShow && !this.m_demoBetIdxError && !Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.FeaturedDisplay);

          if (this.m_isFeaturesDemo && !manualClose && !this.m_hasUnshow) {
            Tools.NotifyFeaturesDemoOpen == null ? void 0 : Tools.NotifyFeaturesDemoOpen();
          }
        };

        _proto.FeaturesDemoPlayEnd = function FeaturesDemoPlayEnd() {
          this.m_featuresDemoTimer.Start(60 * 1000);
          this.CheckFeaturesDemo(this.m_featuresNum);
          this.m_featuresView.SetFeaturesDemoStatus(this.m_isFeaturesDemo); // 某特色表演完了

          if (this.m_featuresDemoView) {
            this.m_featuresDemoView.active = true;
          } else if (this.m_featuresDemoSelectComp) {
            this.m_featuresDemoSelectComp.node.active = true;
          }

          if (this.m_featuresDemoComp) {
            this.m_featuresDemoComp.EndFeaturesDemo();
          } // 開選單


          if (this.m_isFirstFeaturesDemo) {
            var lang = "_" + LocaleStringManager.CurrLang;

            if (this.m_featuresGoRealDes) {
              this.m_featuresGoRealDes.getChildByName("img_Trial_txt2_cn").getComponent(Sprite).spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName.FeaturesGoRealDes + lang);
              this.m_featuresGoRealDes.active = true;
              this.m_featuresGoRealDes.getComponent(Animation).play();
            }

            if (this.m_featuresMenuDes) {
              this.m_featuresMenuDes.getChildByName("img_try_real_mode").getComponent(Sprite).spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName.FeaturesMenuDes + lang);
              this.m_featuresMenuDes.active = true;
              this.m_featuresMenuDes.getComponent(Animation).play();
            }

            this.m_isFirstFeaturesDemo = false;

            if (this.m_featuresDemoBtns.length >= 2) {
              if (this.m_featuresDemoBtns[1]) {
                this.m_featuresDemoBtns[1].getChildByName("ButtonFX01_00_2").active = true;
                this.m_featuresDemoBtns[1].getComponent(Animation).play();
              }
            }

            if (this.m_featuresDemoSelectComp) {
              this.m_featuresDemoSelectComp.SetLightNode(1);
            }
          }

          this.m_bottomBarManager.SetWinValue(0);
          this.m_bottomBarManager.SpinSprite.node.active = false;
          this.m_isNowInDemoMenu = true;
          this.m_lockAutoEnableByFeatures = true;
          this.m_bottomBarManager.AutoBtn.interactable = false;
          this.m_bottomBarManager.AutoBtn.node.getComponent(UIRenderer).color = color(150, 150, 150); //檢查484都表演玩了 要直接到真錢

          var isAllOver = true;

          for (var i = 0; i < this.m_featuresDemoPlayLimit.length; i++) {
            if (this.m_featuresDemoIsPlay[i] < this.m_featuresDemoPlayLimit[i]) {
              isAllOver = false;
              break;
            }
          }

          if (isAllOver) {
            this.EndFeaturesDemo();
          }
        };

        _proto.LeaveFeaturesDemoMsg = function LeaveFeaturesDemoMsg() {
          var _this18 = this;

          MsgBox.getInstance().ShowMessageBox(Define.StringKey.FEATURES_DEMO_GO_BACK_REAL, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, function () {
            _this18.EndFeaturesDemo();
          });
        };

        _proto.IsFeaturesDemoBtnsLoaded = function IsFeaturesDemoBtnsLoaded() {
          var isLoaded = true;

          for (var i = 0; i < this.m_featuresNum; i++) {
            if (!this.m_isFeaturesDemoBtnsLoaded[i]) {
              isLoaded = false;
              break;
            }
          }

          return isLoaded;
        };

        _proto.CanPlayFeaturesDemo = function CanPlayFeaturesDemo(play) {
          this.m_canPlayFeaturesDemo = play;
        };

        _proto.IsPlayingRealGame = function IsPlayingRealGame() {
          var isPlaying = false;

          if (backpackManager.HasBackpack) {
            isPlaying = this.m_canPlayFeaturesDemo && backpackManager.OnUseItemID == null;
          } else {
            isPlaying = this.m_canPlayFeaturesDemo;
          }

          return isPlaying;
        };

        _proto.SelectFeaturesDemo = function SelectFeaturesDemo(featuresType) {
          // 關掉說明
          if (this.m_featuresGoRealDes) {
            this.m_featuresGoRealDes.active = false;
          }

          if (this.m_featuresMenuDes) {
            this.m_featuresMenuDes.active = false;
          } // 紀錄已經玩了


          var key = Define.AID + ":" + Define.NOW_GAME_ID + "FDemo";

          if (this.m_featuresDemoIsPlay[featuresType] < this.m_featuresDemoPlayLimit[featuresType]) {
            this.m_featuresDemoIsPlay[featuresType]++;
            LocalStorageManager.SetInt(key + featuresType, this.m_featuresDemoIsPlay[featuresType]);
          } // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     if ( this.m_featuresDemoIsPlay[ featuresType ] == this.m_featuresDemoPlayLimit[ featuresType ] )
          //     {
          //         this.m_featuresDemoBtns[ featuresType ].getComponent( cc.Button ).interactable = false;
          //         this.m_featuresDemoBtns[ featuresType ].getChildByName( "Txt" ).color = cc.color( 100, 100, 100 );
          //     }
          //     if ( this.m_featuresDemoBtns[ 1 ].getChildByName( "ButtonFX01_00_2" ).active )
          //     {
          //         this.m_featuresDemoBtns[ 1 ].getChildByName( "ButtonFX01_00_2" ).active = false;
          //     }
          //     // 關掉黑幕
          //     this.m_featuresDemoView.active = false;
          // }
          // else
          // {


          this.m_featuresDemoSelectComp.SetSelected(featuresType);
          this.m_featuresDemoSelectComp.SetLightNode(-1);
          this.m_featuresDemoSelectComp.node.active = false;
          this.m_featuresDemoComp.StartFeaturesDemo(true, this.m_isLandscape); // }

          this.m_bottomBarManager.SpinSprite.node.active = true;
          this.m_isNowInDemoMenu = false; // 清掉計時

          this.m_featuresDemoTimer.Clear();
          this.m_selectFDFunc(featuresType);
          this.m_lockAutoEnableByFeatures = false;
          this.m_bottomBarManager.AutoBtn.interactable = false;
          this.m_bottomBarManager.AutoBtn.node.getComponent(UIRenderer).color = color(150, 150, 150);
        };

        _proto.StartFeaturesDemo = /*#__PURE__*/function () {
          var _StartFeaturesDemo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(isAuto) {
            var lang, isAutoStart, key, i;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    if (isAuto === void 0) {
                      isAuto = false;
                    }

                    if (!(this.m_isFeaturesDemoLoaded && this.IsFeaturesDemoBtnsLoaded())) {
                      _context3.next = 37;
                      break;
                    }

                    this.m_isFeaturesDemoMode = true;
                    AutoShowManager.GetInstance().SetIsFeaturesDemoMode(true);
                    AppManager.canSendNovice = false;

                    if (this.m_featuresHint) {
                      this.m_featuresHint.active = true;
                    }

                    if (this.m_featuresSprite) {
                      this.m_featuresSprite.node.active = false;
                    }

                    if (this.m_featuresBtn) {
                      this.m_featuresBtn.node.active = false;
                    } //第一次自己開


                    this.m_oriBet = this.GetNowBetValue(); // 關掉總分 押注轉換&鎖起來 贏分轉換 DEMO圖示 

                    lang = "_" + LocaleStringManager.CurrLang;
                    this.m_bottomBarManager.SetBalanceSprite(false);
                    this.m_bottomBarManager.BalanceLabel.node.active = false;

                    if (this.m_featuresDemoModeTxt) {
                      this.m_featuresDemoModeTxt.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName.FeaturesDemoMode + lang);
                      this.m_featuresDemoModeTxt.node.active = true;
                    } // FeaturesDemoMode


                    if (this.m_betSprite) {
                      this.m_betSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName.FeaturesDemo_bet + lang);
                    } else if (this.BetLabel) {
                      this.BetLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.DEMO_BET);
                    }

                    this.m_bottomBarManager.SetEnableBetButtons(false);
                    this.m_bottomBarManager.SetLockBetEnable(true);
                    this.SetNowBet(this.m_bottomBarManager.GetBetList()[this.m_demoBetIdx]);
                    this.m_bottomBarManager.CommBtn.node.active = false;
                    this.m_bottomBarManager.CommSprite.node.active = false;

                    if (this.m_bottomBarManager.WinSprite) {
                      this.m_bottomBarManager.WinSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName.FeaturesDemo_Win + lang);
                    }

                    if (this.m_bottomBarManager.BarWinLabel) {
                      this.m_bottomBarManager.BarWinLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.DEMO_WIN);
                    } // this.m_floatBaseNode.stopAllActions();


                    TweenSystem.instance.ActionManager.removeAllActionsFromTarget(this.m_floatBaseNode);
                    this.m_floatBaseNode.active = false;

                    if (this.m_backpackBtn) {
                      this.m_backpackBtn.node.active = false;
                    }

                    if (this.m_discount) {
                      this.m_discount.CloseDiscountView();
                    }

                    NotificationManager.GetInstance().SetState(false);
                    this.m_closeAllBtnCb && this.m_closeAllBtnCb();

                    if (!this.m_featuresDemoComp) {
                      _context3.next = 33;
                      break;
                    }

                    this.m_featuresDemoComp.node.active = true;
                    this.m_featuresDemoComp.StartFeaturesDemo(this.m_featuresDemoIsPlay[0] == 0 || isAuto, this.m_isLandscape);
                    _context3.next = 33;
                    return this.m_featuresDemoComp.ShowHint();

                  case 33:
                    isAutoStart = false;

                    if (this.m_featuresDemoIsPlay[0] == 0) {
                      isAutoStart = true;
                      this.m_isFirstFeaturesDemo = true;
                      this.m_selectFDFunc(0);
                      this.m_lockAutoEnableByFeatures = false;
                      this.m_bottomBarManager.AutoBtn.interactable = false;
                      this.m_bottomBarManager.AutoBtn.node.getComponent(UIRenderer).color = color(150, 150, 150);

                      if (this.m_featuresDemoView) {
                        this.m_featuresDemoView.active = false;
                      }

                      if (this.m_featuresDemoSelectComp) {
                        this.m_featuresDemoSelectComp.node.active = false;
                      }

                      key = Define.AID + ":" + Define.NOW_GAME_ID + "FDemo";

                      if (this.m_featuresDemoIsPlay[0] < this.m_featuresDemoPlayLimit[0]) {
                        this.m_featuresDemoIsPlay[0]++;
                        LocalStorageManager.SetInt(key + 0, this.m_featuresDemoIsPlay[0]);
                      }

                      if (this.m_featuresDemoIsPlay[0] == this.m_featuresDemoPlayLimit[0]) {
                        if (this.m_featuresDemoBtns[0]) {
                          this.m_featuresDemoBtns[0].getComponent(Button).interactable = false;
                          this.m_featuresDemoBtns[0].getChildByName("Txt").getComponent(UIRenderer).color = color(100, 100, 100);
                        } else if (this.m_featuresDemoSelectComp) {
                          this.m_featuresDemoSelectComp.SetSelected(0);
                        }
                      }
                    } else {
                      this.m_featuresDemoTimer.Start(60 * 1000);

                      for (i = 0; i < this.m_featuresNum; i++) {
                        if (this.m_featuresDemoIsPlay[i] == this.m_featuresDemoPlayLimit[i]) {
                          if (this.m_featuresDemoBtns[i]) {
                            this.m_featuresDemoBtns[i].getComponent(Button).interactable = false;
                            this.m_featuresDemoBtns[i].getChildByName("Txt").getComponent(UIRenderer).color = color(100, 100, 100);
                          }

                          if (this.m_featuresDemoSelectComp) {
                            this.m_featuresDemoSelectComp.SetSelected(i);
                          }
                        }
                      }

                      if (this.m_featuresDemoView) {
                        this.m_featuresDemoView.active = true;
                      }

                      if (this.m_featuresDemoSelectComp) {
                        this.m_featuresDemoSelectComp.node.active = true;
                      }

                      this.m_bottomBarManager.SpinSprite.node.active = false;
                      this.m_isNowInDemoMenu = true;
                    } // 關掉阿哩阿雜的功能


                    ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.FEATURES_DEMO_NOW_PLAY, "", this.m_isLandscape)); // if ( this.m_buyBonusBtn && this.m_buyBonusBtn.node.active )
                    // {
                    //     this.m_buyBonusView.Hide();
                    //     this.m_buyBonusSprite.node.active = false;
                    //     this.m_buyBonusBtn.node.active = false;
                    //     if ( this.m_buyBonusRoot )
                    //     {
                    //         this.m_buyBonusRoot.active = false;
                    //     }
                    // }
                    // if ( this.m_backpackBtn )
                    // {
                    //     this.m_backpackBtn.node.opacity = 0;
                    //     this.m_backpackBtn.interactable = false;
                    // }
                    // if ( this.m_backpackSprite )
                    // {
                    //     this.m_backpackSprite.node.opacity = 0;
                    // }
                    // if ( this.m_dailyBtn )
                    // {
                    //     this.m_dailyBtn.node.opacity = 0;
                    //     this.m_dailyBtn.interactable = false;
                    // }
                    // if ( this.m_rankingBtn )
                    // {
                    //     this.m_rankingBtn.node.opacity = 0;
                    //     this.m_rankingBtn.interactable = false;
                    // }
                    // if ( this.m_discount )
                    // {
                    //     this.m_discount.CloseDiscountView();
                    //     this.m_discountBtn.node.opacity = 0;
                    //     this.m_discountBtn.interactable = false;
                    // }
                    // if ( this.m_debrisBtn )
                    // {
                    //     this.m_debrisBtn.node.opacity = 0;
                    //     this.m_debrisBtn.Btn.interactable = false;
                    // }
                    // if ( MHBManager.GetInstance().MustHitByBtn )
                    // {
                    //     MHBManager.GetInstance().MustHitByBtn.node.opacity = 0;
                    //     MHBManager.GetInstance().MustHitByBtn.interactable = false;
                    // }
                    // if ( JPManager.GetInstance().JackPotBtn )
                    // {
                    //     JPManager.GetInstance().JackPotBtn.node.opacity = 0;
                    //     JPManager.GetInstance().JackPotBtn.interactable = false;
                    // }
                    // if ( this.m_trial ) 
                    // {
                    //     this.m_trialBtn.node.opacity = 0;
                    //     this.m_trialBtn.interactable = false;
                    // }

                    return _context3.abrupt("return", isAutoStart);

                  case 37:
                    return _context3.abrupt("return", false);

                  case 38:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function StartFeaturesDemo(_x2) {
            return _StartFeaturesDemo.apply(this, arguments);
          }

          return StartFeaturesDemo;
        }();

        _proto.EndFeaturesDemo = function EndFeaturesDemo() {
          this.m_featuresDemoTimer.Clear(); // 把原來的特色頁按鈕開回來

          if (this.m_featuresSprite) {
            this.m_featuresSprite.node.active = false;
          }

          if (this.m_featuresBtn) {
            this.m_featuresBtn.node.active = false;
          }

          if (this.m_featuresDemoView) {
            this.m_featuresDemoView.active = false;
          }

          if (this.m_featuresDemoComp && this.m_featuresDemoSelectComp) {
            this.m_featuresDemoComp.node.active = false;
            this.m_featuresDemoSelectComp.node.active = false;
          }

          this.m_isFeaturesDemoMode = false;
          AutoShowManager.GetInstance().SetIsFeaturesDemoMode(false);
          AppManager.canSendNovice = true; // 開啟總分 押注轉換&鎖起來 贏分轉換 DEMO圖示 

          var lang = "_" + LocaleStringManager.CurrLang;
          this.m_bottomBarManager.SetBalanceSprite(true);
          this.m_bottomBarManager.BalanceLabel.node.active = true;

          if (this.m_featuresDemoModeTxt) {
            this.m_featuresDemoModeTxt.node.active = false;
          } // FeaturesDemoMode


          if (this.m_betSprite) {
            this.m_betSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName.Bet + lang);
          }

          if (this.BetLabel) {
            this.BetLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BET);
          }

          this.m_lockAutoEnableByFeatures = false;
          this.m_bottomBarManager.AutoBtn.interactable = true;
          this.m_bottomBarManager.AutoBtn.node.getComponent(UIRenderer).color = color(255, 255, 255);
          this.m_bottomBarManager.SetLockBetEnable(false);
          this.m_bottomBarManager.SetEnableBetButtons(true);
          this.SetNowBet(this.m_oriBet);
          this.m_bottomBarManager.CommBtn.node.active = true;
          this.m_bottomBarManager.CommSprite.node.active = true;

          if (this.m_bottomBarManager.WinSprite) {
            this.m_bottomBarManager.WinSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(LocaleImgName.Win + lang);
          }

          if (this.m_bottomBarManager.BarWinLabel) {
            this.m_bottomBarManager.BarWinLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.WIN);
          }

          if (this.m_featuresHint) {
            this.m_featuresHint.active = false;
          }

          this.m_bottomBarManager.SpinSprite.node.active = true;
          this.m_isNowInDemoMenu = false; // 開回阿哩阿雜的功能
          //開回特色頁

          this.m_featuresView.Show(this.m_isLandscape, false); // this.m_floatBaseNode.stopAllActions();

          TweenSystem.instance.ActionManager.removeAllActionsFromTarget(this.m_floatBaseNode);
          this.m_floatBaseNode.active = true;

          if (backpackManager.HasBackpack && this.m_backpackBtn) {
            this.m_backpackBtn.node.active = true;
          } // if ( this.m_backpackBtn )
          // {
          //     this.m_backpackBtn.node.opacity = 255;
          //     this.m_backpackBtn.interactable = true;
          // }
          // if ( this.m_backpackSprite )
          // {
          //     this.m_backpackSprite.node.opacity = 255;
          // }
          // if ( this.m_dailyBtn )
          // {
          //     this.m_dailyBtn.node.opacity = 255;
          //     this.m_dailyBtn.interactable = true;
          // }
          // if ( this.m_rankingBtn )
          // {
          //     this.m_rankingBtn.node.opacity = 255;
          //     this.m_rankingBtn.interactable = true;
          // }
          // if ( this.m_discount )
          // {
          //     this.m_discountBtn.node.opacity = 255;
          //     this.m_discountBtn.interactable = true;
          // }
          // if ( this.m_debrisBtn )
          // {
          //     this.m_debrisBtn.node.opacity = 255;
          //     this.m_debrisBtn.Btn.interactable = true;
          // }
          // if ( MHBManager.GetInstance().MustHitByBtn )
          // {
          //     MHBManager.GetInstance().MustHitByBtn.node.opacity = 255;
          //     MHBManager.GetInstance().MustHitByBtn.interactable = true;
          // }
          // if ( JPManager.GetInstance().JackPotBtn )
          // {
          //     JPManager.GetInstance().JackPotBtn.node.opacity = 255;
          //     JPManager.GetInstance().JackPotBtn.interactable = true;
          // }


          NotificationManager.GetInstance().SetState(true); // if ( this.m_trial ) 
          // {
          //     this.m_trialBtn.node.opacity = 255;
          //     this.m_trialBtn.interactable = true;
          // }

          if (this.m_bottomBarManager.IsOpenMall > Define.BuyBonusTag.None && !sys.isNative) {
            this.SetBuyMall(true);
          } // 觸發結束按鈕
          // this.m_endFDFunc();


          this.m_openAllBtnCb && this.m_openAllBtnCb();
          this.m_closeFDNotifyCb && this.m_closeFDNotifyCb();

          if (!this.m_bottomBarManager.PlayReadyNode) {
            error('featurend ShowSkyBar');
            var nodeParent = this.node.parent;
            var setPosNode = nodeParent.parent;
            AppManager.ShowSkyBar(setPosNode, true);
          }

          AutoShowManager.GetInstance().AutoShowNext();
        };

        _proto.HaveFeaturesDemoMode = function HaveFeaturesDemoMode() {
          return this.m_haveFeaturesDemoMode;
        };

        _proto.IsFeaturesDemoMode = function IsFeaturesDemoMode() {
          return this.m_isFeaturesDemoMode;
        } //====================排行榜====================

        /**
         * 贏分排行榜初始化
         * @param nickName 玩家名稱( account | [ account, nickName ] )
         * @param token 
         * @param lang 語言
         * @param compCb 初始化完成的 callback
         * @param failCb 初始化失敗 or 活動不滿足出現條件的 callback
         * @param reqMail 詢問信件的 callback
         */
        ;

        _proto.RankingInit = function RankingInit(nickName, token, lang, compCb, failCb, reqMail) {
          var _this19 = this; //  this.m_rankingAnim 開發期間先不做


          if (Define.IS_DEMO || this.CheckLineCode() || Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CloseBackpack)
          /*||
          Tools.CheckSwitchOff( Define.SwitchOffKeyDefine.CloseSideFeatures )*/
          ) {
              return;
            }

          this.m_bottomBarManager.LockWebViewEnable(true);
          this.LoadBackpackString();
          Rankboard.ReqMail = reqMail;
          var path = Tools.GetFilePath(RankBtnPrefab);
          Define.CommonBundle.load(path, Prefab, function (err, prefab) {
            if (err) {
              error(err.message || err);

              if (failCb) {
                failCb();
              }

              return;
            }

            var node = instantiate(prefab);
            node.active = false;

            if (
            /*Tools.IsTadaCasino &&*/
            _this19.m_iconBox) {
              _this19.m_iconBox.SetBtnSeat(node, IconBoxSeat.RankBoard);

              _this19.OnRotation(_this19.m_isLandscape);

              _this19.m_rankingBtnRoot.active = false;
            } else {
              _this19.m_rankingBtnRoot.addChild(node);
            }

            _this19.m_rankingBtn = node.getComponent(Button);
            _this19.m_rankingAnim = node;
            _this19.m_rankingLabel = node.getChildByName("Data").getChildByName("Text_Time").getComponent(Label); // 排行榜

            if (_this19.m_rankingBtn) {
              _this19.m_rankingBtn.node.on(Node.EventType.TOUCH_START, function (event) {
                // event.stopPropagationImmediate();
                // event.stopPropagation();
                event.propagationImmediateStopped = true;
                event.propagationStopped = true;

                if (_this19.m_bottomBarManager.CurrentTouchName == null && _this19.m_rankingBtn.interactable) {
                  _this19.m_bottomBarManager.CurrentTouchName = event.target.name;

                  if (
                  /*!Tools.IsTadaCasino*/
                  !_this19.m_iconBox) {
                    _this19.m_rankingBtnRoot.getComponent(FloatView).OnTouchStart(event.getUILocation());
                  }
                } else {
                  if (event.target && event.target.active == false) {
                    _this19.m_bottomBarManager.CurrentTouchName = event.target.name;
                  }
                }
              });

              _this19.m_rankingBtn.node.on(Node.EventType.TOUCH_MOVE, function (event) {
                if (_this19.m_bottomBarManager.CurrentTouchName == event.target.name) {
                  _this19.m_bottomBarManager.CurrentTouchName = event.target.name;

                  if (
                  /*!Tools.IsTadaCasino*/
                  !_this19.m_iconBox) {
                    _this19.m_rankingBtnRoot.getComponent(FloatView).OnTouchMove(event.getUILocation());
                  }
                }
              });

              _this19.m_rankingBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
                if (_this19.m_bottomBarManager.CurrentTouchName == event.target.name) {
                  _this19.m_bottomBarManager.CurrentTouchName = null;
                }
              });

              _this19.m_rankingBtn.node.on(Node.EventType.TOUCH_END, function (event) {
                if (_this19.m_bottomBarManager.CurrentTouchName != event.target.name) {
                  return;
                }

                _this19.m_bottomBarManager.CurrentTouchName = null;

                var cb = function cb() {
                  if (_this19.m_rankingBtn.interactable) {
                    if (_this19.m_rankingView) {
                      log("Extra RankBoard this.m_rankingView:", _this19.m_rankingView);

                      _this19.m_rankingView.openUI();

                      _this19.PushClickToBuffer(_this19.m_bottomBarManager.CLICK_BUFFER_TYPE.RANKING);

                      SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
                    }
                  }
                };

                if (
                /*!Tools.IsTadaCasino*/
                !_this19.m_iconBox) {
                  _this19.m_rankingBtnRoot.getComponent(FloatView).OnTouchEnd(event.getUILocation(), cb);
                } else {
                  cb();
                }
              });
            }

            _this19.RankboardInit(nickName, token, lang, compCb, failCb);
          });
        };

        _proto.RankboardInit = function RankboardInit(nickName, token, lang, compCb, failCb) {
          var _this20 = this;

          Rankboard.init(Define.AID, Define.API_ID, Define.NOW_GAME_ID, Define.SITE_ID, function (res) {
            if (res == false) {
              _this20.m_bottomBarManager.LockWebViewEnable(false);
            } //  解開封印


            if (_this20.m_rankingAnim) {
              _this20.m_rankingAnim.getComponent(Animation).play();
            }

            var path = Tools.GetFilePath(RankBoardPrefab); // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {
            //     path = Tools.GetFilePath( RankBoardPrefab_v2 );
            // }

            log("Rankboard RankingInit path:", path);
            Define.CommonBundle.load(path, Prefab, function (err, prefab) {
              if (err) {
                error(err.message || err);

                if (failCb) {
                  failCb();
                }

                return;
              }

              var name;

              if (typeof nickName == "string") {
                name = [nickName, nickName];
              } else {
                name = nickName;
              }

              var node = instantiate(prefab); // if ( Tools.Line === Define.LineSetting.americas ||
              //     Tools.Line === Define.LineSetting.americas_str )
              // {

              node.active = false;
              node.setPosition(0, 350); // }

              _this20.node.addChild(node);

              Tools.SetZIndex(node, Define.ZOrder.RANKING);
              _this20.m_rankingView = node.getComponent(Rankboard);

              _this20.m_rankingView.initUI(_this20, token, lang, name, [_this20.m_rankingBtn.node, _this20.m_rankingAnim], _this20.m_rankingLabel, _this20.m_isLandscape, function () {
                if (!_this20.m_isInTrial) {
                  _this20.m_rankingBtn.node.active = true;

                  if (
                  /*Tools.IsTadaCasino &&*/
                  _this20.m_iconBox) {
                    _this20.m_iconBox.OpenBtnSeat(IconBoxSeat.RankBoard, true);
                  }
                }

                if (
                /*!Tools.IsTadaCasino*/
                !_this20.m_iconBox) {
                  _this20.m_topLeftIcon.AddIcon("ranking", [_this20.m_rankingBtnRoot]).Sort().Reorder();

                  _this20.m_rankingBtnRoot.getComponent(FloatView).ResetPosition();

                  if (_this20.m_dailyBtn) {
                    _this20.m_dailyBtn.node.getComponent(FloatView).ResetPosition();
                  }

                  if (_this20.m_lobbyBtn && _this20.m_lobbyBtn.node.getComponent(FloatView)) {
                    _this20.m_lobbyBtn.node.getComponent(FloatView).ResetPosition();
                  }

                  JPManager.GetInstance().ResetPosition();
                  MHBManager.GetInstance().ResetPosition();
                }

                _this20.m_bottomBarManager.LockWebViewEnable(false); // this.m_topLeftLabel.AddIcon( "ranking", [ this.m_rankingLabel.node ] ).Sort().Reorder();


                if (!res) {
                  _this20.m_rankingView.CloseIcon();

                  if (
                  /*Tools.IsTadaCasino &&*/
                  _this20.m_iconBox) {
                    _this20.m_iconBox.OpenBtnSeat(IconBoxSeat.RankBoard, false);
                  }

                  if (failCb) {
                    failCb();
                  }
                } else {
                  if (compCb) {
                    compCb();
                  }
                }

                if (_this20.m_setCanAutoShowRankboardUI) {
                  _this20.SetCanAutoShowRankboardUI();
                }
              });
            });
          });
        };

        _proto.SetCanAutoShowRankboardUI = function SetCanAutoShowRankboardUI() {
          if (this.m_rankingView) {
            this.m_rankingView.canAutoShowUI = true;
          } else {
            this.m_setCanAutoShowRankboardUI = true;
          }
        };

        _proto.SetRankingIconVisible = function SetRankingIconVisible(visible) {
          if (this.m_isInTrial) {
            return;
          }

          if (this.m_rankingBtn) {
            if (visible) {
              this.m_rankingBtn.node.getComponent(UIOpacity).opacity = 255;
              this.m_rankingBtn.interactable = true;
              this.m_rankingAnim.getComponent(Animation).resume();

              if (
              /*Tools.IsTadaCasino &&*/
              this.m_iconBox) {
                this.m_iconBox.OpenBtnSeat(IconBoxSeat.RankBoard, true);
              }
            } else {
              this.m_rankingBtn.node.getComponent(UIOpacity).opacity = 0;
              this.m_rankingBtn.interactable = false;
              this.m_rankingAnim.getComponent(Animation).pause();

              if (
              /*Tools.IsTadaCasino &&*/
              this.m_iconBox) {
                this.m_iconBox.OpenBtnSeat(IconBoxSeat.RankBoard, false);
              }
            }
          }
        } //====================任務====================

        /**
         * 每日神秘任務介面初始化
         * @param plistPath (已棄用)道具圖
         * @param getNowMission 獲得本日任務內容
         * @param compCb 初始化完成的 callback
         */
        ;

        _proto.DailyMissionInit = function DailyMissionInit(plistPath, getNowMission, compCb) {
          var _this21 = this;

          if (Define.IS_DEMO || this.CheckLineCode() || Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CloseBackpack)) {
            return;
          }

          this.LoadBackpackString();

          var setBtn = function setBtn() {
            _this21.m_dailyBtn.node.on(Node.EventType.TOUCH_START, function (event) {
              // event.stopPropagationImmediate();
              // event.stopPropagation();
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this21.m_bottomBarManager.CurrentTouchName == null && _this21.m_dailyBtn.interactable) {
                _this21.m_bottomBarManager.CurrentTouchName = event.target.name; // if ( Tools.IsTadaCasino )
                // {

                _this21.m_dailyBtn.node.getComponent(FloatView).OnTouchStart(event.getUILocation()); // }

              } else {
                if (event.target && event.target.active == false) {
                  _this21.m_bottomBarManager.CurrentTouchName = event.target.name;
                }
              }
            });

            _this21.m_dailyBtn.node.on(Node.EventType.TOUCH_MOVE, function (event) {
              if (_this21.m_bottomBarManager.CurrentTouchName == event.target.name) {
                _this21.m_bottomBarManager.CurrentTouchName = event.target.name; // if ( Tools.IsTadaCasino )
                // {

                _this21.m_dailyBtn.node.getComponent(FloatView).OnTouchMove(event.getUILocation()); // }

              } else {
                if (event.target && event.target.active == false) {
                  _this21.m_bottomBarManager.CurrentTouchName = event.target.name;
                }
              }
            });

            _this21.m_dailyBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              if (_this21.m_bottomBarManager.CurrentTouchName == event.target.name) {
                _this21.m_bottomBarManager.CurrentTouchName = null;
              }
            });

            _this21.m_dailyBtn.node.on(Node.EventType.TOUCH_END, function (event) {
              if (_this21.m_bottomBarManager.CurrentTouchName != event.target.name) {
                return;
              }

              _this21.m_bottomBarManager.CurrentTouchName = null;

              var cb = function cb() {
                if (_this21.m_dailyBtn.interactable) {
                  if (missionManager.HasMission) {
                    _this21.m_bottomBarManager.CloseAllMenu();

                    missionManager.OpenUI();

                    _this21.PushClickToBuffer(_this21.m_bottomBarManager.CLICK_BUFFER_TYPE.DAILY_MISSION);

                    SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
                  }
                }
              }; // if ( Tools.IsTadaCasino )
              // {


              if (Tools.IsTadaCasino && _this21.m_rookieHintManager) {
                _this21.m_rookieHintManager.CloseHint(Define.RookieHintType.MISSION_BTN);
              }

              _this21.m_dailyBtn.node.getComponent(FloatView).OnTouchEnd(event.getUILocation(), cb); // }
              // else
              // {
              //     cb();
              // }

            });
          };

          if (this.m_dailyBtn) {
            setBtn();
            this.CreateDailyMissionView(getNowMission, compCb);
          } else {
            //  Tools.IsTada要改Tools.IsTadaCasino
            var path = Tools.GetFilePath(Tools.IsTadaCasino ? Define.NewDailyMissionBtn : Define.DailyMissionBtn);
            Define.CommonBundle.load(path, Prefab, function (error, assets) {
              if (error) {
                _this21.DailyMissionInit(plistPath, getNowMission, compCb);

                return;
              }

              var node = instantiate(assets);
              node.getComponent(UIOpacity).opacity = 0.1;

              if (!Tools.IsTadaCasino && _this21.m_iconBox) {
                // node.active = true;
                _this21.m_iconBox.SetBtnSeat(node, IconBoxSeat.DailyMission);

                _this21.OnRotation(_this21.m_isLandscape);
              } else {
                _this21.m_floatBaseNode.addChild(node);

                if (_this21.m_iconBox) {
                  Tools.SetZIndex(_this21.m_iconBox.node, Define.BtnZOrder.MISSION);
                } // if ( !Tools.IsTadaCasino )
                // {


                _this21.m_topLeftIcon.AddIcon("mission", [node]).Sort().Reorder(); // this.m_topLeftLabel.AddIcon( "mission", [ this.m_dailyLabel.node ] ).Sort().Reorder();


                node.getComponent(FloatView).ResetPosition();

                if (_this21.m_rankingBtn) {
                  _this21.m_rankingBtnRoot.getComponent(FloatView).ResetPosition();
                }

                if (_this21.m_lobbyBtn && _this21.m_lobbyBtn.node.getComponent(FloatView)) {
                  _this21.m_lobbyBtn.node.getComponent(FloatView).ResetPosition();
                }

                JPManager.GetInstance().ResetPosition();
                MHBManager.GetInstance().ResetPosition(); // }
              }

              node.getComponent(UIOpacity).opacity = 255;
              node.active = false;
              var missionBtn = node.getComponent(MissionBtn);
              _this21.m_dailyBtn = missionBtn.Btn;
              _this21.m_dailyAnim = missionBtn.AnimNode;
              _this21.m_dailyLabel = missionBtn.TimeLabel;
              setBtn();

              _this21.CreateDailyMissionView(getNowMission, compCb);

              if (Tools.IsTadaCasino && _this21.m_rookieHintManager) {
                var lv = LevelManager.GetInstance().LevelInfo.level; // console.error( '☐☐☐☐☐check DailyMissionIconVisible', lv )

                if (lv < HintLevel.Mission) {
                  _this21.SetDailyMissionIconVisible(false);
                }

                _this21.m_rookieHintManager.SetTargetPosNode(_this21.m_dailyBtn.node);
              }
            });
          }
        };

        _proto.CreateDailyMissionView = function CreateDailyMissionView(getNowMission, compCb) {
          var _this22 = this;

          var path = "Astt/%s/dailyMission/Prefab/DailyMission"; // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {
          //     path = "Astt/%s/dailyMission/Prefab/DailyMission";
          // }

          Define.CommonBundle.load(Tools.GetFilePathApiId(path), Prefab, function (err, prefab) {
            if (err) {
              error(err.message || err);
              return;
            }

            var node = instantiate(prefab); // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {
            // node.active = false;
            // }

            _this22.node.addChild(node);

            Tools.SetZIndex(node, Define.ZOrder.RANKING);
            missionManager.init(_this22, getNowMission, {
              Pic: _this22.m_dailyBtn.node,
              Ani: _this22.m_dailyAnim.getComponent(Animation),
              Label: _this22.m_dailyLabel.node,
              Mode: _this22.m_dailyBtn.node.getComponent(MissionBtn) ? _this22.m_dailyBtn.node.getComponent(MissionBtn).NewNode : find("btn_dailymissionNode/Node_00/Mode", _this22.m_dailyBtn.node)
            }, _this22.m_dailyLabel, _this22.m_isLandscape, function () {
              // this.m_dailyView = dailyView;
              if (compCb) {
                compCb();
              }
            });

            missionManager.EventCb = function (event) {
              // if ( Tools.IsTadaCasino )
              // {
              switch (event) {
                case EventType.Active:
                  // if ( !Tools.IsTadaCasino )
                  // {
                  _this22.m_topLeftIcon.AddIcon("mission", [_this22.m_dailyBtn.node]).Sort().Reorder();

                  _this22.m_dailyBtn.node.active = true; // this.m_topLeftLabel.AddIcon( "mission", [ this.m_dailyLabel.node ] ).Sort().Reorder();

                  _this22.m_dailyBtn.node.getComponent(FloatView).ResetPosition();

                  if (_this22.m_rankingBtn) {
                    _this22.m_rankingBtnRoot.getComponent(FloatView).ResetPosition();
                  }

                  _this22.m_dailyBtn.node.getComponent(FloatView).ResetPosition();

                  if (_this22.m_lobbyBtn && _this22.m_lobbyBtn.node.getComponent(FloatView)) {
                    _this22.m_lobbyBtn.node.getComponent(FloatView).ResetPosition();
                  }

                  JPManager.GetInstance().ResetPosition();
                  MHBManager.GetInstance().ResetPosition(); // }

                  break;

                case EventType.Inactive:
                  _this22.m_topLeftIcon.RemoveIcon("mission").Sort().Reorder(); // this.m_topLeftLabel.RemoveIcon( "mission" ).Sort().Reorder();


                  break;
              } // }

            };

            _this22.m_bottomBarManager.sendTestLog(3002);
          });
        };

        _proto.SetDailyMissionIconVisible = function SetDailyMissionIconVisible(visible) {
          if (this.m_isInTrial) {
            return;
          }

          if (!this.m_dailyBtn || !this.m_dailyAnim) {
            return;
          }

          console.error('☐☐☐☐☐SetDailyMissionIconVisible', this.m_isInTrial, visible);

          if (visible) {
            this.m_dailyBtn.node.getComponent(UIOpacity).opacity = 255; // this.m_dailyAnim.opacity = 255;
            // this.m_dailyLabel.node.opacity = 255;

            this.m_dailyBtn.interactable = true;
            missionManager.LockDailyEnable(false);
            this.m_dailyAnim.getComponent(Animation).resume();

            if (!Tools.IsTadaCasino && this.m_iconBox) {
              this.m_iconBox.OpenBtnSeat(IconBoxSeat.DailyMission, true);
            }
          } else {
            this.m_dailyBtn.node.getComponent(UIOpacity).opacity = 1; // this.m_dailyAnim.opacity = 0;
            // this.m_dailyLabel.node.opacity = 0;

            this.m_dailyBtn.interactable = false;
            missionManager.LockDailyEnable(true);
            this.m_dailyAnim.getComponent(Animation).pause();

            if (!Tools.IsTadaCasino && this.m_iconBox) {
              this.m_iconBox.OpenBtnSeat(IconBoxSeat.DailyMission, false);
            }
          }
        } //====================百寶箱====================

        /**
         * 初始化推薦遊戲及簽到，放在AutoPlayPanelInit之後
         * @param stateReqFunc 簽到狀態請求
         * @param signInReqFunc 簽到請求
         * @param needSortBtn 需要自動排版浮動按鈕
         */
        ;

        _proto.RecommendInit = function RecommendInit(stateReqFunc, signInReqFunc, reqReplay, needSortBtn) {
          if (needSortBtn === void 0) {
            needSortBtn = true;
          }

          log("RecommendInit", Define.IS_DEMO, this.CheckLineCode(), Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.TreasureChest));
          var vipSpriteFrames = this.m_bottomBarManager.VipSpriteFrames;
          var appVipSpriteFrames = this.m_bottomBarManager.AppVipSpriteFrames;

          if (Define.IS_DEMO || this.CheckLineCode() || Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.TreasureChest)) {
            this.m_discount.SetLogoIcon(); // 新結構特色頁鑲在裡面,還是要設定LOGO

            return;
          }

          this.m_discount.Init(this, vipSpriteFrames, appVipSpriteFrames, stateReqFunc, signInReqFunc, reqReplay);

          if (this.m_mayLikeView) {
            this.m_mayLikeView.Init(this, this.m_discount);
          }

          this.needSortBtn = needSortBtn;
        };

        _proto.RecommendNewInit = function RecommendNewInit() {
          var _this23 = this; // if ( Tools.CheckSwitchOff( Define.SwitchOffKeyDefine.CloseSideFeatures ) )
          // {
          //     return;
          // }


          var reqState = function reqState() {
            var data = new _cjsExports.gaiaProto.VipSignInfoReq();
            data.aid = Number(Define.APP.GetAID());
            data.token = Define.APP.GetAToken();

            if (walletManger.HasWallet) {
              data.currencynumber = walletManger.CurencyID;
            }

            var req = new SignInReqData.SignInInfoReq();
            req.reqData = _cjsExports.gaiaProto.VipSignInfoReq.encode(data).finish();
            ConnectManager.GetInstance().SendCommand(req, function (ack) {
              gaiaManager.CheckAck(ack, function (type, data) {
                var info = _cjsExports.gaiaProto.VipSignInfoAck.decode(data);

                var newAck = {
                  ack: {
                    Info: {
                      TreasureList: null,
                      ExpiredTime: info.info.expiredtime ? info.info.expiredtime : 0,
                      Error: info.info.error ? info.info.error : 0
                    },
                    Result: info.result ? info.result : 0
                  },
                  ret: 0
                };

                if (info.info.treasurelist) {
                  newAck.ack.Info.TreasureList = [];

                  for (var i = 0; i < info.info.treasurelist.length; i++) {
                    var treasure = {
                      Index: info.info.treasurelist[i].index ? info.info.treasurelist[i].index : "0",
                      MinVip: info.info.treasurelist[i].minvip ? info.info.treasurelist[i].minvip : 0,
                      Exp: info.info.treasurelist[i].exp ? info.info.treasurelist[i].exp : 0,
                      IsOpen: info.info.treasurelist[i].isopen ? info.info.treasurelist[i].isopen : false
                    };
                    newAck.ack.Info.TreasureList.push(treasure);
                  }
                }

                _this23.m_discount.OnRecvSignInState(newAck);
              });
            }, false, true);
          };

          var reqSignIn = function reqSignIn(index) {
            var data = new _cjsExports.gaiaProto.VipSignRewardReq();
            data.aid = Number(Define.APP.GetAID());
            data.token = Define.APP.GetAToken();
            data.index = index;

            if (walletManger.HasWallet) {
              data.currencynumber = walletManger.CurencyID;
            }

            var req = new SignInReqData.SignInReq();
            req.reqData = _cjsExports.gaiaProto.VipSignRewardReq.encode(data).finish();
            ConnectManager.GetInstance().SendCommand(req, function (ack) {
              gaiaManager.CheckAck(ack, function (type, data) {
                var info = _cjsExports.gaiaProto.VipSignRewardAck.decode(data);

                var newAck = {
                  ack: {
                    Info: {
                      ItemID: info.info.itemid ? info.info.itemid : 0,
                      Count: info.info.count ? info.info.count : 0,
                      Error: info.info.error ? info.info.error : 0,
                      Icon: info.info.icon ? info.info.icon : 0
                    },
                    Result: info.result ? info.result : 0
                  },
                  ret: 0
                };

                _this23.m_discount.OnRecvSignIn(newAck);
              });
            }, false, true);
          };

          this.RecommendInit(reqState, reqSignIn);
        };

        _proto.SetDiscountBtnState = function SetDiscountBtnState(active) {
          if (!this.m_discountBtn) {
            return;
          }

          if (active) {
            if (this.needSortBtn &&
            /*!Tools.IsTadaCasino*/
            !this.m_iconBox) {
              // this.m_topRightIcon.AddIcon( Define.CbKey.Discount, [ this.m_discountBtn.node ] ).Sort().Reorder();
              this.m_topRightIcon.AddIcon(Define.CbKey.Discount, [this.m_discountBtnRoot]).Sort().Reorder(); // this.m_discountBtn.node.getComponent( FloatView ).ResetPosition();

              this.m_discountBtnRoot.getComponent(FloatView).ResetPosition();

              if (this.m_favorBtn) {
                this.m_favorBtn.node.getComponent(FloatView).ResetPosition();
              }

              if (this.m_debrisNode) {
                this.m_debrisNode.getComponent(FloatView).ResetPosition();
              }

              if (this.m_trialBtn) {
                this.m_trialBtn.node.getComponent(FloatView).ResetPosition();
              }

              if (this.m_buyBonusRoot) {
                this.m_buyBonusRoot.getComponent(FloatView).ResetPosition();
              }

              if (this.m_depositBtn) {
                this.m_depositBtn.getComponent(FloatView).ResetPosition();
              }
            }
          } else {
            this.m_topRightIcon.RemoveIcon(Define.CbKey.Discount);
          }

          this.m_discountBtn.node.active = active;
        };

        _proto.SetFavorBtnVisible = function SetFavorBtnVisible(visible, user) {
          BigFavorState[user] = visible;

          if (this.m_favorBtn) {
            if (visible) {
              if (
              /*!Tools.IsTadaCasino*/
              !this.m_iconBox) {
                this.m_topRightIcon.AddIcon(Define.CbKey.Favor, [this.m_favorBtn.node]).Sort().Reorder(); // this.m_discountBtn.node.getComponent( FloatView ).ResetPosition();

                this.m_discountBtnRoot.getComponent(FloatView).ResetPosition();
                this.m_favorBtn.node.getComponent(FloatView).ResetPosition();
                this.m_favorBtn.node.active = visible;

                if (this.m_debrisNode) {
                  this.m_debrisNode.getComponent(FloatView).ResetPosition();
                }

                if (this.m_trialBtn) {
                  this.m_trialBtn.node.getComponent(FloatView).ResetPosition();
                }

                if (this.m_buyBonusRoot) {
                  this.m_buyBonusRoot.getComponent(FloatView).ResetPosition();
                }

                if (this.m_depositBtn) {
                  this.m_depositBtn.getComponent(FloatView).ResetPosition();
                }
              }
            } else {
              var canShow = false;

              for (var i = 0; i < BigFavorState.length; i++) {
                if (BigFavorState[i]) {
                  canShow = true;
                  break;
                }
              }

              this.m_favorBtn.node.active = canShow;
              if (canShow) ;else {
                this.m_topRightIcon.RemoveIcon(Define.CbKey.Favor);
              }
            }
          }
        };

        _proto.AddDiscountPage = function AddDiscountPage(view, pageName, nameStringKey, onRotationCb, showCb) {
          if (nameStringKey === void 0) {
            nameStringKey = "";
          }

          if (!this.m_bottomBarManager.IsGLIGames && !this.m_bottomBarManager.IsBMMGames) {
            this.m_discount.SetManager(this);
            this.m_discount.AddPageBtn(view, pageName, nameStringKey, onRotationCb, showCb);
          }
        };

        _proto.RemoveDiscountPage = function RemoveDiscountPage(pageName) {
          if (!this.m_bottomBarManager.IsGLIGames && !this.m_bottomBarManager.IsBMMGames) {
            this.m_discount.RemoveBtn(pageName);
          }
        } // 大獎重播
        ;

        _proto.SetBigWinReplayMask = function SetBigWinReplayMask(isVisible) {
          this.m_bigWinReplayMask.active = isVisible;
        };

        _proto.ReplayAndChangeTxt = function ReplayAndChangeTxt(isVisible) {
          this.m_bottomBarManager.BetBtn.node.active = isVisible;
          this.m_bottomBarManager.NowBetLabel.node.active = isVisible;
          this.m_betSprite.node.active = isVisible;
          this.m_bottomBarManager.SetBalanceSprite(isVisible);
          this.m_bottomBarManager.BalanceLabel.node.active = isVisible;
          this.m_betSprite.node.active = isVisible;

          if (this.m_bottomBarManager.WinSprite) {
            this.m_bottomBarManager.WinSprite.node.active = isVisible;
          }

          if (this.m_bottomBarManager.BarWinLabel) {
            this.m_bottomBarManager.BarWinLabel.node.active = isVisible;
          }
        };

        _proto.ReplayAndChangeDollarSign = function ReplayAndChangeDollarSign(dollarSign) {
          Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CurrencySymbol);
          {
            Define.DollarSymbol = "";
            dollarSign = "";
          }
          this.m_originalDollarSymbol = Define.DollarSymbol;
          Define.DollarSymbol = dollarSign;
          Define.DollarFontFamily = walletManger.GetDollarFontFamily(Define.DollarSymbol);
        };

        _proto.ReplayAndChangeUnit = function ReplayAndChangeUnit(unit) {
          this.m_replayUnit = unit;
        };

        _proto.PlayReplayStartAni = function PlayReplayStartAni(bet, endCb) {
          var _this24 = this;

          tween(this.node).call(function () {
            _this24.SetReplayStart(bet);

            _this24.ReplayAndChangeTxt(false); // 關背包


            if (_this24.m_backpackBtn) {
              _this24.ReplayAndChangeTxt(false); // 關背包


              if (_this24.m_backpackBtn) {
                _this24.m_backpackBtn.node.getComponent(UIOpacity).opacity = 0;
                _this24.m_backpackBtn.interactable = false;
              }

              if (_this24.m_backpackSprite) {
                _this24.m_backpackSprite.node.getComponent(UIOpacity).opacity = 0;
              }

              _this24.SetBigWinReplayMask(true);

              _this24.m_bottomBarManager.SetWinValue(0);

              _this24.m_bigWinReplayAni.getComponent(Animation).play("replayer_flayin");
            }
          }).delay(Define.REPLAY_ANI_DELAY_TIME).call(function () {
            endCb();
          }).start();
        };

        _proto.PlayReplayEndAni = function PlayReplayEndAni() {
          var _this25 = this;

          tween(this.node).call(function () {
            _this25.m_bigWinReplayAni.getComponent(Animation).play("replayer_flayout");
          }).delay(Define.REPLAY_ANI_DELAY_TIME).call(function () {
            _this25.SetBigWinReplayMask(false);

            _this25.ReplayAndChangeTxt(true); // 開背包


            if (_this25.m_backpackBtn) {
              _this25.m_backpackBtn.node.getComponent(UIOpacity).opacity = 255;
              _this25.m_backpackBtn.interactable = true;
            }

            if (_this25.m_backpackSprite) {
              _this25.m_backpackSprite.node.getComponent(UIOpacity).opacity = 255;
            }
          }).start();
        };

        _proto.SetReplayStart = function SetReplayStart(bet) {
          this.m_replayBetValue.string = String(bet);
          this.m_bottomBarManager.LogIndex.string = "";
          this.m_isNowReplay = true;
        };

        _proto.SetReplayEnd = function SetReplayEnd() {
          this.m_isNowReplay = false;
          Define.DollarSymbol = this.m_originalDollarSymbol;
          Define.DollarFontFamily = walletManger.GetDollarFontFamily(Define.DollarSymbol);
          this.m_bottomBarManager.SetChips(this.m_bottomBarManager.GetChips());
          this.m_bottomBarManager.SetWinValue(0);
          this.PlayReplayEndAni();
        } //====================洗碼====================
        ;

        _proto.GetTrailBetList = function GetTrailBetList() {
          // return this.m_trial.GetTrailBetList;
          return trialManager.GetTrailBetList;
        };

        _proto.SetBuyBonusBtnShow = function SetBuyBonusBtnShow(show) {
          if (show) {
            // 因為判斷開關ack回來有時間差 因此show的時候 要判斷有沒有活動才開
            if (this.m_bottomBarManager.IsOpenMall > Define.BuyBonusTag.None) {
              this.SetBuyMall(show);
            }
          } else {
            // 只隱藏 btn
            if (this.m_buyBonusRoot) {
              this.m_buyBonusRoot.active = show;
            }

            if (this.m_buyBonusBtn) {
              this.m_buyBonusBtn.node.active = show; // if ( /*Tools.IsTadaCasino &&*/ this.m_iconBox )
              // {
              //     this.m_iconBox.OpenBtnSeat( IconBoxSeat.BuyBonus, show );
              // }
            }

            if (this.m_buyBonusSprite) {
              this.m_buyBonusSprite.node.active = show;
            }
          }

          this.OnRotation(this.m_isLandscape, this.m_isSmall, this.m_isLow);
        };

        _proto.SetTrialBtnTouch = function SetTrialBtnTouch() {
          var _this26 = this;

          if (this.m_trialBtn) {
            // 洗碼按鈕
            this.m_trialBtn.node.on(Node.EventType.TOUCH_START, function (event) {
              // event.stopPropagationImmediate();
              // event.stopPropagation();
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;
              log("this.m_trialBtn TOUCH_START");

              if (_this26.m_bottomBarManager.CurrentTouchName == null && _this26.m_trialBtn.interactable) {
                _this26.m_bottomBarManager.CurrentTouchName = event.target.name;

                if (!_this26.m_iconBox) {
                  _this26.m_trialBtn.node.getComponent(FloatView).OnTouchStart(event.getUILocation());
                }
              } else {
                if (event.target && event.target.active == false) {
                  _this26.m_bottomBarManager.CurrentTouchName = event.target.name;
                }
              }
            });
            this.m_trialBtn.node.on(Node.EventType.TOUCH_MOVE, function (event) {
              log("this.m_trialBtn TOUCH_MOVE");

              if (_this26.m_bottomBarManager.CurrentTouchName == event.target.name) {
                _this26.m_bottomBarManager.CurrentTouchName = event.target.name;

                if (!_this26.m_iconBox) {
                  _this26.m_trialBtn.node.getComponent(FloatView).OnTouchMove(event.getUILocation());
                }
              } else {
                if (event.target && event.target.active == false) {
                  _this26.m_bottomBarManager.CurrentTouchName = event.target.name;
                }
              }
            });
            this.m_trialBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              if (_this26.m_bottomBarManager.CurrentTouchName == event.target.name) {
                _this26.m_bottomBarManager.CurrentTouchName = null;
              }
            });
            this.m_trialBtn.node.on(Node.EventType.TOUCH_END, function (event) {
              log("this.m_trialBtn TOUCH_END");

              if (_this26.m_bottomBarManager.CurrentTouchName != event.target.name) {
                return;
              }

              _this26.m_bottomBarManager.CurrentTouchName = null;

              var cb = function cb() {
                log("this.m_trialBtn TOUCH_END : ", _this26.m_trialBtn.interactable, _this26.m_trial); // if ( this.m_trialBtn.interactable && this.m_trial )

                if (_this26.m_trialBtn.interactable && trialManager.HasTrial) {
                  // this.m_trial.ShowTrialView();
                  trialManager.ShowTrialView();
                }

                ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.TRIAL_CLICK, Define.PHASE_RESULT.SUCCESS, _this26.m_isLandscape));
              };

              if (!_this26.m_iconBox) {
                _this26.m_trialBtn.node.getComponent(FloatView).OnTouchEnd(event.getUILocation(), cb);
              } else {
                cb();
              }
            }); // 關閉洗碼按鈕
            // this.m_trialCloseBtn.node.on( cc.Node.EventType.TOUCH_START, ( event: cc.Event.EventTouch ) =>
            // {
            //     event.stopPropagationImmediate();
            //     event.stopPropagation();
            //     if ( this.m_bottomBarManager.CurrentTouchName == null && this.m_trialCloseBtn.interactable )
            //     {
            //         this.m_bottomBarManager.CurrentTouchName = event.target.getName();
            //     }
            //     else
            //     {
            //         if ( event.target && event.target.active == false )
            //         {
            //             this.m_bottomBarManager.CurrentTouchName = event.target.getName();
            //         }
            //     }
            // } );
            // this.m_trialCloseBtn.node.on( cc.Node.EventType.TOUCH_CANCEL, ( event: cc.Event.EventTouch ) =>
            // {
            //     if ( this.m_bottomBarManager.CurrentTouchName == event.target.getName() )
            //     {
            //         this.m_bottomBarManager.CurrentTouchName = null;
            //     }
            // } );
            // this.m_trialCloseBtn.node.on( cc.Node.EventType.TOUCH_END, ( event: cc.Event.EventTouch ) =>
            // {
            //     if ( this.m_bottomBarManager.CurrentTouchName != event.target.getName() )
            //     {
            //         return;
            //     }
            //     this.m_bottomBarManager.CurrentTouchName = null;
            //     if ( this.m_trialCloseBtn.interactable && this.m_trial )
            //     {
            //         this.m_trial.CloseTrialView();
            //     }
            // } );
            // 關閉洗碼按鈕
            // if ( this.m_trialBgCloseBtn )
            // {
            //     this.m_trialBgCloseBtn.node.on( cc.Node.EventType.TOUCH_START, ( event: cc.Event.EventTouch ) =>
            //     {
            //         event.stopPropagationImmediate();
            //         event.stopPropagation();
            //         if ( this.m_bottomBarManager.CurrentTouchName == null && this.m_trialBgCloseBtn.interactable )
            //         {
            //             this.m_bottomBarManager.CurrentTouchName = event.target.getName();
            //         }
            //         else
            //         {
            //             if ( event.target && event.target.active == false )
            //             {
            //                 this.m_bottomBarManager.CurrentTouchName = event.target.getName();
            //             }
            //         }
            //     } );
            //     this.m_trialBgCloseBtn.node.on( cc.Node.EventType.TOUCH_CANCEL, ( event: cc.Event.EventTouch ) =>
            //     {
            //         if ( this.m_bottomBarManager.CurrentTouchName == event.target.getName() )
            //         {
            //             this.m_bottomBarManager.CurrentTouchName = null;
            //         }
            //     } );
            //     this.m_trialBgCloseBtn.node.on( cc.Node.EventType.TOUCH_END, ( event: cc.Event.EventTouch ) =>
            //     {
            //         if ( this.m_bottomBarManager.CurrentTouchName != event.target.getName() )
            //         {
            //             return;
            //         }
            //         this.m_bottomBarManager.CurrentTouchName = null;
            //         if ( this.m_trialBgCloseBtn.interactable && this.m_trial )
            //         {
            //             this.m_trial.CloseTrialView();
            //         }
            //     } );
            // }
          } else {
            if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
              log("TriProhibit");
            }
          }
        };

        _proto.LoadTrialBtn = function LoadTrialBtn(gameCb, gameEndCb, gameChangeBetCb, infoCbOuter, signUpCbOuter, giveUpCbOuter) {
          var _this27 = this;

          if (Define.IS_DEMO || this.CheckLineCode() || this.m_bottomBarManager.IsGLIGames || this.m_bottomBarManager.IsBMMGames || Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.Trail)) {
            return;
          }

          var btnPath = Define.TrialBtnPath.ORG;
          var path = Tools.GetFilePath(btnPath);
          Define.CommonBundle.load(path, Prefab, function (err, assets) {
            if (err) {
              _this27.LoadTrialBtn(gameCb, gameEndCb, gameChangeBetCb, infoCbOuter, signUpCbOuter, giveUpCbOuter);

              return;
            }

            var trialBtn = instantiate(assets);
            _this27.m_trialBtn = trialBtn.getComponent(Button);
            _this27.m_trialSprite = trialBtn.getChildByName("Data").getChildByName("Img_IconName").getComponent(Sprite);
            trialBtn.active = false;

            if (
            /*Tools.IsTadaCasino &&*/
            _this27.m_iconBox) {
              _this27.m_iconBox.SetBtnSeat(trialBtn, IconBoxSeat.Trial);

              _this27.OnRotation(_this27.m_isLandscape);

              _this27.m_iconBox.OpenBtnSeat(IconBoxSeat.Trial, false); // 要先關起來

            } else {
              _this27.m_floatBaseNode.addChild(trialBtn);

              _this27.SetTrialBtnState(false);
            }

            _this27.SetTrialBtnTouch();

            _this27.TrialViewInit(gameCb, gameEndCb, gameChangeBetCb, infoCbOuter, signUpCbOuter, giveUpCbOuter);
          });
        }
        /**
         * 初始化洗碼
         * @param gameCb 在改變bet前的callback  (像是EXbet要先把bet切回來)
         * @param gameEndCb 離開洗碼的callback
         * @param gameChangeBetCb 在改變bet後的callback  (像是瘋狂777要把上面的資訊做切換)
         */
        ;

        _proto.TrialViewInit = function TrialViewInit(gameCb, gameEndCb, gameChangeBetCb, infoCbOuter, signUpCbOuter, giveUpCbOuter) {
          var _this28 = this;

          if (this.m_trial) {
            var sourcePath = Define.TrialPath.ORG;
            var path = Tools.GetFilePath(sourcePath);
            Define.CommonBundle.load(path, Prefab, function (err, assets) {
              if (err) {
                _this28.TrialViewInit(gameCb, gameEndCb, gameChangeBetCb, infoCbOuter, signUpCbOuter, giveUpCbOuter);

                return;
              }

              var trialView = instantiate(assets);
              _this28.m_trial.active = true;

              _this28.m_trial.addChild(trialView);

              trialView.getComponent(TrialView).BtnTitleSprite = _this28.m_trialSprite;

              var progressGroupNode = _this28.m_trialProgressBar.node.getComponentInChildren(GroupNode);

              if (progressGroupNode) {
                progressGroupNode.ForceInit();
              }

              var infoCb = function infoCb(cb) {
                var req = new TrialInfo();

                if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
                  req.info.aid = -1;
                  var tokenString = Tools.GetLinkParameterByName("search", "token=") || "test" + Date.now().toString();
                  req.info.token = tokenString;
                } else {
                  req.info.aid = Number(Define.APP.GetAID());
                  req.info.token = Define.APP.GetAToken();
                }

                req.info.lang = BackpackProtocol.Language[LocaleStringManager.CurrLang];
                req.info.vip = VipManager.GetInstance().VipInfo.Lv;

                if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
                  var _ack = {
                    "info": {
                      "acktype": 0,
                      "nowactno": 22101301,
                      "targettype": 0,
                      "awarddesc": [{
                        "award": 1,
                        "type": 0,
                        "gate": 30,
                        "gameid": 184,
                        "itemid": 1184301,
                        "amount": 1,
                        "data": {
                          "star": 1,
                          "icon": 31184,
                          "type": 3,
                          "bet": 0.06,
                          "gamename": "免費遊戲"
                        },
                        "money": 100
                      }, {
                        "award": 2,
                        "type": 1,
                        "gate": 60,
                        "gameid": 0,
                        "itemid": 0,
                        "amount": 0,
                        "data": {
                          "star": 0,
                          "icon": 0,
                          "type": 0,
                          "bet": 0,
                          "gamename": ""
                        },
                        "money": 200
                      }, {
                        "award": 3,
                        "type": 2,
                        "gate": 90,
                        "gameid": 0,
                        "itemid": 0,
                        "amount": 0,
                        "data": {
                          "star": 0,
                          "icon": 0,
                          "type": 0,
                          "bet": 0,
                          "gamename": ""
                        },
                        "money": 300
                      }],
                      "pstate": 5,
                      "trialinfo": {
                        "apiid": 6,
                        "gameid": 184,
                        "sac": 0,
                        "activityno": 22101301,
                        "totalbet": 9,
                        "totalwin": 0,
                        "property": 996
                      },
                      "bet": [1.2],
                      "remind": false,
                      "remindinfo": {
                        "award": 0,
                        "type": 0,
                        "gate": 0,
                        "gameid": 0,
                        "itemid": 0,
                        "amount": 0,
                        "data": {
                          "star": 0,
                          "icon": 0,
                          "type": 0,
                          "bet": 0,
                          "gamename": ""
                        },
                        "money": 0
                      },
                      // "rtag": 0,
                      "start": 1665594000,
                      "end": 1667581200
                    },
                    "ret": 0 // "token": "bcc2298a623e50fc8a05e0e417a201a45dd49ed9",
                    // "type": 51

                  };
                  cb(_ack);
                } else {
                  ConnectManager.GetInstance().SendCommand(req, function (ack) {
                    if (cb) {
                      cb(ack);
                    }
                  }, false);
                }
              };

              var signUpCb = function signUpCb(cb, actNo) {
                var req = new TrialSignUp();

                if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
                  req.info.aid = -1;
                  var tokenString = Tools.GetLinkParameterByName("search", "token=") || "test" + Date.now().toString();
                  req.info.token = tokenString;
                } else {
                  req.info.aid = Number(Define.APP.GetAID());
                  req.info.token = Define.APP.GetAToken();
                }

                req.info.vip = VipManager.GetInstance().VipInfo.Lv;
                req.info.actno = actNo;

                if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
                  var _ack2 = {
                    "info": {
                      "acktype": 0,
                      "trialinfo": {
                        "apiid": 6,
                        "gameid": 184,
                        "sac": 0,
                        "activityno": 22101301,
                        "totalbet": 0,
                        "totalwin": 0,
                        "property": 1000
                      }
                    },
                    "ret": 0 // "token": "8999081902a1d8ecbd269781aa68c5638712dcd5",
                    // "type": 52

                  };
                  cb(_ack2);
                } else {
                  ConnectManager.GetInstance().SendCommand(req, function (ack) {
                    if (cb) {
                      cb(ack);
                    }
                  }, false);
                }
              };

              var giveUpCb = function giveUpCb(cb, actNo) {
                var req = new TrialGiveUp();

                if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
                  req.info.aid = -1;
                  var tokenString = Tools.GetLinkParameterByName("search", "token=") || "test" + Date.now().toString();
                  req.info.token = tokenString;
                } else {
                  req.info.aid = Number(Define.APP.GetAID());
                  req.info.token = Define.APP.GetAToken();
                } // req.info.vip = VipManager.GetInstance().VipInfo.Lv;


                req.info.actno = actNo;

                if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
                  var _ack3 = {
                    "info": {
                      "acktype": 0,
                      "award": 0 // "gamelog": null

                    },
                    "ret": 0 // "token": "ebd4635fbc69e15485d537073fca0bd292c5ce5a",
                    // "type": 53

                  };
                  cb(_ack3);
                } else {
                  ConnectManager.GetInstance().SendCommand(req, function (ack) {
                    if (cb) {
                      cb(ack);
                    }
                  }, false);
                }
              };

              var startTrialCb = function startTrialCb(trialCoin, nowTrialWin, nowTrialBet, info) {
                _this28.m_isInTrial = true;
                AutoShowManager.GetInstance().SetIsInTrial(true);

                if (gameCb) {
                  gameCb();
                } // 處理地BAR共用介面開關 ----------------------------------------------


                _this28.m_backpackBtn.node.active = false;
                _this28.m_backpackSprite.node.active = false;

                if (missionManager.HasMission) {
                  missionManager.CloseIcon();

                  if (!Tools.IsTadaCasino && _this28.m_iconBox) {
                    _this28.m_iconBox.OpenBtnSeat(IconBoxSeat.DailyMission, false);
                  }
                } else {
                  if (_this28.m_dailyBtn) {
                    _this28.m_dailyBtn.node.active = false;

                    if (!Tools.IsTadaCasino && _this28.m_iconBox) {
                      _this28.m_iconBox.OpenBtnSeat(IconBoxSeat.DailyMission, false);
                    }
                  }
                }

                if (_this28.m_rankingView) {
                  _this28.m_rankingView.CloseIcon();

                  if (
                  /*Tools.IsTadaCasino &&*/
                  _this28.m_iconBox) {
                    _this28.m_iconBox.OpenBtnSeat(IconBoxSeat.RankBoard, false);
                  }
                } else {
                  if (_this28.m_rankingBtn) {
                    _this28.m_rankingBtn.node.active = false;

                    if (
                    /*Tools.IsTadaCasino &&*/
                    _this28.m_iconBox) {
                      _this28.m_iconBox.OpenBtnSeat(IconBoxSeat.RankBoard, false);
                    }
                  }
                }

                _this28.SetBuyBonusBtnShow(false);

                if (_this28.m_discount) {
                  _this28.m_discount.CloseIcon();

                  if (
                  /*Tools.IsTadaCasino &&*/
                  _this28.m_iconBox) {
                    _this28.m_iconBox.OpenBtnSeat(IconBoxSeat.WinMore, false);
                  }
                } else {
                  if (_this28.m_discountBtn) {
                    _this28.m_discountBtn.node.active = false;
                  }
                }

                if (_this28.m_isFeaturesDemo) {
                  _this28.m_featuresView.SetFeaturesDemoStatus(false);
                }

                _this28.m_closeAllBtnCb && _this28.m_closeAllBtnCb(); // 處理地BAR共用介面開關 ----------------------------------------------

                _this28.m_trialCoins = trialCoin;
                _this28.m_nowTrialTotalWin = nowTrialWin;
                _this28.m_nowTrialTotalBet = nowTrialBet; // 贏分的分數

                _this28.m_bottomBarManager.WinLabel.node.active = false;

                if (_this28.m_bottomBarManager.WinSprite) {
                  _this28.m_bottomBarManager.WinSprite.node.active = false;
                } // 財產的分數


                _this28.m_bottomBarManager.BalanceLabel.node.active = false;

                _this28.m_bottomBarManager.SetBalanceSprite(false);

                _this28.m_bottomBarManager.SetTrailBalanceSprite(true);

                _this28.m_bottomBarManager.LogIndex.node.active = false;
                log(" trialCoin : ", trialCoin);
                _this28.m_trialCoinLabel.string = Tools.FormatNumberThousands(_this28.GetDisplayValue(trialCoin), Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT);
                _this28.m_trialCoinLabel.node.active = true;
                _this28.m_trialProgressHintNode.active = true;
                var winString = Tools.FormatNumberThousands(Tools.strip(_this28.GetDisplayValue(info.Progress)), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO).toString() + " / " + Tools.strip(_this28.GetDisplayValue(info.Gate)).toString();

                _this28.UpdateTrialTotalWinLabel(winString);

                _this28.m_trialProgressLvlLabel.node.active = true; // this.m_trialProgressLvlLabel.string = this.m_trial.GetTrialLvlHint();

                _this28.m_trialProgressLvlLabel.string = trialManager.GetTrialLvlHint();
                var rate = info.Progress / info.Gate;

                if (rate > 1) {
                  rate = 1;
                }

                _this28.m_trialProgressBar.progress = rate; // this.m_bottomBarManager.LockHistoryEnable( true );

                _this28.m_bottomBarManager.ResetBetBtns();

                if (gameChangeBetCb) {
                  gameChangeBetCb();
                }
              };

              var stopTrialCb = function stopTrialCb() {
                log("TrialViewInit  End");
                _this28.m_isInTrial = false;

                if (gameEndCb) {
                  gameEndCb();
                }

                if (backpackManager.HasBackpack && _this28.m_backpackBtn) {
                  _this28.m_backpackBtn.node.active = true;
                }

                _this28.m_backpackSprite.node.active = true;

                if (_this28.m_rankingView) {
                  _this28.m_rankingView.ReloadData();
                }

                if (_this28.m_isFeaturesDemo) {
                  _this28.m_featuresView.SetFeaturesDemoStatus(true);
                }

                _this28.SetBuyBonusBtnShow(true);

                _this28.m_openAllBtnCb && _this28.m_openAllBtnCb(); // 內購按鈕 要解決重疊的話 要利用 OnRotation

                _this28.OnRotation(_this28.m_isLandscape, _this28.m_isSmall, _this28.m_isLow); // 贏分的分數


                _this28.m_bottomBarManager.WinLabel.node.active = true;

                if (_this28.m_bottomBarManager.WinSprite) {
                  _this28.m_bottomBarManager.WinSprite.node.active = true;
                } // 財產的分數


                _this28.m_bottomBarManager.BalanceLabel.node.active = true;

                _this28.m_bottomBarManager.SetBalanceSprite(true);

                _this28.m_bottomBarManager.SetTrailBalanceSprite(false);

                _this28.m_bottomBarManager.LogIndex.string = "";
                _this28.m_bottomBarManager.LogIndex.node.active = true;
                _this28.m_trialProgressLvlLabel.node.active = false;
                _this28.m_trialCoinLabel.node.active = false;
                _this28.m_trialProgressHintNode.active = false;

                _this28.m_bottomBarManager.LockHistoryEnable(false);

                _this28.m_bottomBarManager.ResetBetBtns();
              }; // this.m_trial.Init( this, infoCbOuter ? infoCbOuter : infoCb, signUpCbOuter ? signUpCbOuter : signUpCb, giveUpCbOuter ? giveUpCbOuter : giveUpCb, startTrialCb, stopTrialCb, null );


              trialManager.Init(_this28, infoCbOuter ? infoCbOuter : infoCb, signUpCbOuter ? signUpCbOuter : signUpCb, giveUpCbOuter ? giveUpCbOuter : giveUpCb, startTrialCb, stopTrialCb, null);
            });
          } // return;

        };

        _proto.UpdateTrialTotalWinLabel = function UpdateTrialTotalWinLabel(content) {
          this.m_trialTotalWinLabel.string = content;
          this.m_trialTotalWinLabel_Under.string = content;
        };

        _proto.SetTrialBtnState = function SetTrialBtnState(active) {
          if (!this.m_iconBox) {
            if (active) {
              // if ( !Tools.IsTadaCasino )
              // {
              this.m_topRightIcon.AddIcon(Define.CbKey.Trial, [this.m_trialBtn.node]).Sort().Reorder();

              if (this.m_discountBtn) {
                // this.m_discountBtn.node.getComponent( FloatView ).ResetPosition();
                this.m_discountBtnRoot.getComponent(FloatView).ResetPosition();
              }

              if (this.m_trialBtn) {
                this.m_trialBtn.node.getComponent(FloatView).ResetPosition();
              }

              if (this.m_favorBtn) {
                this.m_favorBtn.node.getComponent(FloatView).ResetPosition();
              }

              if (this.m_buyBonusRoot) {
                this.m_buyBonusRoot.getComponent(FloatView).ResetPosition();
              }

              if (this.m_depositBtn) {
                this.m_depositBtn.getComponent(FloatView).ResetPosition();
              }

              if (this.m_trialBtn) {
                this.m_trialBtn.node.getComponent(FloatView).ResetPosition();
              } // }

            } else {
              this.m_topRightIcon.RemoveIcon(Define.CbKey.Trial);
            }
          }

          this.m_trialBtn.node.active = active;

          if (
          /*Tools.IsTadaCasino &&*/
          this.m_iconBox) {
            this.m_iconBox.OpenBtnSeat(IconBoxSeat.Trial, active);
          }

          return;
        };

        _proto.GetTrialBtnState = function GetTrialBtnState() {
          if (this.m_trialBtn) {
            return this.m_trialBtn.node.active;
          } else {
            return false;
          } // return false;

        };

        _proto.SetTrialEndCb = function SetTrialEndCb(cb) {
          // if ( this.m_trial )
          // {
          //     this.m_trial.AddEndCb( cb );
          // }
          trialManager.AddEndCb(cb); // return;
        };

        _proto.GetTrialTotalWin = function GetTrialTotalWin() {
          return this.m_nowTrialTotalWin; // return 0;
        };

        _proto.GetTrialTotalBet = function GetTrialTotalBet() {
          return this.m_nowTrialTotalBet; // return 0;
        };

        _proto.setTrialCoins = function setTrialCoins(value) {
          this.m_trialCoins = value;
          this.m_trialCoinLabel.string = Tools.FormatNumberThousands(this.GetDisplayValue(this.m_trialCoins), Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT); // return;
        };

        _proto.SetChips = function SetChips(value) {
          this.m_bottomBarManager.SetChips(value);
        }
        /**
         * 累積洗碼贏分，一局只能呼叫一次
         * @param value 贏分
         */
        // SetTotalWin( value: number )
        ;

        _proto.SetTrialData = function SetTrialData(winValue, betValue) {
          // if ( this.m_trial && this.IsInTrial )
          if (trialManager.HasTrial && this.IsInTrial) {
            this.m_nowTrialTotalWin = Tools.strip(this.m_nowTrialTotalWin + winValue);
            this.m_nowTrialTotalBet = Tools.strip(this.m_nowTrialTotalBet + betValue); // this.m_trial.SetProgess( this.m_nowTrialTotalWin, this.m_nowTrialTotalBet );

            trialManager.SetProgess(this.m_nowTrialTotalWin, this.m_nowTrialTotalBet); // let info: GateInfo = this.m_trial.GetCurrentLevelInfo();

            var _info = trialManager.GetCurrentLevelInfo();

            var winString = Tools.FormatNumberThousands(Tools.strip(this.GetDisplayValue(_info.Progress)), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO).toString() + " / " + Tools.strip(this.GetDisplayValue(_info.Gate)).toString();
            this.UpdateTrialTotalWinLabel(winString); // this.m_trialProgressLvlLabel.string = this.m_trial.GetTrialLvlHint();

            this.m_trialProgressLvlLabel.string = trialManager.GetTrialLvlHint();
            var rate = _info.Progress / _info.Gate;

            if (rate > 1) {
              rate = 1;
            }

            this.m_trialProgressBar.progress = rate;
          } // return;

        } //====================內購====================
        ;

        _proto.BuyBonusInit = function BuyBonusInit(info, startCb, endCb) {
          var _this29 = this;

          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.ShopingMall)) {
            return;
          } // 把內購介面變成動態載入


          var btnPath = Tools.GetFilePath(Define.BuyBonusPath.BTN);
          Define.CommonBundle.load(btnPath, Prefab, function (err, assets) {
            if (err) {
              _this29.BuyBonusInit(info, startCb, endCb);

              return;
            }

            var btnNode = instantiate(assets); // if ( /*Tools.IsTadaCasino &&*/ this.m_iconBox )
            // {
            //     this.m_iconBox.SetBtnSeat( btnNode, IconBoxSeat.BuyBonus );
            //     this.m_buyBonusRoot.active = false;
            // }
            // else
            // {

            _this29.m_buyBonusRoot.addChild(btnNode); // }


            _this29.m_buyBonusBtn = btnNode.getChildByName("Btn_Main").getComponent(Button);
            _this29.m_buyBonusSprite = btnNode.getChildByName("IconName").getComponent(Sprite);
            _this29.m_buyBonusTxt = btnNode.getChildByName("IconName").getComponent(Sprite); // this.m_buyBonusTagNode[ BuyBonusTag.Event ] = btnNode.getChildByName( "Data" ).getChildByName( "Node_Event" );
            // this.m_buyBonusTagNode[ BuyBonusTag.Hot ] = btnNode.getChildByName( "Data" ).getChildByName( "Node_Hot" );

            var btnComponent = btnNode.getComponent(BuyBonusBtn);

            if (btnComponent) {
              btnComponent.SetTxt(LocaleStringManager.GetInstance().GetCommonAtlas());
            } // FG 內購


            _this29.m_buyBonusBtn.node.on(Node.EventType.TOUCH_START, function (event) {
              // event.stopPropagationImmediate();
              // event.stopPropagation();
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this29.m_bottomBarManager.CurrentTouchName == null && _this29.m_buyBonusBtn.interactable) {
                _this29.m_bottomBarManager.CurrentTouchName = event.target.name;
                tween(_this29.m_buyBonusBtn.node).to(SCALE_TIME, {
                  scale: v3(0.9, 0.9, 1)
                }).start();
              } else {
                if (event.target && event.target.active == false) {
                  _this29.m_bottomBarManager.CurrentTouchName = event.target.name;
                }
              }
            });

            _this29.m_buyBonusBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              tween(_this29.m_buyBonusBtn.node).to(SCALE_TIME, {
                scale: v3(1, 1, 1)
              }).start();

              if (_this29.m_bottomBarManager.CurrentTouchName == event.target.name) {
                _this29.m_bottomBarManager.CurrentTouchName = null;
              }
            });

            _this29.m_buyBonusBtn.node.on(Node.EventType.TOUCH_END, function (event) {
              tween(_this29.m_buyBonusBtn.node).to(SCALE_TIME, {
                scale: v3(1, 1, 1)
              }).start();

              if (_this29.m_bottomBarManager.CurrentTouchName != event.target.name) {
                return;
              }

              _this29.m_bottomBarManager.CurrentTouchName = null;

              if (_this29.m_buyBonusBtn.interactable) {
                _this29.CloseAllMenu();

                if (_this29.m_isBuyBonusOpen) {
                  buyBonusManager.Show();
                }

                SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
              }

              _this29.PushClickToBuffer(_this29.m_bottomBarManager.CLICK_BUFFER_TYPE.FEATURES);
            });

            _this29.LoadBuyBonusView(info, startCb, endCb);
          });
        };

        _proto.LoadBuyBonusView = function LoadBuyBonusView(info, startCb, endCb) {
          var _this30 = this;

          var viewPath = Tools.GetFilePath(Define.BuyBonusPath.ORG);
          Define.CommonBundle.load(viewPath, Prefab, function (err, assets) {
            if (err) {
              _this30.LoadBuyBonusView(info, startCb, endCb);

              return;
            }

            var buyBonusView = instantiate(assets);
            _this30.m_buyBonusView.active = true;

            _this30.m_buyBonusView.addChild(buyBonusView);

            buyBonusManager.NeedButBonus = 1;

            _this30.SetBuyMall(true); // this.m_buyBonusView.Init( this, info, startCb, endCb );


            buyBonusManager.Init(_this30, info, startCb, endCb, LocaleStringManager.GetInstance().GetCommonAtlas());
            _this30.m_isBuyBonusOpen = true;
          });
        };

        _proto.SetBetDescribe = function SetBetDescribe(isStart) {
          var lang = ""; //"_" + LocaleStringManager.CurrLang;

          var imgName = LocaleImgName; // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {
          //     imgName = LocaleImgName_TaDa;
          //     lang = "";
          // }

          if (isStart) {
            if (this.m_betSprite && this.m_localeSpriteAtlas.getSpriteFrame("Buy_FG_Txt02")) {
              this.m_betSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame("Buy_FG_Txt02");
            }
          } else {
            if (this.m_betSprite) {
              this.m_betSprite.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame(imgName.Bet + lang);
            }
          }
        };

        _proto.SetUsingBuyBonus = function SetUsingBuyBonus(isShow, type) {
          this.m_localeSpriteAtlas = !this.m_localeSpriteAtlas ? LocaleStringManager.GetInstance().GetCommonAtlas() : this.m_localeSpriteAtlas;
          this.m_buyBonusUsed.active = isShow;

          if (this.m_buyBonusBtn) {
            this.m_buyBonusBtn.node.parent.active = !isShow;
          }

          if (this.m_localeSpriteAtlas.getSpriteFrame("Buy_FG_Icon0" + (type + 1))) {
            this.m_buyBonusIcon.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame("Buy_FG_Icon0" + (type + 1));
          } else {
            this.m_buyBonusIconTxt.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame("Txt_FG"); // this.m_buyBonusIcon.spriteFrame = this.m_localeSpriteAtlas.getSpriteFrame( "Buy_FG_Icon0" + ( type + 1 ) );
          }

          if (isShow) {
            // 關掉一堆ㄚ哩ㄚ紮
            // if ( this.m_trial ) 
            if (trialManager.HasTrial) {
              this.m_trialBtn.node.getComponent(UIOpacity).opacity = 0;
              this.m_trialBtn.interactable = false;
            }

            if (this.m_backpackBtn) {
              this.m_backpackBtn.node.getComponent(UIOpacity).opacity = 0;
              this.m_backpackBtn.interactable = false;
            }

            if (this.m_backpackSprite) {
              this.m_backpackSprite.node.getComponent(UIOpacity).opacity = 0;
            }

            this.m_bottomBarManager.SetEnableBetButtons(false);
          } else {
            // 開回功能
            // if ( this.m_trial ) 
            if (trialManager.HasTrial) {
              this.m_trialBtn.node.getComponent(UIOpacity).opacity = 255;
              this.m_trialBtn.interactable = true;
            }

            if (this.m_backpackBtn) {
              this.m_backpackBtn.node.getComponent(UIOpacity).opacity = 255;
              this.m_backpackBtn.interactable = true;
            }

            if (this.m_backpackSprite) {
              this.m_backpackSprite.node.getComponent(UIOpacity).opacity = 255;
            }

            this.m_bottomBarManager.SetEnableBetButtons(true);
          }

          this.m_bottomBarManager.SetLockBetEnable(isShow);
        };

        _proto.SetBuyMall = function SetBuyMall(isOpen) {
          if (this.IsInTrial && isOpen) // 正在 洗碼 也不能打開內購
            {
              return;
            }

          if (this.m_buyBonusBtn) {
            this.m_buyBonusBtn.node.active = isOpen; // if ( /*Tools.IsTadaCasino &&*/ this.m_iconBox )
            // {
            //     this.m_iconBox.OpenBtnSeat( IconBoxSeat.BuyBonus, isOpen );
            // }
          }

          if (this.m_buyBonusSprite) {
            this.m_buyBonusSprite.node.active = isOpen;
          }

          if (this.m_buyBonusRoot) {
            this.m_buyBonusRoot.active = isOpen;
          }

          if (this.m_featuresBtn) {
            this.m_featuresBtn.node.active = false;
          }

          if (this.m_featuresSprite) {
            this.m_featuresSprite.node.active = !isOpen;
          }

          if (this.m_buyBonusTag) {
            var _spriteAtlas = this.m_bottomBarManager.GetCommAtlas();

            if (_spriteAtlas) {
              if (this.m_bottomBarManager.IsOpenMall == Define.BuyBonusTag.Event) {
                this.m_buyBonusTag.spriteFrame = _spriteAtlas.getSpriteFrame("Buy_FG_EVENT");
              }
            }
          } // else if ( this.m_buyBonusTagNode[ BuyBonusTag.Hot ] )
          // {
          //     if ( this.m_bottomBarManager.IsOpenMall == Define.BuyBonusTag.Event )
          //     {
          //         this.m_buyBonusTagNode[ BuyBonusTag.Event ].active = true;
          //         this.m_buyBonusTagNode[ BuyBonusTag.Hot ].active = false;
          //     }
          //     else
          //     {
          //         this.m_buyBonusTagNode[ BuyBonusTag.Event ].active = false;
          //         this.m_buyBonusTagNode[ BuyBonusTag.Hot ].active = true;
          //     }
          // }


          if (!isOpen) {
            this.m_topRightIcon.RemoveIcon(Define.CbKey.BuyBonus);
            buyBonusManager.CloseMall();
          } else {
            // if ( /*!Tools.IsTadaCasino*/ !this.m_iconBox )
            // {
            this.m_topRightIcon.AddIcon(Define.CbKey.BuyBonus, [this.m_buyBonusRoot]).Sort().Reorder();
            this.m_buyBonusRoot.getComponent(FloatView).ResetPosition();

            if (this.m_discountBtn) {
              // this.m_discountBtn.node.getComponent( FloatView ).ResetPosition();
              this.m_discountBtnRoot.getComponent(FloatView).ResetPosition();
            }

            if (this.m_debrisNode) {
              this.m_debrisNode.getComponent(FloatView).ResetPosition();
            }

            if (this.m_trialBtn) {
              this.m_trialBtn.node.getComponent(FloatView).ResetPosition();
            }

            if (this.m_favorBtn) {
              this.m_favorBtn.node.getComponent(FloatView).ResetPosition();
            }

            if (this.m_depositBtn) {
              this.m_depositBtn.getComponent(FloatView).ResetPosition();
            } // }


            this.OnRotation(this.m_isLandscape, this.m_isSmall, this.m_isLow);
          }
        };

        _proto.CloseMall = function CloseMall() {
          buyBonusManager.HasBuyBonus && buyBonusManager.CloseMall();
        };

        _proto.SetBuyBonusState = function SetBuyBonusState(canBuy) {
          if (canBuy && buyBonusManager.HasBuyBonus && buyBonusManager.IsBuyBonus) {
            return;
          }

          if (buyBonusManager.HasBuyBonus) {
            buyBonusManager.CanBuyBonus = canBuy;
          }
        };

        _proto.CheckBuyBonusOverAni = function CheckBuyBonusOverAni() {
          if (buyBonusManager.HasBuyBonus && buyBonusManager.IsBuyBonus) {
            buyBonusManager.CheckOverAni();
          }
        };

        _proto.SetBuyBonusRemainTimes = function SetBuyBonusRemainTimes() {
          if (buyBonusManager.HasBuyBonus && buyBonusManager.IsBuyBonus) {
            buyBonusManager.SetRemainTimes();
          }
        };

        _proto.GetBuyBonusInfo = function GetBuyBonusInfo() {
          if (buyBonusManager.HasBuyBonus && buyBonusManager.IsBuyBonus) {
            var _info2 = {
              MallId: buyBonusManager.MallId,
              MallBet: buyBonusManager.MallBet
            };
            return _info2;
          }

          return null;
        } //====================自選起伏====================
        ;

        _proto.SetFeaturesVolatility = function SetFeaturesVolatility() {
          this.m_featuresView.SetFeaturesVolatility();
        } //====================聯合彩金機制====================
        ;

        _proto.SetAddIcon = function SetAddIcon(name, goal) {
          if (
          /*Tools.IsTadaCasino*/
          this.m_iconBox) {
            return;
          }

          this.m_topLeftIcon.AddIcon(name, [goal]).Sort().Reorder();

          if (this.m_rankingBtn) {
            this.m_rankingBtnRoot.getComponent(FloatView).ResetPosition();
          }

          if (this.m_dailyBtn) {
            this.m_dailyBtn.node.getComponent(FloatView).ResetPosition();
          }

          if (this.m_lobbyBtn && this.m_lobbyBtn.node.getComponent(FloatView)) {
            this.m_lobbyBtn.node.getComponent(FloatView).ResetPosition();
          }
        };

        _proto.SetIconBoxSeat = function SetIconBoxSeat(node, seat, isOpen) {
          if (isOpen === void 0) {
            isOpen = true;
          }

          if (this.m_iconBox) {
            switch (seat) {
              case "jp":
                this.m_iconBox.SetBtnSeat(node, IconBoxSeat.JackPot);
                this.OnRotation(this.m_isLandscape);

                if (!isOpen) {
                  this.m_iconBox.OpenBtnSeat(IconBoxSeat.JackPot, false);
                }

                break;

              case "mhb":
                this.m_iconBox.SetBtnSeat(node, IconBoxSeat.MustHitBy);
                this.OnRotation(this.m_isLandscape);

                if (!isOpen) {
                  this.m_iconBox.OpenBtnSeat(IconBoxSeat.MustHitBy, false);
                }

                break;
            }
          }
        };

        _proto.RemoveAddIcon = function RemoveAddIcon(name) {
          this.m_topLeftIcon.RemoveIcon(name).Sort().Reorder();
        } //====================智慧即時訊息====================
        ;

        _proto.ShowDiscountView = function ShowDiscountView(page) {
          if (page === void 0) {
            page = PageName.SignIn;
          }

          if (this.m_discount) {
            this.m_discount.ShowDiscountView(page);
          }
        };

        _proto.DebrisInit = function DebrisInit(activityCb, playerInfoCb, getDebrisCb, exchangeCb) {
          var _this31 = this;

          if (Define.IS_DEMO || this.m_bottomBarManager.IsGLIGames || this.m_bottomBarManager.IsBMMGames) {
            return;
          }

          var btnPath = Define.DebrisBtnPath.ORG;
          var path = Tools.GetFilePath(btnPath);
          Define.CommonBundle.load(path, Prefab, function (error, assets) {
            if (error) {
              _this31.DebrisInit(activityCb, playerInfoCb, getDebrisCb, exchangeCb);

              return;
            }

            _this31.m_debrisNode = instantiate(assets);
            _this31.m_debrisNode.active = false;

            if (
            /*Tools.IsTadaCasino &&*/
            _this31.m_iconBox) {
              _this31.m_iconBox.SetBtnSeat(_this31.m_debrisNode, IconBoxSeat.Debris);

              _this31.OnRotation(_this31.m_isLandscape);

              _this31.m_iconBox.OpenBtnSeat(IconBoxSeat.Debris, false); // 要先關起來

            } else {
              _this31.m_floatBaseNode.addChild(_this31.m_debrisNode);
            }

            _this31.m_debrisBtn = _this31.m_debrisNode.getComponent(DebrisBtn);

            var btn = _this31.m_debrisNode.getComponent(Button);

            if (_this31.m_debrisBtn) {
              btn = _this31.m_debrisBtn.Btn;
            }

            btn.node.on(Node.EventType.TOUCH_START, function (event) {
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this31.m_bottomBarManager.CurrentTouchName == null && btn.interactable) {
                _this31.m_bottomBarManager.CurrentTouchName = event.target.name;
                tween(btn.node).to(SCALE_TIME, {
                  scale: v3(0.9, 0.9, 1)
                }).start();

                if (
                /*!Tools.IsTadaCasino*/
                !_this31.m_iconBox) {
                  _this31.m_debrisNode.getComponent(FloatView).OnTouchStart(event.getUILocation());
                }
              } else {
                if (event.target && event.target.active == false) {
                  _this31.m_bottomBarManager.CurrentTouchName = event.target.name;
                }
              }
            });
            btn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              tween(btn.node).to(SCALE_TIME, {
                scale: v3(1, 1, 1)
              }).start();

              if (_this31.m_bottomBarManager.CurrentTouchName == event.target.name) {
                _this31.m_bottomBarManager.CurrentTouchName = null;
              }
            });
            btn.node.on(Node.EventType.TOUCH_MOVE, function (event) {
              if (_this31.m_bottomBarManager.CurrentTouchName == event.target.name) {
                _this31.m_bottomBarManager.CurrentTouchName = event.target.name;

                if (
                /*!Tools.IsTadaCasino*/
                !_this31.m_iconBox) {
                  _this31.m_debrisNode.getComponent(FloatView).OnTouchMove(event.getUILocation());
                }
              } else {
                if (event.target && event.target.active == false) {
                  _this31.m_bottomBarManager.CurrentTouchName = event.target.name;
                }
              }
            });
            btn.node.on(Node.EventType.TOUCH_END, function (event) {
              tween(btn.node).to(SCALE_TIME, {
                scale: v3(1, 1, 1)
              }).start();

              if (_this31.m_bottomBarManager.CurrentTouchName != event.target.name) {
                return;
              }

              _this31.m_bottomBarManager.CurrentTouchName = null;

              if (btn.interactable) {
                _this31.m_bottomBarManager.CloseAllMenu();

                if (btn.interactable) {
                  debrisManager.Show(_this31.m_isLandscape);
                }

                _this31.PushClickToBuffer(_this31.m_bottomBarManager.CLICK_BUFFER_TYPE.DEBRIS);

                SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
              }
            });

            _this31.CreateDebrisView(activityCb, playerInfoCb, getDebrisCb, exchangeCb);
          });
        };

        _proto.CreateDebrisView = function CreateDebrisView(activityCb, playerInfoCb, getDebrisCb, exchangeCb) {
          var _this32 = this;

          var btnPath = Define.DebrisViewPath.ORG;
          var path = Tools.GetFilePath(btnPath);
          Define.CommonBundle.load(path, Prefab, function (error, assets) {
            if (error) {
              _this32.CreateDebrisView(activityCb, playerInfoCb, getDebrisCb, exchangeCb);

              return;
            }

            var node = instantiate(assets);

            _this32.node.addChild(node);

            node.active = false;
            Tools.SetZIndex(node, Define.ZOrder.DEBRIS);
            debrisManager.Init(_this32, activityCb, playerInfoCb, getDebrisCb, exchangeCb, function (isShow) {
              _this32.SetDebrisBtnState(isShow);
            });
          });
        };

        _proto.SetDebrisBtnTitle = function SetDebrisBtnTitle(spriteFrame) {
          if (this.m_debrisNode) {
            var title = this.m_debrisNode.getChildByName("img_discount");

            if (this.m_debrisBtn) {
              title = this.m_debrisBtn.TitleSprite.node;
            }

            title.getComponent(Sprite).spriteFrame = spriteFrame;
          }
        };

        _proto.SetDebrisBtnState = function SetDebrisBtnState(active) {
          if (!this.m_iconBox) {
            if (active) {
              if (this.needSortBtn) {
                // if ( !Tools.IsTadaCasino )
                // {
                this.m_topRightIcon.AddIcon(Define.CbKey.Debris, [this.m_debrisNode]).Sort().Reorder();

                if (this.m_discountBtn) {
                  // this.m_discountBtn.node.getComponent( FloatView ).ResetPosition();
                  this.m_discountBtnRoot.getComponent(FloatView).ResetPosition();
                }

                this.m_debrisNode.getComponent(FloatView).ResetPosition();

                if (this.m_favorBtn) {
                  this.m_favorBtn.node.getComponent(FloatView).ResetPosition();
                }

                if (this.m_trialBtn) {
                  this.m_trialBtn.node.getComponent(FloatView).ResetPosition();
                }

                if (this.m_depositBtn) {
                  this.m_depositBtn.getComponent(FloatView).ResetPosition();
                } // }

              }
            } else {
              this.m_topRightIcon.RemoveIcon(Define.CbKey.Debris);
            }
          }

          this.m_debrisNode.active = active;

          if (
          /*Tools.IsTadaCasino &&*/
          this.m_iconBox) {
            this.m_iconBox.OpenBtnSeat(IconBoxSeat.Debris, active);
          }

          if (active) {
            if (this.m_isFeaturesDemoMode) {
              this.m_debrisBtn.node.getComponent(UIOpacity).opacity = 0;
              this.m_debrisBtn.Btn.interactable = false;
            }
          }
        };

        _proto.SetDebrisBtnRedPoint = function SetDebrisBtnRedPoint(isShow) {
          if (this.m_debrisNode) {
            var redPoint = this.m_debrisNode.getChildByName("RedPoint");

            if (this.m_debrisBtn) {
              redPoint = this.m_debrisBtn.RedPointNode;
            }

            if (redPoint) {
              redPoint.active = isShow;
            }
          }
        }
        /** 新手教學 */
        ;

        _proto.CheckLevelHint = function CheckLevelHint(lv) {
          if (Tools.IsTadaCasino && this.m_rookieHintManager) {
            if (lv == HintLevel.Mission) {
              this.SetDailyMissionIconVisible(true);
            }

            return this.m_rookieHintManager.CheckLevelHint(lv, this.m_isLandscape);
          } else {
            return -1;
          }
        }
        /**
         * 地bar 消失與顯示
         * @param visialbe false消失 或 true顯示
         */
        ;

        _proto.SetBarNodeVisiable = function SetBarNodeVisiable(visiable, time) {
          if (time === void 0) {
            time = 0;
          }

          var op = 0;

          if (visiable) {
            op = 255;
          }

          this.m_floatBaseNode.active = visiable;
          tween(this.m_floatBaseNode.getComponent(UIOpacity)).to(time, {
            opacity: op
          }).start();

          if (AppManager.LobbyData && AppManager.LobbyData.isHideMember || Define.IS_DEMO) {
            if (this.m_backpackBtn) {
              this.m_backpackBtn.node.active = false;
            }

            if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) ;else {
              // this.m_floatBaseNode.stopAllActions();
              TweenSystem.instance.ActionManager.removeAllActionsFromTarget(this.m_floatBaseNode); // this.m_floatBaseNode.active = false;

              return;
            }
          }

          if (this.m_backpackBtn) {
            tween(this.m_backpackBtn.node.getComponent(UIOpacity)).to(time, {
              opacity: op
            }).start();
          }
        }
        /**
         * 測試log用
         */
        ;

        _proto.sendTestLog = function sendTestLog(eventid) {
          return this.m_bottomBarManager.sendTestLog(eventid);
        };

        _createClass(ExtraManager, [{
          key: "BetLabel",
          get: function get() {
            if (Tools.IsTadaCasino && this.m_APPbetLabel) {
              return this.m_APPbetLabel;
            } else if (this.IsBMMGames && this.m_BMMbetLabel) {
              return this.m_BMMbetLabel;
            } else {
              return this.m_betLabel;
            }
          },
          set: function set(v) {
            this.m_betLabel = v;
          }
        }, {
          key: "FloatBaseNode",
          get: function get() {
            return this.m_floatBaseNode;
          } //背包

        }, {
          key: "BackPackBtn",
          set: function set(v) {
            this.m_backpackBtn = v;
          }
        }, {
          key: "BackPackBtnNode",
          get: function get() {
            return this.m_backpackBtn.node;
          }
        }, {
          key: "BackpackRp",
          set: function set(v) {
            this.m_backpackRp = v;
          }
        }, {
          key: "BackpackSprite",
          set: function set(v) {
            this.m_backpackSprite = v;
          }
        }, {
          key: "FeaturesDemoRootNode",
          get: function get() {
            return this.m_featuresDemoRootNode;
          }
        }, {
          key: "LobbyBtn",
          get: function get() {
            return this.m_lobbyBtn;
          } //印度撲克需要

        }, {
          key: "Recommend",
          get: function get() {
            return this.m_discount;
          }
        }, {
          key: "DiscountBtn",
          get: function get() {
            return this.m_discountBtn;
          } //印度撲克需要

        }, {
          key: "DiscountRedPointNode",
          get: function get() {
            return this.m_discountRedPointNode;
          }
        }, {
          key: "DiscountFreeGift",
          get: function get() {
            return this.m_discountFreeGift;
          }
        }, {
          key: "BuyBonusRemainTimes",
          set: function set(value) {
            this.m_buyBonusRemainTimes.string = String(value);
          }
        }, {
          key: "BuyBonusAnimNode",
          get: function get() {
            return this.m_buyBonusAnimNode;
          }
        }, {
          key: "BuyBonusNumPrice",
          set: function set(v) {
            this.m_buyBonusNumPrice.string = Tools.FormatNumberThousands(v, Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO, true, 2);

            if ((!Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CurrencySymbol) || Number(Define.API_ID) == Define.MGAApi) && Define.DollarSymbol != "") {
              this.m_buyBonusNumPrice.string = Define.DollarSymbol + String(v);
            }
          }
        }, {
          key: "BuyBonusCumulativePrice",
          set: function set(v) {
            if (this.m_buyBonusCumulativePrice) {
              this.m_buyBonusCumulativePrice.string = Tools.FormatNumberThousands(v, Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO, true, 2);

              if ((!Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CurrencySymbol) || Number(Define.API_ID) == Define.MGAApi) && Define.DollarSymbol != "") {
                this.m_buyBonusCumulativePrice.string = Define.DollarSymbol + String(v);
              }
            }
          }
        }, {
          key: "BuyBonusPriceTitle",
          get: function get() {
            return this.m_buyBonusPriceTitle;
          },
          set: function set(v) {
            if (this.m_buyBonusPriceTitle) {
              this.m_buyBonusPriceTitle.string = v;
            }
          }
        }, {
          key: "BuyBonusCumulativePriceTitle",
          get: function get() {
            return this.m_buyBonusCumulativePriceTitle;
          },
          set: function set(v) {
            this.m_buyBonusCumulativePriceTitle.string = v;
          }
        }, {
          key: "BuyBonusPriceRoot",
          get: function get() {
            return this.m_buyBonusPriceRoot;
          }
        }, {
          key: "BuyBonusBtn",
          get: function get() {
            return this.m_buyBonusBtn;
          }
        }, {
          key: "IconBox",
          get: function get() {
            return this.m_iconBox;
          } // TaDa Rookie ---------------------------

        }, {
          key: "RookieHintManager",
          get: function get() {
            return this.m_rookieHintManager;
          }
        }, {
          key: "IsLandscape",
          get: function get() {
            return this.m_isLandscape;
          }
        }, {
          key: "IsSmall",
          get: function get() {
            return this.m_isSmall;
          }
        }, {
          key: "IsLow",
          get: function get() {
            return this.m_isLow;
          }
        }, {
          key: "View",
          get: function get() {
            return this.m_bottomBarManager.m_view;
          }
        }, {
          key: "BottomBarManager",
          get: function get() {
            return this.m_bottomBarManager;
          }
        }, {
          key: "SpinBtn",
          get: function get() {
            return this.m_bottomBarManager.SpinBtn;
          }
        }, {
          key: "BetBtn",
          get: function get() {
            return this.m_bottomBarManager.BetBtn;
          }
        }, {
          key: "FeaturesView",
          get: function get() {
            return this.m_featuresView;
          }
        }, {
          key: "FeaturesBtnPos",
          get: function get() {
            if (this.m_featuresBtn) {
              return this.m_featuresBtn.node.position;
            }

            return null;
          }
        }, {
          key: "HasUnshow",
          get: function get() {
            return this.m_hasUnshow;
          },
          set: function set(v) {
            this.m_hasUnshow = v;
          }
        }, {
          key: "IsFeaturesDemo",
          get: function get() {
            return this.m_isFeaturesDemo;
          }
        }, {
          key: "IsFeaturesDemoLoaded",
          get: function get() {
            return this.m_isFeaturesDemoLoaded;
          }
        }, {
          key: "IsInitFreaturesDemo",
          get: function get() {
            return this.m_isInitFreaturesDemo;
          }
        }, {
          key: "IsNowInDemoMenu",
          get: function get() {
            return this.m_isNowInDemoMenu;
          }
        }, {
          key: "LockAutoEnableByFeatures",
          get: function get() {
            return this.m_lockAutoEnableByFeatures;
          }
        }, {
          key: "Rankboard",
          get: function get() {
            return this.m_rankingView;
          } //百寶箱

        }, {
          key: "MemberUrl",
          get: function get() {
            return this.m_bottomBarManager.MemberUrl;
          }
        }, {
          key: "CanShowReplay",
          get: function get() {
            return this.m_canShowReplay;
          },
          set: function set(v) {
            this.m_canShowReplay = v;
          }
        }, {
          key: "IsNowReplay",
          get: function get() {
            return this.m_isNowReplay;
          }
        }, {
          key: "ReplayBetValue",
          get: function get() {
            return Number(this.m_replayBetValue.string);
          } // 儲值按鈕

        }, {
          key: "IsInTrial",
          get: function get() {
            return this.m_isInTrial;
          } // public get Trial() { return this.m_trial; }

        }, {
          key: "Trial",
          get: function get() {
            return trialManager.HasTrial;
          }
        }, {
          key: "IsTrialViewOpen",
          get: function get() {
            // return this.m_trial && this.m_trial.IsTrialViewOpen;
            return trialManager.HasTrial && trialManager.IsTrialViewOpen; // return false;
          }
        }, {
          key: "TrialCoins",
          get: function get() {
            return this.m_trialCoins;
          }
        }, {
          key: "WebView",
          get: function get() {
            return this.m_bottomBarManager.WebView;
          } //碎片

        }, {
          key: "CumulativePaid",
          get: function get() {
            return this.m_cumulativePaid;
          } // 階層已無參考價值
          ,
          set: function set(v) {
            this.m_cumulativePaid = v;
          }
        }, {
          key: "IsGLIGames",
          get: function get() {
            if (this.m_bottomBarManager) {
              return this.m_bottomBarManager.IsGLIGames;
            }

            return false;
          }
        }, {
          key: "IsBMMGames",
          get: function get() {
            if (this.m_bottomBarManager) {
              return this.m_bottomBarManager.IsBMMGames;
            }

            return false;
          } // TADA 客製化自己的widget

        }, {
          key: "GetNowActNo",
          get: function get() {
            if (this.m_isInTrial) {
              // return this.m_trial.GetNowActNo;
              return trialManager.GetNowActNo;
            } else {
              return 0;
            }
          }
        }]);

        return ExtraManager;
      }(Component), _class3.UIName = {
        /**/
        IMG_BAR_DN: "img_bar_dn",

        /**/
        IMG_WIN: "img_win",

        /**/
        IMG_BLANCE: "img_blance",

        /**/
        TXT_BLANCE: "txt_blance",

        /**/
        COMM_MENU: "comm_menu",

        /**/
        BTN_INFO: "btn_info",

        /**/
        BTN_SOUND: "btn_sound",

        /**/
        BTN_WISEAUTOPLAY: "btn_wiseautoplay",

        /**/
        BTN_HISTORY: "btn_history",

        /**/
        BTN_COMM: "btn_comm",

        /**/
        IMG_BTN_COMM: "img_btn_comm",

        /**/
        TXT_WIN: "txt_win",

        /**/
        BETVIEW: "betView",

        /**/
        BET_MENU: "bet_menu",

        /**/
        BTN_BETS: "btn_bet",
        // btn_bets + 1~7

        /**/
        BET_VALUE: "bet_value",

        /**/
        SELECTED: "selected",

        /**/
        BTN_BET: "btn_bet",

        /**/
        IMG_BET: "img_bet",

        /**/
        TXT_BET_VALUE: "txt_bet_value",

        /**/
        BTN_FEATURES: "btn_features",

        /**/
        IMG_SPEED: "img_speed",

        /**/
        BTN_SPEED: "btn_speed",

        /**/
        BTN_BACKPACK: "btn_backpack",

        /**/
        IMG_BACKPACKNODE: "img_backpackNode",

        /**/
        IMG_BACKPACK: "img_backpack",

        /**/
        USINGCARD: "usingCard",

        /**/
        USINGCARDNUM: "usingCardNum",

        /**/
        BTN_AUTOSTOP_C: "btn_autostop_c",

        /**/
        IMG_AUTOTOP: "img_autotop",

        /**/
        TXT_AUTO_COUNT: "txt_auto_count",

        /**/
        BTN_AUTOSTOP: "btn_autostop",

        /**/
        IMG_AUTOTOP_1: "img_autotop_1",

        /**/
        BTN_AUTOPLAY: "btn_autoplay",

        /**/
        IMG_AUTOPLAY: "img_autoplay",

        /**/
        BTN_SPINSTOP: "btn_spinstop",

        /**/
        IMG_STOP_LABEL: "img_stop_label",

        /**/
        BTN_SPIN: "btn_spin",

        /**/
        IMG_SPIN_LABEL: "img_spin_label",

        /**/
        AUTOPLAY: "Autoplay",

        /**/
        IMG_BAR_SUB_BG: "img_bar_sub_bg",

        /**/
        WEBVIEW: "webview",

        /**/
        BTN_CLOSE: "btn_close",

        /**/
        BTN_TRIAL: "btn_Trial",

        /**/
        TRAILWINPROGRESSBAR: "TrailWinProgressBar",
        //按住spin用

        /**/
        BTN_HOLD_SPIN: "btn_hold_spin",

        /**/
        BTN_RELEASE_SPIN: "btn_release_spin"
      }, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_betSprite", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_betLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_BMMbetLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_APPbetLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_commAtlas", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_topLeftNodes", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_topRightNodes", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_floatBaseNode", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_backpackBtn", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_backpackRp", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_backpackSprite", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_usingCardNode", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_jillCardSpriteFrame", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_getItemEft", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_getItemBall", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_featuresBtn", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "m_featuresDemoBtnTxt", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "m_featuresGoRealBtn", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "m_featuresGoRealBtnTxt", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "m_featuresMenu", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "m_featuresDemoView", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "m_featuresGoRealDes", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "m_featuresMenuDes", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "m_featuresHint", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "m_featuresDemoModeTxt", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "m_demoModeTxt", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "m_featuresSprite", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "m_featuresDemoRootNode", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "m_featuresDemoSelectRootNode", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "m_rankingBtnRoot", [_dec30], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor31 = _applyDecoratedDescriptor(_class2.prototype, "m_rankingBtn", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor32 = _applyDecoratedDescriptor(_class2.prototype, "m_rankingAnim", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor33 = _applyDecoratedDescriptor(_class2.prototype, "m_rankingLabel", [_dec33], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor34 = _applyDecoratedDescriptor(_class2.prototype, "m_dailyBtn", [_dec34], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor35 = _applyDecoratedDescriptor(_class2.prototype, "m_dailyAnim", [_dec35], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor36 = _applyDecoratedDescriptor(_class2.prototype, "m_dailyLabel", [_dec36], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor37 = _applyDecoratedDescriptor(_class2.prototype, "m_lobbyBtn", [_dec37], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor38 = _applyDecoratedDescriptor(_class2.prototype, "m_lobbyLable", [_dec38], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor39 = _applyDecoratedDescriptor(_class2.prototype, "m_closeGameBtn", [_dec39], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor40 = _applyDecoratedDescriptor(_class2.prototype, "m_discount", [_dec40], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor41 = _applyDecoratedDescriptor(_class2.prototype, "m_discountBtnRoot", [_dec41], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor42 = _applyDecoratedDescriptor(_class2.prototype, "m_discountBtn", [_dec42], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor43 = _applyDecoratedDescriptor(_class2.prototype, "m_discountRedPointNode", [_dec43], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor44 = _applyDecoratedDescriptor(_class2.prototype, "m_discountFreeGift", [_dec44], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor45 = _applyDecoratedDescriptor(_class2.prototype, "m_discountBgCloseBtn", [_dec45], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor46 = _applyDecoratedDescriptor(_class2.prototype, "m_discountCloseBtn", [_dec46], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor47 = _applyDecoratedDescriptor(_class2.prototype, "m_favorBtn", [_dec47], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor48 = _applyDecoratedDescriptor(_class2.prototype, "m_mayLikeView", [_dec48], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor49 = _applyDecoratedDescriptor(_class2.prototype, "m_bigWinReplayMask", [_dec49], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor50 = _applyDecoratedDescriptor(_class2.prototype, "m_bigWinReplayAni", [_dec50], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor51 = _applyDecoratedDescriptor(_class2.prototype, "m_replayBetSprite", [_dec51], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor52 = _applyDecoratedDescriptor(_class2.prototype, "m_replayBetValue", [_dec52], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor53 = _applyDecoratedDescriptor(_class2.prototype, "m_replayStartAniSprite", [_dec53], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor54 = _applyDecoratedDescriptor(_class2.prototype, "m_replayEndAniSprite", [_dec54], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor55 = _applyDecoratedDescriptor(_class2.prototype, "m_replayModeTxt", [_dec55], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor56 = _applyDecoratedDescriptor(_class2.prototype, "m_replayBetTxt", [_dec56], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor57 = _applyDecoratedDescriptor(_class2.prototype, "m_replayWinTxt", [_dec57], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor58 = _applyDecoratedDescriptor(_class2.prototype, "m_replayBalanceTxt", [_dec58], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor59 = _applyDecoratedDescriptor(_class2.prototype, "m_trial", [_dec59], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor60 = _applyDecoratedDescriptor(_class2.prototype, "m_trialSprite", [_dec60], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor61 = _applyDecoratedDescriptor(_class2.prototype, "m_trialBtn", [_dec61], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor62 = _applyDecoratedDescriptor(_class2.prototype, "m_trialProgressBar", [_dec62], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor63 = _applyDecoratedDescriptor(_class2.prototype, "m_trialProgressHintNode", [_dec63], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor64 = _applyDecoratedDescriptor(_class2.prototype, "m_trialTotalWinLabel", [_dec64], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor65 = _applyDecoratedDescriptor(_class2.prototype, "m_trialTotalWinLabel_Under", [_dec65], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor66 = _applyDecoratedDescriptor(_class2.prototype, "m_trialProgressLvlLabel", [_dec66], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor67 = _applyDecoratedDescriptor(_class2.prototype, "m_trialCoinLabel", [_dec67], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor68 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusRoot", [_dec68], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor69 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusView", [_dec69], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor70 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusUsed", [_dec70], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor71 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusRemainTimes", [_dec71], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor72 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusIcon", [_dec72], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor73 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusIconTxt", [_dec73], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor74 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusAnimNode", [_dec74], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor75 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusNumPrice", [_dec75], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor76 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusCumulativePrice", [_dec76], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor77 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusPriceTitle", [_dec77], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor78 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusCumulativePriceTitle", [_dec78], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor79 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusPriceRoot", [_dec79], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor80 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusBtn", [_dec80], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor81 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusSprite", [_dec81], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor82 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusTag", [_dec82], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor83 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusTagNode", [_dec83], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor84 = _applyDecoratedDescriptor(_class2.prototype, "m_buyBonusTxt", [_dec84], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor85 = _applyDecoratedDescriptor(_class2.prototype, "m_FreeSpinBetImgSpriteFrame", [_dec85], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor86 = _applyDecoratedDescriptor(_class2.prototype, "m_iconBox", [_dec86], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor87 = _applyDecoratedDescriptor(_class2.prototype, "m_rookieHintManager", [_dec87], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Favor.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LocaleStringManager.ts', './ViewTemplate.ts', './Discount.ts', './IconTemplate.ts', './MsgBox.ts', './Define.ts', './Tools.ts', './ConnectionManager.ts', './EnvironmentConfig.ts', './BottombarManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, Sprite, Button, Label, Animation, instantiate, LocaleStringManager, ViewTemplate, PageName, IconTemplate, MsgBox, Define, Tools, ConnectionManager, EnvironmentConfig, BottombarManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      Sprite = module.Sprite;
      Button = module.Button;
      Label = module.Label;
      Animation = module.Animation;
      instantiate = module.instantiate;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      ViewTemplate = module.default;
    }, function (module) {
      PageName = module.PageName;
    }, function (module) {
      IconTemplate = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      ConnectionManager = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      BottombarManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15;

      cclegacy._RF.push({}, "4afe8XPektGV7Ftl1hvV3T/", "Favor", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Favor = exports('default', (_dec = property({
        type: Node,
        tooltip: "橫版節點"
      }), _dec2 = property({
        type: Node,
        tooltip: "直版節點"
      }), _dec3 = property({
        type: Node,
        tooltip: "橫版ScrollView的content節點"
      }), _dec4 = property({
        type: Node,
        tooltip: "值版ScrollView的content節點"
      }), _dec5 = property({
        type: Prefab,
        tooltip: "icon樣版"
      }), _dec6 = property({
        type: Node,
        tooltip: "ScrollView節點"
      }), _dec7 = property({
        type: Node,
        tooltip: "說明主節點"
      }), _dec8 = property({
        type: Sprite,
        tooltip: "說明標題"
      }), _dec9 = property({
        type: Button,
        tooltip: "說明關閉按鈕"
      }), _dec10 = property({
        type: Label,
        tooltip: "說明文字"
      }), _dec11 = property({
        type: Label,
        tooltip: "說明確定文字"
      }), _dec12 = property({
        type: IconTemplate,
        tooltip: "說明內icon" // TADA 不會用到

      }), _dec13 = property({
        type: Button,
        tooltip: "收藏說明按鈕"
      }), _dec14 = property({
        type: Label,
        tooltip: "點擊提示"
      }), _dec15 = property({
        type: Label,
        tooltip: "無收藏提示"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_ViewTemplate) {
        _inheritsLoose(Favor, _ViewTemplate);

        function Favor() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _ViewTemplate.call.apply(_ViewTemplate, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_nodeL", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_nodeS", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_favorNodeL", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_favorNodeS", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_iconPrefab", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scrollViewNodes", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_descNodes", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_descTitleSprites", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_descCloseBtns", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_descLabels", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_descConfirmLabels", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_infoIcons", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_favorInfoBtns", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_clickHintLabels", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_noFavorHintLabels", _descriptor15, _assertThisInitialized(_this));

          _this.m_bottomBar = null;
          _this.m_dauList = null;
          _this.m_favorList = null;
          _this.m_favorIcons = new Array();
          _this.m_discount = null;
          _this.m_isChange = false;
          _this.m_isAddFavor = false;
          _this.m_isRemoveFavor = false;
          _this.m_changeGameId = 0;
          _this.m_initEndCb = null;
          _this.m_isInitEnd = false;
          _this.m_isAddFavorByBig = false;
          _this.m_isLandscape = false;
          _this.m_isAddByInfo = false;
          return _this;
        }

        var _proto = Favor.prototype; // onLoad () {}

        _proto.start = function start() {
          var _this2 = this; //關閉收藏說明


          if (this.m_descCloseBtns) {
            this.m_descCloseBtns.forEach(function (element) {
              element.node.on(Node.EventType.TOUCH_START, function (event) {
                event.propagationImmediateStopped = true;
                event.propagationStopped = true;

                if (_this2.CurrentTouchName == null && element.node.active) {
                  _this2.CurrentTouchName = event.target.name;
                } else {
                  if (event.target && event.target.active == false) {
                    _this2.CurrentTouchName = event.target.name;
                  }
                }
              });
              element.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
                if (_this2.CurrentTouchName == event.target.name) {
                  _this2.CurrentTouchName = null;
                }
              });
              element.node.on(Node.EventType.TOUCH_END, function (event) {
                if (_this2.CurrentTouchName != event.target.name) {
                  return;
                }

                _this2.CurrentTouchName = null; // if ( Tools.Line !== Define.LineSetting.americas &&
                //     Tools.Line !== Define.LineSetting.americas_str )
                // {
                //     this.m_descNodes.forEach( element =>
                //     {
                //         element.active = false;
                //     } );
                //     this.m_scrollViewNodes.forEach( element =>
                //     {
                //         element.active = true;
                //     } );
                // } else
                // {
                // }
              });
            });
          } //收藏說明按鈕


          if (this.m_favorInfoBtns) {
            this.m_favorInfoBtns.forEach(function (element) {
              element.node.on(Node.EventType.TOUCH_START, function (event) {
                event.propagationImmediateStopped = true;
                event.propagationStopped = true;

                if (_this2.CurrentTouchName == null && element.node.active) {
                  _this2.CurrentTouchName = event.target.name;
                } else {
                  if (event.target && event.target.active == false) {
                    _this2.CurrentTouchName = event.target.name;
                  }
                }
              });
              element.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
                if (_this2.CurrentTouchName == event.target.name) {
                  _this2.CurrentTouchName = null;
                }
              });
              element.node.on(Node.EventType.TOUCH_END, function (event) {
                if (_this2.CurrentTouchName != event.target.name) {
                  return;
                }

                _this2.CurrentTouchName = null; // if ( Tools.Line !== Define.LineSetting.americas &&
                //     Tools.Line !== Define.LineSetting.americas_str )
                // {
                //     if ( this.m_descNodes )
                //     {
                //         this.m_descNodes.forEach( element =>
                //         {
                //             element.active = true;
                //         } );
                //         this.m_scrollViewNodes.forEach( element =>
                //         {
                //             element.active = false;
                //         } );
                //     }
                // } else
                // {
                //  標題要換多語系

                var title = LocaleStringManager.GetInstance().GetString(Define.StringKey.FAVOR_INFO);
                var i = 0; // Landscape

                if (!_this2.m_isLandscape) {
                  i = 1;
                }

                var content = LocaleStringManager.GetInstance().GetString(Define.StringKey.FAVOR_DESC + i.toString());

                _this2.m_bottomBar.OpenCommonText(title, content, null, null, null, Define.CommonTextType.FAVOR); // }

              });
            });
          } //無收藏提示


          if (this.m_noFavorHintLabels) {
            this.m_noFavorHintLabels.forEach(function (element) {
              element.node.on(Node.EventType.TOUCH_START, function (event) {
                event.propagationImmediateStopped = true;
                event.propagationStopped = true;

                if (_this2.CurrentTouchName == null && element.node.active) {
                  _this2.CurrentTouchName = event.target.name;
                } else {
                  if (event.target && event.target.active == false) {
                    _this2.CurrentTouchName = event.target.name;
                  }
                }
              });
              element.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
                if (_this2.CurrentTouchName == event.target.name) {
                  _this2.CurrentTouchName = null;
                }
              });
              element.node.on(Node.EventType.TOUCH_END, function (event) {
                if (_this2.CurrentTouchName != event.target.name) {
                  return;
                }

                _this2.CurrentTouchName = null;

                _this2.m_discount.ShowDiscountView(PageName.Recommand);
              });
            });
          }

          this.m_infoIcons.forEach(function (icon) {
            icon.Init(_this2, _this2.m_discount.GameId);
            icon.SetCb(Define.BTN_CLICK_EVENT.FAVOR_CHANGE_GAME, function (gameId) {
              _this2.m_isAddByInfo = true;

              _this2.m_discount.AddFavor(gameId, Define.BTN_CLICK_EVENT.FAVOR_FAVOR_ADD);
            }, function (gameId) {
              _this2.m_discount.RemoveFavor(gameId, Define.BTN_CLICK_EVENT.FAVOR_FAVOR_REMOVE);
            });
          });
        };

        _proto.TimeOutHandle = function TimeOutHandle() {
          this.m_isAddFavor = false;
          this.m_isRemoveFavor = false;
        };

        _proto.SetTxt = function SetTxt(spriteAtlas) {
          if (this.m_descTitleSprites) {
            this.m_descTitleSprites.forEach(function (element) {
              element.spriteFrame = spriteAtlas.getSpriteFrame("favor_info_" + LocaleStringManager.CurrLang);
            });
          }

          if (this.m_descLabels) {
            for (var i = 0; i < this.m_descLabels.length; i++) {
              this.m_descLabels[i].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.FAVOR_DESC + i.toString());

              if (!this.m_descLabels[i].font) {
                this.m_descLabels[i].font = Define.DefaultFont;
              }
            }
          }

          if (this.m_descConfirmLabels) {
            this.m_descConfirmLabels.forEach(function (element) {
              element.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.MSGBOX_CONFIRM);

              if (!element.font) {
                element.font = Define.DefaultFont;
              }
            });
          }

          if (this.m_clickHintLabels) {
            this.m_clickHintLabels.forEach(function (element) {
              element.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RECOMMEND_HINT);

              if (!element.font) {
                element.font = Define.DefaultFont;
              }
            });
          }

          if (this.m_noFavorHintLabels) {
            this.m_noFavorHintLabels.forEach(function (element) {
              element.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.FAVOR_NOTHING_DESC);
              Tools.SetFont(element); // if ( !element.font )
              // {
              //     element.font = Define.DefaultFont;
              // }
            });
          }
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          this.m_isLandscape = isLandscape; // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     if ( isLandscape )
          //     {
          //         this.m_nodeL.active = true;
          //         this.m_nodeS.active = false;
          //         this.m_favorIcons.forEach( element =>
          //         {
          //             element.node.removeFromParent( false );
          //             this.m_favorNodeL.addChild( element.node );
          //         } );
          //     }
          //     else
          //     {
          //         this.m_nodeL.active = false;
          //         this.m_nodeS.active = true;
          //         this.m_favorIcons.forEach( element =>
          //         {
          //             element.node.removeFromParent( false );
          //             this.m_favorNodeS.addChild( element.node );
          //         } );
          //     }
          // }
          // else
          // {

          if (this.m_isLandscape) {
            this.node.getComponent(Animation).play("Clip_WinMore_Popular_Landscape");
          } else {
            this.node.getComponent(Animation).play("Clip_WinMore_Popular_Portrait");
          } // }

        };

        _proto.FavorInit = function FavorInit(discount, isLandscape, favorInfo, isAddFavorByBig, bottomBar, initEndCb) {
          var _this3 = this;

          this.m_bottomBar = bottomBar.node.getComponent(BottombarManager);
          this.m_discount = discount;
          this.m_initEndCb = initEndCb;
          this.m_isLandscape = isLandscape; //直接賦值會把兩個參數指向同一個物件

          if (isAddFavorByBig) {
            this.m_isAddFavorByBig = true;
          } else {
            this.m_isAddFavorByBig = false;
          }

          if (this.m_favorList !== null) {
            var favorList = favorInfo.Favorites;

            if (favorList === null) {
              if (this.m_favorList.length > 0) {
                this.m_isChange = true;
              }
            } else if (this.m_favorList.length !== favorList.length) {
              this.m_isChange = true;
            } //提示


            if (favorList && favorList.length > this.m_favorList.length) {
              this.m_discount.ShowFavorHint();
            }
          } else {
            //提示
            if (favorInfo.Favorites && favorInfo.Favorites.length > 0) {
              this.m_discount.ShowFavorHint();
            }
          }

          if (this.m_noFavorHintLabels) {
            // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     if ( favorInfo.Favorites && favorInfo.Favorites.length > 0 )
            //     {
            //         this.m_noFavorHintLabels.forEach( element =>
            //         {
            //             element.node.active = false;
            //         } );
            //         this.m_scrollViewNodes.forEach( element =>
            //         {
            //             element.active = true;
            //         } );
            //     }
            //     else
            //     {
            //         this.m_noFavorHintLabels.forEach( element =>
            //         {
            //             element.node.active = true;
            //         } );
            //         this.m_scrollViewNodes.forEach( element =>
            //         {
            //             element.active = true;
            //         } );
            //     }
            // } else
            // {
            if (favorInfo.Favorites && favorInfo.Favorites.length > 0) {
              this.m_noFavorHintLabels.forEach(function (element) {
                element.node.active = false;
              });
              this.m_scrollViewNodes.forEach(function (element) {
                element.active = true;
              });
            } else {
              this.m_noFavorHintLabels.forEach(function (element) {
                element.node.active = true;
              });
              this.m_scrollViewNodes.forEach(function (element) {
                element.active = false;
              });
            } // }

          }

          this.m_favorList = new Array();
          this.m_dauList = new Array();

          if (favorInfo.Favorites !== null) {
            //超過得直接移除
            var favorLength = favorInfo.Favorites.length;

            for (var i = 0; i < favorLength; i++) {
              this.m_favorList.push(favorInfo.Favorites[i]);
              this.m_dauList.push(favorInfo.DAU[i] ? favorInfo.DAU[i] : 0);
            }
          }

          for (var _i = 0; _i < this.m_favorList.length; _i++) {
            if (!Tools.Icons[this.m_favorList[_i]]) {
              Tools.LoadIcon(LocaleStringManager.CurrLang, this.m_favorList[_i], function () {
                if (_this3.CheckRes()) {
                  _this3.CreateBtn();
                }
              });
            }
          }

          if (this.CheckRes()) {
            this.CreateBtn();
          }

          var setSimple = function setSimple() {
            _this3.m_infoIcons.forEach(function (icon) {
              icon.SetIconSpriteFrame(Tools.Icons[_this3.m_discount.GameId], _this3.m_discount.GameId);
            });
          };

          if (!Tools.Icons[Number(Define.NOW_GAME_ID)]) {
            Tools.LoadIcon(LocaleStringManager.CurrLang, Number(Define.NOW_GAME_ID), function () {
              setSimple();
            });
          } else {
            setSimple();
          }

          this.m_favorInfoBtns.forEach(function (element) {
            element.node.active = true;
          }); // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          // } else
          // {

          var func = function func(icon) {
            icon.Init(_this3, _this3.m_discount.GameId);

            var setSimple = function setSimple() {
              // this.m_infoIcons.forEach( icon =>
              // {
              icon.SetIconSpriteFrame(Tools.Icons[_this3.m_discount.GameId], _this3.m_discount.GameId); // } );
            };

            if (!Tools.Icons[Number(Define.NOW_GAME_ID)]) {
              Tools.LoadIcon(LocaleStringManager.CurrLang, Number(Define.NOW_GAME_ID), function () {
                setSimple();
              });
            } else {
              setSimple();
            } //----------------------------------------------------------------------------


            icon.SetIsFavor(false);
            icon.ShowFavorHint(false);

            for (var _i2 = 0; _i2 < _this3.m_favorList.length; _i2++) {
              if (_this3.m_favorList[_i2].toString() === Define.NOW_GAME_ID) {
                icon.SetIsFavor(true);
                icon.ShowFavorHint(true);
                break;
              }
            }

            icon.SetCb(Define.BTN_CLICK_EVENT.FAVOR_CHANGE_GAME, function (gameId) {
              _this3.m_isAddByInfo = true;

              _this3.m_discount.AddFavor(gameId, Define.BTN_CLICK_EVENT.FAVOR_FAVOR_ADD);
            }, function (gameId) {
              _this3.m_discount.RemoveFavor(gameId, Define.BTN_CLICK_EVENT.FAVOR_FAVOR_REMOVE);
            });
          };

          this.m_bottomBar.InitFavorIcon(func); // }
        };

        _proto.AddFavor = function AddFavor(gameId, eventNo) {
          if (!this.m_isAddFavor) {
            this.m_discount.ShowMask();
            this.m_isAddFavor = true;
            this.m_changeGameId = gameId; // LifeSocket.GetInstance().ReqAddFavor( gameId, eventNo );

            this.ReqAddFavor(gameId, eventNo);

            if (this.m_descNodes) {
              this.m_descNodes.forEach(function (element) {
                element.active = false;
              });
            }
          }
        };

        _proto.RemoveFavor = function RemoveFavor(gameId, eventNo) {
          if (!this.m_isRemoveFavor) {
            this.m_discount.ShowMask();
            this.m_isRemoveFavor = true; // LifeSocket.GetInstance().ReqRemoveFavor( gameId, eventNo );

            this.ReqRemoveFavor(gameId, eventNo);

            if (this.m_descNodes) {
              this.m_descNodes.forEach(function (element) {
                element.active = false;
              });
            }
          }
        };

        _proto.AutoShowHint = function AutoShowHint() {
          if (this.m_descNodes && this.m_favorIcons.length === 0) {
            // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     this.m_descNodes.forEach( element =>
            //     {
            //         element.active = true;
            //     } );
            //     this.m_scrollViewNodes.forEach( element =>
            //     {
            //         element.active = false;
            //     } );
            // } else
            // {
            //  標題要換多語系
            var title = LocaleStringManager.GetInstance().GetString(Define.StringKey.FAVOR_INFO);
            var i = 0; // Landscape

            if (!this.m_isLandscape) {
              i = 1;
            }

            var content = LocaleStringManager.GetInstance().GetString(Define.StringKey.FAVOR_DESC + i.toString());
            this.m_bottomBar.OpenCommonText(title, content, null, null, null, Define.CommonTextType.FAVOR); // }
          }
        };

        _proto.CheckRes = function CheckRes() {
          for (var i = 0; i < this.m_favorList.length; i++) {
            if (!Tools.Icons[this.m_favorList[i]]) {
              return false;
            }
          }

          return true;
        };

        _proto.CreateBtn = function CreateBtn() {
          var _this4 = this; //建立收藏
          //過多


          while (this.m_favorIcons.length > this.m_favorList.length) {
            var icon = this.m_favorIcons.pop();
            icon.node.removeFromParent();
            icon.node.destroy();
          } //缺少


          while (this.m_favorIcons.length < this.m_favorList.length) {
            var node = instantiate(this.m_iconPrefab);

            var _icon = node.getComponent(IconTemplate);

            this.m_favorIcons.push(_icon);
            this.m_favorNodeL.addChild(node);

            _icon.Init(this, this.m_discount.GameId);

            _icon.SetCb(Define.BTN_CLICK_EVENT.FAVOR_CHANGE_GAME, function (gameId) {
              _this4.m_discount.AddFavor(gameId, Define.BTN_CLICK_EVENT.FAVOR_FAVOR_ADD);
            }, function (gameId) {
              _this4.m_discount.RemoveFavor(gameId, Define.BTN_CLICK_EVENT.FAVOR_FAVOR_REMOVE);
            });
          }

          var hasSame = false;

          for (var i = 0; i < this.m_favorIcons.length; i++) {
            var _icon2 = this.m_favorIcons[i];

            _icon2.SetIconSpriteFrame(Tools.Icons[this.m_favorList[i]], this.m_favorList[i]);

            _icon2.SetIsFavor(true);

            _icon2.SetTagSpriteFrame(null);

            _icon2.SetDau(this.m_dauList[i]);

            if (i === 0) {
              _icon2.ShowIconHint();
            }

            if (this.m_favorList[i].toString() === Define.NOW_GAME_ID) {
              this.m_infoIcons.forEach(function (element) {
                element.SetIsFavor(true);
                element.ShowFavorHint();
              });
              hasSame = true;
            }
          }

          if (!hasSame) {
            this.m_infoIcons.forEach(function (element) {
              element.SetIsFavor(false);
              element.ShowIconHint();
            });
          }

          if (!this.m_isInitEnd) {
            this.m_isInitEnd = false;

            if (this.m_initEndCb) {
              this.m_initEndCb();
            }
          }

          this.m_discount.UpdateFavorState(this.m_favorList);

          if (this.m_isChange) {
            this.m_isChange = false;

            if (this.m_isAddFavor && this.m_changeGameId !== 0) {
              this.m_isAddFavor = false;
              this.m_discount.HideMask();

              if (!this.m_isAddFavorByBig) {
                var isNowGame = this.m_changeGameId === this.m_discount.GameId;
                MsgBox.getInstance().ShowMessageBoxFormat(Define.StringKey.FAVOR_ADD_HINT, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, [LocaleStringManager.GetInstance().GetGameName(this.m_changeGameId)], function () {
                  //從說明收藏
                  if (_this4.m_isAddByInfo && isNowGame) {
                    _this4.m_isAddByInfo = false; // if ( Tools.Line !== Define.LineSetting.americas &&
                    //     Tools.Line !== Define.LineSetting.americas_str )
                    // {
                    //     //關閉說明
                    //     this.m_descNodes.forEach( element =>
                    //     {
                    //         element.active = false;
                    //     } );
                    //     this.m_scrollViewNodes.forEach( element =>
                    //     {
                    //         element.active = true;
                    //     } );
                    // }
                  }
                });
              }

              this.m_changeGameId = 0;
            }

            if (this.m_isRemoveFavor) {
              this.m_isRemoveFavor = false;
              this.m_discount.HideMask();
            }
          }

          this.m_isAddFavorByBig = false;
          this.OnRotation(this.m_isLandscape);
        };

        _proto.UpdateArrowState = function UpdateArrowState() {
          if (this.m_favorIcons.length > 0) {
            this.m_favorIcons[0].ShowIconHint();
          }
        } // update (dt) {}
        ;

        _proto.SendClickEvent = function SendClickEvent(eventID, eventStatus) {
          ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, eventID, eventStatus));
        } // 從LifeService拆分出來 ---------------------------------------------------
        // 增加收藏遊戲
        ;

        _proto.ReqAddFavor = function ReqAddFavor(gameId, eventNo) {
          var _this5 = this;

          if (!ConnectionManager.getInstance().CheckSetting(Define.PROTOCOL.FAVORITE_ADD) && Define.AID != "-1" && Define.API_ID != "0") {
            ConnectionManager.getInstance().AddSetting(Define.PROTOCOL.FAVORITE_ADD, ConnectionManager.CONNECT_TYPE.TYPE_HTTP, null, null, EnvironmentConfig.SERVICE_URL + "favoriteservice/AddFavorite?apiId=" + Define.API_ID + "&accountId=" + Define.AID + "&alterId=" + 0);
          }

          ConnectionManager.getInstance().SendCommand(Define.PROTOCOL.FAVORITE_ADD, "&gameId=" + gameId, null, null, function (ack) {
            _this5.m_discount.OnRecvAckFavorite(ack);
          });
          this.SendClickEvent(eventNo, gameId);
        } // 移除收藏遊戲
        ;

        _proto.ReqRemoveFavor = function ReqRemoveFavor(gameId, eventNo) {
          var _this6 = this;

          if (!ConnectionManager.getInstance().CheckSetting(Define.PROTOCOL.FAVORITE_REMOVE) && Define.AID != "-1" && Define.API_ID != "0") {
            ConnectionManager.getInstance().AddSetting(Define.PROTOCOL.FAVORITE_REMOVE, ConnectionManager.CONNECT_TYPE.TYPE_HTTP, null, null, EnvironmentConfig.SERVICE_URL + "favoriteservice/RemoveFavorite?apiId=" + Define.API_ID + "&accountId=" + Define.AID + "&alterId=" + 0);
          }

          ConnectionManager.getInstance().SendCommand(Define.PROTOCOL.FAVORITE_REMOVE, "&gameId=" + gameId, null, null, function (ack) {
            _this6.m_discount.OnRecvAckFavorite(ack);
          });
          this.SendClickEvent(eventNo, gameId);
        };

        return Favor;
      }(ViewTemplate), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_nodeL", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_nodeS", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_favorNodeL", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_favorNodeS", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_iconPrefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_scrollViewNodes", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_descNodes", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_descTitleSprites", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_descCloseBtns", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_descLabels", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_descConfirmLabels", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_infoIcons", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_favorInfoBtns", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_clickHintLabels", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_noFavorHintLabels", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FeaturePageComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LocaleStringManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Component, LocaleStringManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      LocaleStringManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "5cf68x6BTZHP5QWXU3HRb/c", "FeaturePageComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FeaturePageComponent = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "特色圖"
      }), _dec2 = property({
        type: Sprite,
        tooltip: "說明文字"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FeaturePageComponent, _Component);

        function FeaturePageComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_featureSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_hintSprite", _descriptor2, _assertThisInitialized(_this));

          _this.m_imgName = "";
          return _this;
        }

        var _proto = FeaturePageComponent.prototype;

        _proto.SetTxt = function SetTxt() {
          var atlas = LocaleStringManager.GetInstance().GetGameAtlas();
          this.m_hintSprite.spriteFrame = atlas.getSpriteFrame(this.m_imgName);
        };

        _proto.SetFeatureSpriteFrame = function SetFeatureSpriteFrame(frame) {
          if (this.m_featureSprite) {
            this.m_featureSprite.spriteFrame = frame;
          }
        };

        _createClass(FeaturePageComponent, [{
          key: "ImgName",
          set: function set(v) {
            this.m_imgName = v;
          }
        }]);

        return FeaturePageComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_featureSprite", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_hintSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Features.ts", ['cc', './Define.ts', './Tools.ts', './LocaleStringManager.ts', './MsgBox.ts', './LocalStorageManager.ts', './VolatilityManager.ts', './FeaturesComponent.ts', './StyleChangeManager.ts'], function (exports) {
  'use strict';

  var cclegacy, v3, UITransform, tween, error, instantiate, SpriteFrame, Button, Label, Sprite, ProgressBar, Size, Animation, Define, Tools, LocaleStringManager, MsgBox, LocalStorageManager, VolatilityManager, FeaturesComponent, styleChangeManager;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v3 = module.v3;
      UITransform = module.UITransform;
      tween = module.tween;
      error = module.error;
      instantiate = module.instantiate;
      SpriteFrame = module.SpriteFrame;
      Button = module.Button;
      Label = module.Label;
      Sprite = module.Sprite;
      ProgressBar = module.ProgressBar;
      Size = module.Size;
      Animation = module.Animation;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      LocalStorageManager = module.default;
    }, function (module) {
      VolatilityManager = module.default;
    }, function (module) {
      FeaturesComponent = module.default;
    }, function (module) {
      styleChangeManager = module.styleChangeManager;
    }],
    execute: function () {
      exports('SpecialFlag', void 0);

      cclegacy._RF.push({}, "49cc1BkxbxDRKcV6hDXCMrJ", "Features", undefined);

      var SpecialFlag;

      (function (SpecialFlag) {
        SpecialFlag[SpecialFlag["NONE"] = 0] = "NONE";
        SpecialFlag[SpecialFlag["XP"] = 1] = "XP";
        SpecialFlag[SpecialFlag["CRAZY"] = 2] = "CRAZY";
        SpecialFlag[SpecialFlag["HOT"] = 3] = "HOT";
        SpecialFlag[SpecialFlag["SUPER"] = 4] = "SUPER";
      })(SpecialFlag || (SpecialFlag = exports('SpecialFlag', {})));

      var PREFAB_PATH = {
        ORG: "/Astt/%s/discount/Prefab/WinMore_Features_Page",
        AMERICAS: "/Astt/%s/discount/Prefab/WinMore_Features_Page"
      };
      var Ani = {
        Landscape: "features_L",
        Portrait: "features_S"
      };
      var LOADED_VEC = {
        IMG_LEFT: 0,
        IMG_RIGHT: 1
      };
      var TitleHeight = exports('TitleHeight', 55);
      var FeaturesView = exports('default', /*#__PURE__*/function () {
        var _proto = FeaturesView.prototype; //

        /**
         * 0:左圖
         * 1:右圖
         */
        //NEW

        _proto.onLoad = function onLoad() {};

        function FeaturesView(controller, imgPath, txt, firesNum, titleSpriteAtlas, titleTempName, addCb, m_showCb) {
          this.m_closeBtn = null;
          this.m_fireLabel = null;
          this.m_infoLabel = null;
          this.m_leftLabel = null;
          this.m_rightLabel = null;
          this.m_leftImg = null;
          this.m_rightImg = null;
          this.m_img_tittle = null;
          this.m_img_xp_hint = null;
          this.m_img_crazy_hint = null;
          this.m_img_hot_hint = null;
          this.m_img_super_hint = null;
          this.m_img_logo = null;
          this.m_img_mask = null;
          this.m_progressBar = null;
          this.m_view = null;
          this.m_controller = void 0;
          this.m_imgPath = void 0;
          this.m_txt = void 0;
          this.m_fireNum = 0;
          this.m_infoTxt = Define.StringKey.FEATURES_FIRE_INFO_L;
          this.m_isLandscape = void 0;
          this.m_specialFlag = SpecialFlag.NONE;
          this.m_isOnLoad = false;
          this.m_isShowOverTimes = false;
          this.m_closeCb = null;
          this.m_demoBtnNode = null;
          this.m_demoBtnTxt = null;
          this.m_img_volatility = null;
          this.m_txt_volatility = null;
          this.m_firstMaskTxt1 = null;
          this.m_firstMaskTxt2 = null;
          this.m_secondMaskTxt = null;
          this.m_isFeaturesDemoInit = false;
          this.m_demoModeMaskFirst = null;
          this.m_demoModeMask = null;
          this.m_isShowAndHideAni = false;
          this.m_isFirst = true;
          this.m_checkLoadedArray = [false, false];
          this.m_txtSpriteFrames = null;
          this.m_titleSpriteAtlas = null;
          this.m_titleTempName = "logo_";
          this.m_preferRound = 0;
          this.m_component = null;
          this.m_addPageCb = null;
          this.m_showCb = null;
          this.m_controller = controller;
          this.m_imgPath = imgPath;
          this.m_txt = txt;
          this.m_fireNum = firesNum;
          this.m_titleSpriteAtlas = titleSpriteAtlas;

          if (titleTempName) {
            this.m_titleTempName = titleTempName;
          }

          this.m_addPageCb = addCb;
          this.m_showCb = m_showCb;
        }

        _proto.Show = function Show(isLandscape, isOver, closeCb) {
          this.m_isShowOverTimes = isOver;
          this.m_closeCb = closeCb;

          if (this.m_isOnLoad) {
            return;
          }

          if (!this.m_view) {
            this.CreateView();
          } else {
            // this.m_view.active = true;
            // 這裡要判斷484第一次
            var key = Define.AID + ":" + Define.NOW_GAME_ID + ":IsFirstDemoMode";
            var idx = LocalStorageManager.GetBool(key);

            if (this.m_isFeaturesDemoInit) {
              if (this.m_component) ;else {
                if (idx) {
                  if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.FeaturedDisplay)) {
                    this.m_demoModeMask.active = false;
                  } else {
                    this.m_demoModeMask.active = this.m_isFeaturesDemoInit;
                  }
                } else {
                  //第一次
                  if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.FeaturedDisplay)) {
                    this.m_demoModeMaskFirst.active = false;
                  } else {
                    this.m_demoModeMaskFirst.active = this.m_isFeaturesDemoInit;
                  }
                }
              }
            }
          }

          if (!this.m_isShowAndHideAni) {
            this.OnRotation(isLandscape);
          }

          if (!this.m_isFirst) {
            if (this.m_component) {
              this.m_component.SetCloseHint(false);
              this.m_showCb();
            } else {
              this.ShowAni();
            }
          }

          this.m_isFirst = false;
        };

        _proto.SetCloseHint = function SetCloseHint(isShow) {
          if (this.m_component) {
            this.m_component.SetCloseHint(isShow);
          }
        };

        _proto.SetPreferRound = function SetPreferRound(round) {
          this.m_preferRound = round;

          if (this.m_infoLabel) {
            if (this.m_preferRound > 0) {
              this.m_infoLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.FEATURES_HISTORY_ROUND) + this.m_preferRound.toString();
            } else {
              this.m_infoLabel.string = "";
            }
          }
        };

        _proto.SetDesc = function SetDesc(txtSpriteFrames) {
          this.m_txtSpriteFrames = txtSpriteFrames;

          if (this.m_component) {
            this.m_component.SetDesc(txtSpriteFrames);
          }
        };

        _proto.ShowAni = function ShowAni() {
          var _this = this;

          if (!this.m_isShowAndHideAni) {
            this.m_isShowAndHideAni = true;

            if (this.m_controller.FeaturesBtnPos) {
              this.m_view.position = this.m_controller.FeaturesBtnPos;
              this.m_view.setScale(v3(0.1, 0.1, 0.1));
              this.m_view.getChildByName("img_mask").active = false;
              this.m_view.active = true;
              var pos = Tools.DiffPos(this.m_controller.View.getComponent(UITransform).anchorPoint, this.m_isLandscape);
              var v2Pos = v3(pos.x, pos.y);
              tween(this.m_view).parallel(tween().to(0.2, {
                position: v2Pos
              }), tween().to(0.2, {
                scale: v3(1, 1, 1)
              })).call(function () {
                _this.m_view.getChildByName("img_mask").active = true;
              }).delay(0.1).call(function () {
                _this.m_isShowAndHideAni = false;
              }).start();
            } else {
              this.m_view.active = true;
              this.m_isShowAndHideAni = false;
            }
          }
        };

        _proto.HideAni = function HideAni() {
          var _this2 = this;

          if (!this.m_isShowAndHideAni) {
            this.m_isShowAndHideAni = true;
            var pos = this.m_controller.FeaturesBtnPos;
            var v2Pos = v3(pos.x, pos.y, pos.z);
            this.m_view.getChildByName("img_mask").active = false;
            tween(this.m_view).parallel(tween().to(0.3, {
              position: v2Pos
            }), tween().to(0.3, {
              scale: v3(0.1, 0.1, 0.1)
            })).call(function () {
              _this2.m_view.getChildByName("img_mask").active = true;
              _this2.m_view.active = false;
              _this2.m_isShowAndHideAni = false;
            }).start();

            if (this.m_closeCb) {
              this.m_closeCb();
              this.m_closeCb = null;
            }
          }
        };

        _proto.CreateView = function CreateView() {
          var _this3 = this;

          this.m_isOnLoad = true; // let path: string = Tools.GetFilePath( (
          //     Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str ) ?
          //     PREFAB_PATH.AMERICAS :
          //     PREFAB_PATH.ORG
          // );

          var path = Tools.GetFilePath(PREFAB_PATH.ORG);
          Define.CommonBundle.load(path, function (err, prefab) {
            _this3.m_isOnLoad = false;

            if (err) {
              error(err.message || err);
              return;
            }

            _this3.m_view = instantiate(prefab);

            if (_this3.m_view.getComponent(FeaturesComponent)) {
              _this3.m_addPageCb(_this3.m_view);

              _this3.m_component = _this3.m_view.getComponent(FeaturesComponent);

              if (_this3.m_txtSpriteFrames) {
                _this3.m_component.SetDesc(_this3.m_txtSpriteFrames);
              }

              if (VolatilityManager.GetInstance().IsOpen()) {
                var fireNum = VolatilityManager.GetInstance().GetVolatilityChili();
                _this3.m_fireNum = fireNum > 0 ? fireNum : _this3.m_fireNum;

                _this3.m_component.SetFeaturesVolatility();
              }

              if (!Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.FeaturedDisplay)) {
                _this3.m_component.SetDemo(_this3.m_isFeaturesDemoInit, function () {
                  if (_this3.m_controller.IsPlayingRealGame()) {
                    _this3.m_controller.StartFeaturesDemo();

                    _this3.Hide();
                  } else {
                    MsgBox.getInstance().ShowMessageBox(Define.StringKey.TRIAL_REFUSED_REASON + "1", Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO);
                  }
                });
              }

              if (_this3.m_imgPath[0] != null) {
                if (typeof _this3.m_imgPath[0] == "string") {
                  if (_this3.m_imgPath[0] != "") {
                    var _path = "" + (styleChangeManager.NeedChange ? "/" + styleChangeManager.FolderName + "/" : "") + _this3.m_imgPath[0];

                    Define.GameBundle.load(_path, SpriteFrame, function (err, frame) {
                      if (err) {
                        error(err.message || err);
                        return;
                      }

                      _this3.m_component.LeftSprie.spriteFrame = frame;
                      _this3.m_checkLoadedArray[LOADED_VEC.IMG_LEFT] = true;
                    });
                  }
                }
              }

              if (_this3.m_imgPath[1] != null) {
                if (typeof _this3.m_imgPath[1] == "string") {
                  if (_this3.m_imgPath[1] != "") {
                    var _path2 = "" + (styleChangeManager.NeedChange ? "/" + styleChangeManager.FolderName + "/" : "") + _this3.m_imgPath[1];

                    Define.GameBundle.load(_path2, SpriteFrame, function (err, frame) {
                      if (err) {
                        error(err.message || err);
                        return;
                      }

                      _this3.m_component.RightSprie.spriteFrame = frame;
                      _this3.m_checkLoadedArray[LOADED_VEC.IMG_RIGHT] = true;
                    });
                  }
                }
              }

              _this3.SetTxt();

              if (!_this3.m_isShowOverTimes) {
                if (!_this3.m_controller.IsGLIGames && !_this3.m_controller.IsBMMGames) {
                  _this3.m_component.SetCloseHint(!_this3.m_isShowOverTimes);
                }

                _this3.m_showCb();
              }

              _this3.OnRotation(_this3.m_isLandscape);
            } else {
              _this3.m_controller.View.addChild(_this3.m_view);

              Tools.SetZIndex(_this3.m_view, Define.ZOrder.FEATURES);
              _this3.m_closeBtn = _this3.m_view.getChildByName(FeaturesView.UIName.BTN_CLOSE).getComponent(Button);
              _this3.m_fireLabel = _this3.m_view.getChildByName(FeaturesView.UIName.TXT_FIREBALL).getComponent(Label);
              _this3.m_infoLabel = _this3.m_fireLabel.node.getChildByName(FeaturesView.UIName.TXT_INFO).getComponent(Label);
              _this3.m_leftImg = _this3.m_view.getChildByName(FeaturesView.UIName.IMG_LEFT).getComponent(Sprite);
              _this3.m_rightImg = _this3.m_view.getChildByName(FeaturesView.UIName.IMG_RIGHT).getComponent(Sprite);
              _this3.m_leftLabel = _this3.m_view.getChildByName(FeaturesView.UIName.TXT_LEFT).getComponent(Label);
              _this3.m_rightLabel = _this3.m_view.getChildByName(FeaturesView.UIName.TXT_RIGHT).getComponent(Label);
              _this3.m_progressBar = _this3.m_view.getChildByName(FeaturesView.UIName.PROGRESSBAR).getComponent(ProgressBar);
              _this3.m_img_tittle = _this3.m_view.getChildByName(FeaturesView.UIName.IMG_TITLE).getComponent(Sprite);
              _this3.m_img_xp_hint = _this3.m_view.getChildByName(FeaturesView.UIName.IMG_XP_HINT).getComponent(Sprite);
              _this3.m_img_crazy_hint = _this3.m_view.getChildByName(FeaturesView.UIName.IMG_CRAZY_HINT).getComponent(Sprite);
              _this3.m_img_hot_hint = _this3.m_view.getChildByName(FeaturesView.UIName.IMG_HOT_HINT).getComponent(Sprite);
              _this3.m_img_super_hint = _this3.m_view.getChildByName(FeaturesView.UIName.IMG_SUPER_HINT).getComponent(Sprite);
              _this3.m_img_mask = _this3.m_view.getChildByName(FeaturesView.UIName.IMG_MASK).getComponent(Sprite);

              if (_this3.m_view.getChildByName(FeaturesView.UIName.IMG_VOLATILITY)) {
                _this3.m_img_volatility = _this3.m_view.getChildByName(FeaturesView.UIName.IMG_VOLATILITY).getComponent(Sprite);
              }

              if (_this3.m_view.getChildByName(FeaturesView.UIName.TXT_VOLATILITY)) {
                _this3.m_txt_volatility = _this3.m_view.getChildByName(FeaturesView.UIName.TXT_VOLATILITY).getComponent(Label);
              }

              if (VolatilityManager.GetInstance().IsOpen()) {
                _this3.SetFeaturesVolatility();
              } //是否要顯示極速提示
              // this.m_img_xp_hint.node.active = this.m_specialFlag === SpecialFlag.XP;
              // this.m_img_crazy_hint.node.active = this.m_specialFlag === SpecialFlag.CRAZY;
              // this.m_img_hot_hint.node.active = this.m_specialFlag === SpecialFlag.HOT;
              // this.m_img_super_hint.node.active = this.m_specialFlag === SpecialFlag.SUPER;


              _this3.m_demoModeMaskFirst = _this3.m_view.getChildByName(FeaturesView.UIName.DEMO_MODE_MASK_FIRST);

              if (_this3.m_demoModeMaskFirst) {
                _this3.m_firstMaskTxt1 = _this3.m_demoModeMaskFirst.getChildByName(FeaturesView.UIName.TXT_INFO);
                _this3.m_firstMaskTxt2 = _this3.m_demoModeMaskFirst.getChildByName(FeaturesView.UIName.TXT_IBTN);
              }

              _this3.m_demoModeMask = _this3.m_view.getChildByName(FeaturesView.UIName.DEMO_MODE_MASK);

              if (_this3.m_demoModeMask) {
                _this3.m_secondMaskTxt = _this3.m_demoModeMask.getChildByName(FeaturesView.UIName.TXT_IBTN);
              }

              var logo = _this3.m_view.getChildByName(FeaturesView.UIName.IMG_LOGO);

              if (logo) {
                _this3.m_img_logo = logo.getComponent(Sprite);
                var spriteFrame = Tools.UsingLogoSpriteFrame();

                if (spriteFrame) {
                  _this3.m_img_logo.node.active = true;
                  _this3.m_img_logo.spriteFrame = spriteFrame;
                } else {
                  _this3.m_img_logo.node.active = false;
                }
              }

              _this3.m_img_mask = _this3.m_view.getChildByName(FeaturesView.UIName.IMG_MASK).getComponent(Sprite);
              _this3.m_demoBtnNode = _this3.m_view.getChildByName(FeaturesView.UIName.BTN_DEMO);

              if (_this3.m_demoModeMaskFirst) {
                _this3.m_demoModeMaskFirst.getChildByName("mask").on("click", function () {
                  _this3.Hide();

                  if (_this3.m_demoModeMaskFirst.active && !_this3.m_controller.IsInTrial) {
                    var key = Define.AID + ":" + Define.NOW_GAME_ID + ":IsFirstDemoMode";
                    _this3.m_demoModeMaskFirst.active = false;
                    LocalStorageManager.SetBool(key, true);
                  }
                });
              }

              if (_this3.m_demoBtnNode) {
                _this3.m_demoBtnTxt = _this3.m_demoBtnNode.getChildByName(FeaturesView.UIName.BTN_DEMO_TXT).getComponent(Sprite);

                if (_this3.m_isFeaturesDemoInit && !Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.FeaturedDisplay)) {
                  _this3.m_demoBtnNode.active = _this3.m_isFeaturesDemoInit; // 這裡要判斷484第一次

                  var key = Define.AID + ":" + Define.NOW_GAME_ID + ":IsFirstDemoMode";
                  var idx = LocalStorageManager.GetBool(key);

                  if (idx) {
                    _this3.m_demoModeMask.active = _this3.m_isFeaturesDemoInit;
                  } else {
                    //第一次
                    _this3.m_demoModeMaskFirst.active = _this3.m_isFeaturesDemoInit;
                  }
                }

                _this3.m_demoBtnNode.on("click", function () {
                  if (_this3.m_controller.IsPlayingRealGame()) {
                    _this3.m_controller.StartFeaturesDemo();

                    _this3.Hide();
                  } else {
                    MsgBox.getInstance().ShowMessageBox(Define.StringKey.TRIAL_REFUSED_REASON + "1", Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO);
                  }
                });
              }

              _this3.m_closeBtn.node.on("click", function () {
                _this3.HideAni();
              });

              _this3.m_img_mask.node.on("click", function () {
                _this3.HideAni();
              });

              if (_this3.m_imgPath[0] != "" && _this3.m_imgPath[0] != null) {
                Define.GameBundle.load(_this3.m_imgPath[0], SpriteFrame, function (err, frame) {
                  if (err) {
                    error(err.message || err);
                    return;
                  }

                  _this3.m_leftImg.spriteFrame = frame;
                  _this3.m_checkLoadedArray[LOADED_VEC.IMG_LEFT] = true;
                });
              }

              if (_this3.m_imgPath[1] != "" && _this3.m_imgPath[1] != null) {
                Define.GameBundle.load(_this3.m_imgPath[1], SpriteFrame, function (err, frame) {
                  if (err) {
                    error(err.message || err);
                    return;
                  }

                  _this3.m_rightImg.spriteFrame = frame;
                  _this3.m_checkLoadedArray[LOADED_VEC.IMG_RIGHT] = true;
                });
              }

              _this3.SetTxt();

              _this3.OnRotation(_this3.m_isLandscape);

              if (_this3.m_isShowOverTimes) {
                _this3.m_view.active = false;
              }
            }
          });
        };

        _proto.SetTxt = function SetTxt() {
          var stringAtlas = LocaleStringManager.GetInstance().GetCommonAtlas();

          if (!this.m_view || stringAtlas == null) {
            return;
          } //先留著，代大家的遊戲logo統一高度


          if (this.m_titleSpriteAtlas) {
            var spriteFrame = this.m_titleSpriteAtlas.getSpriteFrame(this.m_titleTempName + LocaleStringManager.CurrLang);

            if (!spriteFrame) {
              spriteFrame = this.m_titleSpriteAtlas.getSpriteFrame(this.m_titleTempName + Define.Lang.EN);
            }

            if (this.m_component) {
              this.m_component.SetTitle(spriteFrame);
            } else {
              this.m_img_tittle.spriteFrame = spriteFrame;

              if (spriteFrame) {
                var size = spriteFrame.getRect();
                var rate = Tools.divide(TitleHeight, size.height);
                var newSize = new Size(Tools.times(size.width, rate), Tools.times(size.height, rate));
                this.m_img_tittle.node.getComponent(UITransform).setContentSize(newSize);
              }
            }
          }

          var xpSpriteFrame = stringAtlas.getSpriteFrame("speed_" + LocaleStringManager.CurrLang);

          if (xpSpriteFrame) {
            this.m_img_xp_hint.spriteFrame = xpSpriteFrame;
          }

          var crazySpriteFrame = stringAtlas.getSpriteFrame("crazy_" + LocaleStringManager.CurrLang);

          if (crazySpriteFrame) {
            this.m_img_crazy_hint.spriteFrame = crazySpriteFrame;
          }

          var hotSpriteFrame = stringAtlas.getSpriteFrame("hot_" + LocaleStringManager.CurrLang);

          if (hotSpriteFrame) {
            this.m_img_hot_hint.spriteFrame = hotSpriteFrame;
          }

          var superSpriteFrame = stringAtlas.getSpriteFrame("super_" + LocaleStringManager.CurrLang);

          if (superSpriteFrame) {
            this.m_img_super_hint.spriteFrame = superSpriteFrame;
          }

          if (this.m_component) {
            this.m_component.SetFire(0.2 * this.m_fireNum);
            this.m_component.SetTxt(this.m_preferRound);
          } else {
            this.m_progressBar.progress = 0.2 * this.m_fireNum;
            this.m_fireLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.FEATURES_FIRE_NUN);

            if (LocaleStringManager.CurrLang === Define.Lang.MM) {
              this.m_fireLabel.font = Define.DefaultFont;
            }

            if (this.m_preferRound > 0) {
              this.m_infoLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.FEATURES_HISTORY_ROUND) + this.m_preferRound.toString();
            } else {
              this.m_infoLabel.string = "";
            }

            if (LocaleStringManager.CurrLang === Define.Lang.MM) {
              this.m_infoLabel.font = Define.DefaultFont;
            }

            if (this.m_txt[0] != "" && this.m_txt[0] != null) {
              this.m_leftLabel.string = LocaleStringManager.GetInstance().GetString(this.m_txt[0]);

              if (LocaleStringManager.CurrLang === Define.Lang.MM) {
                this.m_leftLabel.font = Define.DefaultFont;
              }
            }

            if (this.m_txt[1] != "" && this.m_txt[1] != null) {
              this.m_rightLabel.string = LocaleStringManager.GetInstance().GetString(this.m_txt[1]);

              if (LocaleStringManager.CurrLang === Define.Lang.MM) {
                this.m_rightLabel.font = Define.DefaultFont;
              }
            }

            if (this.m_demoBtnTxt) {
              this.m_demoBtnTxt.spriteFrame = stringAtlas.getSpriteFrame("img_try_real_mode_" + LocaleStringManager.CurrLang);
            }

            if (this.m_firstMaskTxt1) {
              this.m_firstMaskTxt1.getComponent(Sprite).spriteFrame = stringAtlas.getSpriteFrame("img_featureclose_" + LocaleStringManager.CurrLang);
            }

            if (this.m_firstMaskTxt2) {
              this.m_firstMaskTxt2.getComponent(Sprite).spriteFrame = stringAtlas.getSpriteFrame("img_featureinto_" + LocaleStringManager.CurrLang);
            }

            if (this.m_secondMaskTxt) {
              this.m_secondMaskTxt.getComponent(Sprite).spriteFrame = stringAtlas.getSpriteFrame("img_featureinto_" + LocaleStringManager.CurrLang);
            }
          }
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          this.m_isLandscape = isLandscape;

          if (this.m_component) {
            this.m_view.setPosition(v3(0, 0, 1));
            this.m_component.OnRotation(isLandscape);
          } else {
            if (this.m_isLandscape) {
              this.m_infoTxt = Define.StringKey.FEATURES_FIRE_INFO_L;

              if (this.m_view) {
                // this.m_infoLabel.string = "";//LocaleStringManager.GetInstance().GetString( this.m_infoTxt ).replace( "{{fireNum}}", this.m_fireNum.toString() );
                this.m_view.setPosition(Tools.DiffPos(this.m_controller.View.getComponent(UITransform).anchorPoint, this.m_isLandscape));
                this.m_view.getComponent(Animation).play(Ani.Landscape);
              }
            } else {
              this.m_infoTxt = Define.StringKey.FEATURES_FIRE_INFO_S;

              if (this.m_view) {
                // this.m_infoLabel.string = "";//LocaleStringManager.GetInstance().GetString( this.m_infoTxt ).replace( "{{fireNum}}", this.m_fireNum.toString() );
                this.m_view.setPosition(Tools.DiffPos(this.m_controller.View.getComponent(UITransform).anchorPoint, this.m_isLandscape));
                this.m_view.getComponent(Animation).play(Ani.Portrait);
              }
            }
          }
        };

        _proto.AlreadyInit = function AlreadyInit() {
          var isReady = false;

          for (var index = 0; index < this.m_checkLoadedArray.length; index++) {
            isReady = this.m_checkLoadedArray[index];

            if (!isReady) {
              break;
            }
          }

          return isReady;
        };

        _proto.Hide = function Hide() {
          this.m_view.active = false;
        };

        _proto.SetFeaturesDemoStatus = function SetFeaturesDemoStatus(visible) {
          var _this4 = this;

          this.m_isFeaturesDemoInit = visible;

          if (!Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.FeaturedDisplay)) {
            if (this.m_demoBtnNode) {
              this.m_demoBtnNode.active = this.m_isFeaturesDemoInit; // 這裡要判斷484第一次

              var key = Define.AID + ":" + Define.NOW_GAME_ID + ":IsFirstDemoMode";
              var idx = LocalStorageManager.GetBool(key);

              if (idx) {
                this.m_demoModeMask.active = this.m_isFeaturesDemoInit;
              } else {
                //第一次
                this.m_demoModeMaskFirst.active = this.m_isFeaturesDemoInit;
              }
            }

            if (this.m_component) {
              this.m_component.SetDemo(this.m_isFeaturesDemoInit, function () {
                if (_this4.m_controller.IsPlayingRealGame()) {
                  _this4.m_controller.StartFeaturesDemo();

                  _this4.Hide();
                } else {
                  MsgBox.getInstance().ShowMessageBox(Define.StringKey.TRIAL_REFUSED_REASON + "1", Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO);
                }
              });
            }
          }
        };

        _proto.SetFeaturesVolatility = function SetFeaturesVolatility() {
          if (this.m_progressBar) {
            this.m_progressBar.node.active = false;
          }

          if (this.m_fireLabel) {
            this.m_fireLabel.node.active = false;
          }

          if (this.m_img_volatility) {
            this.m_img_volatility.node.active = true;
          }

          if (this.m_txt_volatility) {
            this.m_txt_volatility.node.active = true;
            this.m_txt_volatility.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.FEATURES_VOLATILITY_TEXT);
          }

          if (this.m_progressBar) {
            var fireNum = VolatilityManager.GetInstance().GetVolatilityChili();
            this.m_fireNum = fireNum > 0 ? fireNum : this.m_fireNum;
            this.m_progressBar.progress = 0.2 * this.m_fireNum;
          }

          if (this.m_component) {
            this.m_component.SetFeaturesVolatility();
          }
        };

        _proto.IsViewOpen = function IsViewOpen() {
          if (this.m_view) {
            return this.m_view.active;
          } else {
            return false;
          }
        };

        return FeaturesView;
      }());
      FeaturesView.UIName = {
        IMG_MASK: "img_mask",
        IMG_BG: "img_bg",
        IMG_TITLE_BG_L: "img_title_bg_L",
        IMG_TITLE_BG_S: "img_title_bg_S",
        IMG_TITLE: "img_title",
        IMG_XP_HINT: "img_XP_Hint",
        IMG_CRAZY_HINT: "img_Crazy_Hint",
        IMG_HOT_HINT: "img_Hot_Hint",
        IMG_SUPER_HINT: "img_Super_Hint",
        IMG_LOGO: "img_logo",
        BTN_CLOSE: "btn_close",
        TXT_FIREBALL: "txt_fireBall",
        PROGRESSBAR: "progressBar",
        BAR: "bar",
        TXT_INFO: "txt_info",
        IMG_LEFT: "img_left",
        IMG_RIGHT: "img_right",
        TXT_LEFT: "txt_left",
        TXT_RIGHT: "txt_right",
        BTN_DEMO: "feature_btn_shine",
        BTN_DEMO_TXT: "img_try_real_mode_cn",
        DEMO_MODE_MASK_FIRST: "feature_btn_mask1",
        TXT_IBTN: "txt_ibtn",
        DEMO_MODE_MASK: "feature_btn_mask2",
        TXT_VOLATILITY: "txt_volatility",
        IMG_VOLATILITY: "icon_volatility"
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FeaturesComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './Tools.ts', './Features.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, ProgressBar, Label, Node, Size, UITransform, Animation, Component, Define, LocaleStringManager, Tools, TitleHeight;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      ProgressBar = module.ProgressBar;
      Label = module.Label;
      Node = module.Node;
      Size = module.Size;
      UITransform = module.UITransform;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      TitleHeight = module.TitleHeight;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21;

      cclegacy._RF.push({}, "0528eZPCDFID5xULjXokz3r", "FeaturesComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FeaturesComponent = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "左圖說明"
      }), _dec2 = property({
        type: Sprite,
        tooltip: "右圖說明"
      }), _dec3 = property({
        type: Sprite,
        tooltip: "左圖"
      }), _dec4 = property({
        type: Sprite,
        tooltip: "右圖"
      }), _dec5 = property({
        type: Sprite,
        tooltip: "標題"
      }), _dec6 = property({
        type: ProgressBar,
        tooltip: "辣椒度"
      }), _dec7 = property({
        type: Label,
        tooltip: "歷史局數"
      }), _dec8 = property({
        type: Sprite,
        tooltip: "起伏圖片"
      }), _dec9 = property({
        type: Label,
        tooltip: "起伏說明"
      }), _dec10 = property({
        type: Node,
        tooltip: "特色遊玩按鈕"
      }), _dec11 = property({
        type: Node,
        tooltip: "特色遊玩提示1"
      }), _dec12 = property({
        type: Node,
        tooltip: "特效1"
      }), _dec13 = property({
        type: Node,
        tooltip: "特色遊玩提示2"
      }), _dec14 = property({
        type: Node,
        tooltip: "特效2"
      }), _dec15 = property({
        type: Node,
        tooltip: "起伏固定"
      }), _dec16 = property({
        type: Node,
        tooltip: "起伏可調"
      }), _dec17 = property({
        type: Label,
        tooltip: "辣椒度"
      }), _dec18 = property({
        type: Label,
        tooltip: "特色遊玩按鈕文字"
      }), _dec19 = property({
        type: Label,
        tooltip: "特色遊玩提示1"
      }), _dec20 = property({
        type: Label,
        tooltip: "特色遊玩提示2"
      }), _dec21 = property({
        type: Label,
        tooltip: "起伏調整描述"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FeaturesComponent, _Component);

        function FeaturesComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_leftInfoSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rightInfoSprite", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_leftSprite", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rightSprite", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tittleSprite", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_progressBar", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_infoLabel", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_img_volatilitySprite", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_txt_volatilityLabel", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_demoBtnNode", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_demoHintNode1", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_eftNode1", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_demoHintNode2", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_eftNode2", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_staticVolatilityNode", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_changeVolatilityNode", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_fireLabel", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_demoBtnLabel", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_demoHintLabel1", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_demoHintLabel2", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_changeVolatitlityLabel", _descriptor21, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = FeaturesComponent.prototype;

        _proto.OnClose = function OnClose() {
          this.node.active = false;
        };

        _proto.SetTxt = function SetTxt(preferRound) {
          this.m_fireLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.FEATURES_FIRE_NUN);
          Tools.SetFont(this.m_fireLabel);

          if (this.m_infoLabel) {
            if (preferRound > 0) {
              this.m_infoLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.FEATURES_HISTORY_ROUND) + preferRound.toString();
            } else {
              this.m_infoLabel.string = "";
            }

            Tools.SetFont(this.m_infoLabel);
          }

          if (this.m_demoBtnLabel) {
            Tools.SetFont(this.m_demoBtnLabel);
            this.m_demoBtnLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.FEATURES_DEMO_BTN_TXT);
          }

          if (this.m_demoHintLabel1) {
            this.m_demoHintLabel1.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.FEATURES_DEMO_INFO_1);

            if (!this.m_demoHintLabel1.font) {
              this.m_demoHintLabel1.font = Define.DefaultFont;
            }
          }

          if (this.m_demoHintLabel2) {
            this.m_demoHintLabel2.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.FEATURES_DEMO_INFO_2);

            if (!this.m_demoHintLabel2.font) {
              this.m_demoHintLabel2.font = Define.DefaultFont;
            }
          }

          this.m_changeVolatitlityLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.FEATURES_VOLATILITY_TEXT);
          Tools.SetFont(this.m_changeVolatitlityLabel);
        };

        _proto.SetDesc = function SetDesc(txtSpriteFrames) {
          if (txtSpriteFrames.length === 2) {
            this.m_leftInfoSprite.spriteFrame = txtSpriteFrames[0];
            this.m_rightInfoSprite.spriteFrame = txtSpriteFrames[1];
          }
        };

        _proto.SetTitle = function SetTitle(titleSpriteFrame) {
          this.m_tittleSprite.spriteFrame = titleSpriteFrame;

          if (titleSpriteFrame) {
            var size = titleSpriteFrame.getRect();
            var rate = Tools.divide(TitleHeight, size.height);
            var newSize = new Size(Tools.times(size.width, rate), Tools.times(size.height, rate));
            this.m_tittleSprite.node.getComponent(UITransform).setContentSize(newSize);
          }
        };

        _proto.SetFire = function SetFire(num) {
          this.m_progressBar.progress = num;
        };

        _proto.SetCloseHint = function SetCloseHint(isShow) {
          this.m_demoHintNode2.active = isShow;
          this.m_eftNode2.active = isShow;
        };

        _proto.SetFeaturesVolatility = function SetFeaturesVolatility() {
          this.m_staticVolatilityNode.active = false;
          this.m_changeVolatilityNode.active = true;
        };

        _proto.SetDemo = function SetDemo(isShow, clickCb) {
          if (!Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.FeaturedDisplay)) {
            this.m_demoBtnNode.active = isShow;
            this.m_demoHintNode1.active = isShow;
            this.m_eftNode1.active = isShow;

            if (!this.m_demoBtnNode.hasEventListener("click")) {
              this.m_demoBtnNode.on("click", function () {
                clickCb && clickCb();
              });
            }
          } else {
            this.m_demoBtnNode.active = false;
            this.m_demoHintNode1.active = false;
            this.m_eftNode1.active = false;
          }
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          if (isLandscape) {
            this.node.getComponent(Animation).play("Clip_WinMore_FeaturePage_Landscape");
          } else {
            this.node.getComponent(Animation).play("Clip_WinMore_FeaturePage_Portrait");
          }
        };

        _createClass(FeaturesComponent, [{
          key: "LeftSprie",
          get: function get() {
            return this.m_leftSprite;
          }
        }, {
          key: "RightSprie",
          get: function get() {
            return this.m_rightSprite;
          }
        }]);

        return FeaturesComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_leftInfoSprite", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_rightInfoSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_leftSprite", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_rightSprite", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_tittleSprite", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_progressBar", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_infoLabel", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_img_volatilitySprite", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_txt_volatilityLabel", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_demoBtnNode", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_demoHintNode1", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_eftNode1", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_demoHintNode2", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_eftNode2", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_staticVolatilityNode", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_changeVolatilityNode", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "m_fireLabel", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "m_demoBtnLabel", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "m_demoHintLabel1", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "m_demoHintLabel2", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "m_changeVolatitlityLabel", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FeaturesDemoComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './Tools.ts', './FeaturesDemoHintComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Button, Node, Prefab, Sprite, Label, Animation, Component, instantiate, Define, LocaleStringManager, Tools, FeaturesDemoHintComponent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Node = module.Node;
      Prefab = module.Prefab;
      Sprite = module.Sprite;
      Label = module.Label;
      Animation = module.Animation;
      Component = module.Component;
      instantiate = module.instantiate;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      FeaturesDemoHintComponent = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "277a9JbHCdBuacMbD2wWHGE", "FeaturesDemoComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FeaturesDemoComponent = exports('default', (_dec = property({
        type: Button,
        tooltip: "返回真錢"
      }), _dec2 = property({
        type: Button,
        tooltip: "返回真錢-街機"
      }), _dec3 = property({
        type: Node,
        tooltip: "特色遊玩遮罩"
      }), _dec4 = property({
        type: Node,
        tooltip: "反回真錢提示"
      }), _dec5 = property({
        type: Node,
        tooltip: "宣告跟節點"
      }), _dec6 = property({
        type: Prefab,
        tooltip: "DEMO宣告"
      }), _dec7 = property({
        type: Sprite,
        tooltip: "返回真錢文字"
      }), _dec8 = property({
        type: Sprite,
        tooltip: "特色模式文字-財產"
      }), _dec9 = property({
        type: Sprite,
        tooltip: "特色模式狀態提示"
      }), _dec10 = property({
        type: Label,
        tooltip: "返回真錢提示"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FeaturesDemoComponent, _Component);

        function FeaturesDemoComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_goRealBtn", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_goRealBtn_arc", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_maskNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_goRealHintNode", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_hintRootNode", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_demoHintPrefab", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_goRealBtnSprites", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_demoModeSprite", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featuresHintSprite", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_goRealHintLabel", _descriptor10, _assertThisInitialized(_this));

          _this.m_hint = null;
          return _this;
        }

        var _proto = FeaturesDemoComponent.prototype;

        _proto.SetTxt = function SetTxt() {
          var altas = LocaleStringManager.GetInstance().GetCommonAtlas();

          for (var i = 0; i < this.m_goRealBtnSprites.length; i++) {
            this.m_goRealBtnSprites[i].spriteFrame = altas.getSpriteFrame("WinMore_TryRealMODE");
          }

          this.m_demoModeSprite.spriteFrame = altas.getSpriteFrame("WinMore_DemoMode");
          this.m_featuresHintSprite.spriteFrame = altas.getSpriteFrame("WinMore_DemoMode_Title");
          Tools.SetFont(this.m_goRealHintLabel);
          this.m_goRealHintLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.FEATURES_DEMO_GO_BACK_REAL);
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          if (isLandscape) {
            this.node.getComponent(Animation).play("Clip_WinMore_DemoView_Landscape");
          } else {
            if (Tools.Line === Define.LineSetting.americas_str) {
              this.node.getComponent(Animation).play("Clip_WinMore_DemoView_Arcade");
            } else {
              this.node.getComponent(Animation).play("Clip_WinMore_DemoView_Portrait");
            }
          }
        };

        _proto.SetEvent = function SetEvent(backCb) {
          // 玩真錢按鈕
          this.m_goRealBtn.node.on("click", function () {
            backCb && backCb();
          });
          this.m_goRealBtn_arc.node.on("click", function () {
            backCb && backCb();
          });
        };

        _proto.StartFeaturesDemo = function StartFeaturesDemo(isClose, isLandscape) {
          this.m_maskNode.active = !isClose;
          this.m_goRealHintNode.active = !isClose;
          this.m_goRealBtn.node.active = !isClose;
          this.m_goRealBtn_arc.node.active = !isClose;
          this.OnRotation(isLandscape);
        };

        _proto.EndFeaturesDemo = function EndFeaturesDemo() {
          this.m_maskNode.active = true;
          this.m_goRealHintNode.active = true;
          this.m_goRealBtn.node.active = true;
          this.m_goRealBtn_arc.node.active = true;
        };

        _proto.ShowHint = /*#__PURE__*/function () {
          var _ShowHint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var node;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!this.m_hint) {
                      node = instantiate(this.m_demoHintPrefab);
                      this.m_hintRootNode.addChild(node);
                      this.m_hint = node.getComponent(FeaturesDemoHintComponent);
                      this.m_hint.SetTxt();
                    }

                    _context.next = 3;
                    return this.m_hint.Show();

                  case 3:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function ShowHint() {
            return _ShowHint.apply(this, arguments);
          }

          return ShowHint;
        }();

        return FeaturesDemoComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_goRealBtn", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_goRealBtn_arc", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_maskNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_goRealHintNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_hintRootNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_demoHintPrefab", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_goRealBtnSprites", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_demoModeSprite", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_featuresHintSprite", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_goRealHintLabel", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FeaturesDemoHintComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Animation, Label, Component, Define, LocaleStringManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "6bfadH4LH9HWrFV03yqn7ls", "FeaturesDemoHintComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FeaturesDemoHintComponent = exports('default', (_dec = property({
        type: Animation,
        tooltip: "動畫"
      }), _dec2 = property({
        type: Label,
        tooltip: "文字"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FeaturesDemoHintComponent, _Component);

        function FeaturesDemoHintComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_anim", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_hintLabel", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = FeaturesDemoHintComponent.prototype;

        _proto.Show = /*#__PURE__*/function () {
          var _Show = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var animState;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    this.m_anim.play("Clip_WinMore_DemoPlaying");
                    animState = this.m_anim.getState("Clip_WinMore_DemoPlaying");
                    _context.next = 4;
                    return Define.Wait(this, animState.duration);

                  case 4:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function Show() {
            return _Show.apply(this, arguments);
          }

          return Show;
        }();

        _proto.SetTxt = function SetTxt() {
          this.m_hintLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.FEATURES_DEMO_PLAYING);
        };

        _createClass(FeaturesDemoHintComponent, [{
          key: "HintLabel",
          get: function get() {
            return this.m_hintLabel;
          }
        }]);

        return FeaturesDemoHintComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_anim", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_hintLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FeaturesDemoSelectComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './Tools.ts', './SelectBtn.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, Sprite, Label, Button, Component, instantiate, Define, LocaleStringManager, Tools, SelectBtn;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      Sprite = module.Sprite;
      Label = module.Label;
      Button = module.Button;
      Component = module.Component;
      instantiate = module.instantiate;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      SelectBtn = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "08a01L0XOhCbbQjqSlx3aLy", "FeaturesDemoSelectComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FeaturesDemoSelectComponent = exports('default', (_dec = property({
        type: Node,
        tooltip: "選項"
      }), _dec2 = property({
        type: Prefab,
        tooltip: "選項按鈕"
      }), _dec3 = property({
        type: Node,
        tooltip: "提示節點"
      }), _dec4 = property({
        type: Sprite,
        tooltip: "選單文字"
      }), _dec5 = property({
        type: Label,
        tooltip: "表演提示文字"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FeaturesDemoSelectComponent, _Component);

        function FeaturesDemoSelectComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_menuNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_selectionPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_hintNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_btnSprite", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_selectHintLabel", _descriptor5, _assertThisInitialized(_this));

          _this.m_featuresDemoBtns = [];
          return _this;
        }

        var _proto = FeaturesDemoSelectComponent.prototype;

        _proto.SetTxt = function SetTxt() {
          var atlas = LocaleStringManager.GetInstance().GetCommonAtlas();
          this.m_btnSprite.spriteFrame = atlas.getSpriteFrame("WinMore_FeatureList");
          Tools.SetFont(this.m_selectHintLabel);
          this.m_selectHintLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.FEATURES_DEMO_SELECTION);
        };

        _proto.CreateSelection = function CreateSelection(num, eventNo, selectCb) {
          var _this2 = this;

          var _loop = function _loop(i) {
            _this2.m_featuresDemoBtns[i] = instantiate(_this2.m_selectionPrefab);

            _this2.m_menuNode.addChild(_this2.m_featuresDemoBtns[i]);

            var selectBtn = _this2.m_featuresDemoBtns[i].getComponent(SelectBtn);

            Tools.SetFont(selectBtn.TxtLabel);
            selectBtn.TxtLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.FEATURES_BTN) + (i + 1).toString();

            _this2.m_featuresDemoBtns[i].on("click", function () {
              _this2.m_featuresDemoBtns[i].getComponent(Button).interactable = false;
              selectCb && selectCb(i);
            });
          };

          for (var i = 0; i < num; i++) {
            _loop(i);
          }
        };

        _proto.SetSelected = function SetSelected(idx) {
          this.m_featuresDemoBtns[idx].getComponent(Button).interactable = false;

          if (idx !== 0) {
            this.m_hintNode.active = false;
          }
        };

        _proto.SetLightNode = function SetLightNode(idx) {
          for (var i = 0; i < this.m_featuresDemoBtns.length; i++) {
            this.m_featuresDemoBtns[i].getComponent(SelectBtn).LightNode.active = i === idx;
          }
        };

        return FeaturesDemoSelectComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_menuNode", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_selectionPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_hintNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_btnSprite", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_selectHintLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FeatureViewComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameAppA.ts', './ConnectionManager.ts', './LifeSocket.ts', './Define.ts', './EnvironmentConfig.ts', './MsgBox.ts', './AppManager.ts', './AutoShowManager.ts', './FiniteState.ts', './LocaleStringManager.ts', './LocalStorageManager.ts', './Tools.ts', './FeaturePageComponent.ts', './SoundManager.ts', './EventManager.ts', './StyleChangeManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Animation, Node, Button, ProgressBar, Toggle, PageView, Label, tween, sys, screen, view, macro, size, ResolutionPolicy, input, Vec2, instantiate, UITransform, log, SpriteFrame, Size, error, Prefab, Component, GameAppA, ConnectionManager, LifeSocket, Define, EnvironmentConfig, MsgBox, AppManager, AutoShowManager, FiniteState, LocaleStringManager, LocalStorageManager, Tools, FeaturePageComponent, SoundManager, EventManager, CommonEventName, styleChangeManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Animation = module.Animation;
      Node = module.Node;
      Button = module.Button;
      ProgressBar = module.ProgressBar;
      Toggle = module.Toggle;
      PageView = module.PageView;
      Label = module.Label;
      tween = module.tween;
      sys = module.sys;
      screen = module.screen;
      view = module.view;
      macro = module.macro;
      size = module.size;
      ResolutionPolicy = module.ResolutionPolicy;
      input = module.input;
      Vec2 = module.Vec2;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
      log = module.log;
      SpriteFrame = module.SpriteFrame;
      Size = module.Size;
      error = module.error;
      Prefab = module.Prefab;
      Component = module.Component;
    }, function (module) {
      GameAppA = module.default;
    }, function (module) {
      ConnectionManager = module.default;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      AppManager = module.default;
    }, function (module) {
      AutoShowManager = module.default;
    }, function (module) {
      FiniteState = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      LocalStorageManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      FeaturePageComponent = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      EventManager = module.default;
      CommonEventName = module.CommonEventName;
    }, function (module) {
      styleChangeManager = module.styleChangeManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21;

      cclegacy._RF.push({}, "af517ezHOVFpp2YPWZ9k4h3", "FeatureViewComponent", undefined);

      var AnimName = {
        Landscape_Figure: "Clip_Intro_Landscape_Figure",
        Landscape_NoFigure: "Clip_Intro_Landscape_NoFigure",
        Portrait: "Clip_Intro_Portrait"
      };
      var WIDTH = 1136;
      var HEIGHT = 640;
      var State;

      (function (State) {
        State[State["NONE"] = 0] = "NONE";
        State[State["LOAD_BUNDLE"] = 1] = "LOAD_BUNDLE";
        State[State["ASTT_LOCALE_STRING"] = 2] = "ASTT_LOCALE_STRING";
        State[State["LOCALE_STRING"] = 3] = "LOCALE_STRING";
        State[State["GAP_LOGIN"] = 4] = "GAP_LOGIN";
        State[State["CHECK_STYLE"] = 5] = "CHECK_STYLE";
        State[State["LOAD_SCENE"] = 6] = "LOAD_SCENE";
        State[State["IDLE"] = 7] = "IDLE";
      })(State || (State = {}));

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FeatureViewComponent = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "底圖,0:直,1:橫"
      }), _dec2 = property({
        type: Sprite,
        tooltip: "腳色"
      }), _dec3 = property({
        type: Animation,
        tooltip: "直橫轉換動畫"
      }), _dec4 = property({
        type: Animation,
        tooltip: "bar to btn"
      }), _dec5 = property({
        type: Node,
        tooltip: "展示遮罩"
      }), _dec6 = property({
        type: Button,
        tooltip: "開始按鈕"
      }), _dec7 = property({
        type: ProgressBar,
        tooltip: "載入進度"
      }), _dec8 = property({
        type: Toggle,
        tooltip: "是否再次顯示"
      }), _dec9 = property({
        type: Sprite,
        tooltip: "角色"
      }), _dec10 = property({
        type: PageView,
        tooltip: "PageView"
      }), _dec11 = property({
        type: Button,
        tooltip: "左邊按鈕"
      }), _dec12 = property({
        type: Node,
        tooltip: "特色按鈕"
      }), _dec13 = property({
        type: Button,
        tooltip: "右邊按鈕"
      }), _dec14 = property({
        type: ProgressBar,
        tooltip: "辣椒度"
      }), _dec15 = property({
        type: Node,
        tooltip: "頁簽提示背景"
      }), _dec16 = property({
        type: Sprite,
        tooltip: "遊戲Logo"
      }), _dec17 = property({
        type: Sprite,
        tooltip: "辣椒度"
      }), _dec18 = property({
        type: Sprite,
        tooltip: "不在顯示"
      }), _dec19 = property({
        type: Label,
        tooltip: "確認按鈕"
      }), _dec20 = property({
        type: Label,
        tooltip: "載入進度"
      }), _dec21 = property({
        type: Sprite,
        tooltip: "特色按鈕說明"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FeatureViewComponent, _Component);

        function FeatureViewComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_bgSprites", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_characterSprite", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_changeAnim", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_barChangeAnim", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_introNode", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_startBtn", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_loadingProgressBar", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_closeToggle", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_charaterSprite", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_pageView", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_leftBtn", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featursNode", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rightBtn", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_chilliProgressBar", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_indicatorBgNode", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_logoSprite", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_chilliSprite", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_showHintSprite", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_confirmLabel", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_loadingLabel", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featuresSprite", _descriptor21, _assertThisInitialized(_this));

          _this.m_state = new FiniteState(State.NONE);
          _this.m_sceneNode = null;
          _this.m_isTada = false;
          _this.m_isClosed = false;
          _this.m_pageIdx = 0;
          _this.m_indexProgressBar = null;
          _this.m_indexProgressBar_Jili = null;
          _this.m_progressRunEnd = false;
          _this.m_isShowFeatures = false;
          _this.m_initSetting = null;
          _this.m_scenePrefabPath = "";
          _this.m_gameImgPath = "";
          _this.m_gameId = "";
          _this.m_logoName = "";
          _this.m_pageComponents = [];
          _this.m_isLockLandScope = false;
          _this.m_isLockPortrait = false;
          _this.m_logoSpriteAtlas = null;
          _this.m_isCheckingLang = false;
          _this.m_checkLangTimes = 0;
          _this.m_jiliProgressRate = 0;
          _this.m_singleLogo = null;
          _this.m_isCheckPass = false;
          return _this;
        }

        var _proto = FeatureViewComponent.prototype;

        _proto.onLoad = function onLoad() {
          EventManager.GetInstance().Register(CommonEventName.FeatureViewComponentInit, this);
        };

        _proto.OnEvent = function OnEvent(event) {
          switch (event) {
            case CommonEventName.FeatureViewComponentInit:
              this.m_initSetting = arguments.length <= 1 ? undefined : arguments[1];
              Define.OtherBundle = this.m_initSetting.OtherBundle;
              Define.CommonBundle = this.m_initSetting.CommonBundle;
              Define.GameBundle = this.m_initSetting.GameBundle;
              Define.API_ID = this.m_initSetting.ApiID;
              Tools.SetTaDa(this.m_initSetting.IsTaDa);
              this.Init();
              break;
          }
        };

        _proto.Init = function Init() {
          var _this2 = this;

          if (this.m_initSetting.IsStreet) {
            Tools.SetLine(Define.LineSetting.street);
          } // 場景執行當下時間


          Define.StartSceneTime = this.m_initSetting.StartSceneTime;
          this.m_singleLogo = this.m_initSetting.SingleLogo;
          this.m_scenePrefabPath = this.m_initSetting.ScenePrefabPath;
          this.m_gameImgPath = this.m_initSetting.GameImgPath;
          this.m_gameId = this.m_initSetting.GameId;
          this.m_logoName = this.m_initSetting.LogoName;
          this.m_isLockLandScope = this.m_initSetting.IsLockLandScope;
          this.m_isLockPortrait = this.m_initSetting.IsLockPortrait;
          this.m_logoSpriteAtlas = this.m_initSetting.LogoSpriteAtlas;
          this.m_characterSprite.spriteFrame = this.m_initSetting.CharacterSpriteFrame;

          for (var i = 0; i < this.m_initSetting.BgSpriteFrames.length; i++) {
            if (this.m_bgSprites[i]) {
              this.m_bgSprites[i].spriteFrame = this.m_initSetting.BgSpriteFrames[i];
            }
          }

          this.m_chilliProgressBar.progress = Tools.divide(Math.floor(Tools.times(this.m_initSetting.ChilliNum / 5, 100)), 100);
          this.m_indexProgressBar = document.getElementById("progressBar_TaDa_IN");
          this.m_indexProgressBar_Jili = document.getElementById("progressBar_JiliNew_IN");
          Define.NOW_GAME_ID = this.m_gameId;
          var isGLIGame = Define.GLI_GAME_ID.indexOf(Number(Define.NOW_GAME_ID)) != -1;
          var isBMMGame = Define.BMM_GAME_ID.indexOf(Number(Define.NOW_GAME_ID)) != -1;
          GameAppA.SetBaseConfig("", isGLIGame || isBMMGame);
          this.m_isTada = Tools.IsTada;
          Tools.AddReadyCb(function () {
            if (_this2.IsDataReady()) {
              if (_this2.m_isClosed || AppManager.LobbyData && AppManager.LobbyData.skipFeature) {
                Tools.CloseIntroLoading.forEach(function (f) {
                  f();
                });
                Tools.TriggerUnshow && Tools.TriggerUnshow();
                _this2.m_sceneNode.active = true;
                _this2.m_introNode.active = false;
                Define.IsIntroNodeActive = _this2.m_introNode.active;
                ConnectionManager.getInstance().SendPhaseEnteringEvent(_this2.FormPhaseEventParams(Define.PHASE_ENTERING_EVENT.CLOSE_INTRO, Define.PHASE_RESULT.SUCCESS));
                AutoShowManager.GetInstance().CheckIntroViewClose();

                _this2.ShowScene();
              } else {
                tween(_this2.m_loadingProgressBar).to(0.1, {
                  progress: 1
                }).call(function () {
                  _this2.m_loadingProgressBar.progress = 1;
                  _this2.m_loadingLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.MSGBOX_ONLOADING) + " 100%";

                  _this2.m_barChangeAnim.play("Clip_Intro_LoadingToButton");

                  _this2.m_featursNode.active = Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.FeaturedDisplay) ? false : _this2.m_isShowFeatures;
                  ConnectionManager.getInstance().SendPhaseEnteringEvent(_this2.FormPhaseEventParams(Define.PHASE_ENTERING_EVENT.OPEN_INTRO, Define.PHASE_RESULT.SUCCESS));
                }).start();
              }
            }

            return _this2.m_isClosed;
          });

          Tools.NotifyFeaturesDemoOpen = function () {
            _this2.m_isShowFeatures = true;
          };

          Tools.AddProgressCb(function (prog) {
            // error( "ProgressCb", prog )
            tween(_this2.m_loadingProgressBar).to(0.2, {
              progress: prog
            }).call(function () {
              var persent = prog * 100;
              _this2.m_loadingProgressBar.progress = prog;
              _this2.m_loadingLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.MSGBOX_ONLOADING) + " " + persent.toString() + "%";
            }).start();
          });
          this.m_startBtn.node.active = false;
          this.m_loadingProgressBar.progress = 0;
          this.m_loadingLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.MSGBOX_ONLOADING) + " 0%";
          this.m_closeToggle.node.on("toggle", function () {
            if (_this2.IsDataReady()) {
              var key = Define.AID + ":" + Define.NOW_GAME_ID + ":" + Define.CloseIntroKey;
              LocalStorageManager.SetBool(key, _this2.m_closeToggle.isChecked);
            }
          });
          this.SetBtnState();
          this.m_pageView.node.on("page-turning", function () {
            _this2.m_pageIdx = _this2.m_pageView.getCurrentPageIndex();

            _this2.SetBtnState();
          });
          this.OnRotation();
          Tools.AddOnRotationCb(function () {
            _this2.OnRotation();
          });
          ConnectionManager.getInstance().AddSetting(Define.PROTOCOL.PHASE_EVENT, ConnectionManager.CONNECT_TYPE.TYPE_HTTP, null, null, EnvironmentConfig.PHASE_URL);
          ConnectionManager.getInstance().SendPhaseEnteringEvent(this.FormPhaseEventParams(Define.PHASE_ENTERING_EVENT.FEATURE_VIEW_INIT, Define.PHASE_RESULT.SUCCESS));
          this.m_state.NextState(State.LOAD_BUNDLE); // webview + 鎖定直版的遊戲  事件座標改寫  for 3.6.2版

          var isWebview = !sys.isNative || !!globalThis.LobbyData === false && Tools.GetLinkParameterByName("LobbyData").length <= 0;

          if (isWebview && this.m_isLockPortrait) {
            var frameSize = screen.windowSize;
            view.setOrientation(macro.ORIENTATION_PORTRAIT);

            if (frameSize.width > frameSize.height) {
              screen.windowSize = size(frameSize.height, frameSize.width);
            }

            view.setDesignResolutionSize(HEIGHT, WIDTH, ResolutionPolicy.SHOW_ALL);
            window.dispatchEvent(new Event("resize"));

            input["_touchInput"]["_getLocation"] = function (touch, canvasRect) {
              var isFrameRotated = document.getElementById("GameDiv").style.transform == "rotate(90deg)";
              var x = touch.clientX - canvasRect.x;
              var y = canvasRect.y + canvasRect.height - touch.clientY;

              if (isFrameRotated) {
                if (window.orientation != -90) {
                  var tmp = x;
                  x = y;
                  y = canvasRect.width - tmp;
                } else {
                  var _tmp = x;
                  x = canvasRect.height - y;
                  y = _tmp;
                }
              }

              var dpr = screen.devicePixelRatio;
              x *= dpr;
              y *= dpr;
              return new Vec2(x, y);
            }; // window.dispatchEvent( new Event( "resize" ) );
            // if ( !screenAdapter.handleResizeEvent )
            // {
            //     return;
            // }
            // screenAdapter._updateFrameState();
            // screenAdapter._resizeFrame();

          }

          SoundManager.getInstance().Init(this.node.parent);
        };

        _proto.CreateIntroPages = function CreateIntroPages() {
          if (this.m_pageView.getPages().length !== this.m_initSetting.PagePrefabs.length) {
            for (var i = 0; i < this.m_initSetting.PagePrefabs.length; i++) {
              var node = instantiate(this.m_initSetting.PagePrefabs[i]);
              this.m_pageView.addPage(node);
              var page = node.getComponent(FeaturePageComponent);
              this.m_pageComponents.push(page);
              page.SetFeatureSpriteFrame(this.m_initSetting.FeatureSpriteFrames[i]);
              page.ImgName = this.m_initSetting.InfoNames[i];

              if (i >= this.m_indicatorBgNode.children.length) {
                var bgNode = instantiate(this.m_indicatorBgNode.children[0]);
                this.m_indicatorBgNode.addChild(bgNode);
              }
            }
          }
        };

        _proto.ReactiveCanvas = function ReactiveCanvas() {
          var _this3 = this;

          this.node.parent.active = false;
          this.node.parent.active = true;
          tween(this.node).call(function () {
            _this3.OnRotation(true);
          }).delay(1).call(function () {
            _this3.node.parent.active = false;
            _this3.node.parent.active = true;
          }).start();
        };

        _proto.update = function update() {
          var _this4 = this;

          if (!this.node.parent.getComponent(UITransform).contentSize || this.node.parent.getComponent(UITransform).contentSize && (Number.isNaN(this.node.parent.getComponent(UITransform).contentSize.width) || Number.isNaN(this.node.parent.getComponent(UITransform).contentSize.height))) {
            if (this.node.parent.getComponent(UITransform).contentSize && !Number.isNaN(this.node.parent.getComponent(UITransform).contentSize.width) && !Number.isNaN(this.node.parent.getComponent(UITransform).contentSize.height)) {
              this.ReactiveCanvas();
            }
          }

          try {
            var currentState = this.m_state.Tick();

            switch (currentState) {
              case State.LOAD_BUNDLE:
                if (this.m_state.IsEntering()) {
                  var _Tools$GetLinkParamet;

                  log("LOAD_BUNDLE");
                  AppManager.LoadVersion("game"); //檢查裝置語系

                  var legalLang = ((_Tools$GetLinkParamet = Tools.GetLinkParameterByName("legalLang")) == null ? void 0 : _Tools$GetLinkParamet.toLowerCase == null ? void 0 : _Tools$GetLinkParamet.toLowerCase()) === "true";

                  if (!sys.isNative && !legalLang && EnvironmentConfig.ENV_TYPE != Define.EVN.TEST) {
                    this.m_isCheckingLang = true;
                    this.CheckLang(navigator.language);
                    ConnectionManager.getInstance().SendPhaseEnteringEvent(this.FormPhaseEventParams(Define.PHASE_ENTERING_EVENT.CHECK_LANG, Define.PHASE_RESULT.SUCCESS));
                  }
                }

                if (Define.OtherBundle && Define.CommonBundle && Define.GameBundle && !this.m_isCheckingLang) {
                  if (this.m_indexProgressBar) {
                    this.m_indexProgressBar.style.width = "92%";
                  }

                  if (this.m_indexProgressBar_Jili) {
                    this.m_indexProgressBar_Jili.style.width = "92%";
                  }

                  MsgBox.getInstance().Init(this.node.parent, function (str) {
                    return LocaleStringManager.GetInstance().GetString(str);
                  });
                  this.m_state.NextState(State.ASTT_LOCALE_STRING);
                }

                break;

              case State.ASTT_LOCALE_STRING:
                if (this.m_state.IsEntering()) {
                  log("ASTT_LOCALE_STRING"); // 為了MSGBOX 共用的string先載

                  LocaleStringManager.GetInstance().LoadStringFile();
                }

                if (LocaleStringManager.GetInstance().IsLoaded()) {
                  this.m_state.NextState(State.GAP_LOGIN);
                }

                break;

              case State.GAP_LOGIN:
                if (this.m_state.IsEntering()) {
                  log("GAP_LOGIN");
                  this.GameAppInit();
                }

                break;

              case State.LOCALE_STRING:
                if (this.m_state.IsEntering()) {
                  log("LOCALE_STRING");
                  styleChangeManager.CheckSetting(this.m_initSetting.StyleSetting);
                  LocaleStringManager.GetInstance().LoadGameAtlasFile(this.m_gameImgPath);
                }

                if (LocaleStringManager.GetInstance().IsGameLoaded()) {
                  if (this.m_indexProgressBar) {
                    this.m_indexProgressBar.style.width = "93%";
                  }

                  if (this.m_indexProgressBar_Jili) {
                    this.m_indexProgressBar_Jili.style.width = "93%";
                  }

                  this.m_state.NextState(State.CHECK_STYLE);
                }

                break;

              case State.CHECK_STYLE:
                if (this.m_state.IsEntering()) {
                  log("CHECK_STYLE");

                  if (!styleChangeManager.NeedChange) {
                    this.CreateIntroPages();
                    this.m_isCheckPass = true;
                  } else {
                    var isCompletes = [];

                    var check = function check() {
                      isCompletes.push(true);
                      var rateString = (5 * isCompletes.length).toString();
                      _this4.m_loadingLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.MSGBOX_ONLOADING) + " " + rateString;
                      _this4.m_isCheckPass = isCompletes[0] && isCompletes[1];
                    };

                    styleChangeManager.LoadNewIntro(this.m_initSetting.PagePrefabs.length, function (prefabs) {
                      _this4.m_initSetting.PagePrefabs = prefabs;

                      _this4.CreateIntroPages();

                      check();
                    });
                    styleChangeManager.LoadNewLogo(!!this.m_singleLogo, function (asset) {
                      if (asset instanceof SpriteFrame) {
                        _this4.m_singleLogo = asset;
                      } else {
                        _this4.m_logoSpriteAtlas = asset;
                      }

                      check();
                    });
                  }
                }

                if (this.m_isCheckPass) {
                  this.SetTxt();
                  this.m_state.NextState(State.LOAD_SCENE);
                }

                break;

              case State.LOAD_SCENE:
                if (this.m_state.IsEntering()) {
                  log("LOAD_SCENE");
                  this.LoadScenePrefab();
                }

                if (this.m_sceneNode) {
                  this.ToIdle();
                }

                break;

              case State.IDLE:
                if (this.m_state.IsEntering()) {
                  log("IDLE");
                }

                break;
            }
          } catch (error) {
            console.error("state error", error, this.m_state.Current());
          }
        };

        _proto.ToIdle = function ToIdle() {
          var key = Define.AID + ":" + Define.NOW_GAME_ID + ":" + Define.CloseIntroKey;
          this.m_isClosed = LocalStorageManager.GetBool(key);

          if (!this.m_isClosed) {
            if (this.m_indexProgressBar) {
              this.m_indexProgressBar.style.width = "100%";
            }

            if (this.m_indexProgressBar_Jili) {
              this.m_indexProgressBar_Jili.style.width = "100%";
            }

            this.ShowScene();
          } else {
            if (this.m_indexProgressBar) {
              this.m_indexProgressBar.style.width = "95%";
            }

            if (this.m_indexProgressBar_Jili) {
              this.m_indexProgressBar_Jili.style.width = "95%";
            }
          }

          this.m_state.NextState(State.IDLE);
        };

        _proto.CheckLang = function CheckLang(lang) {
          var _this5 = this;

          this.m_checkLangTimes++;

          if (this.m_checkLangTimes > 2) {
            this.m_isCheckingLang = false;
            ConnectionManager.getInstance().SendPhaseEnteringEvent(this.FormPhaseEventParams(Define.PHASE_ENTERING_EVENT.GET_LANG, Define.PHASE_RESULT.UNKNOWN));
            return;
          }

          var xhr = new XMLHttpRequest();
          xhr.open("POST", EnvironmentConfig.WEBAPI_URL + "CheckLang", true);
          xhr.setRequestHeader("Content-Type", "application/json");
          xhr.timeout = 10000;

          xhr.onload = function () {
            if (xhr.readyState == 4) {
              if (xhr.status >= 200 && xhr.status < 300 || xhr.status == 304) {
                if (xhr.responseText) {
                  var responseJson = JSON.parse(xhr.responseText);
                  var str = LocaleStringManager.FormatLang(responseJson.lang);

                  if (str !== "") {
                    LocaleStringManager.SetCurrLang(str);
                  }

                  _this5.m_isCheckingLang = false;
                  ConnectionManager.getInstance().SendPhaseEnteringEvent(_this5.FormPhaseEventParams(Define.PHASE_ENTERING_EVENT.GET_LANG, Define.PHASE_RESULT.SUCCESS));
                } else {
                  _this5.CheckLang(lang);
                }
              } else {
                _this5.CheckLang(lang);
              }
            }
          };

          xhr.ontimeout = function () {
            _this5.CheckLang(lang);
          };

          xhr.onerror = function () {
            _this5.CheckLang(lang);
          };

          xhr.send(JSON.stringify({
            lang: lang
          }));
        };

        _proto.ProgressRun = function ProgressRun() {
          var _this6 = this;

          var times = Tools.divide(2, 0.02);
          var value = 5;
          var step = Tools.divide(Tools.strip(100 - value), times);
          tween(this.node).repeat(times, tween().sequence(tween().call(function () {
            value = value + step;

            if (value >= 100) {
              value = 100;
            }

            var persent = value.toString() + "%"; // error( "ProgressRun ", persent )

            if (_this6.m_indexProgressBar) {
              _this6.m_indexProgressBar.style.width = persent;
            }

            if (_this6.m_indexProgressBar_Jili) {
              _this6.m_indexProgressBar_Jili.style.width = persent;
            }
          }), tween().delay(0.02))).call(function () {
            // error( "progressRunEnd" )
            _this6.m_progressRunEnd = true;
          }).start();
        };

        _proto.OnClickStartBtn = function OnClickStartBtn() {
          var _this7 = this;

          if (this.IsDataReady()) {
            if (!this.m_isClosed) {
              var key = Define.AID + ":" + Define.NOW_GAME_ID + ":" + Define.CloseIntroKey;
              LocalStorageManager.SetBool(key, this.m_closeToggle.isChecked);
            }

            Tools.CloseIntroLoading.forEach(function (f) {
              f();
            });
            this.m_sceneNode.active = true;
            var anim = this.node.getComponent(Animation);
            anim.play("Clip_Intro_Transition");
            var animState = anim.getState("Clip_Intro_Transition");
            tween(this.node).delay(animState.duration).call(function () {
              _this7.m_introNode.active = false;
              Define.IsIntroNodeActive = _this7.m_introNode.active;
              ConnectionManager.getInstance().SendPhaseEnteringEvent(_this7.FormPhaseEventParams(Define.PHASE_ENTERING_EVENT.CLOSE_INTRO, Define.PHASE_RESULT.SUCCESS));
              AutoShowManager.GetInstance().CheckIntroViewClose();
            }).start();
          }
        };

        _proto.OnClickFeaturesBtn = function OnClickFeaturesBtn() {
          var _this8 = this;

          if (this.IsDataReady()) {
            if (!this.m_isClosed) {
              var key = Define.AID + ":" + Define.NOW_GAME_ID + ":" + Define.CloseIntroKey;
              LocalStorageManager.SetBool(key, this.m_closeToggle.isChecked);
            }

            Tools.TriggerFeaturesShow && Tools.TriggerFeaturesShow();
            this.m_sceneNode.active = true;
            var anim = this.node.getComponent(Animation);
            anim.play("Clip_Intro_Transition");
            var animState = anim.getState("Clip_Intro_Transition");
            tween(this.node).delay(animState.duration).call(function () {
              _this8.m_introNode.active = false;
              Define.IsIntroNodeActive = _this8.m_introNode.active;
              ConnectionManager.getInstance().SendPhaseEnteringEvent(_this8.FormPhaseEventParams(Define.PHASE_ENTERING_EVENT.CLOSE_INTRO, Define.PHASE_RESULT.SUCCESS));
              AutoShowManager.GetInstance().CheckIntroViewClose();
            }).start();
          }
        };

        _proto.OnChangePage = function OnChangePage(target, eventString) {
          var isAdd = Boolean(Number(eventString));

          if (isAdd) {
            this.m_pageIdx++;

            if (this.m_pageIdx >= this.m_pageView.getPages().length) {
              this.m_pageIdx = this.m_pageView.getPages().length - 1;
            }
          } else {
            this.m_pageIdx--;

            if (this.m_pageIdx < 0) {
              this.m_pageIdx = 0;
            }
          }

          this.m_pageView.setCurrentPageIndex(this.m_pageIdx);
          this.SetBtnState();
        };

        _proto.SetBtnState = function SetBtnState() {
          this.m_leftBtn.node.active = true;
          this.m_rightBtn.node.active = true;

          if (this.m_pageIdx === 0) {
            this.m_leftBtn.node.active = false;
          } else if (this.m_pageIdx + 1 === this.m_pageView.getPages().length) {
            this.m_rightBtn.node.active = false;
          }
        };

        _proto.SetTxt = function SetTxt() {
          if (LocaleStringManager.CurrLang !== Define.Lang.EN) {
            var atlas = LocaleStringManager.GetInstance().GetCommonAtlas();
            this.m_chilliSprite.spriteFrame = atlas.getSpriteFrame("Intro_Volatility");
            this.m_showHintSprite.spriteFrame = atlas.getSpriteFrame("Intro_Show");
            this.m_featuresSprite.spriteFrame = atlas.getSpriteFrame("Intro_Playing");
          }

          if (this.m_singleLogo) {
            this.m_logoSprite.spriteFrame = this.m_singleLogo;
          } else if (this.m_logoSpriteAtlas) {
            var logo = this.m_logoSpriteAtlas.getSpriteFrame(this.m_logoName + "_" + LocaleStringManager.CurrLang);

            if (logo) {
              this.m_logoSprite.spriteFrame = logo;
            } else {
              this.m_logoSprite.spriteFrame = this.m_logoSpriteAtlas.getSpriteFrame(this.m_logoName + "_en");
            }
          }

          Tools.SetFont(this.m_confirmLabel);
          Tools.SetFont(this.m_loadingLabel);
          this.m_confirmLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.INTRO_CONTINUE);
          this.m_loadingLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.MSGBOX_ONLOADING) + " 0%";

          for (var i = 0; i < this.m_pageComponents.length; i++) {
            this.m_pageComponents[i].SetTxt();
          }
        };

        _proto.OnRotation = function OnRotation(needReactive) {
          if (needReactive === void 0) {
            needReactive = false;
          } // 如果是遊戲設置直版+webview啟動+角度90度時  遊戲畫布旋轉180度


          var isFrameRotated = document.getElementById("GameDiv").style.transform == "rotate(90deg)";

          if (isFrameRotated && window.orientation != -90 && !this.m_isLockLandScope) // 純橫版不要
            {
              document.getElementById("Cocos3dGameContainer").style["-webkit-transform"] = "rotate(180deg)";
              document.getElementById("Cocos3dGameContainer").style.transform = "rotate(180deg)";
            } else {
            document.getElementById("Cocos3dGameContainer").style["-webkit-transform"] = "rotate(0deg)";
            document.getElementById("Cocos3dGameContainer").style.transform = "rotate(0deg)";
          }

          var frameWidth = screen.windowSize.width / screen.devicePixelRatio;
          var frameHeight = screen.windowSize.height / screen.devicePixelRatio;
          var size = new Size(frameWidth, frameHeight);
          var isLandscape = size.width > size.height;

          if (!this.m_isLockLandScope && !this.m_isLockPortrait) {
            //直版
            if (!isLandscape) {
              if (size.height / size.width <= WIDTH / HEIGHT) {
                view.setDesignResolutionSize(HEIGHT, WIDTH, ResolutionPolicy.FIXED_HEIGHT);
              } else {
                view.setDesignResolutionSize(HEIGHT, WIDTH, ResolutionPolicy.FIXED_WIDTH);
              }

              this.m_changeAnim.play(AnimName.Portrait);
            } //橫版
            else {
                if (size.width / size.height <= WIDTH / HEIGHT) {
                  view.setDesignResolutionSize(WIDTH, HEIGHT, ResolutionPolicy.FIXED_WIDTH);
                } else {
                  view.setDesignResolutionSize(WIDTH, HEIGHT, ResolutionPolicy.FIXED_HEIGHT);
                }

                if (this.m_charaterSprite.spriteFrame) {
                  this.m_changeAnim.play(AnimName.Landscape_Figure);
                } else {
                  this.m_changeAnim.play(AnimName.Landscape_NoFigure);
                }
              }
          } else {
            if (this.m_isLockLandScope) {
              if (needReactive) {
                if (size.width / size.height <= WIDTH / HEIGHT) {
                  view.setDesignResolutionSize(WIDTH, HEIGHT, ResolutionPolicy.FIXED_WIDTH);
                } else {
                  view.setDesignResolutionSize(WIDTH, HEIGHT, ResolutionPolicy.FIXED_HEIGHT);
                }
              }

              if (this.m_charaterSprite.spriteFrame) {
                this.m_changeAnim.play(AnimName.Landscape_Figure);
              } else {
                this.m_changeAnim.play(AnimName.Landscape_NoFigure);
              }
            }

            if (this.m_isLockPortrait) {
              if (needReactive) {
                if (size.height / size.width <= WIDTH / HEIGHT) {
                  view.setDesignResolutionSize(HEIGHT, WIDTH, ResolutionPolicy.FIXED_HEIGHT);
                } else {
                  view.setDesignResolutionSize(HEIGHT, WIDTH, ResolutionPolicy.FIXED_WIDTH);
                }
              }

              this.m_changeAnim.play(AnimName.Portrait);
            }
          }

          if (sys.os === sys.OS.IOS && sys.browserType == sys.BrowserType.SAFARI) {
            // ios 17 Bug 直橫版會偵測錯誤   重新偵測修正
            var winWidth = window.innerWidth;
            var winHeight = window.innerHeight;

            if (winWidth > winHeight != document.documentElement.clientWidth > document.documentElement.clientHeight) {
              // 直橫版偵測錯誤   修正inner觸發orientationchange
              window.innerWidth = document.documentElement.clientWidth;
              window.innerHeight = document.documentElement.clientHeight;
              window.dispatchEvent(new Event("orientationchange"));
              return;
            } else if (Math.abs(winWidth - document.documentElement.clientWidth) > 100) {
              // 有時候直橫版正確但size不知為啥差了幾倍   修正inner觸發resize
              window.innerWidth = document.documentElement.clientWidth;
              window.innerHeight = document.documentElement.clientHeight;
              window.dispatchEvent(new Event("resize"));
              return;
            }
          }
        };

        _proto.ShowScene = function ShowScene() {
          var splash = document.getElementById("splash");

          if (splash) {
            splash.style.display = "none";
          }
        };

        _proto.SetJiliProgress = function SetJiliProgress() {
          this.m_jiliProgressRate += 0.5;
          error("SetJiliProgress", this.m_jiliProgressRate);
          Tools.SetJiliProgressBar(this.m_jiliProgressRate);
        } //
        ;

        _proto.LoadScenePrefab = function LoadScenePrefab() {
          var _this9 = this;

          Define.GameBundle.load(styleChangeManager.CheckScenePath(this.m_scenePrefabPath), Prefab, function (finish, total) {
            //onProgress
            //前10%是change style的，後10%是遊戲的，這邊只有中間的80%
            var rate = 0.1 + Tools.divide(finish, total) - 0.2;

            if (rate > _this9.m_loadingProgressBar.progress) {
              _this9.m_loadingProgressBar.progress = rate;
              var rateString = Math.floor(Tools.times(rate, 100)) + "%";
              _this9.m_loadingLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.MSGBOX_ONLOADING) + " " + rateString;
            }
          }, function (err, assets) {
            if (err) {
              console.error("LoadScenePrefab err", err.message || err);

              _this9.LoadScenePrefab();

              return;
            }

            ConnectionManager.getInstance().SendPhaseEnteringEvent(_this9.FormPhaseEventParams(Define.PHASE_ENTERING_EVENT.LOADING_GAME_VEIEW_END, Define.PHASE_RESULT.SUCCESS)); //onComplete

            _this9.m_sceneNode = instantiate(assets);

            _this9.m_introNode.parent.addChild(_this9.m_sceneNode);

            Tools.SetZIndex(_this9.m_sceneNode, -1); //TaDa才需要顯示此場景
            // if ( this.m_isTada ) { }
            // else
            // {
            //     this.m_introNode.active = false;
            //     AutoShowManager.GetInstance().CheckIntroViewClose();
            // }
          });
        };

        _proto.IsDataReady = function IsDataReady() {
          return Define.AID !== Define.DEFAULT_AID && Define.NOW_GAME_ID !== "0";
        };

        _proto.GameAppInit = function GameAppInit() {
          var _this10 = this;

          LifeSocket.GetInstance().CountCb = function (connectCount) {
            ConnectionManager.getInstance().SendPhaseEnteringEvent(_this10.FormPhaseEventParams(Define.PHASE_ENTERING_EVENT.SOCKET_CONNECTION_TIME, connectCount));
          };

          LifeSocket.GetInstance().OnErrorCb = function () {
            ConnectionManager.getInstance().SendPhaseEnteringEvent(_this10.FormPhaseEventParams(Define.PHASE_ENTERING_EVENT.SOCKET_CONNECTION_ERROR, 1));
          };

          LifeSocket.GetInstance().ServiceCb = function (eventState) {
            ConnectionManager.getInstance().SendPhaseEnteringEvent(_this10.FormPhaseEventParams(Define.PHASE_ENTERING_EVENT.SOCKET_RESULT, eventState));
          };

          var ssoKeyString = Tools.GetLinkParameterByName("ssoKey");
          var envString = Tools.GetLinkParameterByName("env");

          if (!envString && ssoKeyString) {
            Define.APP = new GameAppA(Number(Define.NOW_GAME_ID), function () {
              ConnectionManager.getInstance().SendPhaseEnteringEvent(_this10.FormPhaseEventParams(Define.PHASE_ENTERING_EVENT.LOGIN_GAP_END, Define.PHASE_RESULT.SUCCESS));
            }, ssoKeyString, function () {}, function () {
              ConnectionManager.getInstance().SendPhaseEnteringEvent(_this10.FormPhaseEventParams(Define.PHASE_ENTERING_EVENT.LOGIN_GAP, Define.PHASE_RESULT.SUCCESS));
            }, function (reason) {
              ConnectionManager.getInstance().SendPhaseEnteringEvent(_this10.FormPhaseEventParams(Define.PHASE_ENTERING_EVENT.LOGIN_GAP_END, reason));
            }, EnvironmentConfig.GAME_SERVER_URL, function () {
              Define.ALIVE_INTERVAL = setInterval(function () {
                LifeSocket.GetInstance().SendAliveMsg();
              }, 7000);

              if (_this10.IsDataReady()) {
                _this10.m_state.NextState(State.LOCALE_STRING);
              }
            });
          } else {
            this.m_state.NextState(State.LOCALE_STRING);
          }
        }
        /** 
         * @description 遊戲內打包函式，避免每次呼叫都要自己帶UID、GAME_ID跟VERSION
        */
        ;

        _proto.FormPhaseEventParams = function FormPhaseEventParams(eventID, eventStatus) {
          var aid = -1;
          var apiId = 0;
          var ssoKeyString = Tools.GetLinkParameterByName("ssoKey");

          if (Define.APP && Define.APP.userInfo) {
            aid = Define.APP.userInfo.aid;
            apiId = Define.APP.userInfo.apiid;
          }

          return ConnectionManager.FormPhaseEventParams(aid, Number(Define.NOW_GAME_ID), Define.VERSION, eventID, eventStatus, ssoKeyString, apiId.toString());
        };

        return FeatureViewComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_bgSprites", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_characterSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_changeAnim", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_barChangeAnim", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_introNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_startBtn", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_loadingProgressBar", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_closeToggle", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_charaterSprite", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_pageView", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_leftBtn", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_featursNode", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_rightBtn", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_chilliProgressBar", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_indicatorBgNode", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_logoSprite", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "m_chilliSprite", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "m_showHintSprite", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "m_confirmLabel", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "m_loadingLabel", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "m_featuresSprite", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FiniteState.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e9665pFgelDT6gIc+ErJq/h", "FiniteState", undefined);

      var FiniteState = exports('default', /*#__PURE__*/function () {
        var _proto = FiniteState.prototype;

        _proto.start = function start() {};

        function FiniteState(init) {
          this.m_currState = 0;
          this.m_nextState = 0;
          this.m_transitTime = 0;
          this.m_toTransit = true;
          this.m_forced = false;
          this.m_entering = false;
          this.m_currState = init;
          this.m_nextState = init;
        }
        /**
         * Tick
         */


        _proto.Tick = function Tick() {
          if (this.m_toTransit) {
            this.m_currState = this.m_nextState;
            this.m_transitTime = new Date().getTime() / 1000; ///  1000 = 1s

            this.m_toTransit = false;
            this.m_forced = false;
            this.m_entering = true;
          } else {
            this.m_entering = false;
          }

          return this.m_currState;
        };

        _proto.NextState = function NextState(newState) {
          if (this.m_forced) return;
          this.m_nextState = newState;
          this.m_toTransit = true;
        };

        _proto.Current = function Current() {
          return this.m_currState;
        };

        _proto.Elapsed = function Elapsed() {
          return new Date().getTime() / 1000 - this.m_transitTime;
        };

        _proto.IsEntering = function IsEntering() {
          return this.m_entering;
        };

        _proto.ForceTransit = function ForceTransit(newState) {
          this.m_nextState = newState;
          this.m_toTransit = true;
          this.m_forced = true;
        };

        _proto.GetTransit = function GetTransit() {
          return this.m_toTransit;
        } // update (dt) {}
        ;

        return FiniteState;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FloatView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, UITransform, screen, Size, view, tween, v3, size, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UITransform = module.UITransform;
      screen = module.screen;
      Size = module.Size;
      view = module.view;
      tween = module.tween;
      v3 = module.v3;
      size = module.size;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "c49e70BoelHt7vmNmM+Flzr", "FloatView", undefined);
      /*
          使用方法:
              在creator將此script拉進節點屬性中即可使用
          功能選項:
              isVisibleSize:
                  圖示移動範圍=整個畫面(包含黑條)
              isParentSize:
                  圖示移動範圍=父節點size
              ※以上兩個不選移動範圍=遊戲畫面(1136、640)
              ※以上兩個只能選一個
              canInertia:
                  是否可慣性滑動
              isOriginPos:
                  是否在切直橫版的時候固定使用原始座標(因為幾乎都有直橫版基本上只有在測試用)
              isDefaultTouch:
                  是否註冊預設的touch事件
      */


      var RECORD_POS_MAX = 6;
      var RESISTANCE = 0.3;
      var FINAL_V = 30;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FloatView = exports('default', (_dec = property({
        tooltip: "滑動範圍是否是「可視」範圍(不可複數選擇，不選預設為遊戲畫面大小)"
      }), _dec2 = property({
        tooltip: "滑動範圍是否是「父節點」範圍(不可複數選擇，不選預設為遊戲畫面大小)"
      }), _dec3 = property({
        tooltip: "是否可慣性滑動"
      }), _dec4 = property({
        tooltip: "是否使用固定原始位置"
      }), _dec5 = property({
        tooltip: "測試模式(自動註冊踏取事件)"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FloatView, _Component);

        function FloatView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_isVisibleSize", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_isParentSize", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_canInertia", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_isOriginPos", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_isDefaultTouch", _descriptor5, _assertThisInitialized(_this));

          _this.iV = void 0;
          _this.m_curPos = void 0;
          _this.m_diffX = void 0;
          _this.m_diffY = void 0;
          _this.m_inertiaMosionSchedule = void 0;
          _this.m_maxPos = void 0;
          _this.m_originPos = void 0;
          _this.m_posIndex = void 0;
          _this.m_preMovePos = void 0;
          _this.m_recordPos = [];
          _this.m_size = void 0;
          _this.m_startPos = void 0;
          _this.m_xStop = void 0;
          _this.m_yStop = void 0;
          _this.m_boundary = 0;
          _this.m_isOpenBoundary = false;
          _this.m_sizeChangeRate = 1;
          return _this;
        }

        var _proto = FloatView.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          this.m_curPos = this.node.position;
          this.m_originPos = this.node.position;

          if (this.m_isDefaultTouch) {
            this.node.on(Node.EventType.TOUCH_START, function (event) {
              _this2.OnTouchStart(event.getUILocation());
            });
            this.node.on(Node.EventType.TOUCH_MOVE, function (event) {
              _this2.OnTouchMove(event.getUILocation());
            });
            this.node.on(Node.EventType.TOUCH_END, function (event) {
              _this2.OnTouchEnd(event.getUILocation(), null);
            });
          }

          this.m_size = this.node.getComponent(UITransform).contentSize;
          this.SetDiffPos(); // 足球慣性運動

          for (var i = 0; i < RECORD_POS_MAX; i++) {
            this.m_recordPos[i] = this.m_curPos;
          }
        };

        _proto.start = function start() {};

        _proto.SetBoundary = function SetBoundary(isOpen, boundary) {
          this.m_isOpenBoundary = isOpen;
          this.m_boundary = boundary;
          this.ChangeBoundaryForPosition();
        };

        _proto.ResetPosition = function ResetPosition() {
          if (this.m_isOriginPos) {
            this.node.position = this.m_originPos;
            this.m_curPos = this.m_originPos;
          } else {
            this.m_curPos = this.node.position;
          }
        };

        _proto.SetDiffPos = function SetDiffPos() {
          var _this3 = this;

          if (!this.m_size) {
            return;
          }

          var frameWidth = screen.windowSize.width / screen.devicePixelRatio;
          var frameHeight = screen.windowSize.height / screen.devicePixelRatio;
          var frameSize = new Size(frameWidth, frameHeight);
          var visibleSize = view.getVisibleSize();
          var viewSize;
          var visibleDiffX;
          var visibleDiffY;
          viewSize = visibleSize;
          this.UnscheduleInertiaMosion(); // 不delay會抓到轉板前的數值

          tween(this.node).delay(0.1).call(function () {
            _this3.ResetPosition();

            var isLandscape = frameSize.width > frameSize.height;

            var worldPos = _this3.node.parent.getComponent(UITransform).convertToWorldSpaceAR(_this3.node.position);

            if (_this3.m_isVisibleSize) {
              visibleDiffX = 0;
              visibleDiffY = 0;
              _this3.m_maxPos = v3(viewSize.width - _this3.m_size.width, viewSize.height - _this3.m_size.height);
            } else if (_this3.m_isParentSize) {
              var parent = _this3.node.parent;
              var parentWorldPos = parent.parent.getComponent(UITransform).convertToWorldSpaceAR(parent.position);
              var visibleViewCenter = v3(visibleSize.width / 2, visibleSize.height / 2);

              if (isLandscape) {
                // 先算x、y的範圍差再+偏移
                visibleDiffX = (visibleSize.width - parent.getComponent(UITransform).width) / 2 + (parentWorldPos.x - visibleViewCenter.x);
                visibleDiffY = (visibleSize.height - parent.getComponent(UITransform).height) / 2 + (parentWorldPos.y - visibleViewCenter.y);
                _this3.m_sizeChangeRate = visibleSize.x / frameSize.x;
              } else {
                visibleDiffX = (visibleSize.width - parent.getComponent(UITransform).width) / 2 + (parentWorldPos.x - visibleViewCenter.x);
                visibleDiffY = (visibleSize.height - parent.getComponent(UITransform).height) / 2 + (parentWorldPos.y - visibleViewCenter.y);
                _this3.m_sizeChangeRate = visibleSize.y / frameSize.y;
              }

              _this3.m_maxPos = v3(parent.getComponent(UITransform).width - _this3.m_size.width, parent.getComponent(UITransform).height - _this3.m_size.height);
            } else {
              if (isLandscape) {
                visibleDiffX = (visibleSize.width - 1136) / 2;
                visibleDiffY = (visibleSize.height - 640) / 2;
                viewSize = size(1136, 640);
              } else {
                visibleDiffX = (visibleSize.width - 640) / 2;
                visibleDiffY = (visibleSize.height - 1136) / 2;
                viewSize = size(640, 1136);
              }

              _this3.m_maxPos = v3(viewSize.width - _this3.m_size.width, viewSize.height - _this3.m_size.height);
            }

            _this3.m_diffX = worldPos.x - _this3.node.position.x - _this3.m_size.width / 2 - visibleDiffX;
            _this3.m_diffY = worldPos.y - _this3.node.position.y - _this3.m_size.height / 2 - visibleDiffY; // console.error( 'SetDiffPos', this.m_sizeChangeRate, frameSize, visibleSize )
            // cc.log( "nodePos", this.node.position )
            // cc.log( "parentPos", this.node.parent.position )
            // cc.log( "worldPos", worldPos )
            // cc.log( "viewSize", viewSize )
            // cc.log( "visibleSize", visibleSize )
            // cc.log( "this.m_maxPos", this.m_maxPos )
            // cc.log( "this.m_diffX", this.m_diffX )
            // cc.log( "this.m_diffY", this.m_diffY )
          }).start();
        };

        _proto.OnTouchStart = function OnTouchStart(target) {
          this.m_preMovePos = v3(target.x, target.y);
          this.m_startPos = v3(target.x, target.y);
          this.UnscheduleInertiaMosion();
          this.m_posIndex = 1;

          for (var i = 0; i < RECORD_POS_MAX; i++) {
            this.m_recordPos[i] = this.m_curPos;
          }
        };

        _proto.OnTouchMove = function OnTouchMove(target) {
          var dx = target.x - this.m_preMovePos.x;
          var dy = target.y - this.m_preMovePos.y; // dx *= this.m_sizeChangeRate;
          // dy *= this.m_sizeChangeRate;
          // console.error( 'OnTouchMove', this.m_curPos, dx, dy )

          var newX = this.m_curPos.x + dx;
          var newY = this.m_curPos.y + dy;

          if (newX < 0 - this.m_diffX) {
            newX = 0 - this.m_diffX;
          }

          if (newX > this.m_maxPos.x - this.m_diffX - (this.m_isOpenBoundary ? this.m_boundary : 0)) {
            newX = this.m_maxPos.x - this.m_diffX - (this.m_isOpenBoundary ? this.m_boundary : 0);
          }

          if (newY < 0 - this.m_diffY) {
            newY = 0 - this.m_diffY;
          }

          if (newY > this.m_maxPos.y - this.m_diffY) {
            newY = this.m_maxPos.y - this.m_diffY;
          }

          this.m_curPos = v3(newX, newY);
          this.node.position = this.m_curPos; // console.error( 'OnTouchMove', this.m_curPos, newX, newY )

          this.m_preMovePos = v3(target.x, target.y); // 足球慣性運動

          this.m_recordPos[this.m_posIndex] = this.m_curPos;
          this.m_posIndex = (this.m_posIndex + 1) % RECORD_POS_MAX;
        };

        _proto.OnTouchEnd = function OnTouchEnd(target, cb) {
          var dx = target.x - this.m_startPos.x;
          var dy = target.y - this.m_startPos.y;

          if (Math.abs(dx) < 10 && Math.abs(dy) < 10) {
            // 當做點擊
            if (cb) {
              cb();
            }

            return;
          }

          dx = target.x - this.m_preMovePos.x;
          dy = target.y - this.m_preMovePos.y;
          var newX = this.m_curPos.x + dx;
          var newY = this.m_curPos.y + dy;

          if (newX < 0 - this.m_diffX) {
            newX = 0 - this.m_diffX;
          }

          if (newX > this.m_maxPos.x - this.m_diffX - (this.m_isOpenBoundary ? this.m_boundary : 0)) {
            newX = this.m_maxPos.x - this.m_diffX - (this.m_isOpenBoundary ? this.m_boundary : 0);
          }

          if (newY < 0 - this.m_diffY) {
            newY = 0 - this.m_diffY;
          }

          if (newY > this.m_maxPos.y - this.m_diffY) {
            newY = this.m_maxPos.y - this.m_diffY;
          }

          this.m_curPos = v3(newX, newY);
          this.node.position = this.m_curPos; // this.m_preMovePos = p
          // 足球慣性運動

          if (this.m_canInertia) {
            this.DoInertia(this.m_recordPos[this.m_posIndex], this.m_curPos);
          }
        };

        _proto.ChangeBoundaryForPosition = function ChangeBoundaryForPosition() {
          if (this.m_isOpenBoundary && this.m_curPos && this.m_maxPos) {
            var nodeWidth = this.node.getComponent(UITransform).width / 2;
            var isChange = this.m_curPos.x + nodeWidth + this.m_boundary > this.m_maxPos.x / 2;

            if (isChange) {
              this.m_curPos.x = this.m_maxPos.x / 2 - this.m_boundary;
              this.node.position = this.m_curPos;
            }
          }
        };

        _proto.DoInertia = function DoInertia(lastPos, endPos) {
          var _this4 = this; // if true then return end


          if (!lastPos) {
            return;
          } // 算單位時間位移量


          var initV_withTime = v3(endPos.x - lastPos.x, endPos.y - lastPos.y); // 算初速

          this.iV = v3(initV_withTime.x * 30 / RECORD_POS_MAX, initV_withTime.y * 30 / RECORD_POS_MAX);
          var V = Math.sqrt(this.iV.x * this.iV.x + this.iV.y * this.iV.y);

          if (V == 0) {
            return;
          }

          this.m_inertiaMosionSchedule = function (dt) {
            // 算阻速
            var rV = _this4.GetResistance();

            var deltaX = _this4.iV.x * dt;
            var deltaY = _this4.iV.y * dt;
            var newX = _this4.m_curPos.x + deltaX;

            if (newX < 0 - _this4.m_diffX) {
              _this4.iV.x = -_this4.iV.x;
              rV.x = -rV.x;
              newX = 0 - _this4.m_diffX;
            } else if (newX > _this4.m_maxPos.x - _this4.m_diffX) {
              _this4.iV.x = -_this4.iV.x;
              rV.x = -rV.x;
              newX = (_this4.m_maxPos.x - _this4.m_diffX) * 2 - newX;
            }

            var newY = _this4.m_curPos.y + deltaY;

            if (newY < 0 - _this4.m_diffY) {
              _this4.iV.y = -_this4.iV.y;
              rV.y = -rV.y;
              newY = 0 - _this4.m_diffY;
            } else if (newY > _this4.m_maxPos.y - _this4.m_diffY) {
              _this4.iV.y = -_this4.iV.y;
              rV.y = -rV.y;
              newY = (_this4.m_maxPos.y - _this4.m_diffY) * 2 - newY;
            }

            _this4.m_curPos = v3(newX, newY);
            _this4.node.position = _this4.m_curPos;
            var newVx = _this4.iV.x + rV.x * dt;
            var newVy = _this4.iV.y + rV.y * dt;

            if (_this4.iV.x * newVx <= 0) {
              _this4.m_xStop = true;
            }

            if (_this4.iV.y * newVy <= 0) {
              _this4.m_yStop = true;
            }

            if (_this4.m_xStop && _this4.m_yStop) {
              _this4.UnscheduleInertiaMosion();
            } else {
              if (!_this4.m_xStop) {
                _this4.iV.x = newVx;
              }

              if (!_this4.m_yStop) {
                _this4.iV.y = newVy;
              }
            }
          };

          this.UnscheduleInertiaMosion();
          this.schedule(this.m_inertiaMosionSchedule, 1 / 60);
        };

        _proto.GetResistance = function GetResistance() {
          var V = Math.sqrt(this.iV.x * this.iV.x + this.iV.y * this.iV.y);
          var rVx;
          var rVy;

          if (V < FINAL_V) {
            rVx = FINAL_V * this.iV.x / V;
            rVy = FINAL_V * this.iV.y / V;
          } else {
            rVx = RESISTANCE * this.iV.x;
            rVy = RESISTANCE * this.iV.y;
          }

          return v3(-rVx, -rVy);
        };

        _proto.UnscheduleInertiaMosion = function UnscheduleInertiaMosion() {
          if (this.m_inertiaMosionSchedule) {
            this.unschedule(this.m_inertiaMosionSchedule); // this.m_inertiaMosionSchedule = null;

            this.m_xStop = null;
            this.m_yStop = null;
          }
        };

        return FloatView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_isVisibleSize", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_isParentSize", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_canInertia", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_isOriginPos", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_isDefaultTouch", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GaiaManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConnectManager.ts', './gaiaProto.mjs_cjs=&original=.js', './Define.ts', './JPManager.ts', './Wallet.ts', './ManagerDataStructure.ts', './MHBManager.ts', './gaiaProto.js'], function (exports) {
  'use strict';

  var _createClass, cclegacy, log, ConnectManager, Define, JPManager, walletManger, ManagerDataStructure, MHBManager, _cjsExports;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }, function (module) {
      ConnectManager = module.default;
    }, null, function (module) {
      Define = module.default;
    }, function (module) {
      JPManager = module.default;
    }, function (module) {
      walletManger = module.walletManger;
    }, function (module) {
      ManagerDataStructure = module.ManagerDataStructure;
    }, function (module) {
      MHBManager = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a3830CWf9pI/4MSL9TTMfvS", "GaiaManager", undefined);

      var GaiaManager = /*#__PURE__*/function () {
        function GaiaManager() {
          this.m_bottomBar = null;
        }

        var _proto = GaiaManager.prototype;

        _proto.CheckAck = function CheckAck(ack, successCb) {
          log("CheckAck", ack);

          if (typeof ack == "boolean") {
            return;
          }

          if (ack instanceof ArrayBuffer) {
            var bytes = new Uint8Array(ack);
            ack = _cjsExports.gaiaProto.GaiaResponse.decode(bytes);
          }

          log("Sever ack decode", ack, ack.ret);

          if (ack.ret == undefined || ack.ret == 0) {
            successCb == null ? void 0 : successCb(ack.type, ack.data, ack);
          }
        };

        _proto.JpManagerInit = function JpManagerInit() {
          var _this = this; // if ( Tools.CheckSwitchOff( Define.SwitchOffKeyDefine.CloseSideFeatures ) )
          // {
          //     return;
          // }


          var data = new _cjsExports.gaiaProto.UnionJPBlockReq();
          data.aid = Number(Define.APP.GetAID());
          data.token = Define.APP.GetAToken();

          if (walletManger.HasWallet) {
            data.currencynumber = walletManger.CurencyID;
          }

          var req = new ManagerDataStructure.JPBlockReq();
          req.reqData = _cjsExports.gaiaProto.UnionJPBlockReq.encode(data).finish();
          ConnectManager.GetInstance().SendCommand(req, function (ack) {
            gaiaManager.CheckAck(ack, function (type, data) {
              var info = _cjsExports.gaiaProto.UnionJPBlockAck.decode(data);

              var lockBetList = info.list && info.list.length > 0 ? info.list : [0, 0, 0, 0];

              var infoCB = function infoCB(cb) {
                var data = new _cjsExports.gaiaProto.UnionJPInfoReq();
                data.aid = Number(Define.APP.GetAID());
                data.token = Define.APP.GetAToken();
                var req = new ManagerDataStructure.JPInfoReq();
                req.reqData = _cjsExports.gaiaProto.UnionJPInfoReq.encode(data).finish();
                ConnectManager.GetInstance().SendCommand(req, function (ack) {
                  gaiaManager.CheckAck(ack, function (type, data) {
                    var info = _cjsExports.gaiaProto.UnionJPInfoAck.decode(data);

                    var list = [];

                    if (info.list) {
                      for (var i = 0; i < info.list.length; i++) {
                        list.push({
                          type: info.list[i].type,
                          value: info.list[i].value
                        });
                      }
                    }

                    cb == null ? void 0 : cb(list);
                  });
                }, false, true);
              };

              var historyCB = function historyCB(cb) {
                var data = new _cjsExports.gaiaProto.UnionJPHistoryReq();
                data.aid = Number(Define.APP.GetAID());
                data.token = Define.APP.GetAToken();
                var req = new ManagerDataStructure.JPHistoryReq();
                req.reqData = _cjsExports.gaiaProto.UnionJPHistoryReq.encode(data).finish();
                ConnectManager.GetInstance().SendCommand(req, function (ack) {
                  gaiaManager.CheckAck(ack, function (type, data) {
                    var info = _cjsExports.gaiaProto.UnionJPHistoryAck.decode(data);

                    var list = [];

                    if (info.list) {
                      for (var i = 0; i < info.list.length; i++) {
                        list.push({
                          type: info.list[i].type,
                          winner: info.list[i].winner,
                          win: info.list[i].win,
                          gameID: info.list[i].gameID,
                          nickname: info.list[i].nickname
                        });
                      }
                    }

                    cb == null ? void 0 : cb(list);
                  });
                }, false, true);
              };

              var allGamesCB = function allGamesCB(cb) {
                var data = new _cjsExports.gaiaProto.UnionJPInfoAllReq();
                data.aid = Number(Define.APP.GetAID());
                data.token = Define.APP.GetAToken();
                var req = new ManagerDataStructure.JPBAllReq();
                req.reqData = _cjsExports.gaiaProto.UnionJPInfoAllReq.encode(data).finish();
                ConnectManager.GetInstance().SendCommand(req, function (ack) {
                  gaiaManager.CheckAck(ack, function (type, data) {
                    var info = _cjsExports.gaiaProto.UnionJPInfoAllAck.decode(data);

                    var list = {
                      info: info.plist,
                      game: info.glist
                    };
                    cb == null ? void 0 : cb(list);
                  });
                }, false, true);
              };

              JPManager.GetInstance().Init(_this.m_bottomBar, lockBetList, infoCB, historyCB, allGamesCB);
            });
          }, false, true);
        };

        _proto.MhbManagerInit = function MhbManagerInit() {
          // if ( Tools.CheckSwitchOff( Define.SwitchOffKeyDefine.CloseSideFeatures ) )
          // {
          //     return;
          // }
          var infoCB = function infoCB(cb) {
            var data = new _cjsExports.gaiaProto.FullJPInfoReq();
            data.aid = Number(Define.APP.GetAID());
            data.token = Define.APP.GetAToken();
            var req = new ManagerDataStructure.MHBInfoReq();
            req.reqData = _cjsExports.gaiaProto.FullJPInfoReq.encode(data).finish();
            ConnectManager.GetInstance().SendCommand(req, function (ack) {
              gaiaManager.CheckAck(ack, function (type, data) {
                var info = _cjsExports.gaiaProto.FullJPInfoAck.decode(data);

                var list = {
                  value: info.value ? info.value : 0,
                  full: info.full ? info.full : 0,
                  minvip: info.minvip ? info.minvip : 0,
                  minbet: info.minbet ? info.minbet : 0
                };
                cb == null ? void 0 : cb(list);
              });
            }, false, true);
          };

          var infoAllCB = function infoAllCB(cb) {
            var data = new _cjsExports.gaiaProto.FullJPInfoAllReq();
            data.aid = Number(Define.APP.GetAID());
            data.token = Define.APP.GetAToken();
            var req = new ManagerDataStructure.MHBInfoAllReq();
            req.reqData = _cjsExports.gaiaProto.FullJPInfoAllReq.encode(data).finish();
            ConnectManager.GetInstance().SendCommand(req, function (ack) {
              gaiaManager.CheckAck(ack, function (type, data) {
                var info = _cjsExports.gaiaProto.FullJPInfoAllAck.decode(data);

                var newInfo = [];

                if (info.list) {
                  for (var i = 0; i < info.list.length; i++) {
                    newInfo.push({
                      gameid: info.list[i].gameid ? info.list[i].gameid : 0,
                      value: info.list[i].value ? info.list[i].value : 0,
                      full: info.list[i].full ? info.list[i].full : 0
                    });
                  }
                }

                cb == null ? void 0 : cb(newInfo);
              });
            }, false, true);
          };

          var historyCB = function historyCB(cb) {
            var data = new _cjsExports.gaiaProto.FullJPHistoryReq();
            data.aid = Number(Define.APP.GetAID());
            data.token = Define.APP.GetAToken();
            var req = new ManagerDataStructure.MHBHistoryReq();
            req.reqData = _cjsExports.gaiaProto.FullJPHistoryReq.encode(data).finish();
            ConnectManager.GetInstance().SendCommand(req, function (ack) {
              gaiaManager.CheckAck(ack, function (type, data) {
                var info = _cjsExports.gaiaProto.FullJPHistoryAck.decode(data);

                var newInfo = [];

                if (info.list) {
                  for (var i = 0; i < info.list.length; i++) {
                    newInfo.push({
                      winner: info.list[i].winner ? info.list[i].winner : "",
                      nickname: info.list[i].nickname ? info.list[i].nickname : "",
                      win: info.list[i].win ? info.list[i].win : 0,
                      time: info.list[i].time ? info.list[i].time : 0
                    });
                  }
                }

                cb == null ? void 0 : cb(newInfo);
              });
            }, false, true);
          };

          MHBManager.GetInstance().Init(this.m_bottomBar, infoCB, infoAllCB, historyCB);
        };

        _createClass(GaiaManager, [{
          key: "BottomBar",
          set: function set(v) {
            this.m_bottomBar = v;
          }
        }]);

        return GaiaManager;
      }();

      var gaiaManager = exports('gaiaManager', new GaiaManager());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameAppA.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Tools.ts', './GameAppBaseView.ts', './Request.ts', './Define.ts', './MsgBox.ts', './EnvironmentConfig.ts', './LifeSocket.ts', './ConnectionManager.ts', './AppManager.ts', './LocaleStringManager.ts', './StyleChangeManager.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, _assertThisInitialized, cclegacy, log, sys, Tools, GameAppBaseView, Request, DEFAULT_REQUEST_OPTIONS, Define, MsgBox, EnvironmentConfig, LifeSocket, ConnectionManager, AppManager, LocaleStringManager, styleChangeManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      sys = module.sys;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      GameAppBaseView = module.default;
    }, function (module) {
      Request = module.Request;
      DEFAULT_REQUEST_OPTIONS = module.DEFAULT_REQUEST_OPTIONS;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      ConnectionManager = module.default;
    }, function (module) {
      AppManager = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      styleChangeManager = module.styleChangeManager;
    }],
    execute: function () {
      cclegacy._RF.push({}, "46ecfUJdZdD4L4Ol79PbSJJ", "GameAppA", undefined);

      var Sub = "{{uat}}wbslot-fd.";
      var SubBe = "{{uat}}wbwebapi{{a}}.";
      var ignoreGameID = [Define.GAME_ID.WS, // 爵色舞台
      Define.GAME_ID.HB, // 超爆
      Define.GAME_ID.SH, // 上海甜心
      Define.GAME_ID.SH2, // 搖滾甜心
      Define.GAME_ID.SH3, // 海島甜心
      Define.GAME_ID.SH4, // 人魚甜心
      Define.GAME_ID.SH5, // 東方明珠
      Define.GAME_ID.FS, // 封神
      Define.GAME_ID.XYY, // 喜洋洋
      Define.GAME_ID.LFS, // 鑽石派對
      Define.GAME_ID.LGB, // 霸金磚
      Define.GAME_ID.FH, // 超級王牌
      Define.GAME_ID.RB2, // 搖滾甜心2
      Define.GAME_ID.PLY, // 朕的美人
      Define.GAME_ID.NC, // 嗨翻夜
      Define.GAME_ID.LL, // luckylady
      Define.GAME_ID.SS, // sunnyshow
      Define.GAME_ID.TW, // twinwins
      Define.GAME_ID.GA, // 超級王牌換皮(皇家王牌)
      Define.GAME_ID.USA_NC, // 嗨翻夜歐美版
      Define.GAME_ID.USA_FH, // 超級王牌歐美版
      Define.GAME_ID.LUDO, Define.GAME_ID.LUDOQ];
      /**
       * 網路層、Loading、Login
       */

      var GameAppA = exports('default', /*#__PURE__*/function (_GameAppBaseView) {
        _inheritsLoose(GameAppA, _GameAppBaseView);

        GameAppA.SetChangeCb = function SetChangeCb(v) {
          this.m_changeCbs.push(v);
        };

        GameAppA.SetBaseConfig = function SetBaseConfig(webname, isGLIGame) {
          if (isGLIGame === void 0) {
            isGLIGame = false;
          }

          var env = EnvironmentConfig.ENV_TYPE;
          var be = (Tools.GetLinkParameterByName("be") || "861sfxyld").split("").reverse().join("");
          var gs = (Tools.GetLinkParameterByName("gs") || "gnidnawcs").split("").reverse().join("");
          var realBe = SubBe + be + ".com";
          var isDemo = Boolean(Tools.GetLinkParameterByName("demo"));
          var isTaDa = Tools.IsTada;

          if (isTaDa) {
            if (Tools.Line === Define.LineSetting.street) {
              Tools.SetLine(Define.LineSetting.americas_str);
            } else {
              Tools.SetLine(Define.LineSetting.americas);
            }
          }

          if (be.search(/\.com/g) !== -1) {
            realBe = be;
          }

          var realGSUrl = Sub + gs + ".com"; // let socketUrl = Sub + gs + ".com";

          if (gs.search(/\.com/g) !== -1) {
            realGSUrl = gs; // socketUrl = gs;
          } //分區


          var region = Tools.GetLinkParameterByName("region");

          if (region && region !== "") {
            Define.REGION = region;
            var splitUrl = realGSUrl.split(".");

            if (splitUrl.length === 3) {
              splitUrl[0] = splitUrl[0] + "-" + region;
              realGSUrl = splitUrl[0] + "." + splitUrl[1] + "." + splitUrl[2];
            }
          }

          if (!this.m_isSetNoMenu) {
            this.m_isSetNoMenu = true;

            if (Number(Define.API_ID) == Define.MGAApi || Tools.IsTadaCasino) {
              EnvironmentConfig.HISTORY_URL = EnvironmentConfig.HISTORY_URL + "&layout=headeronly";
            }

            for (var i = 0; i < Define.WebNoMenu.length; i++) {
              if (Number(Define.API_ID) == Define.WebNoMenu[i]) {
                EnvironmentConfig.WEB_URL = EnvironmentConfig.WEB_URL + "&layout=headeronly";
                break;
              }
            }
          }

          if (!sys.isNative && window.location.host.search(/777apex/g) !== -1) {
            EnvironmentConfig.HISTORY_URL = EnvironmentConfig.BC_HISTORY_URL;
            EnvironmentConfig.RATIO_URL = EnvironmentConfig.BC_RATIO_URL;
          }

          var hasCh = realBe.search(/-ch/g) !== -1;

          if (hasCh) {
            this.m_route = Define.ROUTE.CHIEF;
            EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("wbgamerecord", "wbgamerecord-ch");
            EnvironmentConfig.HISTORY_URL = EnvironmentConfig.HISTORY_URL.replace("wbgamerecord", "wbgamerecord-ch");
            EnvironmentConfig.BACKPACK_URL = EnvironmentConfig.BACKPACK_URL.replace("wbgamerecord", "wbgamerecord-ch");
            EnvironmentConfig.WEB_URL = EnvironmentConfig.WEB_URL.replace("wbgamerecord", "wbgamerecord-ch");
            EnvironmentConfig.MEMBER_URL = EnvironmentConfig.MEMBER_URL.replace("wbgamerecord", "wbgamerecord-ch");
            EnvironmentConfig.ACTION_URL = EnvironmentConfig.ACTION_URL.replace("wbgamerecord", "wbgamerecord-ch");
            EnvironmentConfig.PROMOTE_ACTION_URL = EnvironmentConfig.PROMOTE_ACTION_URL.replace("wbgamerecord", "wbgamerecord-ch");
            EnvironmentConfig.PROMOTE_URL = EnvironmentConfig.PROMOTE_URL.replace("wbgamerecord", "wbgamerecord-ch"); // EnvironmentConfig.WEB_TEST_URL = EnvironmentConfig.WEB_TEST_URL.replace( "wbgamerecord", "wbgamerecord-ch" );
          }

          var platform = (Tools.GetLinkParameterByName("domain_platform") || Tools.GetLinkParameterByName("gs") || "gnidnawcs").split("").reverse().join("");
          var webD = "";
          var device = "";
          var posthost = "";

          if (sys.isNative) {
            var url = AppManager.GetUrl();
            webD = url.split(".")[1];
            posthost = url.split("/")[2];
            device = "&device=mobileapp&zoomstyle=app&posthost=" + posthost + "&";
          } else if (AppManager.LobbyData) {
            var _url = AppManager.GetUrl();

            webD = _url.split(".")[1];
            posthost = _url.split("/")[2];
            device = "&device=webapp&zoomstyle=webapp&posthost=" + posthost + "&";
          } else {
            device = "&posthost=" + location.host + "&";
            webD = location.host.split(".")[1];
          }

          if (AppManager.LobbyData && AppManager.LobbyData.isHideMember) {
            device += "&gp=true";
          }

          if (env == Define.EVN.AUTO && "true" == (Tools.GetLinkParameterByName("iu") || "false").toLocaleLowerCase()) {
            env = Define.EVN.UAT;
          }

          switch (env) {
            case Define.EVN.TEST:
              EnvironmentConfig.WEBAPI_URL = EnvironmentConfig.TEST_PATH.WEBAPI_URL;
              EnvironmentConfig.GAME_SERVER_URL = EnvironmentConfig.TEST_PATH.GAME_SERVER_URL;
              EnvironmentConfig.PHASE_URL = EnvironmentConfig.TEST_PATH.PHASE_URL;
              EnvironmentConfig.VERIFY_URL = EnvironmentConfig.TEST_PATH.VERIFY_URL;
              EnvironmentConfig.CLICK_URL = EnvironmentConfig.TEST_PATH.CLICK_URL;
              EnvironmentConfig.MAIL_URL = EnvironmentConfig.TEST_PATH.MAIL_URL;
              EnvironmentConfig.ERROR_URL = EnvironmentConfig.TEST_PATH.ERROR_URL;
              EnvironmentConfig.RANKING_URL = EnvironmentConfig.TEST_PATH.RANKING_URL;
              EnvironmentConfig.RANKING_URL2 = EnvironmentConfig.TEST_PATH.RANKING_URL2;
              EnvironmentConfig.SUBAGENTSERVICE_URL = EnvironmentConfig.TEST_PATH.SUBAGENTSERVICE_URL;
              EnvironmentConfig.NOTIFY_URL = EnvironmentConfig.TEST_PATH.NOTIFY_URL;
              EnvironmentConfig.RATIO_URL = EnvironmentConfig.TEST_PATH.RATIO_URL;

              if (webname) {
                EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{{webName}}", webname);
              }

              EnvironmentConfig.HISTORY_URL = EnvironmentConfig.TEST_PATH.HISTORY_URL;
              EnvironmentConfig.BACKPACK_URL = EnvironmentConfig.TEST_PATH.BACKPACK_URL;
              EnvironmentConfig.WEB_URL = EnvironmentConfig.TEST_PATH.WEB_URL;
              EnvironmentConfig.MEMBER_URL = EnvironmentConfig.TEST_PATH.MEMBER_URL;
              EnvironmentConfig.SOCKET_URL = EnvironmentConfig.TEST_PATH.SOCKET_URL;
              EnvironmentConfig.SOCKET_URL2 = EnvironmentConfig.TEST_PATH.SOCKET_URL2;
              EnvironmentConfig.PROMOTE_ACTION_URL = EnvironmentConfig.TEST_PATH.ACTION_URL; // EnvironmentConfig.WEB_TEST_URL = EnvironmentConfig.TEST_PATH.WEB_TEST_URL;

              break;

            case Define.EVN.NEW_TEST:
              if (webD == null || webD == undefined) {
                webD = "krowonimod".split("").reverse().join("");
              }

              EnvironmentConfig.WEBAPI_URL = EnvironmentConfig.WEBAPI_URL.replace("{{domain}}", realBe.replace("{{uat}}", "test-").replace("{{a}}", ""));
              EnvironmentConfig.GAME_SERVER_URL = EnvironmentConfig.GAME_SERVER_URL.replace("{{domain}}", realGSUrl.replace("{{uat}}", "test-"));
              EnvironmentConfig.SOCKET_URL = EnvironmentConfig.SOCKET_URL.replace("{{domain}}", realGSUrl.replace("{{uat}}", "test-"));
              EnvironmentConfig.SOCKET_URL2 = EnvironmentConfig.SOCKET_URL2.replace("{{domain}}", realGSUrl.replace("{{uat}}", "test-")); //service

              EnvironmentConfig.PHASE_URL = EnvironmentConfig.PHASE_URL.replace("{{domain}}", platform);
              EnvironmentConfig.VERIFY_URL = EnvironmentConfig.VERIFY_URL.replace("{{domain}}", platform);
              EnvironmentConfig.CLICK_URL = EnvironmentConfig.CLICK_URL.replace("{{domain}}", platform);
              EnvironmentConfig.MAIL_URL = EnvironmentConfig.MAIL_URL.replace("{{domain}}", platform);
              EnvironmentConfig.ERROR_URL = EnvironmentConfig.ERROR_URL.replace("{{domain}}", platform);
              EnvironmentConfig.RANKING_URL = EnvironmentConfig.RANKING_URL.replace("{{domain}}", platform);
              EnvironmentConfig.RANKING_URL2 = EnvironmentConfig.RANKING_URL2.replace("{{domain}}", platform);
              EnvironmentConfig.SUBAGENTSERVICE_URL = EnvironmentConfig.SUBAGENTSERVICE_URL.replace("{{domain}}", platform);
              EnvironmentConfig.NOTIFY_URL = EnvironmentConfig.NOTIFY_URL.replace("{{domain}}", platform);
              EnvironmentConfig.SERVICE_URL = EnvironmentConfig.SERVICE_URL.replace("{{domain}}", platform); //web

              EnvironmentConfig.CLOSE_URL = EnvironmentConfig.CLOSE_URL.replace("{{uat}}", "test-");
              EnvironmentConfig.CLOSE_URL = EnvironmentConfig.CLOSE_URL.replace("{{domain}}", webD);
              EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{{uat}}", "test-");
              EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{{domain}}", webD);

              if (webname) {
                EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{{webName}}", webname);
              }

              EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{device}", device);
              EnvironmentConfig.HISTORY_URL = EnvironmentConfig.HISTORY_URL.replace("{{domain}}", webD);
              EnvironmentConfig.HISTORY_URL = EnvironmentConfig.HISTORY_URL.replace("{{uat}}", "test-");
              EnvironmentConfig.HISTORY_URL = EnvironmentConfig.HISTORY_URL.replace("{device}", device);
              EnvironmentConfig.COLLECT_URL = EnvironmentConfig.COLLECT_URL.replace("{{domain}}", webD);
              EnvironmentConfig.COLLECT_URL = EnvironmentConfig.COLLECT_URL.replace("{{uat}}", "test-");
              EnvironmentConfig.COLLECT_URL = EnvironmentConfig.COLLECT_URL.replace("{device}", device);
              EnvironmentConfig.BACKPACK_URL = EnvironmentConfig.BACKPACK_URL.replace("{{domain}}", webD);
              EnvironmentConfig.BACKPACK_URL = EnvironmentConfig.BACKPACK_URL.replace("{{uat}}", "test-");
              EnvironmentConfig.BACKPACK_URL = EnvironmentConfig.BACKPACK_URL.replace("{device}", device);
              EnvironmentConfig.MEMBER_URL = EnvironmentConfig.MEMBER_URL.replace("{{domain}}", webD);
              EnvironmentConfig.MEMBER_URL = EnvironmentConfig.MEMBER_URL.replace("{{uat}}", "test-");
              EnvironmentConfig.MEMBER_URL = EnvironmentConfig.MEMBER_URL.replace("{device}", device);
              EnvironmentConfig.ACTION_URL = EnvironmentConfig.ACTION_URL.replace("{{domain}}", webD);
              EnvironmentConfig.ACTION_URL = EnvironmentConfig.ACTION_URL.replace("{{uat}}", "test-");
              EnvironmentConfig.PROMOTE_ACTION_URL = EnvironmentConfig.PROMOTE_ACTION_URL.replace("{{domain}}", webD);
              EnvironmentConfig.PROMOTE_ACTION_URL = EnvironmentConfig.PROMOTE_ACTION_URL.replace("{{uat}}", "test-");
              EnvironmentConfig.PROMOTE_URL = EnvironmentConfig.PROMOTE_URL.replace("{{domain}}", webD);
              EnvironmentConfig.PROMOTE_URL = EnvironmentConfig.PROMOTE_URL.replace("{{uat}}", "test-"); // EnvironmentConfig.WEB_TEST_URL = EnvironmentConfig.WEB_TEST_URL.replace( "{{domain}}", webD );
              // EnvironmentConfig.WEB_TEST_URL = EnvironmentConfig.WEB_TEST_URL.replace( "{{uat}}", "test-" );

              EnvironmentConfig.WEB_URL = EnvironmentConfig.WEB_URL.replace("{{domain}}", webD);
              EnvironmentConfig.WEB_URL = EnvironmentConfig.WEB_URL.replace("{{uat}}", "test-");
              EnvironmentConfig.WEB_URL = EnvironmentConfig.WEB_URL.replace("{device}", device);
              break;

            case Define.EVN.UAT:
              if (webD == null || webD == undefined) {
                webD = "krowonimod".split("").reverse().join("");
              }

              EnvironmentConfig.WEBAPI_URL = EnvironmentConfig.WEBAPI_URL.replace("{{domain}}", realBe.replace("{{uat}}", "uat-").replace("{{a}}", "-a"));
              EnvironmentConfig.GAME_SERVER_URL = EnvironmentConfig.GAME_SERVER_URL.replace("{{domain}}", realGSUrl.replace("{{uat}}", "uat-"));
              EnvironmentConfig.SOCKET_URL = EnvironmentConfig.SOCKET_URL.replace("{{domain}}", realGSUrl.replace("{{uat}}", "uat-"));
              EnvironmentConfig.SOCKET_URL2 = EnvironmentConfig.SOCKET_URL2.replace("{{domain}}", realGSUrl.replace("{{uat}}", "uat-")); //service

              EnvironmentConfig.PHASE_URL = EnvironmentConfig.PHASE_URL.replace("{{domain}}", platform);
              EnvironmentConfig.VERIFY_URL = EnvironmentConfig.VERIFY_URL.replace("{{domain}}", platform);
              EnvironmentConfig.CLICK_URL = EnvironmentConfig.CLICK_URL.replace("{{domain}}", platform);
              EnvironmentConfig.MAIL_URL = EnvironmentConfig.MAIL_URL.replace("{{domain}}", platform);
              EnvironmentConfig.ERROR_URL = EnvironmentConfig.ERROR_URL.replace("{{domain}}", platform);
              EnvironmentConfig.RANKING_URL = EnvironmentConfig.RANKING_URL.replace("{{domain}}", platform);
              EnvironmentConfig.RANKING_URL2 = EnvironmentConfig.RANKING_URL2.replace("{{domain}}", platform);
              EnvironmentConfig.SUBAGENTSERVICE_URL = EnvironmentConfig.SUBAGENTSERVICE_URL.replace("{{domain}}", platform);
              EnvironmentConfig.NOTIFY_URL = EnvironmentConfig.NOTIFY_URL.replace("{{domain}}", platform);
              EnvironmentConfig.SERVICE_URL = EnvironmentConfig.SERVICE_URL.replace("{{domain}}", platform); //web

              if (isGLIGame && !isTaDa) {
                EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{{uat}}", "testgli-");
                platform = platform.replace("slot-demo.", "");
                platform = platform.replace(".com", "");
                EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{{domain}}", platform);
              } else {
                if (isTaDa && isDemo) {
                  EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{{uat}}", "uattada-");
                } else {
                  EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{{uat}}", "uat-");
                }

                EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{{domain}}", webD);
              }

              EnvironmentConfig.CLOSE_URL = EnvironmentConfig.CLOSE_URL.replace("{{uat}}", "uat-");
              EnvironmentConfig.CLOSE_URL = EnvironmentConfig.CLOSE_URL.replace("{{domain}}", webD);

              if (webname) {
                EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{{webName}}", webname);
              }

              EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{device}", device);
              EnvironmentConfig.HISTORY_URL = EnvironmentConfig.HISTORY_URL.replace("{{domain}}", webD);
              EnvironmentConfig.HISTORY_URL = EnvironmentConfig.HISTORY_URL.replace("{{uat}}", "uat-");
              EnvironmentConfig.HISTORY_URL = EnvironmentConfig.HISTORY_URL.replace("{device}", device);
              EnvironmentConfig.COLLECT_URL = EnvironmentConfig.COLLECT_URL.replace("{{domain}}", webD);
              EnvironmentConfig.COLLECT_URL = EnvironmentConfig.COLLECT_URL.replace("{{uat}}", "uat-");
              EnvironmentConfig.COLLECT_URL = EnvironmentConfig.COLLECT_URL.replace("{device}", device);
              EnvironmentConfig.BACKPACK_URL = EnvironmentConfig.BACKPACK_URL.replace("{{domain}}", webD);
              EnvironmentConfig.BACKPACK_URL = EnvironmentConfig.BACKPACK_URL.replace("{{uat}}", "uat-");
              EnvironmentConfig.BACKPACK_URL = EnvironmentConfig.BACKPACK_URL.replace("{device}", device);
              EnvironmentConfig.MEMBER_URL = EnvironmentConfig.MEMBER_URL.replace("{{domain}}", webD);
              EnvironmentConfig.MEMBER_URL = EnvironmentConfig.MEMBER_URL.replace("{{uat}}", "uat-");
              EnvironmentConfig.MEMBER_URL = EnvironmentConfig.MEMBER_URL.replace("{device}", device);
              EnvironmentConfig.ACTION_URL = EnvironmentConfig.ACTION_URL.replace("{{domain}}", webD);
              EnvironmentConfig.ACTION_URL = EnvironmentConfig.ACTION_URL.replace("{{uat}}", "uat-");
              EnvironmentConfig.PROMOTE_ACTION_URL = EnvironmentConfig.PROMOTE_ACTION_URL.replace("{{domain}}", webD);
              EnvironmentConfig.PROMOTE_ACTION_URL = EnvironmentConfig.PROMOTE_ACTION_URL.replace("{{uat}}", "uat-");
              EnvironmentConfig.PROMOTE_URL = EnvironmentConfig.PROMOTE_URL.replace("{{domain}}", webD);
              EnvironmentConfig.PROMOTE_URL = EnvironmentConfig.PROMOTE_URL.replace("{{uat}}", "uat-"); // EnvironmentConfig.WEB_TEST_URL = EnvironmentConfig.WEB_TEST_URL.replace( "{{domain}}", webD );
              // EnvironmentConfig.WEB_TEST_URL = EnvironmentConfig.WEB_TEST_URL.replace( "{{uat}}", "uat-" );

              EnvironmentConfig.WEB_URL = EnvironmentConfig.WEB_URL.replace("{{domain}}", webD);
              EnvironmentConfig.WEB_URL = EnvironmentConfig.WEB_URL.replace("{{uat}}", "uat-");
              EnvironmentConfig.WEB_URL = EnvironmentConfig.WEB_URL.replace("{device}", device);
              break;

            default:
              EnvironmentConfig.WEBAPI_URL = EnvironmentConfig.WEBAPI_URL.replace("{{domain}}", realBe.replace("{{uat}}", "").replace("{{a}}", "-a"));
              EnvironmentConfig.GAME_SERVER_URL = EnvironmentConfig.GAME_SERVER_URL.replace("{{domain}}", realGSUrl.replace("{{uat}}", ""));
              EnvironmentConfig.SOCKET_URL = EnvironmentConfig.SOCKET_URL.replace("{{domain}}", realGSUrl.replace("{{uat}}", ""));
              EnvironmentConfig.SOCKET_URL2 = EnvironmentConfig.SOCKET_URL2.replace("{{domain}}", realGSUrl.replace("{{uat}}", "")); //service

              EnvironmentConfig.PHASE_URL = EnvironmentConfig.PHASE_URL.replace("{{domain}}", platform);
              EnvironmentConfig.VERIFY_URL = EnvironmentConfig.VERIFY_URL.replace("{{domain}}", platform);
              EnvironmentConfig.CLICK_URL = EnvironmentConfig.CLICK_URL.replace("{{domain}}", platform);
              EnvironmentConfig.MAIL_URL = EnvironmentConfig.MAIL_URL.replace("{{domain}}", platform);
              EnvironmentConfig.ERROR_URL = EnvironmentConfig.ERROR_URL.replace("{{domain}}", platform);
              EnvironmentConfig.RANKING_URL = EnvironmentConfig.RANKING_URL.replace("{{domain}}", platform);
              EnvironmentConfig.RANKING_URL2 = EnvironmentConfig.RANKING_URL2.replace("{{domain}}", platform);
              EnvironmentConfig.SUBAGENTSERVICE_URL = EnvironmentConfig.SUBAGENTSERVICE_URL.replace("{{domain}}", platform);
              EnvironmentConfig.NOTIFY_URL = EnvironmentConfig.NOTIFY_URL.replace("{{domain}}", platform);
              EnvironmentConfig.SERVICE_URL = EnvironmentConfig.SERVICE_URL.replace("{{domain}}", platform); //web

              EnvironmentConfig.CLOSE_URL = EnvironmentConfig.CLOSE_URL.replace("{{uat}}", "");
              EnvironmentConfig.CLOSE_URL = EnvironmentConfig.CLOSE_URL.replace("{{domain}}", webD);
              EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{{uat}}", "");
              EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{{domain}}", webD);

              if (webname) {
                EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{{webName}}", webname);
              }

              EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{device}", device);
              EnvironmentConfig.HISTORY_URL = EnvironmentConfig.HISTORY_URL.replace("{{domain}}", webD);
              EnvironmentConfig.HISTORY_URL = EnvironmentConfig.HISTORY_URL.replace("{{uat}}", "");
              EnvironmentConfig.HISTORY_URL = EnvironmentConfig.HISTORY_URL.replace("{device}", device);
              EnvironmentConfig.COLLECT_URL = EnvironmentConfig.COLLECT_URL.replace("{{domain}}", webD);
              EnvironmentConfig.COLLECT_URL = EnvironmentConfig.COLLECT_URL.replace("{{uat}}", "");
              EnvironmentConfig.COLLECT_URL = EnvironmentConfig.COLLECT_URL.replace("{device}", device);
              EnvironmentConfig.BACKPACK_URL = EnvironmentConfig.BACKPACK_URL.replace("{{domain}}", webD);
              EnvironmentConfig.BACKPACK_URL = EnvironmentConfig.BACKPACK_URL.replace("{{uat}}", "");
              EnvironmentConfig.BACKPACK_URL = EnvironmentConfig.BACKPACK_URL.replace("{device}", device);
              EnvironmentConfig.MEMBER_URL = EnvironmentConfig.MEMBER_URL.replace("{{domain}}", webD);
              EnvironmentConfig.MEMBER_URL = EnvironmentConfig.MEMBER_URL.replace("{{uat}}", "");
              EnvironmentConfig.MEMBER_URL = EnvironmentConfig.MEMBER_URL.replace("{device}", device);
              EnvironmentConfig.ACTION_URL = EnvironmentConfig.ACTION_URL.replace("{{domain}}", webD);
              EnvironmentConfig.ACTION_URL = EnvironmentConfig.ACTION_URL.replace("{{uat}}", "");
              EnvironmentConfig.PROMOTE_ACTION_URL = EnvironmentConfig.PROMOTE_ACTION_URL.replace("{{domain}}", webD);
              EnvironmentConfig.PROMOTE_ACTION_URL = EnvironmentConfig.PROMOTE_ACTION_URL.replace("{{uat}}", "");
              EnvironmentConfig.PROMOTE_URL = EnvironmentConfig.PROMOTE_URL.replace("{{domain}}", webD);
              EnvironmentConfig.PROMOTE_URL = EnvironmentConfig.PROMOTE_URL.replace("{{uat}}", ""); // EnvironmentConfig.WEB_TEST_URL = EnvironmentConfig.WEB_TEST_URL.replace( "{{domain}}", webD );
              // EnvironmentConfig.WEB_TEST_URL = EnvironmentConfig.WEB_TEST_URL.replace( "{{uat}}", "" );

              EnvironmentConfig.WEB_URL = EnvironmentConfig.WEB_URL.replace("{{domain}}", webD);
              EnvironmentConfig.WEB_URL = EnvironmentConfig.WEB_URL.replace("{{uat}}", "");
              EnvironmentConfig.WEB_URL = EnvironmentConfig.WEB_URL.replace("{device}", device);
              break;
          }

          EnvironmentConfig.CURR_ENV = env;
        };

        GameAppA.ChangeBaseConfig = function ChangeBaseConfig() {
          return;
        } // 自定義開發端帳號密碼產生方式
        ;

        GameAppA.SetALoginDataFunc = function SetALoginDataFunc(func) {
          this.GetALoginData = func;
        } // 開發端帳號密碼登入流程是否需要連上Socket
        ;

        GameAppA.OnExit = function OnExit() {
          this.m_touchTime = null;
          this.m_route = Define.ROUTE.NCR;
          this.m_changeCbs = [];
          this.GetALoginData = null;
          this.m_ALoginNeedSocket = false;
        };

        function GameAppA(gameid, connectSettingCB, fid, cb, loginCb, failParamsCb, loginIP, loginFunc, loginBody) {
          var _this;

          if (loginIP === void 0) {
            loginIP = null;
          }

          if (loginFunc === void 0) {
            loginFunc = null;
          }

          if (loginBody === void 0) {
            loginBody = null;
          }

          _this = _GameAppBaseView.call(this) || this;
          _this.CHECK_KEEPLIVE_COUNT = 7;
          _this.m_atoken = undefined;
          _this.m_aid = undefined;
          _this.m_tmpLoginCB = void 0;
          _this.m_tmpLoginIP = void 0;
          _this.m_tmpConSettingCB = void 0;
          _this.m_keepAliveCount = 0;
          _this.m_loginFailParamsCb = void 0;
          _this.m_gameid = Define.GAME_ID.DEFAULT;
          _this.m_loginFunc = void 0;
          _this.m_failCount = 0;
          _this.m_freeSpinBet = 0;
          _this.m_tmpLoginCB = cb;
          _this.m_tmpLoginIP = loginIP;
          _this.m_tmpConSettingCB = connectSettingCB;
          _this.m_loginFailParamsCb = failParamsCb;
          _this.m_gameid = gameid;
          _this.m_loginFunc = loginFunc;
          _this.m_loginBody = loginBody;
          Define.NOW_GAME_ID = gameid.toString();
          Define.FormBtnClickParams = ConnectionManager.FormBtnClickParams;
          Define.SendBtnClickEvent = ConnectionManager.getInstance().SendBtnClickEvent.bind(ConnectionManager.getInstance());

          if (loginCb) {
            loginCb();
          }

          if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST && _this.IgnoreGameID()) {
            return _assertThisInitialized(_this);
          }

          if (fid != undefined && fid != "") {
            _this.ASSOLogin(fid);
          } else if (EnvironmentConfig.CURR_ENV != Define.EVN.DEFAULT) {
            _this.ALogin();
          }

          return _this;
        }

        var _proto = GameAppA.prototype;

        _proto.ASSOLogin = function ASSOLogin(key) {
          var _this2 = this;

          var qParams = {};
          qParams["key"] = key;
          qParams["lang"] = Tools.ConvertLanguageToFull(LocaleStringManager.CurrLang);
          this.ReqA("sso-login.api", qParams).then(function (res) {
            _this2.OnRecvSSOLogin(res);
          })["catch"](function (err) {
            if (_this2.m_failCount < 3) {
              _this2.m_failCount++;
              GameAppA.ChangeBaseConfig();

              _this2.ASSOLogin(key);
            } else {
              var errorCode = Define.ErrorStatus.PlatFormRetry;
              AppManager.LoadingComplete();
              MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_LOGIN_FAIL, null, Tools.CloseGameTab, Tools.GetErrorCode(Define.ErrorStatus.PlatForm, errorCode, err));

              _this2.m_loginFailParamsCb(Define.PHASE_RESULT.INVALID_SSOKEY);
            }
          });
        };

        _proto.OnRecvSSOLogin = function OnRecvSSOLogin(res) {
          var _this3 = this;

          if (res["response"] != undefined && res["response"]["error"] == 0) {
            Define.LINE_CODE = res["linecode"];
            Define.HOME_URL = res["homeUrl"];
            this.m_atoken = res["token"];
            Define.TOKEN = res["token"];
            Define.PLATFORM_VER = res["platformVersion"];

            if (Boolean(Tools.GetLinkParameterByName("lobbyWebview")) == true) {
              document.location.href = 'lobby://send?token=' + this.m_atoken;
            }

            var profile = res["profile"];
            var metaData = profile.meta;
            Define.SUB_AGENT_CODE = profile.subAgentCode > -1 ? profile.subAgentCode : -1;
            Define.BET_LEVEL = profile.betLevel;
            Define.IS_LOBBY_OPEN = profile.isLobbyOpen;
            Define.Platform = profile.platform;
            Define.LobbyMode = profile.lobbyMode;
            Define.IsGiftCodeOpen = profile.isGiftCodeOpen;
            this.SetWebUrlSAC();

            if (profile.freeSpinBetValue) {
              this.m_freeSpinBet = profile.freeSpinBetValue;
            }

            if (profile.switchOffs) {
              Define.SetSwitchOffKeys(profile.switchOffs);
            }

            if (profile.clientMode) {
              this.SetClientMode(profile.clientMode);
            }

            this.m_aid = profile.id;
            Define.AID = profile.aid.toString();
            var transactionMode = profile.transactionMode;

            if (transactionMode == Define.TransactionMode.SingleSync) {
              Define.IsSyncFromWS = true;
            }

            this.OnLoginGAPSuccess(res);
            this.m_tmpConSettingCB();
            LifeSocket.GetInstance().SetInfo(this.m_aid, profile.aid, this.m_gameid.toString(), this.m_atoken, profile.apiId, function () {
              if (_this3.m_loginFunc) {
                _this3.m_loginFunc();
              } else {
                // 如果沒有自訂game server登入方式使用內建的
                _GameAppBaseView.prototype.Login.call(_this3, _this3.m_aid, _this3.m_tmpLoginCB, _this3.m_tmpLoginIP);
              }
            });
            LifeSocket.GetInstance().ConnectServer(); // 平台需求 2020/11/19

            if (Tools.Line !== Define.LineSetting.bc) {
              ConnectionManager.getInstance().SendSubAgentService(ConnectionManager.FormSubAgentServiceParams(profile.aid, profile.apiId, Number(this.m_gameid), this.m_userInfo.siteid, metaData.agentAccount, Define.LINE_CODE));
            }

            Define.LifeSocketReqUrl = function (gameId, eventNo) {
              LifeSocket.GetInstance().ReqUrl(gameId, eventNo);
            };

            Tools.SetJiliProgressBar(92);
          } else if (res["response"] != undefined) {
            var _reason = Define.PHASE_RESULT.UNKNOWN;
            var msgKey = Define.StringKey.MSGBOX_LOGIN_FAIL;

            switch (res["response"]["error"]) {
              //SSOKEY過期 (包含錯誤、逾期...等狀況)
              case Define.GAP_RET.ERROR_GAP_INVALID_SSOKEY:
                _reason = Define.PHASE_RESULT.INVALID_SSOKEY;
                break;
              //SSOKEY過期 (包含錯誤、逾期...等狀況)

              case Define.GAP_RET.ERROR_GAP_NOT_SERVICE:
                msgKey = Define.StringKey.MSGBOX_NOT_SERVICE;
                _reason = Define.PHASE_RESULT.UNKNOWN;
                break;
              //遊戲維護中

              case Define.GAP_RET.ERROR_GAP_SERVER_MAINTAIN:
                _reason = Define.PHASE_RESULT.SERVER_MAINTAIN;
                break;
              //未知錯誤

              default:
                _reason = Define.PHASE_RESULT.UNKNOWN;
            }

            AppManager.LoadingComplete();
            MsgBox.getInstance().ShowMessageBox(msgKey, null, Tools.CloseGameTab, Tools.GetErrorCode(Define.ErrorStatus.PlatForm, res["response"]["error"], res.status));
            this.m_loginFailParamsCb(_reason);
          }
        };

        _proto.SetClientMode = function SetClientMode(setting) {
          Define.HAS_CLIENTMODE = true;

          for (var i = 0; i < setting.length; i++) {
            if (setting[i].value) {
              var eventId = setting[i].eventId;

              switch (eventId) {
                case Define.CLIENTMODE_ID.MAX_ROUND:
                  Define.AUTOPLAY_MAX_ROUND = setting[i].value[0];
                  break;

                case Define.CLIENTMODE_ID.DELAY_TIME:
                  Define.DEALY_TIME = setting[i].value[0] * 1000;
                  break;

                case Define.CLIENTMODE_ID.ROUND_BTN:
                  Define.AUTOPLAY_ROUND_BTN = setting[i].value;
                  break;

                case Define.CLIENTMODE_ID.FEATURE_TIMES:
                  Define.FEATURE_TIMES = setting[i].value[0];
                  break;

                case Define.CLIENTMODE_ID.DEPOSIT_URL:
                  if (Tools.IsNativeWebView()) {
                    Define.DEPOSIT_URL = setting[i].value[1];
                  } else {
                    Define.DEPOSIT_URL = setting[i].value[0];
                  } // console.error( 'CLIENTMODE_ID.DEPOSIT_URL', Tools.IsNativeWebView(), Define.DEPOSIT_URL )


                  break;

                case Define.CLIENTMODE_ID.REALITY_CHECK_INTERVAL:
                  Define.REALITY_CHECK_INTERVAL = setting[i].value[0];
                  break;

                case Define.CLIENTMODE_ID.SYMBOL_STYLE:
                  styleChangeManager.SetStyle(setting[i].value[0]);
                  break;
              }
            }
          }
        };

        _proto.SetWebUrlSAC = function SetWebUrlSAC() {
          var sac = Define.SUB_AGENT_CODE.toString();
          EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{sac}", sac);
          EnvironmentConfig.BC_RATIO_URL = EnvironmentConfig.BC_RATIO_URL.replace("{sac}", sac);
          EnvironmentConfig.HISTORY_URL = EnvironmentConfig.HISTORY_URL.replace("{sac}", sac);
          EnvironmentConfig.COLLECT_URL = EnvironmentConfig.COLLECT_URL.replace("{sac}", sac);
          EnvironmentConfig.BC_HISTORY_URL = EnvironmentConfig.BC_HISTORY_URL.replace("{sac}", sac);
          EnvironmentConfig.ACTION_URL = EnvironmentConfig.ACTION_URL.replace("{sac}", sac);
          EnvironmentConfig.PROMOTE_ACTION_URL = EnvironmentConfig.PROMOTE_ACTION_URL.replace("{sac}", sac);
          EnvironmentConfig.PROMOTE_URL = EnvironmentConfig.PROMOTE_URL.replace("{sac}", sac);
          EnvironmentConfig.WEB_URL = EnvironmentConfig.WEB_URL.replace("{sac}", sac);
        };

        _proto.ALogin = function ALogin() {
          var _this4 = this;

          {
            var qParams = {};
            qParams['gameId'] = this.m_gameid;

            if (GameAppA.GetALoginData) {
              var accountData = GameAppA.GetALoginData();
              qParams["account"] = accountData.account;
              qParams["password"] = accountData.password;
            } else {
              qParams["account"] = "GCtest" + Math.floor(Math.random() * 1000) + "@igs.com.tw";
              qParams["password"] = "gc12345";
            }

            this.ReqA("login.api", qParams).then(function (res) {
              if (res["response"] != undefined && res["response"]["error"] == 0) {
                _this4.m_atoken = res["token"];
                _this4.m_aid = res["profile"]["id"];

                _this4.OnLoginGAPSuccess(res);

                _this4.m_tmpConSettingCB();

                var login = function login() {
                  if (_this4.m_loginFunc) {
                    _this4.m_loginFunc();
                  } else {
                    // 如果沒有自訂game server登入方式使用內建的
                    _GameAppBaseView.prototype.Login.call(_this4, _this4.m_aid, _this4.m_tmpLoginCB, _this4.m_tmpLoginIP);
                  }
                }; // 確認是否要連socket再進行登入


                if (GameAppA.m_ALoginNeedSocket) {
                  LifeSocket.GetInstance().SetInfo(_this4.m_aid, res["profile"]["aid"], _this4.m_gameid.toString(), _this4.m_atoken, res["profile"]["apiId"], function () {
                    login();
                  });
                  LifeSocket.GetInstance().ConnectServer();
                } else {
                  login();
                }
              } else if (res["response"] != undefined) {
                MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_LOGIN_FAIL, null, Tools.CloseGameTab, Tools.GetErrorCode(Define.ErrorStatus.PlatForm, res["response"]["error"]));

                _this4.m_loginFailParamsCb(Define.PHASE_RESULT.UNKNOWN);
              }
            })["catch"](function (err) {
              MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_LOGIN_FAIL, null, Tools.CloseGameTab, Tools.GetErrorCode(Define.ErrorStatus.PlatForm, err));

              _this4.m_loginFailParamsCb(Define.PHASE_RESULT.INVALID_SSOKEY);
            });
          }
        };

        _proto.AKeepAlive = function AKeepAlive() {
          var _this5 = this;

          {
            var qParams = {};
            qParams["token"] = this.m_atoken;
            qParams["gameId"] = this.m_gameid;
            this.ReqA("user/keep-alive.api", qParams, function (res) {
              if (res["response"] != undefined && res["response"]["error"] == 0) {
                _this5.m_keepAliveCount = 0;
              } else if (res["response"] != undefined) {
                _this5.m_keepAliveCount++;

                if (_this5.m_keepAliveCount >= _this5.CHECK_KEEPLIVE_COUNT) {
                  MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_TIME_OUT, null, Tools.CloseGameTab, Tools.GetErrorCode(Define.ErrorStatus.PlatForm, res["response"]["error"]));
                  Define.ERROR_OCCUR = true;
                }
              }
            }, function (err) {
              _this5.m_keepAliveCount++;

              if (_this5.m_keepAliveCount >= _this5.CHECK_KEEPLIVE_COUNT) {
                MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_TIME_OUT, null, Tools.CloseGameTab, Tools.GetErrorCode(Define.ErrorStatus.PlatForm, err));
                Define.ERROR_OCCUR = true;
              }
            });
          }
        };

        _proto.ReqA = function ReqA(funUrl, qParams, cb, errcb) {
          return Request('post', EnvironmentConfig.WEBAPI_URL + funUrl, qParams, null, DEFAULT_REQUEST_OPTIONS).then(function (res) {
            if (res.ok) {
              var responseJSON = JSON.parse(res.data);
              return responseJSON;
            } else {
              throw res.status;
            }
          })["catch"](function (err) {
            throw err;
          });
        };

        _proto.IgnoreGameID = function IgnoreGameID() {
          for (var i = 0; i < ignoreGameID.length; i++) {
            if (ignoreGameID[i] === this.m_gameid) {
              return false;
            }
          }

          return true;
        };

        _proto.IsLoaded = function IsLoaded() {
          return _GameAppBaseView.prototype.IsLoaded.call(this) && this.m_atoken != undefined;
        };

        _proto.IsLoadedNotToken = function IsLoadedNotToken() {
          return _GameAppBaseView.prototype.IsLoaded.call(this);
        };

        _proto.GetAToken = function GetAToken() {
          return this.m_atoken;
        }
        /**使用者的Account ID，ex:123
         */
        ;

        _proto.GetAID = function GetAID() {
          if (this.m_userInfo) {
            return this.m_userInfo.aid.toString();
          }

          return null;
        }
        /**使用者ID，ex:4fda5b3f-18c4-5b24-bd91-0785c601317d
         */
        ;

        _proto.GetUID = function GetUID() {
          if (this.m_userInfo) {
            return this.m_userInfo.uid;
          }

          return null;
        }
        /**使用者ApiID，ex:2
         */
        ;

        _proto.GetApiID = function GetApiID() {
          if (this.m_userInfo) {
            return this.m_userInfo.apiid.toString();
          }

          return null;
        }
        /**使用者Account，ex:igs_su@api-6.game
         */
        ;

        _proto.GetAccount = function GetAccount() {
          if (this.m_userInfo) {
            return this.m_userInfo.account;
          }

          return null;
        };

        _proto.GetNickName = function GetNickName() {
          if (this.m_userInfo) {
            return this.m_userInfo.nickName;
          }

          return null;
        };

        _proto.GetGameID = function GetGameID() {
          return this.m_gameid;
        };

        _proto.GetSiteID = function GetSiteID() {
          if (this.m_userInfo) {
            return this.m_userInfo.siteid;
          }

          return null;
        };

        _proto.Login = function Login(aid) {
          log("Login", aid);

          if (aid) {
            _GameAppBaseView.prototype.Login.call(this, aid, this.m_tmpLoginCB, this.m_tmpLoginIP);
          } else {
            _GameAppBaseView.prototype.Login.call(this, this.m_aid, this.m_tmpLoginCB, this.m_tmpLoginIP);
          }
        };

        _createClass(GameAppA, [{
          key: "FreeSpinBet",
          get: function get() {
            return this.m_freeSpinBet;
          },
          set: function set(v) {
            this.m_freeSpinBet = v;
          }
        }], [{
          key: "Route",
          get: function get() {
            return this.m_route;
          }
        }, {
          key: "ALoginNeedSocket",
          set: function set(need) {
            this.m_ALoginNeedSocket = need;
          }
        }]);

        return GameAppA;
      }(GameAppBaseView));
      GameAppA.m_isSetNoMenu = false;
      GameAppA.m_touchTime = null;
      GameAppA.m_route = 1;
      GameAppA.m_changeCbs = [];
      GameAppA.GetALoginData = null;
      GameAppA.m_ALoginNeedSocket = false;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameAppBase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createClass, cclegacy;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d15178yyK9NbKsCECl160lI", "GameAppBase", undefined);

      var UserInfo = exports('UserInfo', /*#__PURE__*/function () {
        function UserInfo(uid, aid, apiid, siteid, name, nickName, coin, account, lobbyOpen, token) {
          this.m_uid = void 0;
          this.m_name = void 0;
          this.m_nickName = void 0;
          this.m_coin = void 0;
          this.m_aid = void 0;
          this.m_apiid = void 0;
          this.m_account = void 0;
          this.m_siteid = void 0;
          this.m_lobbyOpen = void 0;
          this.m_token = void 0;
          this.m_aid = aid;
          this.m_uid = uid;
          this.m_apiid = apiid;
          this.m_siteid = siteid;
          this.m_name = name;
          this.m_nickName = nickName ? nickName : "";
          this.m_coin = coin;
          this.m_token = token;
          this.m_account = account;
          this.m_lobbyOpen = lobbyOpen;
        }

        _createClass(UserInfo, [{
          key: "coin",
          get: function get() {
            return this.m_coin;
          },
          set: function set(num) {
            this.m_coin = num;
          }
        }, {
          key: "token",
          get: function get() {
            return this.m_token;
          }
        }, {
          key: "uid",
          get: function get() {
            return this.m_uid;
          }
        }, {
          key: "name",
          get: function get() {
            return this.m_name;
          }
        }, {
          key: "nickName",
          get: function get() {
            return this.m_nickName;
          }
        }, {
          key: "aid",
          get: function get() {
            return this.m_aid;
          }
        }, {
          key: "apiid",
          get: function get() {
            return this.m_apiid;
          }
        }, {
          key: "account",
          get: function get() {
            return this.m_account;
          }
        }, {
          key: "siteid",
          get: function get() {
            return this.m_siteid;
          }
        }, {
          key: "lobbyOpen",
          get: function get() {
            return this.m_lobbyOpen;
          }
        }]);

        return UserInfo;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameAppBaseView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameAppBase.ts', './Define.ts', './ConnectionManager.ts', './SoundManager.ts', './MsgBox.ts', './LoadPrefabManager.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, log, error, Node, Label, UIRenderer, Color, UITransform, UserInfo, Define, ConnectionManager, SoundManager, MsgBox, LoadPrefabManager, Tools;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      error = module.error;
      Node = module.Node;
      Label = module.Label;
      UIRenderer = module.UIRenderer;
      Color = module.Color;
      UITransform = module.UITransform;
    }, function (module) {
      UserInfo = module.UserInfo;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      ConnectionManager = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      LoadPrefabManager = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "27c00Kwt6RHQ4IrTgid8hYi", "GameAppBaseView", undefined);
      /**
       * 
       * Created by HuiRu on 2018/06/30.
       */


      var GameAppBaseView = exports('default', /*#__PURE__*/function () {
        function GameAppBaseView() {
          this.m_loginSuccess = false;
          this.m_preLoaded = false;
          this.m_commAtlas = void 0;
          this.m_commAtlas2 = void 0;
          this.m_loginBody = void 0;
          this.m_firstLogin = true;
          this.m_userInfo = void 0;
          this.PreLoad();
        }

        var _proto = GameAppBaseView.prototype;

        _proto.PreLoad = function PreLoad() {
          var _this = this;

          var onAllLoaded = function onAllLoaded() {
            _this.m_preLoaded = true;
          };

          var loadid = LoadPrefabManager.getInstance().GetManagerId(onAllLoaded);

          var onSoundCB = function onSoundCB(name) {
            if (!SoundManager.getInstance().isLoading) {
              LoadPrefabManager.getInstance().OnLoaded(loadid);
              log("SoundManager is ok");
            }

            log("SoundManager load ,", name, SoundManager.getInstance());
          };

          LoadPrefabManager.getInstance().AddLoad(loadid);
          SoundManager.getInstance().checkSoundFormat(Define.SOUND_FILE); // 檢查旗標處理OGG或MP3路徑

          SoundManager.getInstance().LoadAudioAsset(Define.SOUND_FILE, onSoundCB, Define.AudioClips);
          LoadPrefabManager.getInstance().StartLoad(loadid);
        };

        _proto.Login = function Login(fid, gapCb, loginIP) {
          var _this2 = this; // 預設的CB


          var onLoginCB = function onLoginCB(commandType, content) {
            log("GameAppBaseView Login", commandType, content);
            var ret = content["ret"];

            if (Define.GENERAL_RET.SUCCESS == ret) {
              _this2.m_loginSuccess = true;
            } else {
              _this2.OnLoginFail(ret, content);
            }

            var ack = content;

            if (typeof ack == "string") {
              ack = JSON.parse(content);
            }

            if (ack.cashFlowNotify && ack.cashFlowNotify.playerMoney && _this2.m_userInfo) {
              _this2.m_userInfo.coin = ack.cashFlowNotify.playerMoney;
            }

            if (gapCb != null) {
              gapCb(ret, content);
            }
          }; // login用的參數


          var loginBody = null;

          if (this.m_loginBody) {
            loginBody = this.m_loginBody;
          } // 如果沒設定過login的setting就設定成預設的


          if (this.m_firstLogin) {
            this.m_firstLogin = false;

            if (!ConnectionManager.getInstance().CheckSetting(Define.PROTOCOL.LOGIN)) {
              ConnectionManager.getInstance().AddSetting(Define.PROTOCOL.LOGIN, ConnectionManager.CONNECT_TYPE.TYPE_HTTP, onLoginCB, null, loginIP + "/account/Login?fid=" + fid);
            } else {
              var gameLoginCB = ConnectionManager.getInstance().GetLoginCB();

              if (gameLoginCB == undefined) {
                ConnectionManager.getInstance().SetLoginCB(onLoginCB);
              } else if (onLoginCB !== gameLoginCB) {
                var packCB = function packCB(ret, res) {
                  onLoginCB(ret, res);
                  gameLoginCB(ret, res);
                };

                ConnectionManager.getInstance().SetLoginCB(packCB);
              } // 如果抓不到loginCb就設定成預設的
              // if ( gameLoginCB == undefined )
              // {
              //     ConnectionManager.getInstance().SetLoginCB( onLoginCB );
              // }
              // else
              // {
              //     // 把gap用的cb與遊戲的cb合起來
              //     let packCB = ( ret: number, res: string ) =>
              //     {
              //         error( "packCB", gapCb )
              //         gapCb( ret, res );
              //         gameLoginCB( ret, res );
              //     }
              //     ConnectionManager.getInstance().SetLoginCB( packCB );
              // }

            }
          }

          ConnectionManager.getInstance().SendCommand(Define.PROTOCOL.LOGIN, null, null, loginBody);
        };

        _proto.OnLoginHttpSuccess = function OnLoginHttpSuccess(res) {
          log("GameAppBaseView OnLoginHttpSuccess", res);
          this.m_userInfo = new UserInfo(res["data"]["uid"], res["data"]["aid"], res["data"]["apiid"], res["data"]["siteId"], res["data"]["name"], res["data"]["nickName"], res["data"]["coin"], res["data"]["account"], res["isLobbyOpen"], res["token"]);
          ConnectionManager.getInstance().SetToken(res["token"]);
        };

        _proto.OnLoginWSSuccess = function OnLoginWSSuccess(res) {
          log("GameAppBaseView OnLoginWSSuccess", res);
          this.m_userInfo = new UserInfo(res["uid"], res["aid"], res["apiid"], res["siteId"], res["name"], res["nickName"], res["coin"], res["account"], res["isLobbyOpen"], res["token"]);
        };

        _proto.OnLoginGAPSuccess = function OnLoginGAPSuccess(res) {
          log("GameAppBaseView OnLoginGAPSuccess", res);
          this.m_userInfo = new UserInfo(res["profile"]["id"], res["profile"]["aid"], res["profile"]["apiId"], res["profile"]["siteId"], res["profile"]["nickname"], res["profile"]["newNickname"], res["profile"]["coin"], res["profile"]["account"], res["profile"]["isLobbyOpen"], res["token"]);
          ConnectionManager.getInstance().SetToken(res["token"]);
        };

        _proto.OnLoginFail = function OnLoginFail(ret, res) {
          var msgKey;
          var cb = null;

          switch (ret) {
            case Define.GENERAL_RET.ERROR_GENERAL_CHECK_ERROR:
              {
                log("Define.GENERAL_RET.ERROR_GENERAL_CHECK_ERROR");
                this.m_loginSuccess = false;
                msgKey = Define.StringKey.MSGBOX_LOGIN_FAIL;
                cb = Tools.CloseGameTab;
                break;
              }

            case Define.GENERAL_RET.ERROR_GENERAL_REPEAT_LOGIN:
              {
                log("Define.GENERAL_RET.ERROR_GENERAL_REPEAT_LOGIN");
                this.m_loginSuccess = false;
                msgKey = Define.StringKey.MSGBOX_LOGIN_DUPLICATE_LOGIN;
                cb = Tools.CloseGameTab;
                break;
              }

            case Define.GENERAL_RET.ERROR_GENERAL_NO_UID:
              {
                log("Define.GENERAL_RET.ERROR_GENERAL_NO_UID");
                msgKey = Define.StringKey.MSGBOX_LOGIN_FAIL;
                this.m_loginSuccess = false;
                cb = Tools.CloseGameTab;
                break;
              }

            case Define.GENERAL_RET.ERROR_GENERAL_TIME_OUT:
              {
                log("Define.GENERAL_RET.ERROR_GENERAL_TIME_OUT");
                msgKey = Define.StringKey.MSGBOX_LOGIN_FAIL;
                this.m_loginSuccess = false;
                cb = Tools.CloseGameTab;
                break;
              }

            case Define.GENERAL_RET.ERROR_GENERAL_NOT_JOINED:
              {
                log("Define.GENERAL_RET.ERROR_GENERAL_NOT_JOINED");
                msgKey = Define.StringKey.MSGBOX_LOGIN_FAIL;
                this.m_loginSuccess = false;
                cb = Tools.CloseGameTab;
                break;
              }
          }

          if (msgKey != undefined) {
            MsgBox.getInstance().ShowMessageBox(msgKey, null, cb, Tools.GetErrorCode(Define.ErrorStatus.Game, ret));
          }
        };

        _proto.OnAckFail = function OnAckFail(ret) {
          var msgKey = Define.StringKey.MSGBOX_TIME_OUT;
          var cb = null;

          switch (ret) {
            case Define.GENERAL_RET.ERROR_GENERAL_REPEAT_LOGIN:
              {
                log("Define.GENERAL_RET.ERROR_GENERAL_REPEAT_LOGIN");
                msgKey = Define.StringKey.MSGBOX_LOGIN_DUPLICATE_LOGIN;
                cb = Tools.CloseGameTab;
                break;
              }

            case Define.GENERAL_RET.ERROR_GAME_NO_COIN:
              // 金幣不足
              {
                log("Define.GENERAL_RET.ERROR_GAME_NO_COIN");
                msgKey = Define.StringKey.MSGBOX_MONEY_NOT_ENOUGH;
                break;
              }

            case Define.GENERAL_RET.ERROR_GAME_WRONG_BET:
              // Bet錯誤
              {
                log("Define.GENERAL_RET.ERROR_GAME_WRONG_BET"); // msgKey = Define.StringKey.MSGBOX_SPIN_STATE_ERR;

                break;
              }

            case Define.GENERAL_RET.ERROR_GAME_IS_FREE:
              // 目前為 FreeBet
              {
                log("Define.GENERAL_RET.ERROR_GAME_IS_FREE"); // msgKey = Define.StringKey.MSGBOX_SPIN_STATE_ERR;

                break;
              }

            case Define.GENERAL_RET.ERROR_GAME_NOT_FREE:
              // 目前並不是 FreeBet
              {
                log("Define.GENERAL_RET.ERROR_GAME_NOT_FREE"); // msgKey = Define.StringKey.MSGBOX_SPIN_STATE_ERR;

                break;
              }

            case Define.GENERAL_RET.ERROR_WRONG_FREE_TYPE:
              // FREE_TYPE 錯誤
              {
                log("Define.GENERAL_RET.ERROR_WRONG_FREE_TYPE"); // msgKey = Define.StringKey.MSGBOX_SPIN_STATE_ERR;

                break;
              }

            case Define.GENERAL_RET.ERROR_SYSTEM_FAIL:
              // server 錯誤
              {
                log("Define.GENERAL_RET.ERROR_SYSTEM_FAIL"); // msgKey = Define.StringKey.MSGBOX_SPIN_STATE_ERR;

                break;
              }

            case Define.GENERAL_RET.ERROR_GENERAL_TIME_OUT:
              // 逾時
              {
                log("Define.GENERAL_RET.ERROR_TIME_OUT");
                msgKey = Define.StringKey.MSGBOX_TIME_OUT;
                cb = Tools.CloseGameTab;
                break;
              }
          }

          if (msgKey != undefined) {
            MsgBox.getInstance().ShowMessageBox(msgKey, null, cb, Tools.GetErrorCode(Define.ErrorStatus.Game, ret));
          }
        };

        _proto.ReLogin = function ReLogin(cb) {
          if (this.m_userInfo != undefined) {
            // 有登入不用再設一次loginCB
            // ConnectionManager.getInstance().SetLoginCB( ( commandType: number, content: string ) =>
            // {
            //     let ret = content[ "ret" ];
            //     if ( Define.GENERAL_RET.SUCCESS == ret )
            //     {
            //         if ( cb != undefined )
            //         {
            //             cb( commandType, content );
            //         }
            //     }
            //     else
            //     {
            //         this.OnLoginFail( ret, content );
            //     }
            // } );
            ConnectionManager.getInstance().SendCommand(Define.PROTOCOL.LOGIN, null, null, this.m_loginBody);
          } else {
            error("從未登入過，請勿使用relogin!!");
          }
        };

        _proto.IsLoaded = function IsLoaded() {
          return this.m_preLoaded;
        };

        _proto.IsLoginSuccess = function IsLoginSuccess() {
          return this.m_loginSuccess;
        };

        _proto.GetCommonSpriteFrame = function GetCommonSpriteFrame(objName) {
          return undefined;
        };

        _proto.GetCommonSpriteFrame2 = function GetCommonSpriteFrame2(objName) {
          return this.m_commAtlas2.getSpriteFrame(objName);
        };

        _proto.GetVersionLabel = function GetVersionLabel(gameVersion) {
          gameVersion = gameVersion.replace("ver.", "");
          var lableNode = new Node();
          var label = lableNode.addComponent(Label);
          Tools.SetLabelString(lableNode, "v_" + Define.VERSION + "_" + gameVersion);
          label.fontSize = 20;
          lableNode.getComponent(UIRenderer).color = new Color(169, 169, 169);
          lableNode.setPosition(-568, -316); // lableNode.setPosition(-568,320);

          lableNode.getComponent(UITransform).setAnchorPoint(0, 0.5);
          return lableNode;
        };

        _createClass(GameAppBaseView, [{
          key: "userInfo",
          get: function get() {
            return this.m_userInfo;
          }
        }]);

        return GameAppBaseView;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameCell.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LifeSocket.ts', './Define.ts', './LocaleStringManager.ts', './Tools.ts', './GameIconComponent.ts', './MsgBox.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, Component, LifeSocket, Define, LocaleStringManager, Tools, GameIconComponent, MsgBox;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      GameIconComponent = module.default;
    }, function (module) {
      MsgBox = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "17890BTAHFPJ7raoX6m5A+Q", "GameCell", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameCell = exports('default', (_dec = property({
        type: GameIconComponent,
        tooltip: "遊戲圖示"
      }), _dec2 = property({
        type: Label,
        tooltip: "遊戲名稱"
      }), _dec3 = property({
        type: Label,
        tooltip: "擁有"
      }), _dec4 = property({
        type: Label,
        tooltip: "擁有數量"
      }), _dec5 = property({
        type: Label,
        tooltip: "可用"
      }), _dec6 = property({
        type: Label,
        tooltip: "可用數量"
      }), _dec7 = property({
        type: Node,
        tooltip: "箭頭"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameCell, _Component);

        function GameCell() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_gameIcon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_gameNameLabel", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_ownLabel", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_ownNumLabel", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_availableLabel", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_availableNumLabel", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_arrowNode", _descriptor7, _assertThisInitialized(_this));

          _this.m_gameId = 0;
          return _this;
        }

        var _proto = GameCell.prototype;

        _proto.SetTxt = function SetTxt() {
          this.m_ownLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_TXT_OWN);
          Tools.SetFont(this.m_ownLabel);
          this.m_availableLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_TXT_AVAILABLE);
          Tools.SetFont(this.m_availableLabel);
        };

        _proto.SetInfo = function SetInfo(data) {
          var _this2 = this;

          var gameID = data.gameid;

          if (Tools.Icons[gameID]) {
            this.m_gameIcon.SetGameIcon(Tools.Icons[gameID], function () {
              _this2.OnClick();
            });
          } else {
            Tools.LoadIcon(LocaleStringManager.CurrLang, gameID, function () {
              _this2.m_gameIcon.SetGameIcon(Tools.Icons[gameID], function () {
                _this2.OnClick();
              });
            });
          }

          this.m_gameId = gameID;
          this.m_gameNameLabel.string = LocaleStringManager.GetInstance().GetGameName(gameID);
          Tools.SetFont(this.m_gameNameLabel);
          this.m_ownNumLabel.string = data.ownamount.toString();
          Tools.SetFont(this.m_ownNumLabel);
          this.m_availableNumLabel.string = data.canamount.toString();
          Tools.SetFont(this.m_availableNumLabel);
        };

        _proto.SetArrowNode = function SetArrowNode(active) {
          this.m_arrowNode.active = active;
        };

        _proto.OnClick = function OnClick() {
          var _this3 = this;

          var gameName = LocaleStringManager.GetInstance().GetGameName(this.m_gameId);
          MsgBox.getInstance().ShowFullMessageBox(Define.StringKey.CHANGE_GAME_HINT, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, [gameName], function () {
            LifeSocket.GetInstance().ReqUrl(_this3.m_gameId, Define.BTN_CLICK_EVENT.BACKPACK_CHANGE_GAME);
          });
        };

        return GameCell;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_gameIcon", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_gameNameLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_ownLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_ownNumLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_availableLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_availableNumLabel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_arrowNode", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameIconComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, SpriteAtlas, Component, Define, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      SpriteAtlas = module.SpriteAtlas;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "db6a9Zsa6pJNpkDoAFQWOew", "GameIconComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameIconComponent = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "遊戲Icon"
      }), _dec2 = property({
        type: Sprite,
        tooltip: "品牌圖示"
      }), _dec3 = property({
        type: SpriteAtlas,
        tooltip: "品牌合圖"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameIconComponent, _Component);

        function GameIconComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_gameIconSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_brandSprite", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_brandSpriteAtlas", _descriptor3, _assertThisInitialized(_this));

          _this.m_clickCb = null;
          return _this;
        }

        var _proto = GameIconComponent.prototype;

        _proto.start = function start() {
          if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
            this.m_brandSprite.spriteFrame = this.m_brandSpriteAtlas.getSpriteFrame("Common_IconMark_TADA");
          }
        };

        _proto.SetGameIcon = function SetGameIcon(icon, clickCb) {
          if (clickCb === void 0) {
            clickCb = null;
          }

          if (this.m_gameIconSprite) {
            this.m_gameIconSprite.spriteFrame = icon;
          }

          this.m_clickCb = clickCb;
        };

        _proto.OnClick = function OnClick() {
          this.m_clickCb && this.m_clickCb();
        };

        return GameIconComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_gameIconSprite", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_brandSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_brandSpriteAtlas", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameItems.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './AppManager.ts', './LocaleStringManager.ts', './Tools.ts', './BuffManager.ts', './Backpack.ts', './ItemCell.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Node, Prefab, ScrollView, UITransform, Animation, color, instantiate, Component, Define, AppManager, LocaleStringManager, Tools, BuffManager, VendorSource, ItemCell;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Prefab = module.Prefab;
      ScrollView = module.ScrollView;
      UITransform = module.UITransform;
      Animation = module.Animation;
      color = module.color;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      AppManager = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      BuffManager = module.default;
    }, function (module) {
      VendorSource = module.VendorSource;
    }, function (module) {
      ItemCell = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14;

      cclegacy._RF.push({}, "aacbfAfxhtB1656VUweTybQ", "GameItems", undefined);
      /**橫版 */


      var CONTENT_WIDTH_LANDSCAPE = 720;
      /**直版 */

      var CONTENT_WIDTH_PROTRAIT = 440;
      /**@ch 每張道具卡間隔(水平) */

      var SPACING_X = 10;
      /**@ch 每張道具卡間隔(垂直) */

      var SPACING_Y = 8;
      /**@ch 每張道具卡寬度 */

      var ITEM_WIDTH = 132;
      /**@ch 每張道具卡高度 */

      var ITEM_HEIGHT = 174;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameItems = exports('default', (_dec = property({
        type: Label,
        tooltip: "提示"
      }), _dec2 = property({
        type: Label,
        tooltip: "無道具卡提示"
      }), _dec3 = property({
        type: Node,
        tooltip: "內容"
      }), _dec4 = property({
        type: Node,
        tooltip: "道具卡圖"
      }), _dec5 = property({
        type: Node,
        tooltip: "道具卡數量"
      }), _dec6 = property({
        type: Node,
        tooltip: "道具卡遮罩"
      }), _dec7 = property({
        type: Node,
        tooltip: "道具卡時鐘圖"
      }), _dec8 = property({
        type: Node,
        tooltip: "道具卡剩餘時間"
      }), _dec9 = property({
        type: Node,
        tooltip: "buff卡"
      }), _dec10 = property({
        type: Node,
        tooltip: "道具卡綠色箭頭"
      }), _dec11 = property({
        type: Prefab,
        tooltip: "欄位"
      }), _dec12 = property({
        type: Node,
        tooltip: "遮罩"
      }), _dec13 = property({
        type: Label,
        tooltip: "遮罩提示"
      }), _dec14 = property({
        type: ScrollView,
        tooltip: "scroll view"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameItems, _Component);

        function GameItems() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_hintLabel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_emptyHintLabel", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_imageNode", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_amoutNode", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_darkNode", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_clockNode", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_remainTimeNode", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buffNode", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_arrowNode", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_cellPrefab", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_maskNode", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_maskHintLabel", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scrollView", _descriptor14, _assertThisInitialized(_this));

          _this.m_itemCells = [];
          _this.m_buffCells = [];
          _this.m_imageNodes = [];
          _this.m_amoutNodes = [];
          _this.m_darkNodes = [];
          _this.m_clockNodes = [];
          _this.m_remainTimeNodes = [];
          _this.m_arrowNodes = [];
          _this.m_touchCb = null;
          _this.m_isLandscape = true;
          _this.m_itemCardNums = 0;
          _this.m_emptyBuffNodesNum = 0;
          return _this;
        }

        var _proto = GameItems.prototype;

        _proto.Init = function Init(touchCb) {
          this.m_touchCb = touchCb;
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          this.m_isLandscape = isLandscape;

          if (isLandscape) {
            //設定大小
            var eachRowNums = Math.floor(CONTENT_WIDTH_LANDSCAPE / (ITEM_WIDTH + SPACING_X));
            var lines = Math.ceil(this.m_itemCardNums / eachRowNums);
            var newContentHeight = lines * (ITEM_HEIGHT + SPACING_Y);
            this.m_contentNode.getComponent(UITransform).setContentSize(CONTENT_WIDTH_LANDSCAPE, newContentHeight);
            this.node.getComponent(Animation).play("Clip_Backpack_ThisGame_Landscape"); // this.m_contentNode.getComponent( UITransform ).setContentSize( 720, 1272 );

            var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_WARNING + "1");
            str = str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
            this.m_hintLabel.string = LocaleStringManager.GetInstance().GetString(str);
          } else {
            //設定大小
            var _eachRowNums = Math.floor(CONTENT_WIDTH_PROTRAIT / (ITEM_WIDTH + SPACING_X));

            console.log("each Row has", _eachRowNums);

            var _lines = Math.ceil(this.m_itemCardNums / _eachRowNums);

            var _newContentHeight = _lines * (ITEM_HEIGHT + SPACING_Y);

            this.m_contentNode.getComponent(UITransform).setContentSize(CONTENT_WIDTH_PROTRAIT, _newContentHeight);
            this.node.getComponent(Animation).play("Clip_Backpack_ThisGame_Portrait");

            var _str = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_WARNING + "0");

            _str = _str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
            this.m_hintLabel.string = LocaleStringManager.GetInstance().GetString(_str);
          }
        } // SetWidth( isLandscape: boolean )
        // {
        //     // if ( isLandscape )
        //     // {
        //     //     this.m_imageNode
        //     //     this.m_amoutNode.getComponent( UITransform ).setContentSize( CONTENT_WIDTH_LANDSCAPE, 0 );
        //     //     this.m_darkNode
        //     //     this.m_clockNode
        //     //     this.m_remainTimeNode
        //     //     this.m_arrowNode
        //     // }
        //     // else
        //     // {
        //     //     this.m_amoutNode.getComponent( UITransform ).setContentSize( CONTENT_WIDTH_PROTRAIT, 0 );
        //     // }
        // }
        ;

        _proto.SetTxt = function SetTxt() {
          Tools.SetFont(this.m_hintLabel); // 使用粗體字型

          Tools.SetFont(this.m_emptyHintLabel);
          var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_NO_ITEM);
          str = str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
          this.m_emptyHintLabel.string = str;

          if (this.m_isLandscape) {
            var _str2 = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_WARNING + "1");

            _str2 = _str2.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
            this.m_hintLabel.string = LocaleStringManager.GetInstance().GetString(_str2);
          } else {
            var _str3 = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_WARNING + "0");

            _str3 = _str3.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
            this.m_hintLabel.string = LocaleStringManager.GetInstance().GetString(_str3);
          }
        };

        _proto.SetItemInfo = function SetItemInfo(info, itemPlist, itemEft, realItemPlist) {
          this.m_itemCardNums = info.length;

          for (var i = 0; i < info.length; i++) {
            var source = info[i].source;
            var icon = info[i].icon;
            var num = info[i].amount;
            var reason = info[i].banreason;
            var startTime = info[i].start;
            var spriteFrame = void 0;

            if (itemPlist && !Define.RealItemsMap[icon]) {
              spriteFrame = itemPlist.getSpriteFrame(icon.toString());
            } else if (Define.RealItemsMap[icon]) // 實體卡
              {
                spriteFrame = realItemPlist.getSpriteFrame(icon.toString());
              } // 要用哪種通用道具卡


            if (!spriteFrame) {
              if (Tools.UsingLogoSpriteFrame()) {
                spriteFrame = itemEft.getSpriteFrame("Backpack_Card_02");
              } else {
                spriteFrame = itemEft.getSpriteFrame("Backpack_Card_01");
              }
            }

            var cell = this.m_itemCells[i];

            if (!this.m_itemCells[i]) {
              this.CreateCell(info[i]);
              cell = this.m_itemCells[i];
            }

            cell.ReturnBuff(); // let cell: ItemCell = this.m_itemCells[ i ];
            // 開啟對應節點們

            this.m_itemCells[i].node.active = true;
            this.m_imageNodes[i].active = true;
            this.m_amoutNodes[i].active = true;
            this.m_darkNodes[i].active = true;
            this.m_clockNodes[i].active = true;
            this.m_remainTimeNodes[i].active = true;
            this.m_arrowNodes[i].active = true; // cell.node.active = true;

            if (spriteFrame) {
              cell.SetItem(i, spriteFrame, num, startTime); // this.m_amoutNodes[i].getComponent(Label).string = 

              if (source === VendorSource) {
                cell.SetVendorIcon(false);
              } else {
                cell.SetVendorIcon(false);
              }

              if (reason > 0 || !Define.CanUseItemCard) {
                cell.SetColor(color(165, 165, 165));

                if (i == 0) {
                  cell.SetArrowNode(false);
                }
              } else {
                cell.SetColor(color(255, 255, 255));

                if (i == 0) {
                  cell.SetArrowNode(true);
                }
              }
            } else {
              console.error('SetItemInfo cant find spriteframe', icon);

              if (!cell.IsEmpty()) {
                cell.SetItem(i, null, 0);
                cell.SetVendorIcon(false);
              } else {
                info[i] = null;
              }
            }
          } //需要設定大小


          this.OnRotation(this.m_isLandscape);
          this.m_emptyHintLabel.node.active = info.length === 0;

          if (this.m_itemCells.length > info.length) {
            for (var _i = info.length; _i < this.m_itemCells.length; _i++) {
              this.m_itemCells[_i].node.active = false;
              this.m_imageNodes[_i].active = false;
              this.m_amoutNodes[_i].active = false;
              this.m_darkNodes[_i].active = false;
              this.m_clockNodes[_i].active = false;
              this.m_remainTimeNodes[_i].active = false;
            }
          }

          this.SetBuffInfo(info.length);
        }
        /** 放入BUFF卡
         * @param itemLen 道具卡佔用長度
         */
        ;

        _proto.SetBuffInfo = function SetBuffInfo(itemLen) {
          var _this2 = this;

          var buffDatas = BuffManager.GetInstance().BuffCardDatas;
          console.error('SetBuffInfo', buffDatas, itemLen);

          if (Tools.IsTadaCasino && buffDatas.length > 0) {
            this.m_itemCardNums += buffDatas.length; // 先設置itemCard的空節點

            this.CreateEmptyNodeForBuff(itemLen);

            var _loop = function _loop(i) {
              var id = buffDatas[i].id;
              var amount = buffDatas[i].amount; // let cell: ItemCell = this.m_itemCells[ len ];

              var cell = _this2.m_buffCells[i];

              if (!cell) {
                _this2.CreateCell();

                cell = _this2.m_buffCells[i];
              }

              cell.ReturnBuff();
              cell.node.active = true;
              var nodeName = id.toString();

              if (amount > 1) {
                nodeName = nodeName + "+" + amount.toString();
              }

              var bufffNode = BuffManager.GetInstance().GetBuffNode(nodeName);
              console.error('gameitem', nodeName, amount);

              if (!bufffNode) {
                var addChildCb = function addChildCb(node) {
                  if (node) {
                    console.error('gameitem new node', node.name, amount);
                    cell.SetBuff(itemLen, i, node);
                  }
                };

                AppManager.GetBuffCardNode(id, addChildCb, amount);
              } else {
                console.error('gameitem form pool', bufffNode.name, amount);
                cell.SetBuff(itemLen, i, bufffNode);
              }
            };

            for (var i = 0; i < buffDatas.length; i++) {
              _loop(i);
            }

            this.OnRotation(this.m_isLandscape);
            this.m_emptyHintLabel.node.active = false;
          }

          if (Tools.IsTadaCasino && this.m_buffCells.length > buffDatas.length) {
            console.error('SetBuffInfo close more', buffDatas.length, this.m_buffCells.length);

            for (var _i2 = buffDatas.length; _i2 < this.m_buffCells.length; _i2++) {
              this.m_buffCells[_i2].node.active = false;
            }
          } // 只有箭頭節點item和buff都會有,只留第一個,關掉其他的


          if (this.m_itemCardNums > 0 && this.m_arrowNodes.length > 0) {
            for (var _i3 = this.m_arrowNodes.length - 1; _i3 > 0; _i3--) {
              this.m_arrowNodes[_i3].active = false;
            }

            this.m_arrowNodes[0].active = true;
          }
        };

        _proto.CloseAllItem = function CloseAllItem() {
          for (var i = 0; i < this.m_itemCells.length; i++) {
            this.m_itemCells[i].SetItem(i, null, 0);
          }
        }
        /**@ch 拉到最上面 */
        ;

        _proto.ScrollToTop = function ScrollToTop() {
          this.m_scrollView.scrollToTop();
        }
        /**@ch 創造新的Prefab */
        ;

        _proto.CreateCell = function CreateCell(info) {
          var node = instantiate(this.m_cellPrefab);
          var cell = node.getComponent(ItemCell);
          cell.Init(info ? info.start : null, this.m_touchCb);

          if (info) {
            this.m_itemCells.push(cell);
          } else {
            this.m_buffCells.push(cell);
          } // tween( this )
          //     .delay( 0.05 )
          //     .call( () =>
          //     {
          //         error( "FSLKJDNFJDSNFJDS", this.m_contentNode.getComponent( UITransform ).contentSize )
          //     } )
          //     .start()

          /** 
           * @ch 拆節點統一流程
           * @Step1 Get Node
           * @Step2 Remove it from parent
           * @Step3 Push it into a new ItemNode(to give it size)
           * @Step4 Push the ItemNode to the corresponding Node in the tree
           */


          if (info) {
            // Item CARD

            /**數量 */
            var numNode = node.getChildByName("Data").getChildByName("Num_CardNum");
            numNode.removeFromParent();
            var newNode0 = this.CreateNewItemSizeNode();
            newNode0.addChild(numNode);
            this.m_amoutNode.addChild(newNode0);
            this.m_amoutNodes.push(newNode0);
            /**壓黑Node */

            var darkNode = node.getChildByName("Dark");
            darkNode.removeFromParent();
            var newNode1 = this.CreateNewItemSizeNode();
            newNode1.addChild(darkNode);
            this.m_darkNode.addChild(newNode1);
            this.m_darkNodes.push(newNode1);
            /**時鐘圖 */

            var clockNode = darkNode.getChildByName("IconTime");
            clockNode.removeFromParent();
            var newNode2 = this.CreateNewItemSizeNode();
            newNode2.addChild(clockNode);
            this.m_clockNode.addChild(newNode2);
            this.m_clockNodes.push(newNode2);
            /**剩餘時間 */

            var remainTimeNode = darkNode.getChildByName("Num_Countdown");
            remainTimeNode.removeFromParent();
            var newNode3 = this.CreateNewItemSizeNode();
            newNode3.addChild(remainTimeNode);
            this.m_remainTimeNode.addChild(newNode3);
            this.m_remainTimeNodes.push(newNode3); // 剩下圖片

            this.m_imageNode.addChild(node);
            this.m_imageNodes.push(node);
          } else if (this.m_buffNode) {
            // Buff Card
            this.m_buffNode.addChild(node);
          }
          /**綠色箭頭 */


          var arrowNode = node.getChildByName("Node_Arrow");
          arrowNode.removeFromParent();
          var newNode4 = this.CreateNewItemSizeNode();
          newNode4.addChild(arrowNode);
          this.m_arrowNode.addChild(newNode4);
          this.m_arrowNodes.push(newNode4);
        };

        _proto.CreateEmptyNodeForBuff = function CreateEmptyNodeForBuff(len) {
          if (len <= 0 && this.m_emptyBuffNodesNum <= 0) {
            return;
          }

          if (this.m_buffCells.length > 0) {
            // 先拆下buff卡節點
            for (var i = 0; i < this.m_buffCells.length; i++) {
              this.m_buffCells[i].node.removeFromParent();
            }
          }

          if (this.m_emptyBuffNodesNum < len) {
            // 少要補
            for (var _i4 = 0; _i4 < len - this.m_emptyBuffNodesNum; _i4++) {
              var node = new Node();
              node.name = "empty";
              node.addComponent(UITransform);
              node.getComponent(UITransform).setContentSize(ITEM_WIDTH, ITEM_HEIGHT);
              this.m_buffNode.addChild(node);
            }
          } else if (this.m_emptyBuffNodesNum > len) {
            // 多要刪
            for (var _i5 = 0; _i5 < this.m_emptyBuffNodesNum - len; _i5++) {
              var _node = this.m_buffNode.getChildByName("empty");

              if (_node) {
                _node.removeFromParent();

                _node.destroy();
              }
            }
          }

          if (this.m_buffCells.length > 0) {
            // 裝回去
            for (var _i6 = 0; _i6 < this.m_buffCells.length; _i6++) {
              this.m_buffNode.addChild(this.m_buffCells[_i6].node);
            }
          }

          this.m_emptyBuffNodesNum = len;
        };

        _proto.CreateNewItemSizeNode = function CreateNewItemSizeNode() {
          var newNode = new Node();
          newNode.addComponent(UITransform);
          newNode.getComponent(UITransform).setContentSize(ITEM_WIDTH, ITEM_HEIGHT);
          return newNode;
        };

        _createClass(GameItems, [{
          key: "MaskNode",
          get: function get() {
            return this.m_maskNode;
          }
        }, {
          key: "MaskHintLabel",
          get: function get() {
            return this.m_maskHintLabel;
          }
        }]);

        return GameItems;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_hintLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_emptyHintLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_contentNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_imageNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_amoutNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_darkNode", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_clockNode", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_remainTimeNode", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_buffNode", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_arrowNode", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_cellPrefab", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_maskNode", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_maskHintLabel", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_scrollView", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameLsitView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './Tools.ts', './GameIconComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Label, ScrollView, Prefab, Animation, instantiate, Component, Define, LocaleStringManager, Tools, GameIconComponent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      ScrollView = module.ScrollView;
      Prefab = module.Prefab;
      Animation = module.Animation;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      GameIconComponent = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "e05aemjSXFI8qCFCIUjhpDH", "GameLsitView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameLsitView = exports('default', (_dec = property({
        type: Label,
        tooltip: "任務日期"
      }), _dec2 = property({
        type: ScrollView,
        tooltip: "scroll view"
      }), _dec3 = property({
        type: Prefab,
        tooltip: "cell prefab"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameLsitView, _Component);

        function GameLsitView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_dateLabel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scrollView", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_cellPrefab", _descriptor3, _assertThisInitialized(_this));

          _this.m_gameIcons = [];
          return _this;
        }

        var _proto = GameLsitView.prototype;

        _proto.OnRotation = function OnRotation(isLandscape) {
          if (isLandscape) {
            this.node.getComponent(Animation).play("Clip_DailyMission_GamePage_Landscape");
          } else {
            this.node.getComponent(Animation).play("Clip_DailyMission_GamePage_Portrait");
          }
        };

        _proto.SetInfo = function SetInfo(tomorrowTime, gameList) {
          var _this2 = this;

          var tomorrow = new Date(tomorrowTime);
          Tools.SetFont(this.m_dateLabel);
          var dateStr = tomorrow.getDate() + "/" + (tomorrow.getMonth() + 1);

          if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
            dateStr = tomorrow.getMonth() + 1 + "/" + tomorrow.getDate();
          }

          this.m_dateLabel.string = Tools.StringFormat(LocaleStringManager.GetInstance().GetString(Define.StringKey.DAILY_TOMORROW), dateStr);
          gameList.forEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(gameid, idx) {
            var gameIcon, node;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (Tools.Icons[gameid]) {
                      _context.next = 3;
                      break;
                    }

                    _context.next = 3;
                    return new Promise(function (resolve) {
                      Tools.LoadIcon(LocaleStringManager.CurrLang, gameid, function () {
                        resolve();
                      });
                    });

                  case 3:
                    gameIcon = _this2.m_gameIcons[idx];

                    if (!gameIcon) {
                      node = instantiate(_this2.m_cellPrefab);
                      gameIcon = node.getComponent(GameIconComponent);
                      _this2.m_gameIcons[idx] = gameIcon;

                      _this2.m_scrollView.content.addChild(node);
                    }

                    gameIcon.node.active = true;
                    gameIcon.SetGameIcon(Tools.Icons[gameid]);

                  case 7:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          })));

          if (this.m_gameIcons.length > gameList.length) {
            for (var i = gameList.length; i < this.m_gameIcons.length; i++) {
              this.m_gameIcons[i].node.active = false;
            }
          }
        };

        return GameLsitView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_dateLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_scrollView", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_cellPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GaussBlurManager.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6e23f+TQEVD6LHIqZfwySbq", "GaussBlurManager", undefined);
      /*
      GaussBlur
      含 global.d.ts、GaussBlurFrag 兩支新檔案
      creator.d.ts要配合新增 SGNode
      使用說明：
      用 singleton 加上 ID 取得 GLProgram
      如果沒有帶 ID 則建立一組新的 GLProgram
      */


      var GaussBlurManager = exports('default', /*#__PURE__*/function () {
        function GaussBlurManager() {
          if (GaussBlurManager._instance) {
            throw new Error("Error: Instantiation failed: Use GaussBlurManager.getInstance() instead of new.");
          }

          GaussBlurManager._instance = this;
        }

        GaussBlurManager.getInstance = function getInstance() {
          return GaussBlurManager._instance;
        };

        GaussBlurManager.UseBlur = function UseBlur(node, bluramount) {
          if (!this.m_program) {
            this.m_program = {};
          } // 本來就壞的

          /*let program;
          if (!this.m_program[bluramount.toString()]) {
              program = new cc.GLProgram();
              this.m_program[bluramount.toString()] = program;
              if (sys.isNative) {
                  program.initWithString(BlursFrag.blurs_vert, BlursFrag.blurs_frag);
              } else {
                  program.initWithVertexShaderByteArray(BlursFrag.blurs_vert, BlursFrag.blurs_frag);
                  program.addAttribute(cc.macro.ATTRIBUTE_NAME_POSITION, cc.macro.VERTEX_ATTRIB_POSITION);
                  program.addAttribute(cc.macro.ATTRIBUTE_NAME_COLOR, cc.macro.VERTEX_ATTRIB_COLOR);
                  program.addAttribute(cc.macro.ATTRIBUTE_NAME_TEX_COORD, cc.macro.VERTEX_ATTRIB_TEX_COORDS);
              }
              program.link();
              program.updateUniforms();
              program.use();
          }
          else {
              program = this.m_program[bluramount.toString()];
              // // 變更bluramount
              program.use();
              if (sys.isNative) {
                  var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(program);
                  glProgram_state.setUniformFloat("bluramount", bluramount);
              } else {
                  let ba = program.getUniformLocationForName("bluramount");
                  program.setUniformLocationWith1f(ba, program);
              }
          }
           if (sys.isNative) {
              var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(program);
              glProgram_state.setUniformFloat("bluramount", bluramount);
          } else {
              let ba = program.getUniformLocationForName("bluramount");
              program.setUniformLocationWith1f(ba, bluramount);
          }
           this.setProgram(node._sgNode, program);*/

        };

        GaussBlurManager.setProgram = function setProgram(node, program) {
          /*if (sys.isNative) {
              var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(program);
              node.setGLProgramState(glProgram_state);
          } else {
              node.setShaderProgram(program);
          }
          let children = node.children;
          if (!children) {
              return;
          }
           for (var i = 0; i < children.length; i++) {
              this.setProgram(children[i], program);
          }*/
        };

        return GaussBlurManager;
      }());
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import BlursFrag from "./GaussBlursFrag";
      // 
      // /* 
      // GaussBlur
      // 含 global.d.ts、GaussBlurFrag 兩支新檔案
      // creator.d.ts要配合新增 SGNode
      // 
      // 使用說明：
      // 用 singleton 加上 ID 取得 GLProgram
      // 如果沒有帶 ID 則建立一組新的 GLProgram
      // */
      // 
      // export default class GaussBlurManager {
      //     private static _instance: GaussBlurManager = new GaussBlurManager();
      //     static m_program: any;
      // 
      //     constructor() {
      //         if (GaussBlurManager._instance) {
      //             throw new Error("Error: Instantiation failed: Use GaussBlurManager.getInstance() instead of new.");
      //         }
      //         GaussBlurManager._instance = this;
      //     }
      // 
      //     public static getInstance(): GaussBlurManager {
      //         return GaussBlurManager._instance;
      //     }
      // 
      //     public static UseBlur( node:Node, bluramount:Number ) {
      //         if( !this.m_program )
      //         {
      //             this.m_program = {};
      //         }
      //         let program;
      //         if ( !this.m_program[bluramount.toString()] )
      //         {
      //             program = new cc.GLProgram();
      //             this.m_program[bluramount.toString()] = program;
      //             if (sys.isNative) {
      //                 program.initWithString(BlursFrag.blurs_vert, BlursFrag.blurs_frag);
      //             } else {
      //                 program.initWithVertexShaderByteArray(BlursFrag.blurs_vert, BlursFrag.blurs_frag);
      //                 program.addAttribute(cc.macro.ATTRIBUTE_NAME_POSITION, cc.macro.VERTEX_ATTRIB_POSITION);
      //                 program.addAttribute(cc.macro.ATTRIBUTE_NAME_COLOR, cc.macro.VERTEX_ATTRIB_COLOR);
      //                 program.addAttribute(cc.macro.ATTRIBUTE_NAME_TEX_COORD, cc.macro.VERTEX_ATTRIB_TEX_COORDS);
      //             }
      //             program.link();
      //             program.updateUniforms();
      //             program.use();
      //         }
      //         else
      //         {
      //             program = this.m_program[bluramount.toString()];
      //             // 變更bluramount
      //             program.use();
      //             if (sys.isNative) {
      //                 var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(program);
      //                 glProgram_state.setUniformFloat("bluramount", bluramount);
      //             } else {
      //                 let ba = program.getUniformLocationForName("bluramount");
      //                 program.setUniformLocationWith1f(ba, program);
      //             }
      //         }
      // 
      //         if (sys.isNative) {
      //             var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(program);
      //             glProgram_state.setUniformFloat("bluramount", bluramount);
      //         } else {
      //             let ba = program.getUniformLocationForName("bluramount");
      //             program.setUniformLocationWith1f(ba, bluramount);
      //         }
      // 
      //         this.setProgram(node._sgNode, program);
      //     }
      // 
      //     private static setProgram(node:any, program: any) {
      //         if (sys.isNative) {
      //             var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(program);
      //             node.setGLProgramState(glProgram_state);
      //         } else {
      //             node.setShaderProgram(program);
      //         }
      //         let children = node.children;
      //         if (!children)
      //         {
      //             return;
      //         }
      //         
      //         for (var i = 0; i < children.length; i++) {
      //             this.setProgram(children[i], program);
      //         }
      //     }
      // }

      GaussBlurManager._instance = new GaussBlurManager();
      GaussBlurManager.m_program = void 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GaussBlursFrag.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "06bceYTqTlDOLru/z1Y5rpz", "GaussBlursFrag", undefined);

      var BlursFrag = exports('default', function BlursFrag() {});
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // export default class BlursFrag {
      //     static blurs_vert = `
      //     attribute vec4 a_position;
      //     attribute vec2 a_texCoord;
      //     attribute vec4 a_color;
      //     varying vec2 v_texCoord;
      //     varying vec4 v_fragmentColor;
      //     void main()
      //     {
      //         gl_Position = CC_PMatrix * a_position;
      //         v_fragmentColor = a_color;
      //         v_texCoord = a_texCoord;
      //     }
      //     `;
      //     static blurs_frag = `
      //     #ifdef GL_ES
      //     precision mediump float;
      //     #endif
      //     uniform float bluramount;
      //     varying vec2 v_texCoord;
      //     vec4 draw(vec2 uv) {
      //     return texture2D(CC_Texture0,uv).rgba; 
      //     }
      //     float grid(float var, float size) {
      //     return floor(var*size)/size;
      //     }
      //     float rand(vec2 co){
      //     return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
      //     }
      //     void mainImage( out vec4 fragColor, in vec2 fragCoord )
      //     {
      //     vec2 uv = v_texCoord.xy;
      //     vec4 blurred_image = vec4(0.);
      //     #define repeats 5.
      //     for (float i = 0.; i < repeats; i++) { 
      //     vec2 q = vec2(cos(degrees((i/repeats)*360.)),sin(degrees((i/repeats)*360.))) * (rand(vec2(i,uv.x+uv.y))+bluramount); 
      //     vec2 uv2 = uv+(q*bluramount);
      //     blurred_image += draw(uv2)/2.;
      //     q = vec2(cos(degrees((i/repeats)*360.)),sin(degrees((i/repeats)*360.))) * (rand(vec2(i+2.,uv.x+uv.y+24.))+bluramount); 
      //     uv2 = uv+(q*bluramount);
      //     blurred_image += draw(uv2)/2.;
      //     }
      //     blurred_image /= repeats;
      //     fragColor = vec4(blurred_image);
      //     }
      //     void main()
      //     {
      //     mainImage(gl_FragColor, gl_FragCoord.xy);
      //     }
      //     `;
      // }

      BlursFrag.blurs_vert = "\n    attribute vec4 a_position;\n    attribute vec2 a_texCoord;\n    attribute vec4 a_color;\n    varying vec2 v_texCoord;\n    varying vec4 v_fragmentColor;\n    void main()\n    {\n        gl_Position = CC_PMatrix * a_position;\n        v_fragmentColor = a_color;\n        v_texCoord = a_texCoord;\n    }\n    ";
      BlursFrag.blurs_frag = "\n    #ifdef GL_ES\n    precision mediump float;\n    #endif\n    uniform float bluramount;\n    varying vec2 v_texCoord;\n    vec4 draw(vec2 uv) {\n        return texture2D(CC_Texture0,uv).rgba;\n    }\n    float grid(float var, float size) {\n        return floor(var*size)/size;\n    }\n    float rand(vec2 co){\n        return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n    }\n    void mainImage( out vec4 fragColor, in vec2 fragCoord )\n    {\n    vec2 uv = v_texCoord.xy;\n    vec4 blurred_image = vec4(0.);\n    #define repeats 5.\n    for (float i = 0.; i < repeats; i++) { \n        vec2 q = vec2(cos(degrees((i/repeats)*360.)),sin(degrees((i/repeats)*360.))) * (rand(vec2(i,uv.x+uv.y))+bluramount);\n        vec2 uv2 = uv+(q*bluramount);\n        blurred_image += draw(uv2)/2.;\n        q = vec2(cos(degrees((i/repeats)*360.)),sin(degrees((i/repeats)*360.))) * (rand(vec2(i+2.,uv.x+uv.y+24.))+bluramount);\n        uv2 = uv+(q*bluramount);\n        blurred_image += draw(uv2)/2.;\n    }\n    blurred_image /= repeats;\n    fragColor = vec4(blurred_image);\n    }\n    void main()\n    {\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n    }\n    ";

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GetRedLetter.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Node, Component, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "7ef70HoFsRIrotqggStK3MC", "GetRedLetter", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GetRedLetter = exports('default', (_dec = property({
        type: Label,
        tooltip: "取得數量"
      }), _dec2 = property({
        type: Node,
        tooltip: "飛行的目的地"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GetRedLetter, _Component);

        function GetRedLetter() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_numLabel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_targetNode", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GetRedLetter.prototype;

        _proto.SetTxt = function SetTxt() {
          this.m_numLabel.string = ""; //`+${rewardNum}`;  // 暫時隱藏

          Tools.SetFont(this.m_numLabel);
        };

        _createClass(GetRedLetter, [{
          key: "TargetNode",
          get: function get() {
            return this.m_targetNode;
          }
        }]);

        return GetRedLetter;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_numLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_targetNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GFX.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function () {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, gfx, game, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      gfx = module.gfx;
      game = module.game;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "0027c/Dj1lFg6LGVSi2wTXX", "GFX", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GFX = (_dec = ccclass('GFX'), _dec2 = property({
        type: Label,
        tooltip: "顯示效能資訊"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GFX, _Component);

        function GFX() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "infoText", _descriptor, _assertThisInitialized(_this));

          _this.canShow = false;
          _this.isOpen = false;
          _this.max = 0;
          return _this;
        }

        var _proto = GFX.prototype;

        _proto.onLoad = function onLoad() {
          this.setParames();
        };

        _proto.update = function update(dt) {
          this.updateDC();
        };

        _proto.setParames = function setParames() {
          this.canShow = this.getQuery('be').indexOf('ipabewbw-tset') >= 0;
          this.node.setSiblingIndex(Number.MAX_VALUE);
          this.infoText.node.active = this.isOpen && this.canShow;
        };

        _proto.updateDC = function updateDC() {
          if (this.canShow && this.max < gfx.deviceManager.gfxDevice.numDrawCalls) {
            this.max = gfx.deviceManager.gfxDevice.numDrawCalls;
            var info = 'DrawCall:' + this.max + '\nData:' + new Date(Date.now()) + '\nFPS:' + game.frameRate;
            this.infoText.string = 'DrawCall:' + this.max + '\nData:' + new Date(Date.now());
          }
        }
        /**
         * 取得網址列參數
         */
        ;

        _proto.getQuery = function getQuery(id) {
          var _url = this.getUrl();

          if (_url.indexOf('?') !== -1) {
            var tok = _url.split('?')[1].split('&');

            for (var i = 0, len = tok.length; i < len; ++i) {
              if (tok[i].split('=')[0] === id) {
                return tok[i].split('=')[1];
              }
            }
          }

          return '';
        };

        _proto.getUrl = function getUrl() {
          if (!!globalThis.LobbyData === true) {
            if (globalThis.LobbyData.url) return globalThis.LobbyData.url;
          }

          return location.href;
        };

        _proto.OnClick = function OnClick() {
          console.log('GFX Click');
          this.isOpen = !this.isOpen;
          this.infoText.node.active = this.isOpen && this.canShow;
        };

        return GFX;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "infoText", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GiftCode.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GiftCodeManager.ts', './LocaleStringManager.ts', './Define.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, EditBox, Button, Label, Sprite, js, Component, giftCodeManager, LocaleStringManager, Define;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EditBox = module.EditBox;
      Button = module.Button;
      Label = module.Label;
      Sprite = module.Sprite;
      js = module.js;
      Component = module.Component;
    }, function (module) {
      giftCodeManager = module.giftCodeManager;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Define = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "71fe9OgTsVLO4eqwEviFAiz", "GiftCode", undefined);

      var AckCode;

      (function (AckCode) {
        AckCode[AckCode["SUCCESS"] = 0] = "SUCCESS";
      })(AckCode || (AckCode = {}));

      var AckType;

      (function (AckType) {
        AckType[AckType["FreeSpin"] = 0] = "FreeSpin";
        AckType[AckType["Item"] = 1] = "Item";
      })(AckType || (AckType = {}));

      var ErrorMsgNo;

      (function (ErrorMsgNo) {
        ErrorMsgNo[ErrorMsgNo["None"] = 0] = "None";
        ErrorMsgNo[ErrorMsgNo["One"] = 1] = "One";
        ErrorMsgNo[ErrorMsgNo["Two"] = 2] = "Two";
        ErrorMsgNo[ErrorMsgNo["Three"] = 3] = "Three";
        ErrorMsgNo[ErrorMsgNo["Four"] = 4] = "Four";
        ErrorMsgNo[ErrorMsgNo["Five"] = 5] = "Five";
        ErrorMsgNo[ErrorMsgNo["Six"] = 6] = "Six";
      })(ErrorMsgNo || (ErrorMsgNo = {}));

      var TimeOut = 10;
      var MaxErrotTime = 3;
      var TwentyMin = 20 * 60;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GiftCode = exports('GiftCode', (_dec = ccclass("GiftCode"), _dec2 = property({
        type: EditBox,
        tooltip: "輸入"
      }), _dec3 = property({
        type: Button,
        tooltip: "確認按鈕"
      }), _dec4 = property({
        type: Label,
        tooltip: "錯誤提示"
      }), _dec5 = property({
        type: Label,
        tooltip: "禮物碼"
      }), _dec6 = property({
        type: Label,
        tooltip: "確認文字"
      }), _dec7 = property({
        type: Sprite,
        tooltip: "標題"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GiftCode, _Component);

        function GiftCode() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_codeEditBox", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_confirmBtn", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_errorMsgLabel", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_giftCodeLabel", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_confirmLabel", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_titleSprite", _descriptor6, _assertThisInitialized(_this));

          _this.m_bottombarManager = null;
          _this.m_confirmCb = null;
          _this.m_time = 0;
          _this.m_errorCount = 0;
          _this.m_lockTime = TwentyMin;
          _this.m_isLock = false;
          return _this;
        }

        var _proto = GiftCode.prototype;

        _proto.onLoad = function onLoad() {
          giftCodeManager.OnLoad(this);
          this.m_giftCodeLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.GIFT_CODE_1);
          this.m_codeEditBox.placeholder = LocaleStringManager.GetInstance().GetString(Define.StringKey.GIFT_ERROR_CODE + 8);
          this.m_confirmLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.GIFT_CODE_2);
          this.m_titleSprite.spriteFrame = LocaleStringManager.GetInstance().GetCommonAtlas().getSpriteFrame("Common_Txt_Title_GiftCode");
        };

        _proto.onDestroy = function onDestroy() {
          giftCodeManager.OnDestroy();
        };

        _proto.Init = function Init(bottombarManager, confirmCb) {
          this.m_bottombarManager = bottombarManager;
          this.m_confirmCb = confirmCb;
        };

        _proto.OnConfirm = function OnConfirm() {
          if (this.m_confirmBtn.interactable) {
            var _this$m_confirmCb;

            this.m_time = 0;
            this.m_errorMsgLabel.node.active = false;
            this.SetState(false);
            (_this$m_confirmCb = this.m_confirmCb) == null ? void 0 : _this$m_confirmCb.call(this, this.m_codeEditBox.string);
          }
        };

        _proto.Hide = function Hide() {
          this.node.active = false;
        };

        _proto.Show = function Show() {
          this.node.active = true;
        };

        _proto.IsOpen = function IsOpen() {
          return this.node.active;
        };

        _proto.OnRecvVerifyAck = function OnRecvVerifyAck(ack) {
          this.SetState(true);
          var isPass = this.CheckCode(ack.Code);

          if (isPass) {
            switch (ack.Type) {
              case AckType.FreeSpin:
                Define.APP.FreeSpinBet = 0; // 要強制把平台來的設定歸 0

                this.Hide();
                break;

              case AckType.Item:
                //    
                break;
            }
          }

          this.m_codeEditBox.enabled = true;
        };

        _proto.CheckCode = function CheckCode(code) {
          switch (code) {
            case AckCode.SUCCESS:
              return true;

            default:
              var msgNo = ErrorMsgNo.One;

              switch (code) {
                case 4:
                  msgNo = ErrorMsgNo.Two;
                  break;

                case 5:
                  msgNo = ErrorMsgNo.Three;
                  break;

                case 6:
                  msgNo = ErrorMsgNo.Four;
                  break;

                case 7:
                  msgNo = ErrorMsgNo.Five;
                  break;

                case 8:
                  msgNo = ErrorMsgNo.Six;
                  break;
              }

              var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.GIFT_ERROR_CODE + msgNo);

              if (msgNo == 1) {
                this.m_errorCount++;
                str = js.formatStr(str, this.m_errorCount.toString());

                if (this.m_errorCount >= MaxErrotTime) {
                  this.m_errorCount = 0;
                  this.m_lockTime = TwentyMin;
                  this.m_isLock = true;
                  this.m_confirmBtn.interactable = false;
                }
              }

              this.m_errorMsgLabel.string = str;
              this.m_errorMsgLabel.node.active = true;
              return false;
          }
        };

        _proto.update = function update(dt) {
          if (this.m_isLock) {
            this.m_lockTime -= dt;

            if (this.m_lockTime <= 0) {
              this.m_isLock = false;
              this.m_confirmBtn.interactable = true;
              this.m_errorMsgLabel.node.active = false;
            }
          } else if (!this.m_confirmBtn.interactable) {
            this.m_time += dt;

            if (this.m_time >= TimeOut) {
              this.SetState(true);
            }
          }
        };

        _proto.SetState = function SetState(active) {
          if (!this.m_isLock) {
            this.m_confirmBtn.interactable = active;
          }

          this.m_codeEditBox.enabled = active;
        };

        return GiftCode;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_codeEditBox", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_confirmBtn", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_errorMsgLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_giftCodeLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_confirmLabel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_titleSprite", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GiftCodeManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './DataStruct.ts', './ConnectManager.ts', './gaiaProto.mjs_cjs=&original=.js', './Tools.ts', './GaiaManager.ts', './gaiaProto.js'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, error, instantiate, Define, ConnectionDataStruct, ConnectManager, Tools, gaiaManager, _cjsExports;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      error = module.error;
      instantiate = module.instantiate;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      ConnectionDataStruct = module.ConnectionDataStruct;
    }, function (module) {
      ConnectManager = module.default;
    }, null, function (module) {
      Tools = module.default;
    }, function (module) {
      gaiaManager = module.gaiaManager;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3ccb6XOrLtOe6P63DfcTRUy", "GiftCodeManager", undefined); // eslint-disable-next-line brace-style


      var GiftCodeReq = /*#__PURE__*/function (_ConnectionDataStruct) {
        _inheritsLoose(GiftCodeReq, _ConnectionDataStruct);

        function GiftCodeReq() {
          var _this;

          _this = _ConnectionDataStruct.call(this) || this;
          _this.type = ConnectionDataStruct.ErrorHandleType.Ignore;
          _this.method = ConnectionDataStruct.RequestMethod.Post;
          _this.url = "/giftcode/VerifyCodeProto";
          _this.reqData = null;
          return _this;
        }

        return GiftCodeReq;
      }(ConnectionDataStruct.ProtocolData); // eslint-disable-next-line brace-style


      var CheckBlockReq = /*#__PURE__*/function (_ConnectionDataStruct2) {
        _inheritsLoose(CheckBlockReq, _ConnectionDataStruct2);

        function CheckBlockReq() {
          var _this2;

          _this2 = _ConnectionDataStruct2.call(this) || this;
          _this2.type = ConnectionDataStruct.ErrorHandleType.Ignore;
          _this2.method = ConnectionDataStruct.RequestMethod.Post;
          _this2.url = "/giftcode/CheckBlockProto";
          _this2.reqData = null;
          return _this2;
        }

        return CheckBlockReq;
      }(ConnectionDataStruct.ProtocolData);

      var GiftCodeCommandType = {
        PROTOCOL_TYPE_GIFTCODE_VERIFY: 120
      };
      var PrefabPath = "Astt/%s/Common/Prefab/Common_GiftCode";

      var GiftCodeManager = /*#__PURE__*/function () {
        function GiftCodeManager() {
          this.m_giftCode = null;
          this.m_confirmCb = null;
        }

        var _proto = GiftCodeManager.prototype;

        _proto.OnLoad = function OnLoad(giftCode) {
          this.m_giftCode = giftCode;
        };

        _proto.OnDestroy = function OnDestroy() {
          this.m_giftCode = null;
        }
        /**
         * 初始化Gift Code介面
         * @param bottombarManager 地bar
         * @param confirmCb 自訂兌換請求，要用共用的不用帶
         */
        ;

        _proto.Init = function Init(bottombarManager, confirmCb) {
          var _this3 = this;

          this.m_confirmCb = confirmCb;
          var path = Tools.GetFilePath(PrefabPath);
          Define.CommonBundle.load(path, function (err, prefab) {
            var _this3$m_giftCode, _this3$m_giftCode2;

            if (err) {
              error(err.message || err);
              return;
            }

            var node = instantiate(prefab);
            bottombarManager.CommonWebviewParentNode.addChild(node);
            Tools.SetZIndex(node, Define.ZOrder.ITEMINFO);
            (_this3$m_giftCode = _this3.m_giftCode) == null ? void 0 : _this3$m_giftCode.Hide();
            (_this3$m_giftCode2 = _this3.m_giftCode) == null ? void 0 : _this3$m_giftCode2.Init(bottombarManager, function (code) {
              if (Define.APP) {
                if (_this3.m_confirmCb) {
                  _this3.m_confirmCb(code);
                } else {
                  var data = new _cjsExports.gaiaProto.VerifyGiftCodeReq();
                  data.aid = Number(Define.APP.GetAID());
                  data.token = Define.APP.GetAToken();
                  data.apiid = Number(Define.API_ID);
                  data.giftcode = code;
                  var req = new GiftCodeReq();
                  req.reqData = _cjsExports.gaiaProto.VerifyGiftCodeReq.encode(data).finish();
                  ConnectManager.GetInstance().SendCommand(req, function (ack) {
                    gaiaManager.CheckAck(ack, function (type, data) {
                      _this3.OnRecvAck(type, data);
                    });
                  }, false, true);
                }
              }
            });
            bottombarManager.SetGiftCodeBtnState();
          });
        };

        _proto.OnRecvAck = function OnRecvAck(type, data) {
          switch (type) {
            case GiftCodeCommandType.PROTOCOL_TYPE_GIFTCODE_VERIFY:
              {
                var _this$m_giftCode;

                var info = _cjsExports.gaiaProto.VerifyGiftCodeAck.decode(data);

                (_this$m_giftCode = this.m_giftCode) == null ? void 0 : _this$m_giftCode.OnRecvVerifyAck(info);
                break;
              }
          }
        }
        /**
         * server驗證結果
         * @param ack server給的回應內容
         */
        ;

        _proto.OnRecvVerifyAck = function OnRecvVerifyAck(ack) {
          var _this$m_giftCode2;

          (_this$m_giftCode2 = this.m_giftCode) == null ? void 0 : _this$m_giftCode2.OnRecvVerifyAck(ack);
        };

        _proto.Show = function Show() {
          var _this$m_giftCode3;

          (_this$m_giftCode3 = this.m_giftCode) == null ? void 0 : _this$m_giftCode3.Show();
        };

        _proto.HasUI = function HasUI() {
          return !!this.m_giftCode;
        };

        _proto.IsOpen = function IsOpen() {
          var _this$m_giftCode4;

          return (_this$m_giftCode4 = this.m_giftCode) == null ? void 0 : _this$m_giftCode4.IsOpen();
        };

        return GiftCodeManager;
      }();

      var giftCodeManager = exports('giftCodeManager', new GiftCodeManager());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GroupNode.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, _createClass, cclegacy, _decorator, Node, Enum, v2, director, Director, Vec3, UIRenderer, UIOpacity, v3, UITransform, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Enum = module.Enum;
      v2 = module.v2;
      director = module.director;
      Director = module.Director;
      Vec3 = module.Vec3;
      UIRenderer = module.UIRenderer;
      UIOpacity = module.UIOpacity;
      v3 = module.v3;
      UITransform = module.UITransform;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14;

      cclegacy._RF.push({}, "9099fuoIOdA/qc/GkvbZ7rH", "GroupNode", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu,
          executeInEditMode = _decorator.executeInEditMode;
      var HIERARCHY_EVENT = "active-in-hierarchy-changed";
      var SizeMode;

      (function (SizeMode) {
        SizeMode[SizeMode["WIDTH"] = 1] = "WIDTH";
        SizeMode[SizeMode["HEIGHT"] = 2] = "HEIGHT";
        SizeMode[SizeMode["BOTH"] = 3] = "BOTH";
      })(SizeMode || (SizeMode = {}));

      var PositionMode;

      (function (PositionMode) {
        PositionMode[PositionMode["X"] = 1] = "X";
        PositionMode[PositionMode["Y"] = 2] = "Y";
        PositionMode[PositionMode["BOTH"] = 3] = "BOTH";
      })(PositionMode || (PositionMode = {}));

      var ScaleMode;

      (function (ScaleMode) {
        ScaleMode[ScaleMode["X"] = 1] = "X";
        ScaleMode[ScaleMode["Y"] = 2] = "Y";
        ScaleMode[ScaleMode["BOTH"] = 3] = "BOTH";
      })(ScaleMode || (ScaleMode = {}));

      var ColorMode;

      (function (ColorMode) {
        ColorMode[ColorMode["R"] = 1] = "R";
        ColorMode[ColorMode["G"] = 2] = "G";
        ColorMode[ColorMode["B"] = 4] = "B";
        ColorMode[ColorMode["RGB"] = 7] = "RGB";
        ColorMode[ColorMode["A"] = 8] = "A";
        ColorMode[ColorMode["RGBA"] = 15] = "RGBA";
      })(ColorMode || (ColorMode = {}));

      var GroupNode = exports('default', (_dec = menu("Chiron/GroupNode/GroupNode"), _dec2 = property({
        displayName: "Sync OnEnable",
        tooltip: "當 Node 啟用時同步一次所有選定的狀態至屬性 Group Nodes 中"
      }), _dec3 = property({
        displayName: "Sync OnDisable",
        tooltip: "當 Node 啟用時同步一次所有選定的狀態至屬性 Group Nodes 中"
      }), _dec4 = property({
        displayName: "Sync Recursive",
        tooltip: "是否遞迴同步屬性 Group Nodes 中帶有 GroupNode 元件的節點"
      }), _dec5 = property({
        type: [Node],
        displayName: "Group Nodes"
      }), _dec6 = property({
        displayName: "Active Aware",
        tooltip: "當啓閉狀態改變時是否讓群組裡的 Node 跟著啓閉調整"
      }), _dec7 = property({
        displayName: "Position Aware",
        tooltip: "當位置改變時是否讓群組裡的 Node 跟著調整相對位置"
      }), _dec8 = property({
        type: Enum(PositionMode),
        displayName: "Position Mode",
        tooltip: "當座標改變時子元件跟著調動的參數",
        visible: function visible() {
          return this.m_positionAware;
        }
      }), _dec9 = property({
        displayName: "Rotation Aware",
        tooltip: "當旋轉改變時是否讓群組裡的 Node 跟著調整轉角"
      }), _dec10 = property({
        displayName: "Scale Aware",
        tooltip: "當縮放比例改變時是否讓群組裡的 Node 跟著改變縮放比例"
      }), _dec11 = property({
        type: Enum(ScaleMode),
        displayName: "Scale Mode",
        tooltip: "當縮放改變時子元件跟著調動的參數",
        visible: function visible() {
          return this.m_scaleAware;
        }
      }), _dec12 = property({
        displayName: "Color Aware",
        tooltip: "當顏色改變時是否讓群組裡的 Node 跟著改變顏色"
      }), _dec13 = property({
        type: Enum(ColorMode),
        displayName: "Color Mode",
        tooltip: "當顏色改變時子元件跟著調動的參數",
        visible: function visible() {
          return this.m_colorAware;
        }
      }), _dec14 = property({
        displayName: "Size Aware",
        tooltip: "當大小改變時是否讓群組裡的 Node 跟著改變大小"
      }), _dec15 = property({
        type: Enum(SizeMode),
        displayName: "Size Mode",
        tooltip: "當大小改變時子元件跟著調動的參數",
        visible: function visible() {
          return this.m_sizeAware;
        }
      }), ccclass(_class = executeInEditMode(_class = _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GroupNode, _Component);

        function GroupNode() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.m_lastPos = void 0;
          _this.m_lastRotation = void 0;

          _initializerDefineProperty(_this, "m_syncOnEnable", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_syncOnDisable", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_syncRecursive", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_nodes", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_activeAware", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_positionAware", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_positionMode", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rotationAware", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scaleAware", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scaleMode", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_colorAware", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_colorMode", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_sizeAware", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_sizeMode", _descriptor14, _assertThisInitialized(_this));

          _this.m_isRegisted = false;
          return _this;
        }

        var _proto = GroupNode.prototype;

        _proto.__preload = function __preload() {
          if (this.m_isRegisted) {
            return;
          }

          this.m_isRegisted = true;
          this.m_lastPos = v2(this.node.position.x, this.node.position.y);
          this.m_lastRotation = this.node.angle;
          this.node.on(HIERARCHY_EVENT, this.OnActiveChanged, this);
          this.node.on(Node.EventType.COLOR_CHANGED, this.OnColorChanged, this);
          this.node.on(Node.EventType.TRANSFORM_CHANGED, this.OnRotationChanged, this);
          this.node.on(Node.EventType.TRANSFORM_CHANGED, this.OnPositionChanged, this);
          this.node.on(Node.EventType.TRANSFORM_CHANGED, this.OnScaleChanged, this);
          this.node.on(Node.EventType.SIZE_CHANGED, this.OnSizeChanged, this);
          director.on(Director.EVENT_BEFORE_DRAW, this.StateCheck, this);
        };

        _proto.ForceInit = function ForceInit() {
          this.__preload();
        };

        _proto.onDestroy = function onDestroy() {
          _Component.prototype.onDestroy && _Component.prototype.onDestroy.call(this);
          this.node.off(HIERARCHY_EVENT, this.OnActiveChanged, this);
          this.node.off(Node.EventType.TRANSFORM_CHANGED, this.OnPositionChanged, this);
          this.node.off(Node.EventType.COLOR_CHANGED, this.OnColorChanged, this);
          this.node.off(Node.EventType.TRANSFORM_CHANGED, this.OnRotationChanged, this);
          this.node.off(Node.EventType.TRANSFORM_CHANGED, this.OnScaleChanged, this);
          this.node.off(Node.EventType.SIZE_CHANGED, this.OnSizeChanged, this);
          director.off(Director.EVENT_BEFORE_DRAW, this.StateCheck, this);
        };

        _proto.onEnable = function onEnable() {
          _Component.prototype.onEnable && _Component.prototype.onEnable.call(this);
          this.m_syncOnEnable && this.SyncAware();
        };

        _proto.onDisable = function onDisable() {
          _Component.prototype.onDisable && _Component.prototype.onDisable.call(this);
          this.m_syncOnDisable && this.SyncAware();
        }
        /**
         * 同步所有屬性
         */
        ;

        _proto.SyncAware = function SyncAware() {
          this.SyncActive();
          this.SyncSize();
          this.SyncPosition();
          this.SyncRotation();
          this.SyncOpacity();
          this.SyncColor();
          this.SyncScale();
        }
        /**
         * 繪圖前狀態檢查
         */
        ;

        _proto.StateCheck = function StateCheck() {
          if (this.node.isValid && !!this.node["_renderFlag"]
          /*& cc[ "RenderFlow" ].FLAG_OPACITY*/
          ) {
              this.OnOpacityChanged();
            }
        }
        /**
         * 同步子 GroupNode
         * @param syncFunc 同步執行的方法
         * @param node 同步對象
         */
        ;

        _proto.SyncGroupChild = function SyncGroupChild(syncFunc, node) {
          var groupNode = node.getComponent(GroupNode);
          this.m_syncRecursive && groupNode && syncFunc.call(groupNode);
        }
        /**
         * 同步縮放
         */
        ;

        _proto.SyncScale = function SyncScale() {
          if (this.m_scaleAware) {
            for (var _iterator = _createForOfIteratorHelperLoose(this.m_nodes), _step; !(_step = _iterator()).done;) {
              var eachNode = _step.value;

              if (eachNode && eachNode.isValid) {
                eachNode.scale = new Vec3(this.node.scale.x, this.node.scale.y, this.node.scale.z);
                this.SyncGroupChild(this.SyncScale, eachNode);
              }
            }
          }
        }
        /**
         * 縮放變動事件
         */
        ;

        _proto.OnScaleChanged = function OnScaleChanged() {
          this.SyncScale();
        }
        /**
         * 同步顏色
         */
        ;

        _proto.SyncColor = function SyncColor() {
          if (this.m_colorAware) {
            var color = this.node.getComponent(UIRenderer).color;

            for (var _iterator2 = _createForOfIteratorHelperLoose(this.m_nodes), _step2; !(_step2 = _iterator2()).done;) {
              var eachNode = _step2.value;

              if (eachNode && eachNode.isValid) {
                eachNode.getComponent(UIRenderer).color = color;
                this.SyncGroupChild(this.SyncColor, eachNode);
              }
            }
          }
        }
        /**
         * 顏色變動事件
         */
        ;

        _proto.OnColorChanged = function OnColorChanged() {
          this.SyncColor();
        }
        /**
         * 同步透明度
         */
        ;

        _proto.SyncOpacity = function SyncOpacity() {
          if (this.m_colorAware && !!(this.m_colorMode & ColorMode.A)) {
            for (var _iterator3 = _createForOfIteratorHelperLoose(this.m_nodes), _step3; !(_step3 = _iterator3()).done;) {
              var eachNode = _step3.value;

              if (eachNode && eachNode.isValid) {
                eachNode.getComponent(UIOpacity).opacity = this.node.getComponent(UIOpacity).opacity;
                this.SyncGroupChild(this.SyncOpacity, eachNode);
              }
            }
          }
        }
        /**
         * 透明度變動事件
         */
        ;

        _proto.OnOpacityChanged = function OnOpacityChanged() {
          this.SyncOpacity();
        }
        /**
         * 同步旋轉
         */
        ;

        _proto.SyncRotation = function SyncRotation() {
          if (this.m_rotationAware) {
            var rotateDiff = this.node.angle - this.m_lastRotation;
            this.m_lastRotation = this.node.angle;

            for (var _iterator4 = _createForOfIteratorHelperLoose(this.m_nodes), _step4; !(_step4 = _iterator4()).done;) {
              var eachNode = _step4.value;

              if (eachNode && eachNode.isValid) {
                eachNode.angle = eachNode.angle + rotateDiff;
                this.SyncGroupChild(this.SyncRotation, eachNode);
              }
            }
          }
        }
        /**
         * 旋轉變動事件
         */
        ;

        _proto.OnRotationChanged = function OnRotationChanged() {
          this.SyncRotation();
        }
        /**
         * 同步啓閉
         */
        ;

        _proto.SyncActive = function SyncActive() {
          if (this.m_activeAware) {
            var active = this.node.active;

            for (var _iterator5 = _createForOfIteratorHelperLoose(this.m_nodes), _step5; !(_step5 = _iterator5()).done;) {
              var eachNode = _step5.value;

              if (eachNode && eachNode.isValid) {
                eachNode.active = active;
                this.SyncGroupChild(this.SyncActive, eachNode);
              }
            }
          }
        }
        /**
         * 啓閉變動事件
         */
        ;

        _proto.OnActiveChanged = function OnActiveChanged() {
          this.SyncActive();
        }
        /**
         * 同步位置
         */
        ;

        _proto.SyncPosition = function SyncPosition() {
          if (this.m_positionAware) {
            var diffX = this.node.position.x - this.m_lastPos.x;
            var diffY = this.node.position.y - this.m_lastPos.y;
            this.m_lastPos.x = this.node.position.x;
            this.m_lastPos.y = this.node.position.y;

            for (var _iterator6 = _createForOfIteratorHelperLoose(this.m_nodes), _step6; !(_step6 = _iterator6()).done;) {
              var eachNode = _step6.value;

              if (eachNode && eachNode.isValid) {
                eachNode.setPosition(v3(eachNode.position.x + diffX, eachNode.position.y + diffY, eachNode.position.z));
                this.SyncGroupChild(this.SyncPosition, eachNode);
              }
            }
          }
        }
        /**
         * 位置變動事件
         */
        ;

        _proto.OnPositionChanged = function OnPositionChanged() {
          this.SyncPosition();
        }
        /**
         * 同步大小
         */
        ;

        _proto.SyncSize = function SyncSize() {
          if (this.m_sizeAware) {
            for (var _iterator7 = _createForOfIteratorHelperLoose(this.m_nodes), _step7; !(_step7 = _iterator7()).done;) {
              var eachNode = _step7.value;

              if (eachNode && eachNode.isValid) {
                !!(this.m_sizeMode & SizeMode.WIDTH) && (eachNode.getComponent(UITransform).width = this.node.getComponent(UITransform).width);
                !!(this.m_sizeMode & SizeMode.HEIGHT) && (eachNode.getComponent(UITransform).height = this.node.getComponent(UITransform).height);
                this.SyncGroupChild(this.SyncSize, eachNode);
              }
            }
          }
        }
        /**
         * 大小變動事件
         */
        ;

        _proto.OnSizeChanged = function OnSizeChanged() {
          this.SyncSize();
        };

        _createClass(GroupNode, [{
          key: "Nodes",
          get: function get() {
            return this.m_nodes;
          }
        }]);

        return GroupNode;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_syncOnEnable", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_syncOnDisable", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_syncRecursive", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_nodes", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_activeAware", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_positionAware", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_positionMode", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return PositionMode.BOTH;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_rotationAware", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_scaleAware", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_scaleMode", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ScaleMode.BOTH;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_colorAware", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_colorMode", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ColorMode.RGBA;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_sizeAware", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_sizeMode", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SizeMode.BOTH;
        }
      })), _class2)) || _class) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IconBox.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './FloatView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Animation, log, Component, FloatView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Animation = module.Animation;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      FloatView = module.default;
    }],
    execute: function () {
      exports({
        IconBoxSeat: void 0,
        IconUpdates: void 0
      });

      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "dd065Up5P9AA4hny8wW3tiR", "IconBox", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      /**
      * [0]:任務
      * [1]:聯合彩金
      * [2]:滿額必開
      * [3]:排行榜
      * [4]:贏更多
      * [5]:內購
      * [6]:碎片
      * [7]:免費贈金
      */

      var IconBoxSeat;
      /**
       * Icon按鈕用update cb
       */

      (function (IconBoxSeat) {
        IconBoxSeat[IconBoxSeat["DailyMission"] = 0] = "DailyMission";
        IconBoxSeat[IconBoxSeat["JackPot"] = 1] = "JackPot";
        IconBoxSeat[IconBoxSeat["MustHitBy"] = 2] = "MustHitBy";
        IconBoxSeat[IconBoxSeat["RankBoard"] = 3] = "RankBoard";
        IconBoxSeat[IconBoxSeat["WinMore"] = 4] = "WinMore";
        IconBoxSeat[IconBoxSeat["BuyBonus"] = 5] = "BuyBonus";
        IconBoxSeat[IconBoxSeat["Debris"] = 6] = "Debris";
        IconBoxSeat[IconBoxSeat["Trial"] = 7] = "Trial";
      })(IconBoxSeat || (IconBoxSeat = exports('IconBoxSeat', {})));

      var IconUpdates;

      (function (IconUpdates) {
        IconUpdates[IconUpdates["JPBanner"] = 0] = "JPBanner";
        IconUpdates[IconUpdates["JPBar"] = 1] = "JPBar";
        IconUpdates[IconUpdates["JPRollingValue"] = 2] = "JPRollingValue";
        IconUpdates[IconUpdates["MHBBtn"] = 3] = "MHBBtn";
        IconUpdates[IconUpdates["MHBRollingValue"] = 4] = "MHBRollingValue";
      })(IconUpdates || (IconUpdates = exports('IconUpdates', {})));

      var IconBox = exports('default', (_dec = property({
        type: Node,
        tooltip: "按鈕位置"
      }), _dec2 = property({
        type: Node,
        tooltip: "主按鈕"
      }), _dec3 = property({
        type: Node,
        tooltip: "收回按鈕"
      }), _dec4 = property({
        type: Animation,
        tooltip: "按鈕位置"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(IconBox, _Component);

        function IconBox() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_btnSeats", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_mainBtn", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_closeBtn", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_btnAnim", _descriptor4, _assertThisInitialized(_this));

          _this.m_isOpen = true;
          _this.m_currentTouchName = null;
          _this.m_updateFuncs = [null, null, null, null, null];
          return _this;
        }

        var _proto = IconBox.prototype; // LIFE-CYCLE CALLBACKS:

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          this.m_mainBtn.on(Node.EventType.TOUCH_START, function (event) {
            log(" this.m_discountBtn 3 ", _this2.m_currentTouchName); // event.stopPropagationImmediate();
            // event.stopPropagation();

            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this2.m_currentTouchName == null) {
              _this2.m_currentTouchName = event.target.name;

              _this2.node.getComponent(FloatView).OnTouchStart(event.getUILocation());
            } else {
              if (event.target && event.target.active == false) {
                _this2.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_mainBtn.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this2.m_currentTouchName == event.target.name) {
              _this2.m_currentTouchName = null;
            }
          });
          this.m_mainBtn.on(Node.EventType.TOUCH_MOVE, function (event) {
            if (_this2.m_currentTouchName == event.target.name) {
              _this2.m_currentTouchName = event.target.name;

              _this2.node.getComponent(FloatView).OnTouchMove(event.getUILocation());
            } else {
              if (event.target && event.target.active == false) {
                _this2.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_mainBtn.on(Node.EventType.TOUCH_END, function (event) {
            if (_this2.m_currentTouchName != event.target.name) {
              return;
            }

            _this2.m_currentTouchName = null;

            var cb = function cb() {
              if (_this2.m_isOpen) {
                _this2.CloseMenu();
              } else {
                _this2.OpenMenu();
              }
            };

            _this2.node.getComponent(FloatView).OnTouchEnd(event.getUILocation(), cb);
          });
          this.m_closeBtn.on(Node.EventType.TOUCH_END, function (event) {
            _this2.CloseMenu();
          });
        } // start() {}
        ;

        _proto.update = function update(dt) {
          if (this.m_btnSeats[IconBoxSeat.JackPot].active && this.m_updateFuncs[IconBoxSeat.JackPot]) {
            this.m_updateFuncs[IconUpdates.JPBanner] && this.m_updateFuncs[IconUpdates.JPBanner](dt);
            this.m_updateFuncs[IconUpdates.JPBar] && this.m_updateFuncs[IconUpdates.JPBar](dt);
            this.m_updateFuncs[IconUpdates.JPRollingValue] && this.m_updateFuncs[IconUpdates.JPRollingValue](dt);
          }

          if (this.m_btnSeats[IconBoxSeat.MustHitBy].active) {
            this.m_updateFuncs[IconUpdates.MHBBtn] && this.m_updateFuncs[IconUpdates.MHBBtn](dt);
            this.m_updateFuncs[IconUpdates.MHBRollingValue] && this.m_updateFuncs[IconUpdates.MHBRollingValue](dt);
          }
        };

        _proto.SetUpdateFuns = function SetUpdateFuns(seat, cb) {
          this.m_updateFuncs[seat] = cb;
        };

        _proto.OpenMenu = function OpenMenu() {
          if (!this.m_isOpen) {
            this.m_isOpen = true;
            this.m_btnAnim.play("Clip_IconBox_Open");
          }
        };

        _proto.CloseMenu = function CloseMenu() {
          if (this.m_isOpen) {
            this.m_isOpen = false;
            this.m_btnAnim.play("Clip_IconBox_Close");
          }
        };

        _proto.SetBtnSeat = function SetBtnSeat(btn, seat) {
          // error( 'SetBtnSeat', btn.name, seat )
          if (!this.m_btnSeats[seat].getChildByName(btn.name)) {
            this.node.active = true;
            this.m_btnSeats[seat].active = true;
            this.m_btnSeats[seat].addChild(btn);
          }
        };

        _proto.OpenBtnSeat = function OpenBtnSeat(seat, isOpen) {
          if (isOpen === void 0) {
            isOpen = true;
          } // error( 'OpenBtnSeat', seat, isOpen )


          this.m_btnSeats[seat].active = isOpen;

          if (isOpen) {
            this.node.active = true;
          } else {
            // 檢查是否全周邊部關掉,是的話關閉iconBox
            for (var i = 0; i < this.m_btnSeats.length; i++) {
              if (this.m_btnSeats[i].active) {
                this.node.active = true;
                break;
              }

              this.node.active = false;
            }
          }
        };

        _createClass(IconBox, [{
          key: "BtnAnim",
          get: function get() {
            return this.m_btnAnim;
          }
        }]);

        return IconBox;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_btnSeats", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_mainBtn", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_closeBtn", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_btnAnim", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IconSorter.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, error;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      error = module.error;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e2366zawc5Ndp69JXs5nPnT", "IconSorter", undefined);

      function IconSortFunc(a, b) {
        return a.order - b.order;
      }

      var IconSorter = exports('default', /*#__PURE__*/function () {
        /**現在已開啟的icon列表 */

        /**
         * constructor
         * @param defaultOrder 初始化時設定的應排順序
         * @param seats 要放icon的位置
         */
        function IconSorter(defaultOrder, seats) {
          this.nowOrder = [];
          this.defaultOrder = defaultOrder;
          this.seats = seats;
          defaultOrder.length > seats.length ? error("IconSorter: order more than seats") : 0;
        }
        /**
         * @param name
         * @param nodes 要被對齊的nodes
         */


        var _proto = IconSorter.prototype;

        _proto.AddIcon = function AddIcon(name, nodes) {
          var _this = this;

          this.defaultOrder.forEach(function (str, idx) {
            if (str === name) {
              for (var i = 0; i < _this.nowOrder.length; i++) {
                // 已有的icon就不須再加
                if (_this.nowOrder[i].name === name) {
                  return _this;
                }
              }

              _this.nowOrder.push({
                name: name,
                order: idx,
                nodes: nodes
              });
            }
          });
          return this;
        };

        _proto.RemoveIcon = function RemoveIcon(name) {
          for (var i = 0; i < this.nowOrder.length; i++) {
            if (this.nowOrder[i].name === name) {
              this.nowOrder.splice(i, 1);
              break;
            }
          }

          return this;
        };

        _proto.Sort = function Sort() {
          this.nowOrder.sort(IconSortFunc);
          return this;
        };

        _proto.Reorder = function Reorder() {
          var _this2 = this;

          this.nowOrder.forEach(function (data, idx) {
            data.nodes.forEach(function (node) {
              node.position = _this2.seats[idx].position;
            });
          });
          return this;
        };

        return IconSorter;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IconTemplate.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LifeSocket.ts', './MsgBox.ts', './Define.ts', './LocaleStringManager.ts', './Tools.ts', './GameIconComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, SpriteFrame, Label, Node, tween, Animation, Component, LifeSocket, MsgBox, Define, LocaleStringManager, Tools, GameIconComponent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      Node = module.Node;
      tween = module.tween;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      GameIconComponent = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16;

      cclegacy._RF.push({}, "73e93JzYttGYosPBbaodOkI", "IconTemplate", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var IconTemplate = exports('default', (_dec = property({
        type: Boolean,
        tooltip: "Icon是否禁止點擊"
      }), _dec2 = property({
        type: Boolean,
        tooltip: "Icon點擊是否顯示prompt"
      }), _dec3 = property({
        type: GameIconComponent,
        tooltip: "遊戲icon"
      }), _dec4 = property({
        type: Sprite,
        tooltip: "event圖"
      }), _dec5 = property({
        type: Sprite,
        tooltip: "愛心圖"
      }), _dec6 = property({
        type: SpriteFrame,
        tooltip: "收藏圖示"
      }), _dec7 = property({
        type: SpriteFrame,
        tooltip: "未收藏圖示"
      }), _dec8 = property({
        type: Label,
        tooltip: "收藏人數提示"
      }), _dec9 = property({
        type: Node,
        tooltip: "icon點擊提示"
      }), _dec10 = property({
        type: Node,
        tooltip: "收藏點擊提示"
      }), _dec11 = property({
        type: Node,
        tooltip: "內購icon"
      }), _dec12 = property({
        type: Node,
        tooltip: "內購icon Bonus"
      }), _dec13 = property({
        type: Node,
        tooltip: "prompt資訊面板"
      }), _dec14 = property({
        type: Sprite,
        tooltip: "prompt資訊文字,0:mult 1:win"
      }), _dec15 = property({
        type: Label,
        tooltip: "prompt資訊數字,0:mult 1:win"
      }), _dec16 = property({
        type: Node,
        tooltip: "GO按鈕"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(IconTemplate, _Component);

        function IconTemplate() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_iconTouchDisable", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_iconTouchShowPrompt", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_gameIcon", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_eventSprites", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_favorSprite", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_favorSpriteFrame", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_uncollectedSpriteFrame", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_favorStateLabel", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_iconClickHintNode", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_favorClickHintNode", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyFGHintNode", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_buyFGHintBonus", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_promptInfo", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_promptInfoTxt", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_promptInfoNum", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_goBtn", _descriptor16, _assertThisInitialized(_this));

          _this.m_isFavor = false;
          _this.m_gameId = null;
          _this.m_controller = null;
          _this.m_addCb = null;
          _this.m_removeCb = null;
          _this.m_inGameId = 0;
          _this.m_iconEventNo = 0;
          _this.m_spriteAtlas = null;
          _this.m_closeTween = null;
          return _this;
        }

        var _proto = IconTemplate.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.m_favorSprite.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this2.m_controller) {
              if (_this2.m_controller.CurrentTouchName == null && _this2.m_favorSprite.node.active) {
                _this2.m_controller.CurrentTouchName = event.target.name;
              } else {
                if (event.target && event.target.active == false) {
                  _this2.m_controller.CurrentTouchName = event.target.name;
                }
              }
            }
          });
          this.m_favorSprite.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this2.m_controller && _this2.m_controller.CurrentTouchName == event.target.name) {
              _this2.m_controller.CurrentTouchName = null;
            }
          });
          this.m_favorSprite.node.on(Node.EventType.TOUCH_END, function (event) {
            if (_this2.m_controller) {
              if (_this2.m_controller.CurrentTouchName != event.target.name) {
                return;
              }

              _this2.m_controller.CurrentTouchName = null;

              if (_this2.m_isFavor) {
                var setting = {};
                setting.contextKey = Define.StringKey.FAVOR_REMOVE_HINT;
                setting.titleKey = MsgBox.DEFAULT_TITLE_KEY;
                setting.showCancelBtn = true;
                setting.showConfirmBtn = true;
                setting.showCloseBtn = false;
                setting.subFormatString = [LocaleStringManager.GetInstance().GetGameName(_this2.m_gameId)];

                setting.confirmCB = function () {
                  if (_this2.m_removeCb) {
                    _this2.m_removeCb(_this2.m_gameId);
                  }
                };

                MsgBox.getInstance().PushMessageBoxSetting(setting);
              } else {
                if (_this2.m_addCb) {
                  _this2.m_addCb(_this2.m_gameId);
                }
              }
            }
          });

          if (this.m_goBtn) {
            this.m_goBtn.on(Node.EventType.TOUCH_END, function (event) {
              if (_this2.m_gameId === _this2.m_inGameId) {
                MsgBox.getInstance().ShowMessageBox(Define.StringKey.FAVOR_INVALID_HINT);
              } else {
                var gameName = LocaleStringManager.GetInstance().GetGameName(_this2.m_gameId);
                MsgBox.getInstance().ShowFullMessageBox(Define.StringKey.CHANGE_GAME_HINT, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, [gameName], function () {
                  LifeSocket.GetInstance().ReqUrl(_this2.m_gameId, _this2.m_iconEventNo);
                }, function () {}, function () {});
              }
            });
          } //icon
          // if ( !this.m_iconTouchDisable )
          // {
          //     this.m_gameIconSprite.node.on( Node.EventType.TOUCH_START, ( event: EventTouch ) =>
          //     {
          //         event.propagationImmediateStopped = true;
          //         event.propagationStopped = true;
          //         if ( this.m_controller )
          //         {
          //             if ( this.m_controller.CurrentTouchName == null && this.m_gameIconSprite.node.active )
          //             {
          //                 this.m_controller.CurrentTouchName = event.target.name;
          //             }
          //             else
          //             {
          //                 if ( event.target && event.target.active == false )
          //                 {
          //                     this.m_controller.CurrentTouchName = event.target.name;
          //                 }
          //             }
          //         }
          //     } );
          //     this.m_gameIconSprite.node.on( Node.EventType.TOUCH_CANCEL, ( event ) =>
          //     {
          //         if ( this.m_controller && this.m_controller.CurrentTouchName == event.target.name )
          //         {
          //             this.m_controller.CurrentTouchName = null;
          //         }
          //     } );
          //     this.m_gameIconSprite.node.on( Node.EventType.TOUCH_END, ( event ) =>
          //     {
          //         if ( this.m_controller )
          //         {
          //             if ( this.m_controller && this.m_controller.CurrentTouchName != event.target.name )
          //             {
          //                 return;
          //             }
          //             this.m_controller.CurrentTouchName = null;
          //             if ( Tools.CheckSwitchOff( Define.SwitchOffKeyDefine.AllChangeGameImport ) )
          //             {
          //                 return;
          //             }
          //             if ( this.m_gameId === this.m_inGameId )
          //             {
          //                 MsgBox.getInstance().ShowMessageBox( Define.StringKey.FAVOR_INVALID_HINT );
          //             }
          //             else
          //             {
          //                 let gameName = LocaleStringManager.GetInstance().GetGameName( this.m_gameId )
          //                 MsgBox.getInstance().ShowFullMessageBox( Define.StringKey.CHANGE_GAME_HINT, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, [ gameName ],
          //                     () =>
          //                     {
          //                         LifeSocket.GetInstance().ReqUrl( this.m_gameId, this.m_iconEventNo );
          //                     },
          //                     () => { },
          //                     () => { }
          //                 );
          //             }
          //         }
          //     } );
          // }

        };

        _proto.Init = function Init(controller, inGameId) {
          this.m_controller = controller;
          this.m_inGameId = inGameId;
          this.SetIsFavor(false);
        };

        _proto.SetCb = function SetCb(eventNo, addCb, removeCb) {
          this.m_iconEventNo = eventNo;
          this.m_addCb = addCb;
          this.m_removeCb = removeCb;
        };

        _proto.SetIconSpriteFrame = function SetIconSpriteFrame(gameIcon, gameId, closeOtherCb) {
          var _this3 = this;

          if (closeOtherCb === void 0) {
            closeOtherCb = null;
          }

          var checkInGameOrChangeGame = function checkInGameOrChangeGame() {
            if (_this3.m_gameId === _this3.m_inGameId) {
              MsgBox.getInstance().ShowMessageBox(Define.StringKey.FAVOR_INVALID_HINT);
            } else {
              var gameName = LocaleStringManager.GetInstance().GetGameName(_this3.m_gameId);
              MsgBox.getInstance().ShowFullMessageBox(Define.StringKey.CHANGE_GAME_HINT, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, [gameName], function () {
                LifeSocket.GetInstance().ReqUrl(_this3.m_gameId, _this3.m_iconEventNo);
              }, function () {}, function () {});
            }
          };

          var clickBtn = function clickBtn() {
            if (!_this3.m_iconTouchDisable) {
              if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.AllChangeGameImport)) {
                return;
              }

              if (_this3.m_iconTouchShowPrompt && _this3.m_promptInfo) {
                if (_this3.m_promptInfo.active) {
                  checkInGameOrChangeGame();
                } else {
                  closeOtherCb && closeOtherCb();

                  _this3.ShowPrompt(true);
                }
              } else {
                checkInGameOrChangeGame();
              }
            }
          };

          this.m_gameIcon.SetGameIcon(gameIcon, clickBtn); // this.m_gameIconSprite.spriteFrame = gameIcon;

          this.m_gameId = gameId;
        };

        _proto.SetTagSpriteFrame = function SetTagSpriteFrame(eventIcons) {
          if (eventIcons === null) {
            this.m_eventSprites.forEach(function (element) {
              element.node.active = false;
            });
          } else {
            while (eventIcons.length < this.m_eventSprites.length) {
              eventIcons.push(null);
            }

            for (var i = 0; i < this.m_eventSprites.length; i++) {
              this.m_eventSprites[i].node.active = true;
              this.m_eventSprites[i].spriteFrame = eventIcons[i];
            }
          }
        };

        _proto.SetIsFavor = function SetIsFavor(isFavor, isActive) {
          if (isActive === void 0) {
            isActive = true;
          }

          this.m_isFavor = isFavor;
          this.m_favorSprite.node.active = isActive;

          if (this.m_isFavor) {
            this.m_favorSprite.spriteFrame = this.m_favorSpriteFrame;
          } else {
            this.m_favorSprite.spriteFrame = this.m_uncollectedSpriteFrame;
          }
        };

        _proto.SetIconTouchShowPrompt = function SetIconTouchShowPrompt() {
          this.m_iconTouchShowPrompt = true;
        };

        _proto.ShowIconHint = function ShowIconHint() {
          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.AllChangeGameImport)) {
            if (this.m_iconClickHintNode) {
              this.m_iconClickHintNode.active = false;
            }

            return;
          }

          if (this.m_iconClickHintNode) {
            this.m_iconClickHintNode.active = true;
          }

          if (this.m_favorClickHintNode) {
            this.m_favorClickHintNode.active = false;
          }
        };

        _proto.ShowPrompt = function ShowPrompt(isOpen) {
          var _this4 = this;

          if (this.m_promptInfo) {
            if (this.m_promptInfo.active && !isOpen && !this.m_closeTween) {
              this.m_iconTouchDisable = true;
              this.m_closeTween = tween(this.node).call(function () {
                _this4.m_promptInfo.getComponent(Animation).stop();

                _this4.m_promptInfo.getComponent(Animation).play("Clip_WinMore_Feature_PromptPanel_End");
              }).delay(0.5).call(function () {
                _this4.m_promptInfo.active = isOpen;
                _this4.m_iconTouchDisable = false;
                _this4.m_closeTween = null;
              }).start();
            } else if (isOpen && !Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.AllChangeGameImport)) {
              this.m_promptInfo.active = isOpen;
              this.m_promptInfo.getComponent(Animation).play("Clip_WinMore_Feature_PromptPanel_Start");
            } else {
              this.m_promptInfo.active = false;
            }
          }
        };

        _proto.ShowFavorHint = function ShowFavorHint(show) {
          if (show === void 0) {
            show = true;
          }

          if (this.m_iconClickHintNode) {
            this.m_iconClickHintNode.active = !show;
          }

          if (this.m_favorClickHintNode) {
            this.m_favorClickHintNode.active = show;
          }
        };

        _proto.SetMall = function SetMall(hasMall) {
          if (this.m_buyFGHintNode) {
            this.m_buyFGHintNode.active = hasMall;
          }

          if (this.m_buyFGHintBonus) {
            this.m_buyFGHintBonus.active = hasMall;
          }
        };

        _proto.SetDau = function SetDau(dau) {
          if (this.m_favorStateLabel) {
            this.m_favorStateLabel.string = dau.toString();
            Tools.SetFont(this.m_favorStateLabel);
          }
        };

        _proto.SetTop = function SetTop(mult, win) {
          if (!this.m_spriteAtlas) {
            this.m_spriteAtlas = LocaleStringManager.GetInstance().GetCommonAtlas();
          }

          if (this.m_spriteAtlas && this.m_spriteAtlas.getSpriteFrame("WinMore_Txt_hint_Multiplier")) {
            this.m_promptInfoTxt[0].spriteFrame = this.m_spriteAtlas.getSpriteFrame("WinMore_Txt_hint_Multiplier");
            this.m_promptInfoTxt[1].spriteFrame = this.m_spriteAtlas.getSpriteFrame("WinMore_Txt_hint_Winnings");
          }

          if (this.m_promptInfoNum[0]) {
            if (!!mult) {
              this.m_promptInfoNum[0].string = mult.toString() + "X";
            } else {
              this.m_promptInfoNum[0].string = "-";
            }

            if (!!win) {
              this.m_promptInfoNum[1].string = win.toString();
            } else {
              this.m_promptInfoNum[1].string = "-";
            }
          }
        };

        _createClass(IconTemplate, [{
          key: "GameId",
          get: function get() {
            return this.m_gameId;
          }
        }]);

        return IconTemplate;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_iconTouchDisable", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_iconTouchShowPrompt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_gameIcon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_eventSprites", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_favorSprite", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_favorSpriteFrame", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_uncollectedSpriteFrame", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_favorStateLabel", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_iconClickHintNode", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_favorClickHintNode", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_buyFGHintNode", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_buyFGHintBonus", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_promptInfo", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_promptInfoTxt", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_promptInfoNum", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_goBtn", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IframeCommandManager.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, sys;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fd3c4QcsdREXKpljtZ01Lce", "IframeCommandManager", undefined);

      var TopToGame = {
        StopAutoplay: "stopAutoplay"
      };
      var CloseWebView = 'CloseWebView';

      var IframeCommandManager = /*#__PURE__*/function () {
        //從廠商頁面傳進來的command
        function IframeCommandManager() {
          var _this = this;

          this.m_iframeCommandCbs = [];

          if (!sys.isNative) {
            window.addEventListener('message', function (event) {
              if (event.data == CloseWebView) {
                for (var i = 0; i < _this.m_iframeCommandCbs.length; i++) {
                  var _this$m_iframeCommand;

                  (_this$m_iframeCommand = _this.m_iframeCommandCbs[i]) == null ? void 0 : _this$m_iframeCommand.CloseWebView == null ? void 0 : _this$m_iframeCommand.CloseWebView(event.origin);
                }
              } else {
                var data = event.data;

                if (data.name) {
                  switch (data.name) {
                    case TopToGame.StopAutoplay:
                      for (var _i = 0; _i < _this.m_iframeCommandCbs.length; _i++) {
                        var _this$m_iframeCommand2;

                        (_this$m_iframeCommand2 = _this.m_iframeCommandCbs[_i]) == null ? void 0 : _this$m_iframeCommand2.StopAutoCb == null ? void 0 : _this$m_iframeCommand2.StopAutoCb();
                      }

                      break;
                  }
                }
              }
            }, false);
          }
        }

        var _proto = IframeCommandManager.prototype;

        _proto.AddCb = function AddCb(cb) {
          this.m_iframeCommandCbs.push(cb);
        };

        _proto.UseStopAutoCb = function UseStopAutoCb() {
          for (var i = 0; i < this.m_iframeCommandCbs.length; i++) {
            var _this$m_iframeCommand3;

            (_this$m_iframeCommand3 = this.m_iframeCommandCbs[i]) == null ? void 0 : _this$m_iframeCommand3.StopAutoCb == null ? void 0 : _this$m_iframeCommand3.StopAutoCb();
          }
        };

        _proto.SendClosed = function SendClosed() {
          window.parent.postMessage({
            name: "closed",
            sender: "game"
          }, "*");
        };

        return IframeCommandManager;
      }();

      var iframeCommandManager = exports('iframeCommandManager', new IframeCommandManager());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ILoadingView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "baf47jY4aNCZ5rDVIQoalmN", "ILoadingView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ILoadingView = exports('default', (_dec = property(Label), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ILoadingView, _Component);

        function ILoadingView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "label", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ILoadingView.prototype; // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {} // update (dt) {}
        ;

        return ILoadingView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "text", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'hello';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/iOSDevice.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createForOfIteratorHelperLoose, cclegacy;

  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('GetiOSDevice', GetiOSDevice);

      cclegacy._RF.push({}, "75bb5oI81VDmp51KKFfM4ZX", "iOSDevice", undefined);

      var iOSDevice = function iOSDevice(name, height, width, ratio, statusHeight, homeHeight) {
        this.name = name;
        this.height = height;
        this.width = width;
        this.ratio = ratio;
        this.statusHeight = statusHeight;
        this.homeHeight = homeHeight;
      };

      var deviceList = [new iOSDevice("iPhone 6.7-inch", 926, 428, 3, 44, 34), new iOSDevice("iPhone 6.5-inch", 896, 414, 3, 44, 34), new iOSDevice("iPhone 6.1-inch", 896, 414, 2, 44, 34), new iOSDevice("iPhone 5.8-inch", 812, 375, 3, 44, 34), new iOSDevice("iPhone 5.5-inch", 736, 414, 3, 18, 0), new iOSDevice("iPhone 4.7-inch", 667, 375, 2, 20, 0), new iOSDevice("iPhone 4-inch", 568, 320, 2, 20, 0), new iOSDevice("iPhone 3.5-inch", 480, 320, 2, 20, 0), new iOSDevice("iPhone(Legacy) & iPod Touch", 480, 320, 1, 20, 0), new iOSDevice("iPad Pro 12.9-inch", 1366, 1024, 2, 20, 0), new iOSDevice("iPad Pro 10.5-inch", 1112, 834, 2, 20, 0), new iOSDevice("iPad 9.7-inch Retina", 1024, 768, 2, 20, 0), new iOSDevice("iPad", 1024, 768, 1, 20, 0), new iOSDevice("iPad Mini Retina", 1024, 768, 2, 20, 0), new iOSDevice("iPad Mini", 1024, 768, 1, 20, 0)];

      function GetiOSDevice() {
        for (var _iterator = _createForOfIteratorHelperLoose(deviceList), _step; !(_step = _iterator()).done;) {
          var device = _step.value;

          if (screen.height === device.height && screen.width === device.width && window.devicePixelRatio === device.ratio) {
            return device;
          }
        }

        return null;
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ItemBall.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Animation, Sprite, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "e002eeAEpJN/LixXF9LMZGK", "ItemBall", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ItemBall = exports('default', (_dec = property({
        type: Animation,
        tooltip: "動畫"
      }), _dec2 = property({
        type: Sprite,
        tooltip: "道具卡"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ItemBall, _Component);

        function ItemBall() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_anim", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_iconSprite", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ItemBall.prototype;

        _proto.SetIcon = function SetIcon(icon) {
          this.m_iconSprite.spriteFrame = icon;
        };

        _proto.Show = function Show() {
          this.m_anim.play("Clip_Backpack_ItemCard_Ball");
        };

        _createClass(ItemBall, [{
          key: "IconSprite",
          get: function get() {
            return this.m_iconSprite;
          }
        }]);

        return ItemBall;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_anim", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_iconSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ItemCell.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BuffManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Label, Node, v3, Component, BuffManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Node = module.Node;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      BuffManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "69389wqubhK5r6onorSe8rR", "ItemCell", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ONE_HOUR_SECONDS = 3600;
      var ONE_MIN_SECONDS = 60;
      var SECOND_TO_MILI = 1000;
      var ItemCell = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "icon"
      }), _dec2 = property({
        type: Label,
        tooltip: "數量"
      }), _dec3 = property({
        type: Node,
        tooltip: "箭頭"
      }), _dec4 = property({
        type: Sprite,
        tooltip: "廠商提示"
      }), _dec5 = property({
        type: Node,
        tooltip: "壓黑主節點"
      }), _dec6 = property({
        type: Node,
        tooltip: "時鐘圖"
      }), _dec7 = property({
        type: Label,
        tooltip: "剩餘時間"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ItemCell, _Component);

        function ItemCell() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_iconSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_numLabel", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_arrowNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_vendorIconSprite", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_darkNode", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_clockNode", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_remainTimeLabel", _descriptor7, _assertThisInitialized(_this));

          _this.m_startTime = null;
          _this.m_BuffNode = null;
          _this.m_isBuffCard = false;
          _this.m_idx = -1;
          _this.m_buffIdx = -1;
          _this.m_touchCb = null;
          _this.m_tickCounter = 1;
          return _this;
        }

        var _proto = ItemCell.prototype;

        _proto.Init = function Init(start, touchCb) {
          this.m_touchCb = touchCb;
          this.m_iconSprite.spriteFrame = null;
          this.m_numLabel.node.active = false;
          this.m_idx = -1;
          this.m_startTime = start;
          this.SetDark();
        }
        /**多了新資訊，要改(此為重設道具卡資訊function) */
        ;

        _proto.SetItem = function SetItem(idx, icon, num, startTime) {
          if (icon) {
            this.m_iconSprite.spriteFrame = icon;
            this.m_numLabel.node.active = true;
            this.m_numLabel.string = "*" + num.toString();
            this.m_idx = idx;
          } else {
            this.m_iconSprite.spriteFrame = null;
            this.m_numLabel.node.active = false;
            this.m_idx = -1;
          }

          this.m_buffIdx = -1;
          this.m_isBuffCard = false;
          this.m_arrowNode.active = icon && idx === 0;
          this.m_startTime = startTime;
        };

        _proto.SetBuff = function SetBuff(idx, bIdx, node) {
          this.m_BuffNode = node;
          this.m_BuffNode.scale = v3(0.7, 0.7, 1);
          this.m_iconSprite.spriteFrame = null;
          this.m_iconSprite.node.addChild(this.m_BuffNode);
          this.m_numLabel.node.active = false;
          this.m_idx = idx;
          this.m_buffIdx = bIdx;
          this.m_isBuffCard = true;
          this.m_arrowNode.active = idx === 0;
        };

        _proto.ReturnBuff = function ReturnBuff() {
          if (this.m_BuffNode) {
            this.m_BuffNode.removeFromParent();
            BuffManager.GetInstance().ReturnBuffNode(this.m_BuffNode, this.m_BuffNode.name);
            this.m_BuffNode = null;
          }
        };

        _proto.SetColor = function SetColor(color) {
          this.m_iconSprite.color = color;
        };

        _proto.IsEmpty = function IsEmpty() {
          return this.m_iconSprite.spriteFrame === null;
        };

        _proto.OnSelect = function OnSelect() {
          if (this.m_touchCb && this.m_idx != -1 && !this.m_isBuffCard) {
            this.m_touchCb(this.m_idx, -1);
          } else if (this.m_buffIdx != -1 && this.m_isBuffCard) {
            this.m_touchCb(-1, this.m_buffIdx);
          }
        };

        _proto.SetArrowNode = function SetArrowNode(active) {
          this.m_arrowNode.active = active;
        };

        _proto.SetVendorIcon = function SetVendorIcon(active) {
          this.m_vendorIconSprite.node.active = active;
        }
        /**@ch 壓黑還不能使用的道具卡 */
        ;

        _proto.SetDark = function SetDark() {
          if (!this.m_startTime) {
            return;
          }

          var curTime = Date.now() / SECOND_TO_MILI;
          var startTime = this.m_startTime;

          if (curTime >= startTime) {
            // 可以用了
            this.m_remainTimeLabel.string = "";
            this.m_clockNode.active = false;
            this.m_darkNode.active = false;
            return;
          }

          this.m_darkNode.active = true;
          var exHours = Math.floor((startTime - curTime) / ONE_HOUR_SECONDS);
          startTime -= exHours * ONE_HOUR_SECONDS;
          var exMins = Math.floor((startTime - curTime) / ONE_MIN_SECONDS);
          startTime -= exMins * ONE_MIN_SECONDS;
          var exSeconds = Math.floor(startTime - curTime);
          var str = (exHours > 9 ? exHours.toString() : "0" + exHours.toString()) + ":" + (exMins > 9 ? exMins.toString() : "0" + exMins.toString()) // min
          + ":" + (exSeconds > 9 ? exSeconds.toString() : "0" + exSeconds.toString()); // sec

          this.m_clockNode.active = true;
          this.m_remainTimeLabel.string = str;
        };

        _proto.update = function update(dt) {
          if (this.m_darkNode.active || Date.now() / SECOND_TO_MILI < this.m_startTime) {
            this.m_tickCounter -= dt;

            if (this.m_tickCounter <= 0) {
              this.m_tickCounter = 1;
              this.SetDark();
            }
          }
        };

        _proto.onDestroy = function onDestroy() {
          this.m_remainTimeLabel.string = "";
        };

        return ItemCell;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_iconSprite", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_numLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_arrowNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_vendorIconSprite", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_darkNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_clockNode", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_remainTimeLabel", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ItemDetail.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './AppManager.ts', './LocaleStringManager.ts', './SoundManager.ts', './Tools.ts', './BuffManager.ts', './Backpack.ts', './ItemList.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Sprite, RichText, Button, Node, Animation, color, Component, v3, Define, AppManager, LocaleStringManager, SoundManager, Tools, BuffManager, VendorSource, ItemList;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      RichText = module.RichText;
      Button = module.Button;
      Node = module.Node;
      Animation = module.Animation;
      color = module.color;
      Component = module.Component;
      v3 = module.v3;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      AppManager = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      BuffManager = module.default;
    }, function (module) {
      VendorSource = module.VendorSource;
    }, function (module) {
      ItemList = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23;

      cclegacy._RF.push({}, "7732enn7YpBRKh7miHxsUSh", "ItemDetail", undefined);

      var SETTING_MIN = 1;
      var SETTING_MAX = 1;
      var HOLD_INTERVEL = 0.05;
      var CLICK_INTERVEL = 0.2;
      var PRESS_INTERVEL = 0.05;
      var HOLD_TIME_THRESHOLD = 1;
      var HOLD_SPEED = [1, 3, 5, 10, 50];
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ItemDetail = exports('default', (_dec = property({
        type: Label,
        tooltip: "道具卡說明標題"
      }), _dec2 = property({
        type: Sprite,
        tooltip: "道具卡圖片"
      }), _dec3 = property({
        type: Label,
        tooltip: "道具卡數量"
      }), _dec4 = property({
        type: Label,
        tooltip: "遊戲"
      }), _dec5 = property({
        type: Label,
        tooltip: "遊戲名稱"
      }), _dec6 = property({
        type: Label,
        tooltip: "押注"
      }), _dec7 = property({
        type: RichText,
        tooltip: "押注資訊"
      }), _dec8 = property({
        type: Label,
        tooltip: "財產"
      }), _dec9 = property({
        type: Sprite,
        tooltip: "財產不足"
      }), _dec10 = property({
        type: RichText,
        tooltip: "財產資訊"
      }), _dec11 = property({
        type: Label,
        tooltip: "使用日期"
      }), _dec12 = property({
        type: Sprite,
        tooltip: "未到使用日期"
      }), _dec13 = property({
        type: Label,
        tooltip: "使用日期資訊"
      }), _dec14 = property({
        type: Label,
        tooltip: "說明"
      }), _dec15 = property({
        type: RichText,
        tooltip: "說明內容"
      }), _dec16 = property({
        type: Button,
        tooltip: "使用"
      }), _dec17 = property({
        type: Label,
        tooltip: "使用文字"
      }), _dec18 = property({
        type: Node,
        tooltip: "限制原因"
      }), _dec19 = property({
        type: Label,
        tooltip: "限制原因文字"
      }), _dec20 = property({
        type: Node,
        tooltip: "調整數量"
      }), _dec21 = property({
        type: Button,
        tooltip: "+"
      }), _dec22 = property({
        type: Button,
        tooltip: "-"
      }), _dec23 = property({
        type: Label,
        tooltip: "數量"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ItemDetail, _Component);

        function ItemDetail() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_titleLabel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_iconSprite", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_numLabel", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_gameTitleLabel", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_gameNameLabel", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betTitleLabel", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betInfoLabel", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_propertyTitleLabel", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_propertyRefusedSprite", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_propertyInfoLabel", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_limitDateTitleLabel", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_limitDateRefusedSprite", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_limitDateInfoLabel", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_explainTitleLabel", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_explainInfoLabel", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_useBtn", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_useLabel", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_refusedNode", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_refusedLabel", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_numNode", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_plusBtn", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_decBtn", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_useNumLabel", _descriptor23, _assertThisInitialized(_this));

          _this.m_buffNode = null;
          _this.m_extraManager = null;
          _this.m_backpack = null;
          _this.m_curItemID = null;
          _this.m_curItemIdx = null;
          _this.m_curBuffID = null;
          _this.m_curBuffIdx = null;
          _this.m_curStartTime = void 0;
          _this.m_curEndTime = void 0;
          _this.m_curDescL = null;
          _this.m_curDescS = null;
          _this.m_isLandscape = true;
          _this.m_usageCb = null;
          _this.m_buffUsageCb = null;
          _this.m_currentTouchName = null;
          _this.m_isCountStart = false;
          _this.m_increaseOrDecrease = 1;
          _this.m_holdTime = 0;
          _this.m_timer = HOLD_INTERVEL;
          _this.m_holdIncreaseStep = 0;
          _this.m_totalTime = 0;
          return _this;
        }

        var _proto = ItemDetail.prototype;

        _proto.Init = function Init(extraManager, backpack, usageCb, buffUsageCb) {
          this.m_extraManager = extraManager;
          this.m_backpack = backpack;
          this.m_usageCb = usageCb;
          this.m_buffUsageCb = buffUsageCb;
          this.SetTouch();
        };

        _proto.SetTxt = function SetTxt() {
          this.m_betTitleLabel.getComponent(Label).string = this.GetString(Define.StringKey.BACKPACK_TXT_BET);
          this.m_propertyTitleLabel.getComponent(Label).string = this.GetString(Define.StringKey.BACKPACK_TXT_PROPERTY);
          this.m_gameTitleLabel.getComponent(Label).string = this.GetString(Define.StringKey.BACKPACK_TXT_GAME);
          this.m_limitDateTitleLabel.getComponent(Label).string = this.GetString(Define.StringKey.BACKPACK_TXT_TIME);
          this.m_explainTitleLabel.getComponent(Label).string = this.GetString(Define.StringKey.BACKPACK_TXT_INFO);
          Tools.SetFont(this.m_betTitleLabel);
          Tools.SetFont(this.m_propertyTitleLabel);
          Tools.SetFont(this.m_gameTitleLabel);
          Tools.SetFont(this.m_limitDateTitleLabel);
          Tools.SetFont(this.m_explainTitleLabel);

          for (var i = 0; i < this.m_useLabel.length; i++) {
            Tools.SetFont(this.m_useLabel[i]);
            this.m_useLabel[i].string = this.GetString(Define.StringKey.BACKPACK_BTN_USE);
          }

          Tools.SetFont(this.m_useNumLabel);
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          this.m_isLandscape = isLandscape;

          if (isLandscape) {
            this.node.getComponent(Animation).play("Clip_Backpack_UseCard_Landscape");

            if (this.m_curDescL) {
              this.m_explainInfoLabel.string = this.m_curDescL;
              Tools.SetFont(this.m_explainInfoLabel);
            }
          } else {
            this.node.getComponent(Animation).play("Clip_Backpack_UseCard_Portrait");

            if (this.m_curDescS) {
              this.m_explainInfoLabel.string = this.m_curDescS;
              Tools.SetFont(this.m_explainInfoLabel);
            }
          }

          if (this.node.active && this.m_curStartTime && this.m_curEndTime) {
            var timeBar = this.GetString(Define.StringKey.BACKPACK_TXT_TIME_BAR + Number(this.m_isLandscape));
            this.m_limitDateInfoLabel.string = this.m_curStartTime + timeBar + this.m_curEndTime;
            Tools.SetFont(this.m_limitDateInfoLabel);
          }
        }
        /**@ch 顯示按下一般道具卡的頁面 */
        ;

        _proto.ShowItemDetail = function ShowItemDetail(itemData, itemPlist, itemEft, vendorIconSpriteFrame, realItemPlist) {
          var gameID = itemData.gameid;
          var itemID = itemData.itemid;
          var itemIdx = itemData.itemindex;
          var source = itemData.source;
          var bet = this.m_extraManager.GetDisplayValue(Tools.strip(itemData.bet));
          var type = itemData.wintype;
          var star = itemData.star;
          var property = this.m_extraManager.GetDisplayValue(Tools.strip(itemData.coinlimit));
          var reason = itemData.banreason;
          var amount = itemData.amount;
          var timeBar = this.GetString(Define.StringKey.BACKPACK_TXT_TIME_BAR + Number(this.m_isLandscape));
          var icon = itemData.icon ? itemData.icon : null;
          var gameDesc = itemData.gamename ? itemData.gamename : null;
          var itemInfo = {
            icon: icon,
            type: type,
            star: star,
            bet: bet,
            gameName: "",
            gameDesc: gameDesc
          };
          var itemInfoTextS = ItemList.GetInstance().GetItemInfoText(itemInfo, 0);
          var itemInfoTextL = ItemList.GetInstance().GetItemInfoText(itemInfo, 1);

          if (this.m_buffNode) {
            this.m_buffNode.removeFromParent();
            BuffManager.GetInstance().ReturnBuffNode(this.m_buffNode, this.m_buffNode.name);
            this.m_buffNode = null;
          }

          this.m_curItemID = itemID;
          this.m_curItemIdx = itemIdx;
          this.m_curBuffID = null;
          this.m_curBuffIdx = null;
          this.m_curStartTime = this.m_backpack.GetTimeString(itemData.start);
          this.m_curEndTime = this.m_backpack.GetTimeString(itemData.expired);
          this.m_curDescL = itemInfoTextL.gameDesc;
          this.m_curDescS = itemInfoTextS.gameDesc;
          this.m_gameNameLabel.string = LocaleStringManager.GetInstance().GetGameName(gameID);
          Tools.SetFont(this.m_gameNameLabel);
          this.m_propertyTitleLabel.node.active = true;
          this.m_propertyInfoLabel.string = "<p>" + Define.DollarSymbol + " </p>" + property.toString() + this.GetString(Define.StringKey.BACKPACK_TXT_PROPERTY_UP);
          this.m_propertyInfoLabel.fontFamily = Define.DollarFontFamily;
          Tools.SetFont(this.m_propertyInfoLabel);
          this.m_betTitleLabel.node.active = true;
          this.m_betInfoLabel.string = "<p>" + Define.DollarSymbol + " </p>" + Tools.FormatNumberThousands(bet, Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO);
          this.m_betInfoLabel.fontFamily = Define.DollarFontFamily;
          this.m_limitDateInfoLabel.string = this.m_curStartTime + timeBar + this.m_curEndTime; // this.m_component.InfoExpireValue.string = itemData.expiredtime;

          this.m_explainInfoLabel.string = this.m_isLandscape ? this.m_curDescL : this.m_curDescS;
          Tools.SetFont(this.m_explainInfoLabel);
          this.m_explainInfoLabel.fontFamily = Define.DollarFontFamily;

          if (itemData.gameid === Define.GAME_ID.ENTITY) {
            this.m_iconSprite.spriteFrame = realItemPlist ? realItemPlist.getSpriteFrame(icon.toString()) : itemEft.getSpriteFrame("common_card");
          } else {
            this.m_iconSprite.spriteFrame = itemPlist ? itemPlist.getSpriteFrame(icon.toString()) : itemEft.getSpriteFrame("common_card");
          }

          var vendorIcon = this.m_iconSprite.node.getChildByName("HintIcon");

          if (vendorIcon) {
            vendorIcon.getComponent(Sprite).spriteFrame = vendorIconSpriteFrame;

            if (source === VendorSource) {
              vendorIcon.active = true;
            } else {
              vendorIcon.active = false;
            }
          }

          this.m_useNumLabel.string = SETTING_MIN.toString();
          this.m_numLabel.string = amount.toString();
          Tools.SetFont(this.m_titleLabel);
          this.m_titleLabel.string = itemInfoTextS.title; // 不可使用原因判斷

          if (!Define.CanUseItemCard) {
            var str = this.GetString(Define.StringKey.BACKPACK_REFUSED_REASON + Define.CantUseReason);
            str = str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
            this.m_refusedLabel.string = str;
            Tools.SetFont(this.m_refusedLabel);
            this.SetUseBtnState(false);
          } else if (this.m_backpack.IsPlayingAni) {
            var _str = this.GetString(Define.StringKey.BACKPACK_REFUSED_REASON + "1");

            _str = _str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
            this.m_refusedLabel.string = _str;
            Tools.SetFont(this.m_refusedLabel);
            this.SetUseBtnState(false);
          } else if (reason > 0) {
            Tools.SetFont(this.m_refusedLabel);

            var _str2 = this.GetString(Define.StringKey.BACKPACK_REFUSED_REASON + reason);

            _str2 = _str2.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
            this.m_refusedLabel.string = _str2;
            this.SetUseBtnState(false);

            if (reason == 503) {
              this.m_propertyRefusedSprite.enabled = true;
              this.m_limitDateRefusedSprite.enabled = false;
            } else if (reason == 504) {
              this.m_limitDateRefusedSprite.enabled = true;
              this.m_propertyRefusedSprite.enabled = false;
            }

            this.SetUseBtnState(false);
          } else {
            this.m_limitDateRefusedSprite.enabled = false;
            this.m_propertyRefusedSprite.enabled = false;
            this.SetUseBtnState(true);
          } // 使用數量不可超過當日上限


          SETTING_MAX = amount > itemData.dailyremaintimes ? itemData.dailyremaintimes : amount;

          if (!this.m_backpack.IsLockNumControl) {
            if (Define.CanUseItemCard && reason == 0 && SETTING_MAX > 1) {
              this.ShowNumControl(true);
            } else {
              this.ShowNumControl(false);
            }
          } else {
            this.ShowNumControl(false);
          }

          this.node.active = true; // 打開介面後文字長度才會刷新
          // if ( reason == 503 )
          // {
          //     const width: number = this.m_component.InfoPropertyTitle.node.width + this.m_propertyInfoLabel.node.width;
          //     this.m_propertyRefusedSprite.width = width;
          // }
        }
        /**@ch 顯示按下BUFF卡的頁面 */
        ;

        _proto.ShowBuffDetail = function ShowBuffDetail(buffData) {
          var _this2 = this;

          buffData.updateUsable();
          console.error('ShowBuffDetail', JSON.stringify(buffData)); // const gameID = itemData.gameid;

          var buffID = buffData.id;
          var buffIdx = buffData.idx;
          var buffName = buffData.buffName;
          var gameName = buffData.gameName;
          var desc1 = buffData.desc1;
          var desc2 = buffData.desc2;
          var usageTimeDesc = buffData.usageTimeDesc;
          var info = buffData.info;
          var expiredTime = buffData.expiredTime;
          var startTime = buffData.startTime;
          var useable = buffData.usable;
          var reason = buffData.reason;

          if (this.m_buffNode) {
            this.m_buffNode.removeFromParent();
            BuffManager.GetInstance().ReturnBuffNode(this.m_buffNode, this.m_buffNode.name);
            this.m_buffNode = null;
          }

          this.m_buffNode = BuffManager.GetInstance().GetBuffNode(buffID.toString());

          if (!this.m_buffNode) {
            var addChildCb = function addChildCb(node) {
              if (node) {
                _this2.m_buffNode = node;
                console.error('itemdetail', _this2.m_buffNode.name, buffID);
                _this2.m_buffNode.scale = v3(0.7, 0.7, 1);

                _this2.m_iconSprite.node.addChild(_this2.m_buffNode);
              }
            };

            AppManager.GetBuffCardNode(buffID, addChildCb);
          } else {
            this.m_iconSprite.node.addChild(this.m_buffNode);
          }

          this.m_curBuffID = buffID;
          this.m_curBuffIdx = buffIdx;
          this.m_curItemID = null;
          this.m_curItemIdx = null;
          this.m_curStartTime = this.m_backpack.GetTimeString(startTime);
          this.m_curEndTime = this.m_backpack.GetTimeString(expiredTime);
          this.m_gameNameLabel.string = gameName;
          Tools.SetFont(this.m_gameNameLabel);
          this.m_propertyTitleLabel.node.active = false;
          this.m_propertyInfoLabel.string = desc2;
          this.m_propertyInfoLabel.fontFamily = Define.DollarFontFamily;
          Tools.SetFont(this.m_propertyInfoLabel);
          this.m_betTitleLabel.node.active = false;
          this.m_betInfoLabel.string = desc1;
          this.m_betInfoLabel.fontFamily = Define.DollarFontFamily;
          this.m_limitDateInfoLabel.string = usageTimeDesc;
          this.m_explainInfoLabel.string = info;
          Tools.SetFont(this.m_explainInfoLabel);
          this.m_explainInfoLabel.fontFamily = Define.DollarFontFamily;
          this.m_iconSprite.spriteFrame = null;
          this.m_useNumLabel.string = SETTING_MIN.toString();
          this.m_numLabel.string = "";
          Tools.SetFont(this.m_titleLabel);
          this.m_titleLabel.string = buffName; // 不可使用原因判斷

          if (!Define.CanUseItemCard) {
            var str = this.GetString(Define.StringKey.BACKPACK_REFUSED_REASON + Define.CantUseReason);
            str = str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString("BUFF CARD") : LocaleStringManager.GetInstance().GetString("BUFF CARD"));
            this.m_refusedLabel.string = str;
            Tools.SetFont(this.m_refusedLabel);
            this.SetUseBtnState(false);
          } else if (this.m_backpack.IsPlayingAni) {
            var _str3 = this.GetString(Define.StringKey.BACKPACK_REFUSED_REASON + "1");

            _str3 = _str3.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString("BUFF CARD") : LocaleStringManager.GetInstance().GetString("BUFF CARD"));
            this.m_refusedLabel.string = _str3;
            Tools.SetFont(this.m_refusedLabel);
            this.SetUseBtnState(false);
          } else if (reason && reason != "") {
            var _str4 = reason;
            this.m_refusedLabel.string = _str4;
            Tools.SetFont(this.m_refusedLabel); // 可能會有有reason卻可以使用的狀況 (規格)

            this.SetUseBtnState(useable);
          } else {
            this.m_limitDateRefusedSprite.enabled = false;
            this.m_propertyRefusedSprite.enabled = false;
            this.SetUseBtnState(true);
          }

          this.node.active = true; // 打開介面後文字長度才會刷新
          // if ( reason == 503 )
          // {
          //     const width: number = this.m_component.InfoPropertyTitle.node.width + this.m_propertyInfoLabel.node.width;
          //     this.m_propertyRefusedSprite.width = width;
          // }
        };

        _proto.update = function update(dt) {
          if (this.m_isCountStart) {
            this.m_totalTime += dt;

            if (this.m_totalTime >= HOLD_TIME_THRESHOLD) {
              HOLD_INTERVEL = PRESS_INTERVEL;
            } else {
              HOLD_INTERVEL = CLICK_INTERVEL;
            }

            if (this.m_timer < 0) {
              this.m_holdTime += HOLD_INTERVEL;
              var holdIncreaseStep = 0;

              if (this.m_holdTime > 6) {
                holdIncreaseStep = HOLD_SPEED[4];
              } else if (this.m_holdTime > 4.5) {
                holdIncreaseStep = HOLD_SPEED[3];
              } else if (this.m_holdTime > 3) {
                holdIncreaseStep = HOLD_SPEED[2];
              } else if (this.m_holdTime > 1) {
                holdIncreaseStep = HOLD_SPEED[1];
              } else {
                holdIncreaseStep = HOLD_SPEED[0];
              }

              this.m_holdIncreaseStep = Tools.plus(this.m_holdIncreaseStep, holdIncreaseStep);
              var string = this.m_useNumLabel.string.replace(/<.*?>|[^0-9|.]/g, "");
              var value;

              if (!isNaN(Number(string))) {
                value = Number(string);
              }

              var step = Tools.plus(this.m_holdIncreaseStep, 1);
              value = Tools.plus(value, Tools.times(step, this.m_increaseOrDecrease)); // log(value)

              if (value < SETTING_MIN) {
                value = SETTING_MIN;
              } else if (value > SETTING_MAX) {
                value = SETTING_MAX;
              }

              this.m_useNumLabel.string = Tools.FormatNumberThousands(value, Tools.FORMAT_NUMBER_TYPE.NONE_DOT);
              this.m_timer = HOLD_INTERVEL;
            } else {
              this.m_timer -= dt;
            }
          }
        };

        _proto.OnClose = function OnClose() {
          this.m_curDescL = null;
          this.m_curDescS = null;
          this.m_curItemID = null;
          this.m_curItemIdx = null;
          this.m_curBuffID = null;
          this.m_curBuffIdx = null;
          this.ShowNumControl(false);
          this.node.active = false;
          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
        };

        _proto.OnUsage = function OnUsage() {
          var num = Number(this.m_useNumLabel.string);

          if (this.m_curItemID && this.m_curItemIdx && !isNaN(num)) {
            this.m_usageCb(this.m_curItemID, this.m_curItemIdx, num);
          } else if (this.m_curBuffID && this.m_curBuffIdx) {
            this.m_buffUsageCb(this.m_curBuffID, this.m_curBuffIdx);
          }
        };

        _proto.GetString = function GetString(stringKey) {
          return LocaleStringManager.GetInstance().GetString(stringKey);
        };

        _proto.SetUseBtnState = function SetUseBtnState(isSet) {
          this.m_useBtn.interactable = isSet;
          this.m_useBtn.node.active = isSet;
          this.m_refusedNode.active = !isSet;

          if (isSet) {
            this.m_useBtn.node.getComponent(Sprite).color = color(255, 255, 255); // this.m_component.InfoUseValue.node.color = color( 255, 255, 255 );
          } else {
            this.m_useBtn.node.getComponent(Sprite).color = color(165, 165, 165); // this.m_component.InfoUseValue.node.color = color( 165, 165, 165 );
          }
        };

        _proto.ShowNumControl = function ShowNumControl(isShow) {
          this.m_numNode.active = isShow;
        };

        _proto.SetTouch = function SetTouch() {
          var _this3 = this; //+


          this.m_plusBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this3.m_currentTouchName == null) {
              _this3.m_currentTouchName = event.target.name;
              _this3.m_holdTime = 0;
              _this3.m_holdIncreaseStep = 0;
              _this3.m_increaseOrDecrease = 1;
              HOLD_INTERVEL = CLICK_INTERVEL;
              _this3.m_timer = HOLD_INTERVEL;
              _this3.m_isCountStart = true;
            }
          });
          this.m_plusBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this3.m_currentTouchName == event.target.name) {
              _this3.m_currentTouchName = null;

              _this3.OnClickChange(1, 1, SETTING_MIN, SETTING_MAX);

              _this3.m_isCountStart = false;
            }
          });
          this.m_plusBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            if (_this3.m_currentTouchName == event.target.name) {
              _this3.m_currentTouchName = null;

              _this3.OnClickChange(1, 1, SETTING_MIN, SETTING_MAX);

              _this3.m_isCountStart = false;
              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
            }
          }); //-

          this.m_decBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this3.m_currentTouchName == null) {
              _this3.m_currentTouchName = event.target.name;
              _this3.m_holdTime = 0;
              _this3.m_holdIncreaseStep = 0;
              _this3.m_increaseOrDecrease = -1;
              HOLD_INTERVEL = CLICK_INTERVEL;
              _this3.m_timer = HOLD_INTERVEL;
              _this3.m_isCountStart = true;
            }
          });
          this.m_decBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this3.m_currentTouchName == event.target.name) {
              _this3.m_currentTouchName = null;

              _this3.OnClickChange(1, -1, SETTING_MIN, SETTING_MAX);

              _this3.m_isCountStart = false;
            }
          });
          this.m_decBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            if (_this3.m_currentTouchName == event.target.name) {
              _this3.m_currentTouchName = null;

              _this3.OnClickChange(1, -1, SETTING_MIN, SETTING_MAX);

              _this3.m_isCountStart = false;
              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
            }
          });
        };

        _proto.OnClickChange = function OnClickChange(step, increaseOrDecrease, minus, maximum) {
          var string = this.m_useNumLabel.string.replace(/<.*?>|[^0-9|.]/g, "");
          var value;

          if (!isNaN(Number(string))) {
            value = Number(string);
          }

          value = Tools.plus(value, Tools.times(step, increaseOrDecrease));

          if (value <= minus) {
            value = minus;
          } else if (value > maximum) {
            value = maximum;
          }

          this.m_useNumLabel.string = Tools.FormatNumberThousands(value, Tools.FORMAT_NUMBER_TYPE.NONE_DOT);
          return value;
        };

        _createClass(ItemDetail, [{
          key: "IconSprite",
          get: function get() {
            return this.m_iconSprite;
          }
        }]);

        return ItemDetail;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_titleLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_iconSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_numLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_gameTitleLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_gameNameLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_betTitleLabel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_betInfoLabel", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_propertyTitleLabel", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_propertyRefusedSprite", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_propertyInfoLabel", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_limitDateTitleLabel", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_limitDateRefusedSprite", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_limitDateInfoLabel", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_explainTitleLabel", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_explainInfoLabel", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_useBtn", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "m_useLabel", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "m_refusedNode", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "m_refusedLabel", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "m_numNode", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "m_plusBtn", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "m_decBtn", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "m_useNumLabel", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ItemEnd.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, RichText, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      RichText = module.RichText;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "a6d63fmmRtMLqZlQAD7Bx2F", "ItemEnd", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ItemEnd = exports('default', (_dec = property({
        type: RichText,
        tooltip: "字串"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ItemEnd, _Component);

        function ItemEnd() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_label", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(ItemEnd, [{
          key: "Label",
          get: function get() {
            return this.m_label;
          }
        }]);

        return ItemEnd;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_label", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ItemGet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Animation, Label, Component, Define, LocaleStringManager, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "c2bf4bmQA5Og4NVbJJYZJJI", "ItemGet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ItemGet = exports('default', (_dec = property({
        type: Animation,
        tooltip: "動畫"
      }), _dec2 = property({
        type: Label,
        tooltip: "文字"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ItemGet, _Component);

        function ItemGet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_anim", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_label", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ItemGet.prototype;

        _proto.Show = function Show() {
          Tools.SetFont(this.m_label);
          var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_GET_ITEM);
          str = str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
          this.m_label.string = str;
          this.m_anim.play("Clip_Backpack_ItemCard_Get");
        };

        return ItemGet;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_anim", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_label", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ItemInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LocaleStringManager.ts', './Define.ts', './ItemList.ts', './Tools.ts', './SoundManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Sprite, Node, SpriteFrame, log, Animation, Component, LocaleStringManager, Define, ItemList, Tools, SoundManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      log = module.log;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      ItemList = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      SoundManager = module.default;
    }],
    execute: function () {
      exports('ItemInfoType', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "96782iL4BBBqqThZ3u+Ou8O", "ItemInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      /**
       * @Item 道具說明
       * @Desc 任務說明
       */

      var ItemInfoType;

      (function (ItemInfoType) {
        ItemInfoType[ItemInfoType["Item"] = 0] = "Item";
        ItemInfoType[ItemInfoType["Desc"] = 1] = "Desc";
      })(ItemInfoType || (ItemInfoType = exports('ItemInfoType', {})));

      var ItemInfo = exports('default', (_dec = property([Label]), _dec2 = property([Label]), _dec3 = property(Sprite), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(SpriteFrame), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ItemInfo, _Component);

        function ItemInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "texts", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "descs", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemImage", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemInfo", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "descInfo", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "commonItemCard", _descriptor6, _assertThisInitialized(_this));

          _this.m_controller = void 0;
          _this.m_curDecs = null;
          return _this;
        }

        var _proto = ItemInfo.prototype; // LIFE-CYCLE CALLBACKS:
        // onLoad () {}
        // start() {}

        _proto.init = function init(m_controller) {
          this.m_controller = m_controller;
          this.texts[1].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_TXT_GAME);

          if (!this.texts[1].font) {
            this.texts[1].font = Define.DefaultFont;
          }

          this.texts[3].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_TXT_INFO);

          if (!this.texts[3].font) {
            this.texts[3].font = Define.DefaultFont;
          }

          var rate = 1;

          switch (LocaleStringManager.CurrLang) {
            case "en":
            case "th":
            case "vn":
            case "id":
              rate = 4 / 5;
          }

          this.descs[1].fontSize = this.descs[1].fontSize * rate;
          this.descs[1].lineHeight = this.descs[1].lineHeight * rate;
        };

        _proto.setType = function setType(type) {
          switch (type) {
            case ItemInfoType.Desc:
              this.itemInfo.active = false;
              this.descInfo.active = true;
              break;

            case ItemInfoType.Item:
              this.itemInfo.active = true;
              this.descInfo.active = false;
              break;
          }
        };

        _proto.setInfo = function setInfo(itemID) {
          var icon;
          log("itemID", itemID);

          if (typeof itemID == "number") {
            if (Define.RealItemsMap[itemID]) {
              return;
            }

            var itemFromList = ItemList.GetInstance().GetItem(itemID);
            icon = itemFromList.icon;
            var data = ItemInfo.GetItemTextInfo(itemID, 2);
            this.texts[0].string = data.name;

            if (!this.texts[0].font) {
              this.texts[0].font = Define.DefaultFont;
            }

            this.texts[2].string = data.game;

            if (!this.texts[2].font) {
              this.texts[2].font = Define.DefaultFont;
            }

            this.texts[4].string = data.desc;

            if (!this.texts[4].font) {
              this.texts[4].font = Define.DefaultFont;
            }

            this.texts[5].string = ItemList.GetInstance().CheckItemIcon(icon) ? "1" : "";

            if (!this.texts[5].font) {
              this.texts[5].font = Define.DefaultFont;
            }

            this.itemImage.spriteFrame = ItemList.GetInstance().GetItemIcon(icon);
          } else {
            var gameName = itemID.gameName;
            var itemDataCopy = Tools.shallowCopy(itemID);
            itemDataCopy.gameName = undefined;
            var infoText = ItemList.GetInstance().GetItemInfoText(itemDataCopy, 2);
            this.texts[0].string = infoText.title;

            if (!this.texts[0].font) {
              this.texts[0].font = Define.DefaultFont;
            }

            this.texts[2].string = gameName;

            if (!this.texts[2].font) {
              this.texts[2].font = Define.DefaultFont;
            }

            this.texts[4].string = infoText.gameDesc;
            this.texts[4].fontFamily = infoText.gameDescFontFamily;

            if (!this.texts[4].font) {
              this.texts[4].font = Define.DefaultFont;
            }

            this.itemImage.spriteFrame = infoText.icon;
            this.texts[5].string = infoText.commonCard ? "" : "1";

            if (!this.texts[5].font) {
              this.texts[5].font = Define.DefaultFont;
            }
          }

          this.m_curDecs = this.texts[4].string;
        };

        _proto.show = function show(parm) {
          this.setType(ItemInfoType.Item);
          this.setInfo(parm);
          this.node.active = true;
        };

        _proto.showDesc = function showDesc(title, desc) {
          this.descs[0].string = LocaleStringManager.GetInstance().GetString(title);

          if (!this.descs[0].font) {
            this.descs[0].font = Define.DefaultFont;
          }

          this.descs[1].string = LocaleStringManager.GetInstance().GetString(desc);

          if (!this.descs[1].font) {
            this.descs[1].font = Define.DefaultFont;
          }

          this.setType(ItemInfoType.Desc);
          this.node.active = true;
        };

        _proto.hide = function hide() {
          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
          this.node.active = false;
        }
        /**
         * 
         * @param itemID 
         * @param textType 0:背包直版, 1:背包橫版, 2:小視窗道具資訊
         */
        ;

        ItemInfo.GetItemTextInfo = function GetItemTextInfo(itemID, textType) {
          var gameID = itemID.toString().slice(2, 4);
          var gameName = LocaleStringManager.GetInstance().GetGameName(parseInt(gameID));
          var itemFromList = ItemList.GetInstance().GetItem(itemID);

          if (itemFromList) {
            var gameDesc = ItemList.GameDesc[itemFromList.type][gameID] ? ItemList.GameDesc[itemFromList.type][gameID] : Define.StringKey.ITEM_DESC_GAME + "0_" + itemFromList.type;
            gameDesc = LocaleStringManager.GetInstance().GetString(gameDesc);
            var title;

            switch (ItemList.GetInstance().GetOriginalItem(itemID).star) {
              case 8:
                title = Define.StringKey.ITEM_TITLE + "GOLD";
                break;

              default:
                title = Define.StringKey.ITEM_TITLE + itemFromList.type;
                break;
            }

            var itemDesc = "";

            if (textType != undefined) {
              var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.ITEM_DESC + itemFromList.type + "_" + textType);
              itemDesc = Tools.CustomStringFormat(str, {
                Bet: itemFromList.bet.toString(),
                GameDesc: gameDesc
              });
            }

            var itemName = Tools.CustomStringFormat(LocaleStringManager.GetInstance().GetString(title), {
              Star: itemFromList.star
            });
            var data = {
              name: itemName,
              game: gameName,
              desc: itemDesc
            };
            return data;
          } else {
            var _data = {
              name: itemID.toString(),
              game: gameName,
              desc: ""
            };
            return _data;
          }
        } // update( dt ) {}
        ;

        _proto.OnRotation = function OnRotation(isLandscape, isSmall) {
          this.node.setPosition(this.m_controller.DiffPos());
          var anim = this.getComponent(Animation);

          if (isLandscape) {
            anim.play("ItemInfo_L");
          } else {
            anim.play("ItemInfo_S");
          }

          this.texts[4].string = this.m_curDecs;

          if (!this.texts[4].font) {
            this.texts[4].font = Define.DefaultFont;
          }
        };

        return ItemInfo;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "texts", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "descs", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "itemImage", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "itemInfo", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "descInfo", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "commonItemCard", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ItemList.ts", ['cc', './LocaleStringManager.ts', './Define.ts', './Tools.ts'], function (exports) {
  'use strict';

  var cclegacy, LocaleStringManager, Define, Tools;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b8e6171ZFlN2aWy71U7QkVY", "ItemList", undefined);

      var ItemList = exports('default', /*#__PURE__*/function () {
        function ItemList() {
          this.m_loadindLock = false;
          this.m_retryTime = 0;
          this.m_isLoaded = false;
          this.m_gamePlist = void 0;
          this.m_commonPlist = void 0;
          this.m_realItemPlist = void 0;
          this.m_plistListeners = new Array();

          if (ItemList._instance) {
            throw new Error("Error: Instantiation failed: Use ItemList.GetInstance() instead of new.");
          }

          ItemList._instance = this; // this.LoadItemList();
        }

        ItemList.GetInstance = function GetInstance() {
          if (!this._instance) {
            this._instance = new ItemList();
          }

          return ItemList._instance;
        };

        ItemList.OnExit = function OnExit() {
          this.Item = null;
          delete this._instance;
          this._instance = null;
        }
        /**
        * 加載道具卡資料
        */
        ;

        var _proto = ItemList.prototype;

        _proto.LoadItemList = function LoadItemList() {
          return;
        };

        _proto.AddListener = function AddListener(name, cb) {
          var temp = null;

          for (var i = 0; i < this.m_plistListeners.length; i++) {
            if (this.m_plistListeners[i].name === name) {
              temp = this.m_plistListeners[i];
            }
          }

          if (temp) {
            temp.cb = cb;
          } else {
            temp = {
              name: name,
              cb: cb
            };
            this.m_plistListeners.push(temp);
          }
        };

        _proto.GetGameSpriteAtlas = function GetGameSpriteAtlas() {
          return this.m_gamePlist;
        };

        _proto.TriggerListeners = function TriggerListeners() {
          for (var i = 0; i < this.m_plistListeners.length; i++) {
            this.m_plistListeners[i].cb();
          } //監聽已無效，所以移除


          for (var _i = 0; _i < this.m_plistListeners.length; _i++) {
            this.m_plistListeners.pop();
          }
        };

        _proto.SetGameSpriteAtlas = function SetGameSpriteAtlas(game) {
          this.m_gamePlist = game;

          if (this.m_commonPlist) {
            this.TriggerListeners();
          }
        };

        _proto.SetRealItemSpriteAtlas = function SetRealItemSpriteAtlas(game) {
          this.m_realItemPlist = game; // if ( this.m_commonPlist )
          // {
          //     this.TriggerListeners();
          // }
        };

        _proto.SetCommonSpriteAtlas = function SetCommonSpriteAtlas(common) {
          this.m_commonPlist = common;

          if (this.m_gamePlist) {
            this.TriggerListeners();
          }
        }
        /**
        * 道具卡資料是否已加載完
        */
        ;

        _proto.IsItemListLoaded = function IsItemListLoaded() {
          return this.m_isLoaded;
        }
        /**
        * 轉換道具卡星數
        */
        ;

        _proto.GetStar = function GetStar(star) {
          var lan = LocaleStringManager.CurrLang;
          var str;

          if (lan == Define.Lang.CN) {
            str = ItemList.CNStar[star];
          } else {
            str = star.toString();
          }

          return str;
        }
        /**
        * 轉換星數並取得道具卡資料
        */
        ;

        _proto.GetItem = function GetItem(itemId) {
          if (ItemList.Item[itemId]) {
            var item = {
              icon: ItemList.Item[itemId].icon,
              type: ItemList.Item[itemId].type,
              star: this.GetStar(ItemList.Item[itemId].star),
              bet: ItemList.Item[itemId].bet
            };
            return item;
          } else {
            return null;
          }
        }
        /**
        * 取得原始道具卡資料
        */
        ;

        _proto.GetOriginalItem = function GetOriginalItem(itemId) {
          if (ItemList.Item[itemId]) {
            var item = ItemList.Item[itemId];
            return item;
          } else {
            return null;
          }
        }
        /**
        * 取得道具卡標題
        * @param itemId 道具卡ID
        * @param star 星星數
        * @param gameName 遊戲名稱(可選)
        */
        ;

        _proto.GetItemTitle = function GetItemTitle(type, star, gameName, isLandscape) {
          var title; // 有星星的情況

          if (star) {
            var change = isLandscape ? " " : "\n";

            switch (star) {
              case 8:
                title = LocaleStringManager.GetInstance().GetString(Define.StringKey.ITEM_TITLE + "GOLD");
                title = gameName ? gameName + change + title : title;
                break;

              case 7:
              case 6:
                title = LocaleStringManager.GetInstance().GetString(Define.StringKey.ITEM_TITLE + star);
                break;

              default:
                title = LocaleStringManager.GetInstance().GetString(Define.StringKey.ITEM_TITLE + type);
                title = Tools.CustomStringFormat(title, {
                  Star: this.GetStar(star)
                });
                title = gameName ? gameName + change + title : title;
                break;
            }
          } else {
            // 沒星星的情況
            title = LocaleStringManager.GetInstance().GetString(Define.StringKey.ITEM_TITLE + type);
            title = title.split("(")[0];
            title = gameName ? gameName + " " + title : title;
          }

          return title;
        }
        /**
        * 取得道具卡敘述
        * @param type 道具卡type
        * @param bet 押注
        * @param gameDesc 遊戲特殊敘述
        * @param style 排版方式 ex.直版0 橫版1 任務 2
        */
        ;

        _proto.GetItemDesc = function GetItemDesc(type, bet, style, gameDesc) {
          var itemDesc = "";
          var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.ITEM_DESC + type + "_" + style);

          if (gameDesc) {
            itemDesc = Tools.CustomStringFormat(str, {
              Bet: bet.toString(),
              GameDesc: gameDesc
            });
          } else {
            var desc = LocaleStringManager.GetInstance().GetString(Define.StringKey.ITEM_DESC_GAME + "0_" + type);
            itemDesc = Tools.CustomStringFormat(str, {
              Bet: bet.toString(),
              GameDesc: desc
            });
          }

          itemDesc = Tools.CustomStringFormat(itemDesc, {
            symbol: Define.DollarSymbol
          });
          return itemDesc;
        }
        /**
         * 確認該icon是否為這個遊戲的道具卡
         * @param icon 
         */
        ;

        _proto.CheckItemIcon = function CheckItemIcon(icon) {
          var spriteFrame = this.m_gamePlist.getSpriteFrame(icon.toString());
          return spriteFrame != undefined;
        };

        _proto.GetItemIcon = function GetItemIcon(icon) {
          var spriteFrame; // if ( Define.RealItemsMap[ icon ] )
          // {
          //     spriteFrame = this.GetRealItemIcon( icon );
          // } else
          // {

          spriteFrame = this.m_gamePlist && this.m_gamePlist.getSpriteFrame(icon.toString()); // }

          if (!spriteFrame && this.m_commonPlist) {
            if (Tools.UsingLogoSpriteFrame()) {
              // if ( Tools.Line === Define.LineSetting.americas ||
              //     Tools.Line === Define.LineSetting.americas_str )
              // {
              spriteFrame = this.m_commonPlist.getSpriteFrame("Backpack_Card_02"); // }
              // else
              // {
              //     spriteFrame = this.m_commonPlist.getSpriteFrame( "JILICard_en" );
              // }
            } else {
              // if ( Tools.Line === Define.LineSetting.americas ||
              //     Tools.Line === Define.LineSetting.americas_str )
              // {
              spriteFrame = this.m_commonPlist.getSpriteFrame("Backpack_Card_01"); // }
              // else
              // {
              //     spriteFrame = this.m_commonPlist.getSpriteFrame( "common_card" );
              // }
            }
          }

          return spriteFrame;
        };

        _proto.GetRealItemIcon = function GetRealItemIcon(icon) {
          var spriteFrame = this.m_realItemPlist && this.m_realItemPlist.getSpriteFrame(icon.toString());
          return spriteFrame;
        }
        /**
        * 取得道具卡文字
        * @param itemInfo 道具卡資訊 ItemInfo: { icon, type, star, bet, gameName, gameDesc }
        * @param style 排版方式 ex.直版0 橫版1 任務 2
        */
        ;

        _proto.GetItemInfoText = function GetItemInfoText(itemInfo, style) {
          var itemInfoText = {
            icon: null,
            title: "",
            gameDesc: "",
            gameDescFontFamily: Define.DollarFontFamily
          };
          var title; // 校準浮點數

          if (itemInfo.bet) {
            itemInfo.bet = Tools.strip(itemInfo.bet);
          } // 如果已經有標題就直接吃


          if (itemInfo.title) {
            title = itemInfo.gameName ? itemInfo.gameName + " " + itemInfo.title : itemInfo.title;
          } else {
            // 沒有現有標題就用組的
            // 有星星的情況
            if (itemInfo.star) {
              switch (itemInfo.star) {
                case 8:
                  title = LocaleStringManager.GetInstance().GetString(Define.StringKey.ITEM_TITLE + "GOLD");
                  title = itemInfo.gameName ? itemInfo.gameName + " " + title : title;
                  break;

                case 7:
                case 6:
                  title = LocaleStringManager.GetInstance().GetString(Define.StringKey.ITEM_TITLE + itemInfo.star);
                  break;

                default:
                  title = LocaleStringManager.GetInstance().GetString(Define.StringKey.ITEM_TITLE + itemInfo.type);
                  title = Tools.CustomStringFormat(title, {
                    Star: this.GetStar(itemInfo.star)
                  });
                  title = itemInfo.gameName ? itemInfo.gameName + " " + title : title;
                  break;
              }
            } else {
              // 沒星星的情況
              title = LocaleStringManager.GetInstance().GetString(Define.StringKey.ITEM_TITLE + itemInfo.type);
              title = title.split("(")[0];
              title = itemInfo.gameName ? itemInfo.gameName + " " + title : title;
            }
          }

          var itemDesc = "";
          var str = "";

          if (itemInfo.bet && itemInfo.type && style != null) {
            str = LocaleStringManager.GetInstance().GetString(Define.StringKey.ITEM_DESC + itemInfo.type + "_" + style);
            var betString = Tools.FormatNumberThousands(itemInfo.bet, Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO);

            if (itemInfo.gameDesc) {
              itemDesc = Tools.CustomStringFormat(str, {
                Bet: betString,
                GameDesc: itemInfo.gameDesc
              });
            } else {
              var desc = LocaleStringManager.GetInstance().GetString(Define.StringKey.ITEM_DESC_GAME + "0_" + itemInfo.type);
              itemDesc = Tools.CustomStringFormat(str, {
                Bet: betString,
                GameDesc: desc
              });
            }

            itemDesc = Tools.CustomStringFormat(itemDesc, {
              symbol: "<p>" + Define.DollarSymbol + " </p>"
            });
          }

          var icon;

          if (itemInfo.gameID === Define.GAME_ID.ENTITY) {
            icon = itemInfo.icon && this.m_realItemPlist ? this.m_realItemPlist.getSpriteFrame(itemInfo.icon.toString()) : null;
          } else {
            icon = itemInfo.icon && this.m_gamePlist ? this.m_gamePlist.getSpriteFrame(itemInfo.icon.toString()) : null;
          }

          if (!icon && this.m_commonPlist) {
            if (Tools.UsingLogoSpriteFrame()) {
              // if ( Tools.Line === Define.LineSetting.americas ||
              //     Tools.Line === Define.LineSetting.americas_str )
              // {
              icon = this.m_commonPlist.getSpriteFrame("Backpack_Card_02"); // }
              // else
              // {
              //     icon = this.m_commonPlist.getSpriteFrame( "JILICard_en" );
              // }
            } else {
              // if ( Tools.Line === Define.LineSetting.americas ||
              //     Tools.Line === Define.LineSetting.americas_str )
              // {
              icon = this.m_commonPlist.getSpriteFrame("Backpack_Card_01"); // }
              // else
              // {
              //     icon = this.m_commonPlist.getSpriteFrame( "common_card" );
              // }
            }

            itemInfoText.commonCard = true;
          }

          itemInfoText.icon = icon;
          itemInfoText.title = title;
          itemInfoText.gameDesc = itemDesc;
          return itemInfoText;
        };

        _proto.GetSmallIcon = function GetSmallIcon(gameId, cb) {
          if (Tools.Icons[gameId]) {
            cb && cb(Tools.Icons[gameId]);
          } else {
            Tools.LoadIcon(LocaleStringManager.CurrLang, gameId, function () {
              cb && cb(Tools.Icons[gameId]);
            });
          }
        };

        return ItemList;
      }()); // icon: 哀抗編號 type:種類編號 star:星星數 bet:下注金額

      ItemList._instance = new ItemList();
      ItemList.Item = null;
      ItemList.CNStar = ["零", "一", "二", "三", "四", "五"];
      ItemList.GameDesc = [{}, {
        26: "ITEM_DESC_GAME_26_1",
        30: "ITEM_DESC_GAME_30_1",
        38: "ITEM_DESC_GAME_38_1"
      }, {}, {
        6: "ITEM_DESC_GAME_6_3"
      }];

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ItemSystemMsgs.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './ToJsonObject.ts', './Tools.ts', './MsgCell.ts', './ItemList.ts', './Protocol.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, Prefab, ScrollView, Animation, instantiate, Component, Define, LocaleStringManager, ToJsonObject, Tools, MsgCell, ItemList, BackpackProtocol, MissionMsg, RankMsg;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Prefab = module.Prefab;
      ScrollView = module.ScrollView;
      Animation = module.Animation;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      ToJsonObject = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      MsgCell = module.default;
    }, function (module) {
      ItemList = module.default;
    }, function (module) {
      BackpackProtocol = module.default;
      MissionMsg = module.MissionMsg;
      RankMsg = module.RankMsg;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "a406dB/K7lElYa4w76gcV3s", "ItemSystemMsgs", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ItemSystemMsgs = exports('default', (_dec = property({
        type: Label,
        tooltip: "提示"
      }), _dec2 = property({
        type: Node,
        tooltip: "內容"
      }), _dec3 = property({
        type: Prefab,
        tooltip: "欄位"
      }), _dec4 = property({
        type: ScrollView,
        tooltip: "scroll view"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ItemSystemMsgs, _Component);

        function ItemSystemMsgs() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_hintLabel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_cellPrefab", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scrollView", _descriptor4, _assertThisInitialized(_this));

          _this.m_cells = [];
          _this.m_isLandscape = true;
          return _this;
        }

        var _proto = ItemSystemMsgs.prototype;

        _proto.SetTxt = function SetTxt() {
          Tools.SetFont(this.m_hintLabel);

          if (this.m_isLandscape) {
            var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_WARNING2 + "1");
            str = str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
            this.m_hintLabel.string = LocaleStringManager.GetInstance().GetString(str);
          } else {
            var _str = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_WARNING2 + "0");

            _str = _str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
            this.m_hintLabel.string = LocaleStringManager.GetInstance().GetString(_str);
          }
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          this.m_isLandscape = isLandscape;

          if (isLandscape) {
            this.node.getComponent(Animation).play("Clip_Backpack_Message_Landscape");
            var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_WARNING2 + "1");
            str = str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
            this.m_hintLabel.string = LocaleStringManager.GetInstance().GetString(str);
          } else {
            this.node.getComponent(Animation).play("Clip_Backpack_Message_Portrait");

            var _str2 = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_WARNING2 + "0");

            _str2 = _str2.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
            this.m_hintLabel.string = LocaleStringManager.GetInstance().GetString(_str2);
          }

          for (var i = 0; i < this.m_cells.length; i++) {
            this.m_cells[i].OnRotation(isLandscape);
          }
        };

        _proto.ScrollToTop = function ScrollToTop() {
          this.m_scrollView.scrollToTop();
        };

        _proto.SetMsgs = function SetMsgs(data) {
          for (var i = 0; i < data.length; i++) {
            var cell = this.m_cells[i];

            if (!cell) {
              var node = instantiate(this.m_cellPrefab);
              this.m_contentNode.addChild(node);
              cell = node.getComponent(MsgCell);
              this.m_cells.push(cell);
            }

            cell.node.active = true;
            var itemID = data[i].content.itemid;
            var source = data[i].source;
            var action = data[i].content.action;
            var color = BackpackProtocol.Color[source][action];
            var gameID = data[i].content.gameid;
            var gameName = LocaleStringManager.GetInstance().GetGameName(gameID);
            var itemType = itemID.toString()[4];
            var star = data[i].content ? data[i].content.star : null;
            var amount = data[i].content.amount.toString();
            var createTime = data[i].content.createtime;

            if (data[i].created && data[i].created > 0) {
              //server只給到秒
              var date = new Date(data[i].created * 1000);
              var month = date.getMonth() + 1 >= 10 ? date.getMonth() + 1 : "0" + (date.getMonth() + 1);
              var day = date.getDate() >= 10 ? date.getDate() : "0" + date.getDate();
              var hour = date.getHours() >= 10 ? date.getHours() : "0" + date.getHours();
              var min = date.getMinutes() >= 10 ? date.getMinutes() : "0" + date.getMinutes();
              var sec = date.getSeconds() >= 10 ? date.getSeconds() : "0" + date.getSeconds();
              createTime = date.getFullYear() + "-" + month + "-" + day + " " + hour + ":" + min + ":" + sec;
            }

            var key = BackpackProtocol.MsgType[source][action];
            var strKeyL = this.GetString(key + "1");
            var strKeyS = this.GetString(key + "0");
            var strL = void 0;
            var strS = void 0;
            var fontSize = "30";
            var matchStr = strKeyL.match(/size=\d\d/) ? strKeyL.match(/size=\d\d/)[0] : "";

            if (matchStr) {
              fontSize = matchStr.replace("size=", "");
            }

            createTime = color + ";" + fontSize + ";" + createTime;
            var titleL = void 0;
            var titleS = void 0; // 實體卡ID

            if (gameID === Define.GAME_ID.ENTITY) {
              var realItem = Define.RealItemsMap[itemID];
              titleL = this.GetString(realItem);
              titleS = this.GetString(realItem);
            } else {
              if (data[i].content.title && data[i].content.title.length > 0) {
                titleL = data[i].content.title;
                titleS = data[i].content.title;
              } else {
                titleL = ItemList.GetInstance().GetItemTitle(Number(itemType), star, gameName, true);
                titleS = ItemList.GetInstance().GetItemTitle(Number(itemType), star, gameName, false);
              }
            }

            switch (source) {
              case BackpackProtocol.Source.COMMON:
                if (action == 2) {
                  amount = Tools.FormatNumberThousands(data[i].content.amount, Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT);
                }

                strL = Tools.StringFormat(strKeyL, titleL, amount);
                strS = Tools.StringFormat(strKeyS, titleS, amount);
                break;

              case BackpackProtocol.Source.RANKING:
                if (data[i].content.msg.length > 0) {
                  var lan = LocaleStringManager.CurrLang;
                  var msg = new RankMsg();
                  ToJsonObject.Covert(msg, JSON.parse(data[i].content.msg));

                  if (lan == Define.Lang.EN) {
                    msg.Number = msg.Number == "1" ? msg.Number + "st" : msg.Number == "2" ? msg.Number + "nd" : msg.Number == "3" ? msg.Number + "rd" : msg.Number + "th";
                  }

                  strL = Tools.StringFormat(Tools.CustomStringFormat(strKeyL, msg), titleL, amount);
                  strS = Tools.StringFormat(Tools.CustomStringFormat(strKeyS, msg), titleS, amount);
                } else {
                  strL = Tools.StringFormat(strKeyL, titleL, amount);
                  strS = Tools.StringFormat(strKeyS, titleS, amount);
                }

                break;

              case BackpackProtocol.Source.MISSION:
                if (data[i].content.msg.length > 0) {
                  var _msg = new MissionMsg();

                  ToJsonObject.Covert(_msg, JSON.parse(data[i].content.msg));
                  var kind = BackpackProtocol.MissionKind + _msg.Kind;
                  var missionStr = Tools.CustomStringFormat(this.GetString(kind), _msg);
                  strL = Tools.StringFormat(strKeyL, missionStr, titleL, amount);
                  strS = Tools.StringFormat(strKeyS, missionStr, titleS, amount);
                } else {
                  strL = Tools.StringFormat(strKeyL, titleL, amount);
                  strS = Tools.StringFormat(strKeyS, titleS, amount);
                }

                break;

              case BackpackProtocol.Source.SIGN:
                strL = Tools.StringFormat(strKeyL, titleL, amount);
                strS = Tools.StringFormat(strKeyS, titleS, amount);
                break;

              case BackpackProtocol.Source.TRIAL:
                strL = Tools.StringFormat(strKeyL, titleL, amount, this.GetString(Define.StringKey.FREEWINCASH));
                strS = Tools.StringFormat(strKeyS, titleS, amount, this.GetString(Define.StringKey.FREEWINCASH));
                break;

              case BackpackProtocol.Source.COLLECT:
                strL = Tools.StringFormat(strKeyL, data[i].content.msg, titleL, amount);
                strS = Tools.StringFormat(strKeyS, data[i].content.msg, titleS, amount);
                break;

              case BackpackProtocol.Source.LEVEL:
                strL = Tools.StringFormat(strKeyL, titleL, amount);
                strS = Tools.StringFormat(strKeyS, titleS, amount);
                break;

              default:
                strL = Tools.StringFormat(strKeyL, titleL, amount);
                strS = Tools.StringFormat(strKeyS, titleS, amount);
                break;
            }

            if (strL.search(/{symbol}/g) != -1) {
              strL = Tools.CustomStringFormat(strL, {
                symbol: "<p>" + Define.DollarSymbol + " </p>"
              });
              strS = Tools.CustomStringFormat(strS, {
                symbol: "<p>" + Define.DollarSymbol + " </p>"
              });
            }

            if (strL.search(/{tab}/g) != -1) {
              var tab = Number(Define.NOW_GAME_ID) == gameID || gameID === Define.GAME_ID.ENTITY ? Define.StringKey.BACKPACK_TAB_USE : Define.StringKey.BACKPACK_TAB_ALL;
              strL = Tools.CustomStringFormat(strL, {
                tab: this.GetString(tab)
              });
              strS = Tools.CustomStringFormat(strS, {
                tab: this.GetString(tab)
              });
            }

            cell.SetStr(strL + "\n" + this.GetString(createTime), strS + "\n" + this.GetString(createTime));
            cell.OnRotation(this.m_isLandscape);
          }

          if (this.m_cells.length > data.length) {
            for (var _i = data.length; _i < this.m_cells.length; _i++) {
              this.m_cells[_i].node.active = false;
            }
          }
        };

        _proto.GetString = function GetString(stringKey) {
          return LocaleStringManager.GetInstance().GetString(stringKey);
        };

        return ItemSystemMsgs;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_hintLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_contentNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_cellPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_scrollView", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ItemUse.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "66716afqbtFV6Dn6ZkDdKQq", "ItemUse", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ItemUse = exports('default', (_dec = property({
        type: Node,
        tooltip: "移動節點"
      }), _dec2 = property({
        type: Node,
        tooltip: "Icon"
      }), _dec3 = property({
        type: Node,
        tooltip: "數量"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ItemUse, _Component);

        function ItemUse() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_moveNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_iconNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_numNode", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(ItemUse, [{
          key: "MoveNode",
          get: function get() {
            return this.m_moveNode;
          }
        }, {
          key: "IconNode",
          get: function get() {
            return this.m_iconNode;
          }
        }, {
          key: "NumNode",
          get: function get() {
            return this.m_numNode;
          }
        }]);

        return ItemUse;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_moveNode", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_iconNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_numNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JPAwardView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './Tools.ts', './JPInfoView.ts', './JPItem.ts', './JPManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, Sprite, Label, NodePool, instantiate, Animation, Component, Define, LocaleStringManager, Tools, JPInfoView, JPItem, JPManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Sprite = module.Sprite;
      Label = module.Label;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      JPInfoView = module.default;
    }, function (module) {
      JPItem = module.default;
    }, function (module) {
      JPManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "8cc69mjIOxHeKb2QrF+RFim", "JPAwardView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JPAwardView = exports('default', (_dec = property({
        type: JPInfoView,
        tooltip: "彩金資訊"
      }), _dec2 = property({
        type: Prefab,
        tooltip: "說明頁表單item的prefab"
      }), _dec3 = property({
        type: Node,
        tooltip: "說明頁表單item的layout"
      }), _dec4 = property({
        type: Sprite,
        tooltip: "說明頁表單得獎名單標題"
      }), _dec5 = property({
        type: Label,
        tooltip: "說明頁表單得獎名單標題"
      }), _dec6 = property({
        type: Label,
        tooltip: "說明頁表單中獎類型標題"
      }), _dec7 = property({
        type: Label,
        tooltip: "說明頁表單中獎得主標題"
      }), _dec8 = property({
        type: Label,
        tooltip: "說明頁表單中獎金額標題"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JPAwardView, _Component);

        function JPAwardView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_jpInfoView", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_jpItemPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_jpItemContainer", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_titleForListSprite", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_titleForList", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_awardType", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_winnner", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_amount", _descriptor8, _assertThisInitialized(_this));

          _this.m_jpItemList = [];
          _this.m_itemPool = new NodePool();
          _this.m_brand = null;
          return _this;
        }

        var _proto = JPAwardView.prototype;

        _proto.SetTxt = function SetTxt(brand) {
          this.m_brand = brand;

          if (this.m_titleForList) {
            Tools.SetFont(this.m_titleForList);
            var str1 = LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_AWARD_TEXT);
            str1 = str1.replace(/\{brand\}/g, brand);
            this.m_titleForList.string = str1;
          }

          Tools.SetFont(this.m_awardType);
          Tools.SetFont(this.m_winnner);
          Tools.SetFont(this.m_amount);
          this.m_awardType.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_AWARDTYPE_TEXT);
          this.m_winnner.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_WINNER_TEXT);
          this.m_amount.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_AMOUNT_TEXT);
          this.m_jpInfoView.SetTxt(brand);

          if (JPManager.GetInstance().JPAtlas) {
            var altas = JPManager.GetInstance().JPAtlas;

            if (this.m_titleForListSprite) {
              this.m_titleForListSprite.spriteFrame = altas.getSpriteFrame("Jackpot_ListTitle");
            }
          }
        };

        _proto.ClickInfoBtn = function ClickInfoBtn() {
          if (this.m_brand && JPManager.GetInstance().BottomBar) {
            var title = LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_TEXT);
            title = title.replace(/\{brand\}/g, this.m_brand);
            var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_DESC_TEXT_1);
            str = str.replace(/\{brand\}/g, this.m_brand);
            JPManager.GetInstance().BottomBar.OpenCommonText(title, str);
          }
        };

        _proto.ShowUnlockCoin = function ShowUnlockCoin() {
          this.m_jpInfoView.ShowUnlockCoin();
        };

        _proto.SetCoin = function SetCoin(type, value) {
          this.m_jpInfoView.SetCoin(type, value);
        };

        _proto.SetInfo = function SetInfo(jpItem) {
          if (this.m_jpItemList.length > 0) {
            for (var i = 0; i < this.m_jpItemList.length; i++) {
              var item = this.m_jpItemList[i].getComponent(JPItem);
              item.Reset();
              this.m_itemPool.put(item.node);
            }
          }

          for (var _i = 0; _i < jpItem.length; _i++) {
            var nowItem = jpItem[_i];

            if (this.m_itemPool.size() > 0) {
              var _item = this.m_itemPool.get().getComponent(JPItem);

              this.m_jpItemContainer.addChild(_item.node);
              this.m_jpItemList.push(_item);

              _item.SetInfo(nowItem.type, nowItem.winner, nowItem.nickname, nowItem.win);
            } else {
              var _item2 = instantiate(this.m_jpItemPrefab).getComponent(JPItem);

              this.m_jpItemContainer.addChild(_item2.node);
              this.m_jpItemList.push(_item2);

              _item2.SetInfo(nowItem.type, nowItem.winner, nowItem.nickname, nowItem.win);
            }
          }
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          // let isAmericas = Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str;
          if (isLandscape) {
            // this.node.getComponent( cc.Animation ).play( isAmericas ? "Clip_Jackpot_LinkJP_Landscape" : 'Award_L' );
            this.node.getComponent(Animation).play("Clip_Jackpot_LinkJP_Landscape");

            if (this.m_jpItemList.length > 0) {
              for (var i = 0; i < this.m_jpItemList.length; i++) {
                var item = this.m_jpItemList[i].getComponent(JPItem); // item.node.getComponent( cc.Animation ).play( isAmericas ? "Clip_Jackpot_Cell_Landscape" : 'MsgL' );

                item.node.getComponent(Animation).play("Clip_Jackpot_Cell_Landscape");
              }
            }
          } else {
            // this.node.getComponent( cc.Animation ).play( isAmericas ? "Clip_Jackpot_LinkJP_Portrait" : 'Award_S' );
            this.node.getComponent(Animation).play("Clip_Jackpot_LinkJP_Portrait");

            if (this.m_jpItemList.length > 0) {
              for (var _i2 = 0; _i2 < this.m_jpItemList.length; _i2++) {
                var _item3 = this.m_jpItemList[_i2].getComponent(JPItem); // item.node.getComponent( cc.Animation ).play( isAmericas ? "Clip_Jackpot_Cell_Portrait" : 'MsgS' );


                _item3.node.getComponent(Animation).play("Clip_Jackpot_Cell_Portrait");
              }
            }
          }
        };

        return JPAwardView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_jpInfoView", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_jpItemPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_jpItemContainer", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_titleForListSprite", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_titleForList", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_awardType", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_winnner", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_amount", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JPBanner.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './pgame.mjs_cjs=&original=.js', './Define.ts', './LocaleStringManager.ts', './SoundManager.ts', './Tools.ts', './FloatView.ts', './JPManager.ts', './JPRollingValue.ts', './LifeSocket.ts', './pgame.js'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Animation, RichText, Node, tween, UIOpacity, UITransform, Component, Define, LocaleStringManager, SoundManager, Tools, FloatView, JPManager, BetUnLockCoin, JpAudioClips, JPRollingValue, LifeSocket, _cjsExports;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Animation = module.Animation;
      RichText = module.RichText;
      Node = module.Node;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      UITransform = module.UITransform;
      Component = module.Component;
    }, null, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      FloatView = module.default;
    }, function (module) {
      JPManager = module.default;
      BetUnLockCoin = module.BetUnLockCoin;
      JpAudioClips = module.JpAudioClips;
    }, function (module) {
      JPRollingValue = module.default;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15;

      cclegacy._RF.push({}, "641e3ehW/9P+4L7ZeWP+8mS", "JPBanner", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ShowTime = 5;
      var AutoShowTime = 180;
      var TxtName;

      (function (TxtName) {
        TxtName["grand"] = "Txt_Grand_02";
        TxtName["major"] = "Txt_Major_02";
        TxtName["mini"] = "Txt_Mini_02";
      })(TxtName || (TxtName = {}));

      var AnimName = {
        BannerShow: 'Clip_JP_Btn_Hit',
        BannerClose: 'Clip_JP_Btn_End',
        BannerShow1: 'Clip_Jackpot_IconBtn_Info_Hit',
        BannerClose1: 'Clip_Jackpot_IconBtn_Info_End',
        Grand: "Clip_Jackpot_IconBtn_JPGrand",
        Major: "Clip_Jackpot_IconBtn_JPMajor",
        Mini: "Clip_Jackpot_IconBtn_JPMini"
      };
      var AnimTime = {
        BtnLoop: 0.61,
        BannerShow: 0.17,
        BannerClose: 0.25
      };
      var JPBanner = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "面板資訊大獎圖字"
      }), _dec2 = property({
        type: Sprite,
        tooltip: "面板資訊中獎圖字"
      }), _dec3 = property({
        type: Sprite,
        tooltip: "面板資訊小獎圖字"
      }), _dec4 = property({
        type: JPRollingValue,
        tooltip: "面板資訊大獎金額"
      }), _dec5 = property({
        type: JPRollingValue,
        tooltip: "面板資訊中獎金額"
      }), _dec6 = property({
        type: JPRollingValue,
        tooltip: "面板資訊小獎金額"
      }), _dec7 = property({
        type: Animation,
        tooltip: "面板資訊大獎動畫"
      }), _dec8 = property({
        type: Animation,
        tooltip: "面板資訊中獎動畫"
      }), _dec9 = property({
        type: Animation,
        tooltip: "面板資訊小獎動畫"
      }), _dec10 = property({
        type: RichText,
        tooltip: "面板資訊大獎圖字"
      }), _dec11 = property({
        type: RichText,
        tooltip: "面板資訊中獎圖字"
      }), _dec12 = property({
        type: RichText,
        tooltip: "面板資訊小獎圖字"
      }), _dec13 = property({
        type: Node,
        tooltip: "面板資訊大獎圖字背景"
      }), _dec14 = property({
        type: Node,
        tooltip: "面板資訊中獎圖字背景"
      }), _dec15 = property({
        type: Node,
        tooltip: "面板資訊小獎圖字背景"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JPBanner, _Component);

        function JPBanner() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_grandTxt", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_majorTxt", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_miniTxt", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_grandValue", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_majorValue", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_miniValue", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_grandAnim", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_majorAnim", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_miniAnim", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_grandRichTxt", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_majorRichTxt", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_miniRichTxt", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_grandDark", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_majorDark", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_miniDark", _descriptor15, _assertThisInitialized(_this));

          _this.m_OpenTween = null;
          _this.m_CloseTween = null;
          _this.m_AutoOpenTween = null;
          _this.m_jpDesc = null;
          _this.m_btnCB = null;
          _this.m_loadFinish = false;
          _this.m_jackPotBtn = null;
          _this.isFisrt = false;
          _this.m_hasOtherGames = true;
          _this.m_infoCB = void 0;
          _this.m_allGamesCB = void 0;
          return _this;
        }

        var _proto = JPBanner.prototype;

        _proto.update = function update(dt) {
          if (this.m_jpDesc) {
            this.m_jpDesc.SetCoin(_cjsExports.serverProto.JpType.Grand, this.m_grandValue.NowValue);
            this.m_jpDesc.SetCoin(_cjsExports.serverProto.JpType.Major, this.m_majorValue.NowValue);
            this.m_jpDesc.SetCoin(_cjsExports.serverProto.JpType.Mini, this.m_miniValue.NowValue);

            if (this.m_loadFinish && !this.isFisrt) {
              this.isFisrt = true;
              this.m_jpDesc.SetTxt(); //不做顯示
              // this.m_jpDesc.OpenDesc();
            }
          }

          if (LocaleStringManager.GetInstance().IsGameStringLoaded() && !this.m_loadFinish) {
            this.m_loadFinish = true;
            this.SetTxt();
          }

          this.ChangeOpacity();
        };

        _proto.SetTxt = function SetTxt() {
          if (JPManager.GetInstance().JPAtlas) {
            var altas = JPManager.GetInstance().JPAtlas; // let isJILI = ( Tools.Line !== Define.LineSetting.americas && Tools.Line !== Define.LineSetting.americas_str ) ? "_02" : "";

            var grand = TxtName.grand;
            var major = TxtName.major;
            var mini = TxtName.mini;
            this.m_grandTxt.spriteFrame = altas.getSpriteFrame(grand);
            this.m_majorTxt.spriteFrame = altas.getSpriteFrame(major);
            this.m_miniTxt.spriteFrame = altas.getSpriteFrame(mini);
          }

          var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_BET_TEXT_1) + LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_BET_TEXT_2) + LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_BET_TEXT_3);
          var strb = LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_BET_TEXT_1b) + LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_BET_TEXT_2b) + LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_BET_TEXT_3b);
          var strc = LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_BET_TEXT_1c) + LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_BET_TEXT_2c) + LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_BET_TEXT_3c);

          if (BetUnLockCoin && BetUnLockCoin.length > 0) {
            var _grand = str.replace('%s', Tools.strip(BetUnLockCoin[_cjsExports.serverProto.JpType.Grand]).toString());

            var _major = strb.replace('%s', Tools.strip(BetUnLockCoin[_cjsExports.serverProto.JpType.Major]).toString());

            var _mini = strc.replace('%s', Tools.strip(BetUnLockCoin[_cjsExports.serverProto.JpType.Mini]).toString());

            Tools.SetFont(this.m_grandRichTxt);
            Tools.SetFont(this.m_majorRichTxt);
            Tools.SetFont(this.m_miniRichTxt);
            this.m_grandRichTxt.string = "<b>" + _grand + "</b>";
            this.m_majorRichTxt.string = "<b>" + _major + "</b>";
            this.m_miniRichTxt.string = "<b>" + _mini + "</b>";
          }
        };

        _proto.Init = function Init(jpDesc, btnCB, infoCB, allGamesCB, jackpotBtn) {
          this.m_jpDesc = jpDesc;
          this.m_btnCB = btnCB;
          this.m_jackPotBtn = jackpotBtn;
          this.m_infoCB = infoCB;
          this.m_allGamesCB = allGamesCB;
          this.SetInfo();
          this.OpenBanner(); // this.m_AutoOpenTween = tween(this.node)
          //     .delay(AutoShowTime)
          //     .call(() => {
          //         this.OpenBanner();
          //     })
          //     .start();
        };

        _proto.ShowJPAward = function ShowJPAward(info, jpResultCB) {
          var _this2 = this;

          if (info) {
            this.SetInfoForced(info);
            this.OpenBanner(false);

            if (this.m_OpenTween) {
              this.m_OpenTween.stop();
            }

            this.m_OpenTween = null;

            if (this.m_AutoOpenTween) {
              this.m_AutoOpenTween.stop();
            }

            this.m_AutoOpenTween = null;

            if (this.m_CloseTween) {
              this.m_CloseTween.stop();
            }

            this.m_CloseTween = null;
            var animState = this.m_grandAnim.getState(AnimName.Grand);
            animState.time = 0;
            animState = this.m_majorAnim.getState(AnimName.Major);
            animState.time = 0;
            animState = this.m_miniAnim.getState(AnimName.Mini);
            animState.time = 0;
            this.m_grandAnim.stop();
            this.m_majorAnim.stop();
            this.m_miniAnim.stop();
            var rand = info.type; // let isAmericas = Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str;

            if (rand == _cjsExports.serverProto.JpType.Grand) {
              // this.m_grandAnim.play( isAmericas ? AnimName.Grand.AMERICAS : AnimName.Grand.ORG );
              this.m_grandAnim.play(AnimName.Grand);
            }

            if (rand == _cjsExports.serverProto.JpType.Major) {
              // this.m_majorAnim.play( isAmericas ? AnimName.Major.AMERICAS : AnimName.Major.ORG );
              this.m_majorAnim.play(AnimName.Major);
            }

            if (rand == _cjsExports.serverProto.JpType.Mini) {
              // this.m_miniAnim.play( isAmericas ? AnimName.Mini.AMERICAS : AnimName.Mini.ORG );
              this.m_miniAnim.play(AnimName.Mini);
            }

            SoundManager.getInstance().Play(JpAudioClips.JP_0);
            tween(this.node).delay(AnimTime.BtnLoop * 3).call(function () {
              if (jpResultCB) {
                jpResultCB();
              }

              if (_this2.m_OpenTween) {
                _this2.m_OpenTween.stop();
              }

              _this2.m_OpenTween = null;

              if (_this2.m_AutoOpenTween) {
                _this2.m_AutoOpenTween.stop();
              }

              _this2.m_AutoOpenTween = null;

              if (_this2.m_CloseTween) {
                _this2.m_CloseTween.stop();
              }

              _this2.m_CloseTween = null;
              _this2.node.getComponent(UIOpacity).opacity = 255;
            }).start();
          }
        };

        _proto.StopJPAward = function StopJPAward() {
          var animState = this.m_grandAnim.getState(AnimName.Grand);
          animState.time = 0;
          animState = this.m_majorAnim.getState(AnimName.Major);
          animState.time = 0;
          animState = this.m_miniAnim.getState(AnimName.Mini);
          animState.time = 0;
          this.m_grandAnim.stop();
          this.m_majorAnim.stop();
          this.m_miniAnim.stop();
        };

        _proto.ChangeOpacity = function ChangeOpacity() {
          var nowBet = JPManager.GetInstance().GetNowBetValue();

          if (nowBet != null && nowBet != undefined && nowBet > 0) {
            var showBet = JPManager.GetInstance().GetDisplayValue(nowBet);

            if (showBet >= BetUnLockCoin[_cjsExports.serverProto.JpType.Grand]) {
              this.m_grandValue.node.getComponent(UIOpacity).opacity = 255;
              this.m_grandRichTxt.node.getComponent(UIOpacity).opacity = 1;
              this.m_grandDark.active = false;
            } else {
              this.m_grandValue.node.getComponent(UIOpacity).opacity = 1;
              this.m_grandRichTxt.node.getComponent(UIOpacity).opacity = 255;
              this.m_grandDark.active = true;
            }

            if (showBet >= BetUnLockCoin[_cjsExports.serverProto.JpType.Major]) {
              this.m_majorValue.node.getComponent(UIOpacity).opacity = 255;
              this.m_majorRichTxt.node.getComponent(UIOpacity).opacity = 1;
              this.m_majorDark.active = false;
            } else {
              this.m_majorValue.node.getComponent(UIOpacity).opacity = 1;
              this.m_majorRichTxt.node.getComponent(UIOpacity).opacity = 255;
              this.m_majorDark.active = true;
            }

            if (showBet >= BetUnLockCoin[_cjsExports.serverProto.JpType.Mini]) {
              this.m_miniValue.node.getComponent(UIOpacity).opacity = 255;
              this.m_miniRichTxt.node.getComponent(UIOpacity).opacity = 1;
              this.m_miniDark.active = false;
            } else {
              this.m_miniValue.node.getComponent(UIOpacity).opacity = 1;
              this.m_miniRichTxt.node.getComponent(UIOpacity).opacity = 255;
              this.m_miniDark.active = true;
            }
          }
        };

        _proto.SetInfo = function SetInfo() {
          var _this3 = this;

          if (LifeSocket.GetInstance().IsClose) {
            return;
          }

          if (this.m_infoCB) {
            this.m_infoCB(function (info) {
              JPManager.GetInstance().JackPotInfo = info;
              JPManager.GetInstance().JackPotShow();

              if (info && info.length > 0) {
                for (var i = 0; i < info.length; i++) {
                  var data = info[i];

                  if (data == null || data == undefined || !data) {
                    continue;
                  }

                  if (!data.type) {
                    continue;
                  }

                  if (data.type == _cjsExports.serverProto.JpType.Grand) {
                    _this3.m_grandValue.FinalValue = data.value;
                  }

                  if (data.type == _cjsExports.serverProto.JpType.Major) {
                    _this3.m_majorValue.FinalValue = data.value;
                  }

                  if (data.type == _cjsExports.serverProto.JpType.Mini) {
                    _this3.m_miniValue.FinalValue = data.value;
                  }
                }
              }
            });
          }

          if (this.m_allGamesCB && this.m_jpDesc) {
            this.m_allGamesCB(function (info) {
              if (info.game && info.game.length > 0) {
                _this3.m_hasOtherGames = true;

                _this3.m_jpDesc.ActiveJP(true);

                _this3.m_jpDesc.SetAllGamesInfo(info);
              } else {
                _this3.m_hasOtherGames = false;
              }
            });
          }
        };

        _proto.OpenBanner = function OpenBanner(isDelay) {
          var _this4 = this;

          if (isDelay === void 0) {
            isDelay = true;
          }

          this.node.getComponent(UIOpacity).opacity = 255; // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {

          this.node.getComponent(Animation).play(AnimName.BannerShow1); // }
          // else
          // {
          //     this.node.parent.getComponent( cc.Animation ).play( AnimName.BannerShow );
          // }

          if (this.m_AutoOpenTween) {
            this.m_AutoOpenTween.stop();
          }

          this.m_AutoOpenTween = null;

          if (this.m_CloseTween) {
            this.m_CloseTween.stop();
          }

          this.m_CloseTween = null;

          if (isDelay) {
            this.m_OpenTween = tween(this.node).delay(ShowTime).call(function () {
              _this4.CloseBanner();

              if (_this4.m_OpenTween) {
                _this4.m_OpenTween.stop();
              }

              _this4.m_OpenTween = null;
            }).start();
          }

          if (this.m_jackPotBtn) {
            var width = this.node.getChildByName('Frame') ? this.node.getChildByName('Frame').getComponent(UITransform).width : this.m_grandDark.getComponent(UITransform).width;
            this.m_jackPotBtn.node.getComponent(FloatView).SetBoundary(true, width);
          }
        };

        _proto.CloseBanner = function CloseBanner() {
          var _this5 = this;

          if (this.m_AutoOpenTween) {
            this.m_AutoOpenTween.stop();
          }

          this.m_AutoOpenTween = null;

          if (this.m_OpenTween) {
            this.m_OpenTween.stop();
          }

          this.m_OpenTween = null;
          var delay = 0; // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {

          var anim = this.node.getComponent(Animation);
          anim.play(AnimName.BannerClose1);
          var animState = anim.getState(AnimName.BannerClose1);

          if (animState) {
            delay = animState.duration;
          } // }
          // else
          // {
          //     let animState: cc.AnimationState = this.node.parent.getComponent( cc.Animation ).play( AnimName.BannerClose );
          //     delay = animState.duration;
          // }


          this.m_CloseTween = tween(this.node).delay(delay).call(function () {
            _this5.node.getComponent(UIOpacity).opacity = 1;

            if (_this5.m_btnCB) {
              _this5.m_btnCB();
            }

            if (_this5.m_CloseTween) {
              _this5.m_CloseTween.stop();
            }

            _this5.m_CloseTween = null;
            _this5.m_AutoOpenTween = tween(_this5.node).delay(AutoShowTime).call(function () {
              _this5.OpenBanner();
            }).start();
          }).start();

          if (this.m_jackPotBtn) {
            var width = this.node.getChildByName('Frame') ? this.node.getChildByName('Frame').getComponent(UITransform).width : this.m_grandDark.getComponent(UITransform).width;
            this.m_jackPotBtn.node.getComponent(FloatView).SetBoundary(false, width);
          }
        };

        _proto.ResumeRolling = function ResumeRolling() {
          this.m_grandValue.IsRolling = true;
          this.m_majorValue.IsRolling = true;
          this.m_miniValue.IsRolling = true;
        };

        _proto.SetInfoForced = function SetInfoForced(info) {
          if (info.type == _cjsExports.serverProto.JpType.Grand) {
            this.m_grandValue.IsRolling = false;
            this.m_grandValue.NowValue = info.win;
            this.m_grandValue.FinalValue = info.win;
            this.m_grandValue.DurTime = 0;
            this.m_grandValue.SetCoin(info.win, false);
          }

          if (info.type == _cjsExports.serverProto.JpType.Major) {
            this.m_majorValue.IsRolling = false;
            this.m_majorValue.NowValue = info.win;
            this.m_majorValue.FinalValue = info.win;
            this.m_majorValue.DurTime = 0;
            this.m_majorValue.SetCoin(info.win, false);
          }

          if (info.type == _cjsExports.serverProto.JpType.Mini) {
            this.m_miniValue.IsRolling = false;
            this.m_miniValue.NowValue = info.win;
            this.m_miniValue.FinalValue = info.win;
            this.m_miniValue.DurTime = 0;
            this.m_miniValue.SetCoin(info.win, false);
          }
        };

        _createClass(JPBanner, [{
          key: "HasOtherGames",
          get: function get() {
            return this.m_hasOtherGames;
          }
        }]);

        return JPBanner;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_grandTxt", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_majorTxt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_miniTxt", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_grandValue", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_majorValue", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_miniValue", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_grandAnim", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_majorAnim", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_miniAnim", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_grandRichTxt", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_majorRichTxt", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_miniRichTxt", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_grandDark", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_majorDark", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_miniDark", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JPBar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './SoundManager.ts', './JPBanner.ts', './JPBtn.ts', './JPManager.ts', './JPMarquee.ts', './LifeSocket.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, UIOpacity, Component, Define, SoundManager, JPBanner, JPBtn, JPManager, JPMarquee, LifeSocket;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UIOpacity = module.UIOpacity;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      JPBanner = module.default;
    }, function (module) {
      JPBtn = module.default;
    }, function (module) {
      JPManager = module.default;
    }, function (module) {
      JPMarquee = module.default;
    }, function (module) {
      LifeSocket = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "fac62adNFlK06dNihRQEY46", "JPBar", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GetInfoTime = 60;
      var JPBar = exports('default', (_dec = property({
        type: JPBtn,
        tooltip: "按鈕本身"
      }), _dec2 = property({
        type: JPBanner,
        tooltip: "彩金顯示面板"
      }), _dec3 = property({
        type: JPMarquee,
        tooltip: "跑馬燈"
      }), _dec4 = property({
        type: Node,
        tooltip: "JP說明頁按鈕"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JPBar, _Component);

        function JPBar() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_btn", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_banner", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_marquee", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_quest", _descriptor4, _assertThisInitialized(_this));

          _this.m_isInit = false;
          _this.m_timer = GetInfoTime;
          return _this;
        }

        var _proto = JPBar.prototype;

        _proto.start = function start() {
          this.m_btn.ShowBtn();
        };

        _proto.update = function update(dt) {
          if (LifeSocket.GetInstance().IsClose) {
            return;
          }

          this.AddMarquee();
          this.m_timer -= dt;

          if (this.m_timer < 0) {
            this.SetInfoScheDule();
            this.m_timer = GetInfoTime;
          }
        };

        _proto.Init = function Init(jpDesc, infoCB, allGamesCB, jackpotBtn) {
          var _this2 = this;

          if (this.m_isInit) {
            return;
          }

          this.m_isInit = true;

          if (this.m_btn) {
            this.m_btn.ShowBtn();
          }

          if (this.m_banner) {
            var btnCB = function btnCB() {
              if (_this2.m_btn) {
                _this2.m_btn.ShowBtn();
              }
            };

            this.m_banner.Init(jpDesc, btnCB, infoCB, allGamesCB, jackpotBtn);
          }

          if (this.m_marquee) {
            this.m_marquee.node.active = false;
          }
        };

        _proto.HasAllGames = function HasAllGames() {
          return this.m_banner.HasOtherGames;
        };

        _proto.SetInfoScheDule = function SetInfoScheDule() {
          if (!JPManager.GetInstance().IsJpResultAward) {
            this.SyncBannerInfo();
          }
        };

        _proto.SyncBannerInfo = function SyncBannerInfo() {
          if (this.m_banner) {
            this.m_banner.SetInfo();
          }
        };

        _proto.CloseBanner = function CloseBanner() {
          if (this.m_banner) {
            this.m_banner.CloseBanner();
          }
        };

        _proto.ShowJPAward = function ShowJPAward(info, jpResultCB) {
          if (this.m_banner) {
            this.m_banner.ShowJPAward(info, jpResultCB);
          }
        };

        _proto.StopJPAward = function StopJPAward() {
          if (this.m_banner) {
            this.m_banner.StopJPAward();
          }
        };

        _proto.ResumeRolling = function ResumeRolling() {
          if (this.m_banner) {
            this.m_banner.ResumeRolling();
          }
        };

        _proto.SetTxt = function SetTxt() {
          if (this.m_btn) {
            this.m_btn.SetTxt();
          }

          if (this.m_banner) {
            this.m_banner.SetTxt();
          }

          if (this.m_marquee) {
            this.m_marquee.SetTxt();
          }
        };

        _proto.TouchEnd = function TouchEnd() {
          if (this.m_banner) {
            if (this.m_banner.node.getComponent(UIOpacity).opacity >= 255) {
              this.m_banner.CloseBanner();
            } else {
              this.m_banner.OpenBanner();
            }
          }

          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN); // ConnectionManager.getInstance().SendBtnClickEvent(
          //     ConnectionManager.FormBtnClickParams(
          //         Number( Define.AID ),
          //         Number( Define.API_ID ),
          //         Number( Define.NOW_GAME_ID ),
          //         Define.GAME_VERSION,
          //         Define.BTN_CLICK_EVENT.VOLATILITY
          //     )
          // )
        };

        _proto.SetMarqueeInfo = function SetMarqueeInfo(info) {
          if (info) {
            if (this.m_marquee) {
              this.m_marquee.SetInfo(info);
            }
          }
        };

        _proto.SetMarqueeUnLock = function SetMarqueeUnLock() {
          this.m_marquee.UnLock = true;
        };

        _proto.AddMarquee = function AddMarquee() {
          if (this.m_marquee) {
            this.m_marquee.AddMarquee();
          }
        };

        _createClass(JPBar, [{
          key: "Btn",
          get: function get() {
            return this.m_btn;
          }
        }, {
          key: "Quest",
          get: function get() {
            return this.m_quest;
          }
        }]);

        return JPBar;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_btn", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_banner", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_marquee", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_quest", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JPBtn.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './JPManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Animation, Component, JPManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      JPManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "4327fYbO2ZLeJZ6rfxKVcvR", "JPBtn", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TxtName;

      (function (TxtName) {
        TxtName["jili"] = "Txt_JILI";
        TxtName["slot"] = "Txt_Slot";
        TxtName["jp"] = "Txt_Jackpot";
      })(TxtName || (TxtName = {}));

      var AnimName = {
        BtnLoop: 'Clip_Jackpot_IconBtn_Loop',
        BtnLoop_TADA: 'Clip_Jackpot_IconBtn_Loop'
      };
      var JPBtn = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "按鈕吉利圖字"
      }), _dec2 = property({
        type: Sprite,
        tooltip: "按鈕老虎雞圖字"
      }), _dec3 = property({
        type: Sprite,
        tooltip: "按鈕JP圖字"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JPBtn, _Component);

        function JPBtn() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_jiliTxt", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_slotTxt", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_jpTxt", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = JPBtn.prototype;

        _proto.SetTxt = function SetTxt() {
          if (JPManager.GetInstance().JPAtlas) {
            var altas = JPManager.GetInstance().JPAtlas;

            if (this.m_jiliTxt) {
              this.m_jiliTxt.spriteFrame = altas.getSpriteFrame(TxtName.jili);
            }

            if (this.m_slotTxt) {
              this.m_slotTxt.spriteFrame = altas.getSpriteFrame(TxtName.slot);
            }

            this.m_jpTxt.spriteFrame = altas.getSpriteFrame(TxtName.jp);
          }
        };

        _proto.ShowBtn = function ShowBtn() {
          var ani = AnimName.BtnLoop; // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {
          //     ani = AnimName.BtnLoop_TADA;
          // }

          this.node.parent.getComponent(Animation).play(ani);
        };

        return JPBtn;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_jiliTxt", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_slotTxt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_jpTxt", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JPDesc.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './SoundManager.ts', './Tools.ts', './Discount.ts', './ExtraManager.ts', './JPAwardView.ts', './JPManager.ts', './JPOtherGamesView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Prefab, Node, Button, Label, Sprite, instantiate, color, Animation, Component, Define, LocaleStringManager, SoundManager, Tools, PageName, ExtraManager, JPAwardView, JPManager, JPOtherGamesView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Button = module.Button;
      Label = module.Label;
      Sprite = module.Sprite;
      instantiate = module.instantiate;
      color = module.color;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      PageName = module.PageName;
    }, function (module) {
      ExtraManager = module.default;
    }, function (module) {
      JPAwardView = module.default;
    }, function (module) {
      JPManager = module.default;
    }, function (module) {
      JPOtherGamesView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16;

      cclegacy._RF.push({}, "3cde1eJh19KX6weH98T69iF", "JPDesc", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TabName = ["Jackpot_LinkJP", "Jackpot_OtherGames"];
      var JPAmount = exports('JPAmount', 3);
      var JPDesc = exports('default', (_dec = property({
        type: Prefab,
        tooltip: "彩金中獎資訊頁"
      }), _dec2 = property({
        type: Prefab,
        tooltip: "其他遊戲資訊頁"
      }), _dec3 = property({
        type: Node,
        tooltip: "內容放置"
      }), _dec4 = property({
        type: Prefab,
        tooltip: "贏更多的其他遊戲"
      }), _dec5 = property({
        type: Node,
        tooltip: "說明頁表單mask"
      }), _dec6 = property({
        type: Node,
        tooltip: "說明頁表單關閉按鈕"
      }), _dec7 = property({
        type: Button,
        tooltip: "中獎本遊戲頁籤鈕"
      }), _dec8 = property({
        type: Button,
        tooltip: "中獎其他遊戲頁籤鈕"
      }), _dec9 = property({
        type: Node,
        tooltip: "亮起的頁簽"
      }), _dec10 = property({
        type: Label,
        tooltip: "說明頁標題"
      }), _dec11 = property({
        type: Sprite,
        tooltip: "說明頁標題"
      }), _dec12 = property({
        type: Sprite,
        tooltip: "頁簽標題-暗"
      }), _dec13 = property({
        type: Sprite,
        tooltip: "頁簽標題-亮"
      }), _dec14 = property({
        type: Node,
        tooltip: "Logo"
      }), _dec15 = property({
        type: Node,
        tooltip: "Other Logo"
      }), _dec16 = property({
        type: Node,
        tooltip: "TaDa Casino"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JPDesc, _Component);

        function JPDesc() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_jpAwardViewPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_jpOtherGamesPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_extraOtherGamePrefab", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_mask", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_close", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_thisGameBtn", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_otherGameBtn", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lightPageNodes", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_title", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_titleSprite", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_darkTabTitleSprites", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lightTabTitleSprites", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_logoNode", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_otherLogoNode", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tadaCasinoLogoNode", _descriptor16, _assertThisInitialized(_this));

          _this.m_isLandscape = false;
          _this.m_jpAwardView = null;
          _this.m_jpOtherGamesView = null;
          _this.m_currentTouchName = null;
          _this.m_isAddToDiscount = false;
          _this.m_extraOtherGameView = null;
          _this.m_brand = "";
          _this.m_bottomBar = null;
          _this.m_historyCB = void 0;
          return _this;
        }

        var _proto = JPDesc.prototype;

        _proto.Init = function Init(bottomBar, historyCB) {
          var _this2 = this;

          this.m_bottomBar = bottomBar;
          this.m_historyCB = historyCB;
          var node = instantiate(this.m_jpAwardViewPrefab);
          this.m_contentNode.addChild(node);
          this.m_jpAwardView = node.getComponent(JPAwardView);
          node = instantiate(this.m_jpOtherGamesPrefab);
          this.m_contentNode.addChild(node);
          node.active = false;
          this.m_jpOtherGamesView = node.getComponent(JPOtherGamesView);

          if (this.m_thisGameBtn && this.m_otherGameBtn) {
            this.m_thisGameBtn.interactable = false; // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     this.m_thisGameBtn.node.getChildByName( 'Label' ).color = cc.color( 36, 30, 8 );
            // }

            this.m_thisGameBtn.node.on(Node.EventType.TOUCH_START, function (event) {
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this2.m_currentTouchName == null) {
                _this2.m_currentTouchName = event.target.name;
              } else {
                if (event.target && event.target.active == false) {
                  _this2.m_currentTouchName = event.target.name;
                }
              }
            });
            this.m_thisGameBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              if (_this2.m_currentTouchName == event.target.name) {
                _this2.m_currentTouchName = null;
              }
            });
            this.m_thisGameBtn.node.on(Node.EventType.TOUCH_END, function (event) {
              if (_this2.m_currentTouchName != event.target.name) {
                return;
              }

              _this2.m_currentTouchName = null;
              _this2.m_jpAwardView.node.active = true;
              _this2.m_jpOtherGamesView.node.active = false;
              _this2.m_thisGameBtn.interactable = false;
              _this2.m_otherGameBtn.interactable = true;

              _this2.Rotation(_this2.m_isLandscape);

              var thisGameLabel = _this2.m_thisGameBtn.node.getChildByName('Label');

              thisGameLabel.getComponent(Label).color = color(36, 30, 8);

              var otherGameLabel = _this2.m_otherGameBtn.node.getChildByName('Label');

              otherGameLabel.getComponent(Label).color = color(208, 199, 173);
            });
            this.m_otherGameBtn.node.on(Node.EventType.TOUCH_START, function (event) {
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this2.m_currentTouchName == null) {
                _this2.m_currentTouchName = event.target.name;
              } else {
                if (event.target && event.target.active == false) {
                  _this2.m_currentTouchName = event.target.name;
                }
              }
            });
            this.m_otherGameBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              if (_this2.m_currentTouchName == event.target.name) {
                _this2.m_currentTouchName = null;
              }
            });
            this.m_otherGameBtn.node.on(Node.EventType.TOUCH_END, function (event) {
              if (_this2.m_currentTouchName != event.target.name) {
                return;
              }

              _this2.m_currentTouchName = null;
              _this2.m_jpAwardView.node.active = false;
              _this2.m_jpOtherGamesView.node.active = true;
              _this2.m_thisGameBtn.interactable = true;
              _this2.m_otherGameBtn.interactable = false;

              _this2.Rotation(_this2.m_isLandscape);

              var thisGameLabel = _this2.m_thisGameBtn.node.getChildByName('Label');

              thisGameLabel.getComponent(Label).color = color(208, 199, 173);

              var otherGameLabel = _this2.m_otherGameBtn.node.getChildByName('Label');

              otherGameLabel.getComponent(Label).color = color(36, 30, 8);
            });
          }

          this.SetLogoIcon();
        };

        _proto.SetLogoIcon = function SetLogoIcon() {
          Tools.LoadIcon(LocaleStringManager.CurrLang, Number(Define.NOW_GAME_ID), null);

          if (this.m_logoNode) {
            if (Tools.Line != Define.LineSetting.americas && Tools.Line != Define.LineSetting.americas_str) {
              var spriteFrame = Tools.UsingLogoSpriteFrame();

              if (spriteFrame) {
                if (Tools.OtherLogo && this.m_otherLogoNode) {
                  this.m_otherLogoNode.active = true;
                  this.m_logoNode.active = false;
                  this.m_otherLogoNode.getComponent(Sprite).spriteFrame = spriteFrame;
                } else {
                  this.m_logoNode.active = true; // this.m_logoNode.getComponent( cc.Sprite ).spriteFrame = spriteFrame;
                }
              } else {
                this.m_logoNode.active = false;
              }
            } else {
              //TaDa
              if (Tools.IsTadaCasino && this.m_tadaCasinoLogoNode) {
                this.m_logoNode.active = false;
                this.m_tadaCasinoLogoNode.active = true;
              }
            }
          }
        };

        _proto.ActiveJP = function ActiveJP(isActive) {
          var _this3 = this;

          if (isActive) {
            if (!this.m_isAddToDiscount) {
              this.m_isAddToDiscount = true;

              if (!this.m_extraOtherGameView) {
                var target = this.m_extraOtherGamePrefab ? this.m_extraOtherGamePrefab : this.m_jpOtherGamesView.node;
                var node = instantiate(target);
                this.m_extraOtherGameView = node.getComponent(JPOtherGamesView);
              }

              if (this.m_extraOtherGameView.node.parent) {
                this.m_extraOtherGameView.node.removeFromParent();
              }

              this.m_extraOtherGameView.SetTxt(this.m_brand);
              var extraManager = this.m_bottomBar.getComponent(ExtraManager);
              var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.SLOT_JACKPOT);
              str = str.replace("{brand}", this.m_brand);
              extraManager.AddDiscountPage(this.m_extraOtherGameView.node, PageName.JP, str, function (isLandscape) {
                _this3.m_extraOtherGameView.OnRotation(isLandscape);
              });
            }
          } else {
            if (this.m_isAddToDiscount) {
              this.m_isAddToDiscount = false;

              var _extraManager = this.m_bottomBar.getComponent(ExtraManager);

              _extraManager.RemoveDiscountPage(PageName.JP);
            }
          }
        };

        _proto.OpenDesc = function OpenDesc() {
          var _this4 = this;

          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);

          if (this.m_historyCB) {
            // this.m_loading.active = true;
            this.m_historyCB(function (info) {
              if (info && info.length > 0) {
                _this4.SetInfo(info); // this.m_loading.active = false;

              }
            });
          }

          this.node.active = true;
          this.ShowUnlockCoin();
          this.Rotation(this.m_isLandscape);

          if (this.m_thisGameBtn && this.m_otherGameBtn) {
            this.m_thisGameBtn.interactable = false;
            this.m_otherGameBtn.interactable = true;
            var thisGameLabel = this.m_thisGameBtn.node.getChildByName('Label');
            thisGameLabel.getComponent(Label).color = color(36, 30, 8);
            var otherGameLabel = this.m_otherGameBtn.node.getChildByName('Label');
            otherGameLabel.getComponent(Label).color = color(208, 199, 173);
          }
        };

        _proto.CloseDesc = function CloseDesc() {
          SoundManager.getInstance().Play(Define.AudioClips.COMMON_CANCEL_BTN);
          this.node.active = false;
        };

        _proto.SetTxt = function SetTxt() {
          this.m_brand = LocaleStringManager.GetInstance().GetString(Define.StringKey.BRAND_JILI);

          if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
            this.m_brand = LocaleStringManager.GetInstance().GetString(Define.StringKey.BRAND_TADA);
          } // else
          // {
          //     let thisGameLabel = this.m_thisGameBtn.node.getChildByName( 'Label' ).getComponent( cc.Label );
          //     let otherGameLabel = this.m_otherGameBtn.node.getChildByName( 'Label' ).getComponent( cc.Label );
          //     if ( !thisGameLabel.font )
          //     {
          //         thisGameLabel.font = Define.DefaultFont;
          //     }
          //     if ( !otherGameLabel.font )
          //     {
          //         otherGameLabel.font = Define.DefaultFont;
          //     }
          //     let str = LocaleStringManager.GetInstance().GetString( Define.StringKey.SLOT_JACKPOT );
          //     str = str.replace( "{brand}", this.m_brand );
          //     thisGameLabel.string = str;
          //     otherGameLabel.string = LocaleStringManager.GetInstance().GetString( Define.StringKey.SLOT_JACKPOT_OTHER );
          // }


          if (this.m_title) {
            Tools.SetFont(this.m_title);
            var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_TEXT);
            str = str.replace("{brand}", this.m_brand);
            this.m_title.string = str;
          }

          if (JPManager.GetInstance().JPAtlas) {
            var atlas = JPManager.GetInstance().JPAtlas;

            if (this.m_titleSprite) {
              this.m_titleSprite.spriteFrame = atlas.getSpriteFrame("Jackpot_Title");
            }

            for (var i = 0; i < this.m_darkTabTitleSprites.length; i++) {
              this.m_darkTabTitleSprites[i].spriteFrame = atlas.getSpriteFrame(TabName[i]);
              this.m_lightTabTitleSprites[i].spriteFrame = atlas.getSpriteFrame(TabName[i] + "_On");
            }
          }

          this.m_jpAwardView.SetTxt(this.m_brand);
          this.m_jpOtherGamesView.SetTxt(this.m_brand);

          if (this.m_extraOtherGameView) {
            this.m_extraOtherGameView.SetTxt(this.m_brand);
          }

          this.ShowUnlockCoin();
        };

        _proto.ShowUnlockCoin = function ShowUnlockCoin() {
          this.m_jpAwardView.ShowUnlockCoin();
          this.m_jpOtherGamesView.ShowUnlockCoin();

          if (this.m_extraOtherGameView) {
            this.m_extraOtherGameView.ShowUnlockCoin();
          }
        };

        _proto.SetCoin = function SetCoin(type, value) {
          this.m_jpAwardView.SetCoin(type, value);
          this.m_jpOtherGamesView.SetCoin(type, value);

          if (this.m_extraOtherGameView) {
            this.m_extraOtherGameView.SetCoin(type, value);
          }
        };

        _proto.SetInfo = function SetInfo(jpItem) {
          this.m_jpAwardView.SetInfo(jpItem);
          this.Rotation(this.m_isLandscape);
        };

        _proto.SetAllGamesInfo = function SetAllGamesInfo(info) {
          this.m_jpOtherGamesView.SetAllGamesInfo(info);

          if (this.m_extraOtherGameView) {
            this.m_extraOtherGameView.SetAllGamesInfo(info);
          }
        } //選擇頁簽
        ;

        _proto.OnSelectTab = function OnSelectTab(event, eventData) {
          var idx = Number(eventData);

          if (!isNaN(idx)) {
            SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);

            for (var i = 0; i < this.m_lightPageNodes.length; i++) {
              this.m_lightPageNodes[i].active = idx == i;
            }

            switch (idx) {
              case 0:
                this.m_jpAwardView.node.active = true;
                this.m_jpOtherGamesView.node.active = false;
                break;

              case 1:
                this.m_jpAwardView.node.active = false;
                this.m_jpOtherGamesView.node.active = true;
                break;
            }

            this.Rotation(this.m_isLandscape);
          }
        };

        _proto.Rotation = function Rotation(isLandscape) {
          this.m_isLandscape = isLandscape; // let isAmericas = Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str;

          if (isLandscape) {
            // this.node.getComponent( cc.Animation ).play( isAmericas ? "Clip_Common_TagFrame_Landscape" : 'DescL' );
            this.node.getComponent(Animation).play("Clip_Common_TagFrame_Landscape");
          } else {
            // this.node.getComponent( cc.Animation ).play( isAmericas ? "Clip_Common_TagFrame_Portrait" : 'DescS' );
            this.node.getComponent(Animation).play("Clip_Common_TagFrame_Portrait");
          }

          this.m_jpAwardView.OnRotation(isLandscape);
          this.m_jpOtherGamesView.OnRotation(isLandscape);
        };

        _createClass(JPDesc, [{
          key: "Mask",
          get: function get() {
            return this.m_mask;
          }
        }, {
          key: "Close",
          get: function get() {
            return this.m_close;
          }
        }]);

        return JPDesc;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_jpAwardViewPrefab", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_jpOtherGamesPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_contentNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_extraOtherGamePrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_mask", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_close", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_thisGameBtn", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_otherGameBtn", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_lightPageNodes", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_title", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_titleSprite", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_darkTabTitleSprites", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_lightTabTitleSprites", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_logoNode", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_otherLogoNode", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_tadaCasinoLogoNode", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JPInfoView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './pgame.mjs_cjs=&original=.js', './Define.ts', './LocaleStringManager.ts', './Tools.ts', './JPDesc.ts', './JPManager.ts', './JPRollingValue.ts', './pgame.js'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Label, RichText, Node, Component, Define, LocaleStringManager, Tools, JPAmount, BetUnLockCoin, JPManager, JPRollingValue, _cjsExports;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      RichText = module.RichText;
      Node = module.Node;
      Component = module.Component;
    }, null, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      JPAmount = module.JPAmount;
    }, function (module) {
      BetUnLockCoin = module.BetUnLockCoin;
      JPManager = module.default;
    }, function (module) {
      JPRollingValue = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "cec14zOkY5MdZzTqMQI29jy", "JPInfoView", undefined);

      var TxtName = {
        grand: 'Txt_Grand',
        major: 'Txt_Major',
        mini: 'Txt_Mini'
      };
      /**
       * 彩金資訊設定
       */

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JPInfoView = exports('default', (_dec = property({
        type: JPRollingValue,
        tooltip: "說明頁表單大獎金額"
      }), _dec2 = property({
        type: JPRollingValue,
        tooltip: "說明頁表單中獎金額"
      }), _dec3 = property({
        type: JPRollingValue,
        tooltip: "說明頁表單小獎金額"
      }), _dec4 = property({
        type: Sprite,
        tooltip: "說明頁表單中獎金額標題"
      }), _dec5 = property({
        type: Sprite,
        tooltip: "說明頁表單中獎金額標題"
      }), _dec6 = property({
        type: Sprite,
        tooltip: "說明頁表單中獎金額標題"
      }), _dec7 = property({
        type: Label,
        tooltip: "說明頁表單說明敘述"
      }), _dec8 = property({
        type: Label,
        tooltip: "說明頁表單說明敘述"
      }), _dec9 = property({
        type: RichText,
        tooltip: "押注解鎖說明的字順序為grand major mini"
      }), _dec10 = property({
        type: Node,
        tooltip: "押注鎖的圖順序為grand major mini"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JPInfoView, _Component);

        function JPInfoView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_grandValue", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_majorValue", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_miniValue", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_grandTxt", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_majorTxt", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_miniTxt", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_jpDescL", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_jpDescS", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betLockDesc", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betLockSprite", _descriptor10, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = JPInfoView.prototype;

        _proto.SetTxt = function SetTxt(brand) {
          if (this.m_jpDescL && !this.m_jpDescL.font) {
            Tools.SetFont(this.m_jpDescL);
            var str1 = LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_DESC_TEXT_1);
            str1 = str1.replace(/\{brand\}/g, brand);
            this.m_jpDescL.string = str1;
          }

          if (this.m_jpDescS && !this.m_jpDescS.font) {
            Tools.SetFont(this.m_jpDescS);
            var str2 = LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_DESC_TEXT_2);
            str2 = str2.replace(/\{brand\}/g, brand);
            this.m_jpDescS.string = str2;
          }

          for (var i = 0; i < JPAmount; i++) {
            Tools.SetFont(this.m_betLockDesc[i]);
            this.m_betLockDesc[i].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.JACKPOT_BET_TEXT);
            var index = 0;

            if (i == 0) {
              index = _cjsExports.serverProto.JpType.Grand;
            }

            if (i == 1) {
              index = _cjsExports.serverProto.JpType.Major;
            }

            if (i == 2) {
              index = _cjsExports.serverProto.JpType.Mini;
            }

            if (BetUnLockCoin && BetUnLockCoin.length > 0) {
              this.m_betLockDesc[i].string = this.m_betLockDesc[i].string.replace('%s', Tools.strip(BetUnLockCoin[index]).toString());
            }
          }

          if (JPManager.GetInstance().JPAtlas) {
            var altas = JPManager.GetInstance().JPAtlas;
            this.m_grandTxt.spriteFrame = altas.getSpriteFrame(TxtName.grand);
            this.m_majorTxt.spriteFrame = altas.getSpriteFrame(TxtName.major);
            this.m_miniTxt.spriteFrame = altas.getSpriteFrame(TxtName.mini);
          }
        };

        _proto.ShowUnlockCoin = function ShowUnlockCoin() {
          // let nowBet = JPManager.GetInstance().GetBetByIndex();
          var nowBet = JPManager.GetInstance().GetNowBetValue();

          if (nowBet && nowBet > 0) {
            // let showBet = JPManager.GetInstance().GetDisplayValue( nowBet );
            if (nowBet < BetUnLockCoin[_cjsExports.serverProto.JpType.Grand]) {
              this.m_betLockDesc[0].node.active = true;
              this.m_betLockSprite[0].active = true;
            } else {
              this.m_betLockDesc[0].node.active = false;
              this.m_betLockSprite[0].active = false;
            }

            if (nowBet < BetUnLockCoin[_cjsExports.serverProto.JpType.Major]) {
              this.m_betLockDesc[1].node.active = true;
              this.m_betLockSprite[1].active = true;
            } else {
              this.m_betLockDesc[1].node.active = false;
              this.m_betLockSprite[1].active = false;
            }

            if (nowBet < BetUnLockCoin[_cjsExports.serverProto.JpType.Mini]) {
              this.m_betLockDesc[2].node.active = true;
              this.m_betLockSprite[2].active = true;
            } else {
              this.m_betLockDesc[2].node.active = false;
              this.m_betLockSprite[2].active = false;
            }
          } else {
            for (var i = 0; i < JPAmount; i++) {
              this.m_betLockDesc[i].node.active = false;
              this.m_betLockSprite[i].active = false;
            }
          }
        };

        _proto.SetCoin = function SetCoin(type, value) {
          if (type == _cjsExports.serverProto.JpType.Grand) {
            this.m_grandValue.SetCoin(value);
          }

          if (type == _cjsExports.serverProto.JpType.Major) {
            this.m_majorValue.SetCoin(value);
          }

          if (type == _cjsExports.serverProto.JpType.Mini) {
            this.m_miniValue.SetCoin(value);
          }
        };

        return JPInfoView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_grandValue", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_majorValue", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_miniValue", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_grandTxt", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_majorTxt", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_miniTxt", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_jpDescL", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_jpDescS", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_betLockDesc", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_betLockSprite", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JPItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './pgame.mjs_cjs=&original=.js', './Tools.ts', './JPManager.ts', './pgame.js'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Label, Component, Tools, JPManager, _cjsExports;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Component = module.Component;
    }, null, function (module) {
      Tools = module.default;
    }, function (module) {
      JPManager = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "12a64k0Ei9Gx7+xpeAm8HkZ", "JPItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TxtName;

      (function (TxtName) {
        TxtName["grand"] = "Txt_Msg_Grand";
        TxtName["major"] = "Txt_Msg_Major";
        TxtName["mini"] = "Txt_Msg_Mini";
      })(TxtName || (TxtName = {}));

      var JPItem = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "中獎類型圖grand major mini"
      }), _dec2 = property({
        type: Label,
        tooltip: "中獎得主名稱"
      }), _dec3 = property({
        type: Label,
        tooltip: "中獎金額"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JPItem, _Component);

        function JPItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_awardType", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_winner", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_coin", _descriptor3, _assertThisInitialized(_this));

          _this.m_type = null;
          _this.m_player = null;
          _this.m_nickName = null;
          _this.m_value = null;
          _this.dotType = Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT;
          return _this;
        }

        var _proto = JPItem.prototype;

        _proto.update = function update(dt) {
          if (this.m_type != null && this.m_player != null && this.m_value != null) {
            this.SetItem(this.m_type, this.m_player, this.m_nickName, this.m_value);
            this.m_type = null;
            this.m_player = null;
            this.m_nickName = null;
            this.m_value = null;
          }
        };

        _proto.SetInfo = function SetInfo(type, winner, nickName, value) {
          this.m_type = type;
          this.m_player = winner;
          this.m_nickName = nickName;
          this.m_value = value;
          this.node.active = true;
        };

        _proto.Reset = function Reset() {
          this.m_type = null;
          this.m_player = null;
          this.m_nickName = null;
          this.m_value = null;
          this.node.active = false;
        };

        _proto.SetItem = function SetItem(type, winner, nickName, value) {
          if (JPManager.GetInstance().JPAtlas) {
            if (type == _cjsExports.serverProto.JpType.Grand) {
              this.m_awardType.spriteFrame = JPManager.GetInstance().JPAtlas.getSpriteFrame(TxtName.grand);
            }

            if (type == _cjsExports.serverProto.JpType.Major) {
              this.m_awardType.spriteFrame = JPManager.GetInstance().JPAtlas.getSpriteFrame(TxtName.major);
            }

            if (type == _cjsExports.serverProto.JpType.Mini) {
              this.m_awardType.spriteFrame = JPManager.GetInstance().JPAtlas.getSpriteFrame(TxtName.mini);
            }
          }

          Tools.SetFont(this.m_winner);
          this.m_winner.string = JPManager.GetInstance().GetWinnerString(winner, nickName);

          if (JPManager.GetInstance()) {
            var newValue = Tools.strip(Tools.divide(value, JPManager.GetInstance().GetRate()));
            Tools.SetFont(this.m_coin);
            Tools.SetLabelString(this.m_coin.node, JPManager.GetInstance().GetDisplayValue(newValue), this.dotType);
          }
        };

        return JPItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_awardType", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_winner", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_coin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JPManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LifeSocket.ts', './pgame.mjs_cjs=&original=.js', './Define.ts', './LocaleStringManager.ts', './Tools.ts', './ExtraManager.ts', './FloatView.ts', './JPBar.ts', './JPDesc.ts', './JPResult.ts', './IconBox.ts', './pgame.js'], function (exports) {
  'use strict';

  var _createClass, cclegacy, Prefab, instantiate, error, Node, SpriteAtlas, LifeSocket, Define, LocaleStringManager, Tools, ExtraManager, FloatView, JPBar, JPDesc, JPResult, IconBoxSeat, _cjsExports;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      error = module.error;
      Node = module.Node;
      SpriteAtlas = module.SpriteAtlas;
    }, function (module) {
      LifeSocket = module.default;
    }, null, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      ExtraManager = module.default;
    }, function (module) {
      FloatView = module.default;
    }, function (module) {
      JPBar = module.default;
    }, function (module) {
      JPDesc = module.default;
    }, function (module) {
      JPResult = module.default;
    }, function (module) {
      IconBoxSeat = module.IconBoxSeat;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4d353ZI5HpGvp5Knp84coYf", "JPManager", undefined);

      var barPath = "Astt/%s/jackPot/Prefab/JP_Btn";
      var descPath = "Astt/%s/jackPot/Prefab/JackPotDesc";
      var resultPath = "Astt/%s/jackPot/Prefab/JP_Compliment";
      var JpAudioClipsPath = "Astt/%s/jackPot/Sound/mp3/";
      var JPGameId = exports('JPGameId', [Define.GAME_ID.CSH, Define.GAME_ID.FD, Define.GAME_ID.SH, Define.GAME_ID.SH4, Define.GAME_ID.OLS2, Define.GAME_ID.FS, Define.GAME_ID.CBT, Define.GAME_ID.BFS, Define.GAME_ID.FH, Define.GAME_ID.MC, Define.GAME_ID.GQ, Define.GAME_ID.RS2, Define.GAME_ID.MW2, Define.GAME_ID.TW, Define.GAME_ID.MW3]);
      var BetUnLockCoin = exports('BetUnLockCoin', null);
      var JpAudioClips = exports('JpAudioClips', {
        JP_0: null,
        JP_1: null,
        JP_2: null,
        JP_3: null,
        JP_5: null,
        JP_6: null
      });
      var JPManager = exports('default', /*#__PURE__*/function () {
        function JPManager() {
          this.m_jpBar = null;
          this.m_jpDesc = null;
          this.m_jpResult = null;
          this.m_bottoBar = null;
          this.m_isLandscape = false;
          this.m_lang = null;
          this.isFirst = true;
          this.m_jackPotBtn = null;
          this.m_info = null;
          this.m_isJpResultAward = false;
          this.m_gameID = null;
          this.m_jpEnable = 1;
          this.m_jpAtlas = null;
        }

        JPManager.GetInstance = function GetInstance() {
          if (!JPManager._instance) {
            JPManager._instance = new JPManager();
          }

          return JPManager._instance;
        };

        JPManager.OnExit = function OnExit() {
          delete this._instance;
          this._instance = null;
        };

        var _proto = JPManager.prototype;

        _proto.Init = function Init(bottomBar, unLockBet, infoCB, historyCB, allGamesCB) {
          var _this = this;

          if (this.m_jpEnable != 1 || Define.IS_DEMO) {
            return;
          }

          if (!unLockBet || unLockBet.length <= 0) {
            console.error('JP Init Not BetList Return');
            return;
          }

          this.m_lang = LocaleStringManager.CurrLang;
          this.m_bottoBar = bottomBar;
          var unLockBetList = [];

          for (var i = 0; i < unLockBet.length; i++) {
            if (this.m_bottoBar.Wallet) {
              var lockNum = Tools.strip(unLockBet[i] / this.m_bottoBar.Wallet.Rate);

              for (var j = 0; j < this.m_bottoBar.Wallet.BetList.length; j++) {
                if (lockNum <= this.m_bottoBar.Wallet.BetList[j]) {
                  lockNum = this.m_bottoBar.Wallet.BetList[j];
                  break;
                }
              }

              unLockBetList.push(lockNum);
            }
          }

          BetUnLockCoin = exports('BetUnLockCoin', unLockBetList);
          this.m_jackPotBtn = this.m_bottoBar.JackPotBtn;
          var parent = this.m_jackPotBtn.node.getChildByName('btn');
          var bar_path = Tools.GetFilePath(barPath);
          var desc_path = Tools.GetFilePath(descPath);
          var result_path = Tools.GetFilePath(resultPath);
          Define.CommonBundle.load(bar_path, Prefab, function (err, prefab) {
            if (err) {
              console.error(err);
              return;
            }

            _this.m_jpBar = instantiate(prefab).getComponent(JPBar);

            if (
            /*Tools.IsTadaCasino*/
            _this.m_bottoBar.node.getComponent(ExtraManager).IconBox) {
              _this.m_bottoBar.node.getComponent(ExtraManager).SetIconBoxSeat(_this.m_jpBar.node, "jp");

              parent.active = false;
            } else {
              parent.addChild(_this.m_jpBar.node);
            }

            _this.m_jpBar.SetTxt();

            _this.SetBtnTouch();

            _this.TouchEvent();

            Define.CommonBundle.load(desc_path, Prefab, function (err, prefab) {
              if (err) {
                error(err);
                return;
              }

              _this.m_jpDesc = instantiate(prefab).getComponent(JPDesc);

              _this.m_jpDesc.Init(_this.m_bottoBar, historyCB);

              _this.m_jpDesc.node.active = false;

              _this.m_bottoBar.node.addChild(_this.m_jpDesc.node);

              Tools.SetZIndex(_this.m_jpDesc.node, Define.ZOrder.JACKPOTDESC);

              _this.m_jpDesc.SetTxt();

              _this.m_jpDesc.Rotation(_this.m_isLandscape);

              if (_this.m_jpBar) {
                _this.m_jpBar.Init(_this.m_jpDesc, infoCB, allGamesCB, _this.m_jackPotBtn);

                _this.JackPotShow();
              }

              _this.TouchEvent();
            });
          });
          Define.CommonBundle.load(result_path, Prefab, function (err, prefab) {
            if (err) {
              error(err);
              return;
            }

            _this.m_jpResult = instantiate(prefab).getComponent(JPResult);

            _this.m_bottoBar.node.addChild(_this.m_jpResult.node);

            Tools.SetZIndex(_this.m_jpResult.node, Define.ZOrder.JACKPOTRESULT);

            _this.m_jpResult.SetTxt();

            _this.m_jpResult.node.active = false;

            _this.m_jpResult.Init(_this.m_bottoBar);

            _this.m_jpResult.Rotation(_this.m_isLandscape);

            _this.TouchEvent();
          });
          this.LoadIcons();
          this.LoadJackPotAtlasFile();
          this.LoadJackPotSoundFile();

          LifeSocket.GetInstance().JPMarqueeCb = function (info) {
            // 額外呼一次更新banner跑分數值
            if (_this.m_jpBar) {
              _this.m_jpBar.SetMarqueeInfo(info);

              if (info.aID.toString() != Define.AID && !_this.m_isJpResultAward) {
                _this.m_jpBar.SyncBannerInfo();
              } else {
                _this.m_isJpResultAward = true;
              }
            }
          };
        };

        _proto.ShowJpResult = function ShowJpResult(info, gameCB) {
          var _this2 = this;

          if (info && info.type > _cjsExports.serverProto.JpType.None && info.type <= _cjsExports.serverProto.JpType.Grand) {
            var jpResultCB = function jpResultCB() {
              if (_this2.m_jpResult) {
                var closeBannerCB = function closeBannerCB() {
                  if (_this2.m_jpBar) {
                    _this2.m_jpBar.ResumeRolling();

                    _this2.m_jpBar.StopJPAward();

                    _this2.m_jpBar.CloseBanner();

                    _this2.m_jpBar.SyncBannerInfo();

                    _this2.m_isJpResultAward = false;
                  }
                };

                _this2.m_jpResult.SetInfo(info);

                _this2.m_jpResult.OpenResult(gameCB, closeBannerCB);
              }
            };

            if (this.m_jpBar) {
              this.m_isJpResultAward = true;
              this.m_jpBar.ShowJPAward(info, jpResultCB);
            }
          } else {
            if (gameCB) {
              gameCB();
            }
          }
        };

        _proto.SetMarqueeUnLock = function SetMarqueeUnLock() {
          if (this.m_jpBar) {
            this.m_jpBar.SetMarqueeUnLock();
          }
        };

        _proto.ResetPosition = function ResetPosition() {
          if (this.m_jackPotBtn) {
            this.m_jackPotBtn.node.getComponent(FloatView).ResetPosition();
          }
        };

        _proto.GetDisplayValue = function GetDisplayValue(value) {
          if (this.m_bottoBar) {
            return this.m_bottoBar.GetDisplayValue(value);
          }

          return value;
        };

        _proto.GetRate = function GetRate() {
          if (this.m_bottoBar && this.m_bottoBar.Wallet) {
            return this.m_bottoBar.Wallet.Rate;
          }

          return 1;
        };

        _proto.GetNowBetValue = function GetNowBetValue() {
          if (this.m_bottoBar && this.m_bottoBar.Wallet) {
            return this.m_bottoBar.GetNowBetValue();
          }

          return null;
        };

        _proto.GetBetByIndex = function GetBetByIndex() {
          if (this.m_bottoBar && this.m_bottoBar.Wallet) {
            return this.m_bottoBar.GetBetByIndex(0);
          }

          return null;
        };

        _proto.GetWinnerString = function GetWinnerString(winner, nickName) {
          if (nickName) {
            return nickName;
          } // 特殊規則，無論名稱多長只顯示最後三個並且總長都是七


          var player = '****';
          var str = winner.split('');

          for (var i = str.length - 3; i < str.length; i++) {
            player += str[i];
          }

          return player;
        };

        _proto.SetScaleAction = function SetScaleAction(node, isPress) {
          if (this.m_bottoBar) {
            this.m_bottoBar.SetScaleAction(node, isPress);
          }
        };

        _proto.Rotation = function Rotation(isLandscape) {
          this.m_isLandscape = isLandscape;

          if (this.m_jpDesc) {
            this.m_jpDesc.Rotation(isLandscape);
          }

          if (this.m_jpResult) {
            this.m_jpResult.Rotation(isLandscape);
          }
        };

        _proto.JackPotShow = function JackPotShow() {
          var loadSuccess = false;

          if (this.m_jpAtlas && this.m_jackPotBtn && this.m_bottoBar && this.m_bottoBar.Wallet && this.m_jpBar && this.m_jpDesc) {
            loadSuccess = true;
          }

          if (this.m_jpEnable == 1 && this.m_info && this.m_info.length > 0 && loadSuccess) {
            this.m_jackPotBtn.node.active = true;

            if (
            /*Tools.IsTadaCasino*/
            this.m_bottoBar.node.getComponent(ExtraManager).IconBox && this.m_bottoBar && this.m_jackPotBtn) {
              this.m_bottoBar.node.getComponent(ExtraManager).IconBox.OpenBtnSeat(IconBoxSeat.JackPot, true);
            }

            if (this.isFirst) {
              if (this.m_bottoBar) this.m_bottoBar.node.getComponent(ExtraManager).SetAddIcon('jackpot', this.m_bottoBar.JackPotBtn.node);
              this.m_jackPotBtn.node.getComponent(FloatView).ResetPosition();
              this.isFirst = false;
            }

            this.m_jpDesc.ActiveJP(Boolean(this.m_jpBar.HasAllGames()));
          } else {
            if (
            /*Tools.IsTadaCasino*/
            this.m_bottoBar.node.getComponent(ExtraManager).IconBox && this.m_bottoBar && this.m_jpBar) {
              this.m_bottoBar.node.getComponent(ExtraManager).SetIconBoxSeat(this.m_jpBar.node, "jp", false);
            }

            this.m_jackPotBtn.node.active = false;
            this.isFirst = true;
            if (this.m_bottoBar) this.m_bottoBar.node.getComponent(ExtraManager).RemoveAddIcon('jackpot');
            if (this.m_jpDesc) this.m_jpDesc.node.active = false;
          }
        };

        _proto.SetBtnTouch = function SetBtnTouch() {
          var _this3 = this;

          var target = null;

          if (
          /*Tools.IsTadaCasino*/
          this.m_bottoBar.node.getComponent(ExtraManager).IconBox && this.m_jpBar) {
            target = this.m_jpBar.node.parent;
          } else {
            target = this.m_jackPotBtn.node;
          } // JP的按鈕Icon(特殊操作 利用子節點控制父節點位置 原因:問號按鈕的事件會被m_jackPotBtn聽見 因此要改成m_jpBar.Btn作為監聽依據)


          target.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (target.name != event.target.name) {
              return;
            }

            if (_this3.m_bottoBar.CurrentTouchName == null) {
              _this3.m_bottoBar.CurrentTouchName = event.target.name;

              if (
              /*!Tools.IsTadaCasino*/
              !_this3.m_bottoBar.node.getComponent(ExtraManager).IconBox) {
                _this3.m_jackPotBtn.node.getComponent(FloatView).OnTouchStart(event.getLocation());
              }
            } else {
              if (event.target && event.target.active == false) {
                _this3.m_bottoBar.CurrentTouchName = event.target.name;
              }
            }
          });
          target.on(Node.EventType.TOUCH_MOVE, function (event) {
            if (target.name != event.target.name) {
              return;
            }

            if (_this3.m_bottoBar.CurrentTouchName == event.target.name) {
              _this3.m_bottoBar.CurrentTouchName = event.target.name;

              if (
              /*!Tools.IsTadaCasino*/
              !_this3.m_bottoBar.node.getComponent(ExtraManager).IconBox) {
                _this3.m_jackPotBtn.node.getComponent(FloatView).OnTouchMove(event.getLocation());
              }
            } else {
              if (event.target && event.target.active == false) {
                _this3.m_bottoBar.CurrentTouchName = event.target.name;
              }
            }
          });
          target.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (target.name != event.target.name) {
              return;
            }

            if (_this3.m_bottoBar.CurrentTouchName == event.target.name) {
              _this3.m_bottoBar.CurrentTouchName = null;
            }
          });
          target.on(Node.EventType.TOUCH_END, function (event) {
            if (target.name != event.target.name) {
              return;
            }

            if (_this3.m_bottoBar.CurrentTouchName != event.target.name) {
              return;
            }

            _this3.m_bottoBar.CurrentTouchName = null;

            var cb = function cb() {
              if (_this3.m_jpBar) {
                _this3.m_jpBar.TouchEnd();
              }
            };

            if (
            /*!Tools.IsTadaCasino*/
            !_this3.m_bottoBar.node.getComponent(ExtraManager).IconBox) {
              _this3.m_jackPotBtn.node.getComponent(FloatView).OnTouchEnd(event.getLocation(), cb);
            } else {
              cb();
            }
          });
        };

        _proto.TouchEvent = function TouchEvent() {
          var _this4 = this;

          if (!this.m_bottoBar || !this.m_jackPotBtn || !this.m_jpDesc || !this.m_jpBar) {
            //|| !this.m_jpResult) {
            return;
          } // 說明頁本身


          this.m_jpDesc.Mask.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this4.m_bottoBar.CurrentTouchName == null) {
              _this4.m_bottoBar.CurrentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this4.m_bottoBar.CurrentTouchName = event.target.name;
              }
            }
          });
          this.m_jpDesc.Mask.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this4.m_bottoBar.CurrentTouchName == event.target.name) {
              _this4.m_bottoBar.CurrentTouchName = null;
            }
          });
          this.m_jpDesc.Mask.on(Node.EventType.TOUCH_END, function (event) {
            if (_this4.m_bottoBar.CurrentTouchName != event.target.name) {
              return;
            }

            _this4.m_bottoBar.CurrentTouchName = null;

            _this4.m_jpDesc.CloseDesc();
          }); // 說明頁關閉按鈕

          this.m_jpDesc.Close.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this4.m_bottoBar.CurrentTouchName == null) {
              _this4.m_bottoBar.CurrentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this4.m_bottoBar.CurrentTouchName = event.target.name;
              }
            }
          });
          this.m_jpDesc.Close.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this4.m_bottoBar.CurrentTouchName == event.target.name) {
              _this4.m_bottoBar.CurrentTouchName = null;
            }
          });
          this.m_jpDesc.Close.on(Node.EventType.TOUCH_END, function (event) {
            if (_this4.m_bottoBar.CurrentTouchName != event.target.name) {
              return;
            }

            _this4.m_bottoBar.CurrentTouchName = null;

            _this4.m_jpDesc.CloseDesc();
          }); // 問號按鈕

          this.m_jpBar.Quest.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this4.m_bottoBar.CurrentTouchName == null) {
              _this4.m_bottoBar.CurrentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this4.m_bottoBar.CurrentTouchName = event.target.name;
              }
            }
          });
          this.m_jpBar.Quest.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this4.m_bottoBar.CurrentTouchName == event.target.name) {
              _this4.m_bottoBar.CurrentTouchName = null;
            }
          });
          this.m_jpBar.Quest.on(Node.EventType.TOUCH_END, function (event) {
            if (_this4.m_bottoBar.CurrentTouchName != event.target.name) {
              return;
            }

            _this4.m_bottoBar.CurrentTouchName = null;

            _this4.m_jpDesc.OpenDesc();
          }); // 結算畫面

          if (this.m_jpResult) {
            this.m_jpResult.node.on(Node.EventType.TOUCH_START, function (event) {
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this4.m_bottoBar.CurrentTouchName == null) {
                _this4.m_bottoBar.CurrentTouchName = event.target.name;
              } else {
                if (event.target && event.target.active == false) {
                  _this4.m_bottoBar.CurrentTouchName = event.target.name;
                }
              }
            });
            this.m_jpResult.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              if (_this4.m_bottoBar.CurrentTouchName == event.target.name) {
                _this4.m_bottoBar.CurrentTouchName = null;
              }
            });
            this.m_jpResult.node.on(Node.EventType.TOUCH_END, function (event) {
              if (_this4.m_bottoBar.CurrentTouchName != event.target.name) {
                return;
              }

              _this4.m_bottoBar.CurrentTouchName = null;

              _this4.m_jpResult.StopResult();
            });
          }
        };

        _proto.LoadIcons = function LoadIcons() {
          var _this5 = this;

          var _loop = function _loop(i) {
            if (!Tools.Icons[JPGameId[i]]) {
              var checkCB = function checkCB() {
                for (var j = 0; j < JPGameId.length; j++) {
                  if (!Tools.Icons[JPGameId[i]]) {
                    Tools.LoadIcon(_this5.m_lang, JPGameId[j], checkCB);
                  }
                }
              };

              Tools.LoadIcon(_this5.m_lang, JPGameId[i], checkCB);
            }
          };

          for (var i = 0; i < JPGameId.length; i++) {
            _loop(i);
          }
        }
        /**
        * 載入共用JP合圖
        */
        ;

        _proto.LoadJackPotAtlasFile = function LoadJackPotAtlasFile() {
          var _this6 = this;

          var filePath = "/framework/jackPot/jackpot";

          if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
            filePath = "/framework_americas/jackPot/jackpot";
          }

          var url = "AsttText/" + LocaleStringManager.CurrLang + filePath;
          Define.OtherBundle.load(url, SpriteAtlas, function (err, assets) {
            if (err) {
              error(err.message || err);
              return;
            }

            _this6.m_jpAtlas = assets;

            if (_this6.m_jpBar) {
              _this6.m_jpBar.SetTxt();
            }

            if (_this6.m_jpDesc) {
              _this6.m_jpDesc.SetTxt();
            }

            _this6.JackPotShow();
          });
        };

        _proto.LoadJackPotSoundFile = function LoadJackPotSoundFile() {
          var _loop2 = function _loop2(key) {
            if (JpAudioClips.hasOwnProperty(key)) {
              Define.CommonBundle.load(Tools.GetFilePath(JpAudioClipsPath) + key, function (err, clip) {
                if (err) {
                  error('LoadJackPotSoundFile Error');
                  return;
                }

                JpAudioClips[key] = clip;
              });
            }
          };

          for (var key in JpAudioClips) {
            _loop2(key);
          }
        };

        _createClass(JPManager, [{
          key: "BottomBar",
          get: function get() {
            return this.m_bottoBar;
          }
        }, {
          key: "JackPotBtn",
          get: function get() {
            if (this.m_jackPotBtn) {
              return this.m_jackPotBtn;
            } else {
              return null;
            }
          }
        }, {
          key: "JackPotInfo",
          get: function get() {
            return this.m_info;
          },
          set: function set(info) {
            this.m_info = info;
          }
        }, {
          key: "IsJpResultAward",
          get: function get() {
            return this.m_isJpResultAward;
          },
          set: function set(isAward) {
            this.m_isJpResultAward = isAward;
          }
        }, {
          key: "GameID",
          get: function get() {
            return this.m_gameID;
          }
        }, {
          key: "JPEnable",
          get: function get() {
            return this.m_jpEnable;
          }
        }, {
          key: "JPAtlas",
          get: function get() {
            return this.m_jpAtlas;
          }
        }]);

        return JPManager;
      }());
      JPManager._instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JPMarquee.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './pgame.mjs_cjs=&original=.js', './Define.ts', './SoundManager.ts', './Tools.ts', './GameIconComponent.ts', './JPManager.ts', './pgame.js'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Label, Animation, tween, Component, Define, SoundManager, Tools, GameIconComponent, JPManager, JpAudioClips, _cjsExports;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Animation = module.Animation;
      tween = module.tween;
      Component = module.Component;
    }, null, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      GameIconComponent = module.default;
    }, function (module) {
      JPManager = module.default;
      JpAudioClips = module.JpAudioClips;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "bc8c6FB0N5C6oo2MXnyM9/h", "JPMarquee", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TxtName;

      (function (TxtName) {
        TxtName["title"] = "Title_Txt";
        TxtName["grand"] = "Txt_Grand";
        TxtName["major"] = "Txt_Major";
        TxtName["mini"] = "Txt_Mini";
      })(TxtName || (TxtName = {}));

      var AnimName = {
        MarqueeShow: 'Clip_JP_Marquee_Hit',
        MarqueeLoop: 'Clip_JP_Marquee_Loop',
        MarqueeClose: 'Clip_JP_Marquee_End'
      };
      var AnimTime = {
        MarqueeShow: 0.25,
        MarqueeLoop: 0.5,
        MarqueeClose: 0.25
      };
      var NextTime = 1.0;
      var JPMarquee = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "跑馬燈標題圖字"
      }), _dec2 = property({
        type: Sprite,
        tooltip: "跑馬燈獎項圖字"
      }), _dec3 = property({
        type: GameIconComponent,
        tooltip: "跑馬燈遊戲Icon"
      }), _dec4 = property({
        type: Label,
        tooltip: "跑馬燈中獎者名稱"
      }), _dec5 = property({
        type: Label,
        tooltip: "跑馬燈中獎金額"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JPMarquee, _Component);

        function JPMarquee() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_titleTxt", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_prizeTxt", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_icon", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_winner", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_coin", _descriptor5, _assertThisInitialized(_this));

          _this.m_type = null;
          _this.m_gameID = null;
          _this.m_player = null;
          _this.m_nickName = null;
          _this.m_value = null;
          _this.dotType = Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT;
          _this.m_infoList = [];
          _this.m_isNowOpen = false;
          _this.m_unLock = false;
          return _this;
        }

        var _proto = JPMarquee.prototype;

        _proto.SetTxt = function SetTxt() {
          if (JPManager.GetInstance().JPAtlas) {
            var altas = JPManager.GetInstance().JPAtlas;
            this.m_titleTxt.spriteFrame = altas.getSpriteFrame(TxtName.title);
            this.m_prizeTxt.spriteFrame = altas.getSpriteFrame(TxtName.grand);
          }
        };

        _proto.SetInfo = function SetInfo(info) {
          var mInfo = new _cjsExports.serverProto.JpMarqueeInfo();
          mInfo.aID = info.aID;
          mInfo.gameID = info.gameID;
          mInfo.type = info.type;
          mInfo.winner = info.winner;
          mInfo.win = info.win;
          this.m_infoList.push(mInfo);
        };

        _proto.SetMarquee = function SetMarquee(type, gameID, winner, nickName, value) {
          this.m_type = type;
          this.m_gameID = gameID;
          this.m_player = winner;
          this.m_nickName = nickName;
          this.m_value = value;

          if (JPManager.GetInstance().JPAtlas) {
            var altas = JPManager.GetInstance().JPAtlas;

            if (this.m_type == _cjsExports.serverProto.JpType.Grand) {
              this.m_prizeTxt.spriteFrame = altas.getSpriteFrame(TxtName.grand);
            }

            if (this.m_type == _cjsExports.serverProto.JpType.Major) {
              this.m_prizeTxt.spriteFrame = altas.getSpriteFrame(TxtName.major);
            }

            if (this.m_type == _cjsExports.serverProto.JpType.Mini) {
              this.m_prizeTxt.spriteFrame = altas.getSpriteFrame(TxtName.mini);
            }
          }

          this.m_icon.SetGameIcon(Tools.Icons[this.m_gameID]);
          Tools.SetFont(this.m_winner);
          this.m_winner.string = JPManager.GetInstance().GetWinnerString(this.m_player, this.m_nickName);
          var newValue = Tools.strip(Tools.divide(this.m_value, JPManager.GetInstance().GetRate()));
          Tools.SetLabelString(this.m_coin.node, JPManager.GetInstance().GetDisplayValue(newValue), this.dotType);
        };

        _proto.AddMarquee = function AddMarquee() {
          if (!this.m_isNowOpen) {
            var open = false;

            for (var i = 0; i < this.m_infoList.length; i++) {
              if (this.m_infoList[i].aID.toString() != Define.AID) {
                var info = this.m_infoList.splice(i, 1)[0];
                this.SetMarquee(info.type, info.gameID, info.winner, info.winnerNickname, info.win);
                open = true;
                break;
              } else {
                if (this.m_unLock) {
                  this.m_unLock = false;
                  var _info = this.m_infoList.splice(i, 1)[0];
                  this.SetMarquee(_info.type, _info.gameID, _info.winner, _info.winnerNickname, _info.win);
                  this.m_infoList.splice(i, 1);
                  open = true;
                  break;
                }
              }
            }

            if (open) {
              this.m_isNowOpen = true;
              this.OpenMarquee();
            }
          }
        };

        _proto.OpenMarquee = function OpenMarquee() {
          var _this2 = this;

          SoundManager.getInstance().Play(JpAudioClips.JP_6);
          this.node.active = true;
          this.node.getComponent(Animation).play(AnimName.MarqueeShow);
          tween(this.node).delay(AnimTime.MarqueeShow).call(function () {
            _this2.node.getComponent(Animation).play(AnimName.MarqueeLoop);
          }).delay(AnimTime.MarqueeLoop * 16).call(function () {
            _this2.CloseMarquee();
          }).start();
        };

        _proto.CloseMarquee = function CloseMarquee() {
          var _this3 = this;

          this.node.getComponent(Animation).play(AnimName.MarqueeClose);
          tween(this.node).delay(AnimTime.MarqueeClose).delay(NextTime).call(function () {
            _this3.node.active = false;
            _this3.m_isNowOpen = false;
          }).start();
        };

        _createClass(JPMarquee, [{
          key: "UnLock",
          set: function set(unlock) {
            this.m_unLock = unlock;
          }
        }]);

        return JPMarquee;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_titleTxt", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_prizeTxt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_icon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_winner", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_coin", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JPOtherGamesView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LifeSocket.ts', './Define.ts', './LocaleStringManager.ts', './Tools.ts', './GameIconComponent.ts', './MsgBox.ts', './JPInfoView.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, Label, Animation, Component, instantiate, LifeSocket, Define, LocaleStringManager, Tools, GameIconComponent, MsgBox, JPInfoView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Label = module.Label;
      Animation = module.Animation;
      Component = module.Component;
      instantiate = module.instantiate;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      GameIconComponent = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      JPInfoView = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "b0c7fwtL0dOQaJ6305lZFY6", "JPOtherGamesView", undefined);
      /**
       * 彩金其他遊戲資訊頁
       */


      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JPOtherGamesView = exports('default', (_dec = property({
        type: JPInfoView,
        tooltip: "彩金資訊"
      }), _dec2 = property({
        type: Prefab,
        tooltip: "遊戲Icon的prefab"
      }), _dec3 = property({
        type: Node,
        tooltip: "放置遊戲icon的地方"
      }), _dec4 = property({
        type: Label,
        tooltip: "點擊提示"
      }), _dec5 = property({
        type: Boolean,
        tooltip: "是否為贏更多頁面"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JPOtherGamesView, _Component);

        function JPOtherGamesView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_jpInfoView", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_jpGameIconPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_clickHintLabel", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_isWinMore", _descriptor5, _assertThisInitialized(_this));

          _this.m_gameIcons = [];
          return _this;
        }

        var _proto = JPOtherGamesView.prototype;

        _proto.SetTxt = function SetTxt(brand) {
          Tools.SetFont(this.m_clickHintLabel);
          this.m_clickHintLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RECOMMEND_HINT);
          this.m_jpInfoView.SetTxt(brand);
        };

        _proto.ShowUnlockCoin = function ShowUnlockCoin() {
          this.m_jpInfoView.ShowUnlockCoin();
        };

        _proto.SetCoin = function SetCoin(type, value) {
          this.m_jpInfoView.SetCoin(type, value);
        };

        _proto.SetAllGamesInfo = function SetAllGamesInfo(info) {
          var _this2 = this;

          for (var i = 0; i < info.info.length; i++) {
            this.m_jpInfoView.SetCoin(info.info[i].type, info.info[i].value);
          }

          var _loop = function _loop(_i) {
            var gameIcon = _this2.m_gameIcons[_i];

            if (!gameIcon) {
              var node = instantiate(_this2.m_jpGameIconPrefab);

              _this2.m_contentNode.addChild(node);

              gameIcon = node.getComponent(GameIconComponent);
              _this2.m_gameIcons[_i] = gameIcon;
            }

            gameIcon.node.active = true;

            var onClick = function onClick() {
              if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.AllChangeGameImport)) {
                return;
              }

              if (info.game[_i].toString() === Define.NOW_GAME_ID) {
                MsgBox.getInstance().ShowMessageBox(Define.StringKey.FAVOR_INVALID_HINT);
              } else {
                var gameName = LocaleStringManager.GetInstance().GetGameName(info.game[_i]);
                MsgBox.getInstance().ShowFullMessageBox(Define.StringKey.CHANGE_GAME_HINT, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, [gameName], function () {
                  LifeSocket.GetInstance().ReqUrl(info.game[_i], Define.BTN_CLICK_EVENT.JP_CHANGE_GAME);
                }, function () {}, function () {});
              }
            }; //先設定，待有圖在更換


            gameIcon.SetGameIcon(Tools.Icons[info.game[_i]], function () {
              onClick();
            });

            if (!Tools.Icons[info.game[_i]]) {
              Tools.LoadIcon(LocaleStringManager.CurrLang, info.game[_i], function () {
                gameIcon.SetGameIcon(Tools.Icons[info.game[_i]], function () {
                  onClick();
                });
              });
            }
          };

          for (var _i = 0; _i < info.game.length; _i++) {
            _loop(_i);
          }

          if (this.m_gameIcons.length > info.game.length) {
            for (var _i2 = info.game.length; _i2 < this.m_gameIcons.length; _i2++) {
              this.m_gameIcons[_i2].node.active = false;
            }
          }
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          // let isAmericas = Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str;
          if (isLandscape) {
            // this.node.getComponent( cc.Animation ).play( isAmericas ?
            //     "Clip_Jackpot_OtherGames_Landscape" :
            //     this.m_isWinMore ? "AllGames_WinMore_L" : "AllGames_L" );
            this.node.getComponent(Animation).play("Clip_Jackpot_OtherGames_Landscape");
          } else {
            // this.node.getComponent( cc.Animation ).play( isAmericas ?
            //     "Clip_Jackpot_OtherGames_Portrait" :
            //     this.m_isWinMore ? "AllGames_WinMore_S" : "AllGames_S" );
            this.node.getComponent(Animation).play("Clip_Jackpot_OtherGames_Portrait");
          }
        };

        return JPOtherGamesView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_jpInfoView", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_jpGameIconPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_contentNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_clickHintLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_isWinMore", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JPResult.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './pgame.mjs_cjs=&original=.js', './Define.ts', './SoundManager.ts', './Tools.ts', './GameIconComponent.ts', './JPManager.ts', './JPRollingValue.ts', './pgame.js'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, error, Animation, tween, v3, Component, Define, SoundManager, Tools, GameIconComponent, JPManager, JpAudioClips, JPGameId, JPRollingValue, _cjsExports;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      error = module.error;
      Animation = module.Animation;
      tween = module.tween;
      v3 = module.v3;
      Component = module.Component;
    }, null, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      GameIconComponent = module.default;
    }, function (module) {
      JPManager = module.default;
      JpAudioClips = module.JpAudioClips;
      JPGameId = module.JPGameId;
    }, function (module) {
      JPRollingValue = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "bb102E+VFpM3KkSNiGQggjk", "JPResult", undefined);

      var TxtName;

      (function (TxtName) {
        TxtName["title"] = "Title_Txt";
        TxtName["congrats"] = "Txt_Congrats";
        TxtName["grand"] = "Txt_Grand";
        TxtName["major"] = "Txt_Major";
        TxtName["mini"] = "Txt_Mini";
      })(TxtName || (TxtName = {}));

      var AnimName = {
        Start: 'Clip_JP_Compliment_Start',
        Loop: 'Clip_JP_Compliment_Loop',
        Stop: 'Clip_JP_Compliment_Stop',
        End: 'Clip_JP_Compliment_End'
      };
      var AnimTime = {
        Start: 0.67,
        Loop: 3.0,
        Stop: 3.0,
        End: 0.1
      };
      var JPTime = {
        Grand: 16.5,
        Major: 12.5,
        Mini: 8.5
      };
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JPResult = exports('default', (_dec = property({
        type: GameIconComponent,
        tooltip: "自己中的遊戲Icon"
      }), _dec2 = property({
        type: GameIconComponent,
        tooltip: "他人的遊戲Icon"
      }), _dec3 = property({
        type: Sprite,
        tooltip: "標題"
      }), _dec4 = property({
        type: Sprite,
        tooltip: "中獎類型"
      }), _dec5 = property({
        type: Sprite,
        tooltip: "恭喜"
      }), _dec6 = property({
        type: JPRollingValue,
        tooltip: "金額"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JPResult, _Component);

        function JPResult() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_mineIcon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_otherIcon", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_title", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_awardType", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_congrats", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_coin", _descriptor6, _assertThisInitialized(_this));

          _this.m_bottoBar = null;
          _this.m_resultTween = null;
          _this.m_info = null;
          _this.m_gameCB = null;
          _this.m_closeBannerCB = null;
          _this.m_soundID = [];
          _this.touchLock = false;
          return _this;
        }

        var _proto = JPResult.prototype;

        _proto.SetTxt = function SetTxt() {
          if (JPManager.GetInstance().JPAtlas) {
            var altas = JPManager.GetInstance().JPAtlas;
            this.m_title.spriteFrame = altas.getSpriteFrame(TxtName.title);
            this.m_congrats.spriteFrame = altas.getSpriteFrame(TxtName.congrats);
          }
        };

        _proto.Init = function Init(bottoBar) {
          this.m_bottoBar = bottoBar;
        };

        _proto.SetInfo = function SetInfo(info) {
          if (info && info.type > _cjsExports.serverProto.JpType.None) {
            this.m_info = info;
            var gameID = Number(Define.NOW_GAME_ID);
            var newVec = this.RandomID(gameID);
            this.m_mineIcon.SetGameIcon(Tools.Icons[gameID]); // this.m_mineIcon.color = new cc.Color( 255, 255, 255 );

            for (var i = 0; i < this.m_otherIcon.length; i++) {
              this.m_otherIcon[i].SetGameIcon(Tools.Icons[newVec[i]]); // this.m_otherIcon[ i ].color = new cc.Color( 255, 255, 255 );
            }

            var RunningTime = AnimTime.Start;

            if (JPManager.GetInstance().JPAtlas) {
              var altas = JPManager.GetInstance().JPAtlas;
              this.m_title.spriteFrame = altas.getSpriteFrame(TxtName.title);
              this.m_congrats.spriteFrame = altas.getSpriteFrame(TxtName.congrats);

              if (info.type == _cjsExports.serverProto.JpType.Grand) {
                this.m_awardType.spriteFrame = altas.getSpriteFrame(TxtName.grand);
                RunningTime += JPTime.Grand;
              }

              if (info.type == _cjsExports.serverProto.JpType.Major) {
                this.m_awardType.spriteFrame = altas.getSpriteFrame(TxtName.major);
                RunningTime += JPTime.Major;
              }

              if (info.type == _cjsExports.serverProto.JpType.Mini) {
                this.m_awardType.spriteFrame = altas.getSpriteFrame(TxtName.mini);
                RunningTime += JPTime.Mini;
              }
            }

            this.SetCoin(0, info.win, RunningTime);
          } else {
            this.m_info = null;
          }
        };

        _proto.SetCoin = function SetCoin(nowCoin, finalCoin, durTime, isStop) {
          if (isStop === void 0) {
            isStop = false;
          }

          error("SetCoin", nowCoin, finalCoin);

          if (this.m_coin) {
            this.m_coin.IsRate = false;
            this.m_coin.NowValue = nowCoin;
            this.m_coin.FinalValue = finalCoin;
            this.m_coin.DurTime = durTime;

            if (isStop) {
              this.m_coin.SetCoin(finalCoin, false);
            }
          }
        };

        _proto.OpenResult = function OpenResult(gameCB, closeBannerCB) {
          var _this2 = this;

          if (this.m_info && this.m_info.type != _cjsExports.serverProto.JpType.None) {
            SoundManager.getInstance().SetVolumeForAll(0);
            var soundID = -1;
            var LoopTime = 0;

            if (this.m_info.type == _cjsExports.serverProto.JpType.Grand) {
              soundID = SoundManager.getInstance().Play(JpAudioClips.JP_3, true);
              LoopTime = JPTime.Grand;
            }

            if (this.m_info.type == _cjsExports.serverProto.JpType.Major) {
              soundID = SoundManager.getInstance().Play(JpAudioClips.JP_2, true);
              LoopTime = JPTime.Major;
            }

            if (this.m_info.type == _cjsExports.serverProto.JpType.Mini) {
              soundID = SoundManager.getInstance().Play(JpAudioClips.JP_1, true);
              LoopTime = JPTime.Mini;
            }

            this.m_soundID.push(soundID);
            this.m_gameCB = gameCB;
            this.m_closeBannerCB = closeBannerCB;
            this.node.getComponent(Animation).play(AnimName.Start);
            this.node.active = true;
            this.m_resultTween = tween(this.node).delay(AnimTime.Start).call(function () {
              _this2.touchLock = true;

              _this2.node.getComponent(Animation).play(AnimName.Loop);
            }).delay(LoopTime).call(function () {
              _this2.touchLock = false;

              if (_this2.m_soundID.length > 0) {
                for (var i = 0; i < _this2.m_soundID.length; i++) {
                  SoundManager.getInstance().Stop(_this2.m_soundID[i]);
                }
              }

              SoundManager.getInstance().Play(JpAudioClips.JP_5);

              _this2.node.getComponent(Animation).play(AnimName.Stop);
            }).delay(AnimTime.Stop).call(function () {
              _this2.node.getComponent(Animation).play(AnimName.End);
            }).delay(AnimTime.End).call(function () {
              if (_this2.m_resultTween) {
                _this2.m_resultTween.stop();
              }

              _this2.m_resultTween = null;

              if (_this2.m_bottoBar && _this2.m_bottoBar.Wallet && _this2.m_info) {
                _this2.m_bottoBar.SetChips(_this2.m_bottoBar.GetChips() + _this2.m_info.win);

                _this2.m_bottoBar.SetNetWin(_this2.m_info.win);

                _this2.m_info = null;
              }

              if (_this2.m_gameCB) {
                _this2.m_gameCB();
              }

              _this2.m_gameCB = null;

              if (_this2.m_closeBannerCB) {
                _this2.m_closeBannerCB();
              }

              _this2.m_closeBannerCB = null;
              JPManager.GetInstance().SetMarqueeUnLock();
              _this2.node.active = false;
              SoundManager.getInstance().SetVolumeForAll(1);
            }).start();
          }
        };

        _proto.StopResult = function StopResult() {
          var _this3 = this;

          if (this.m_info && this.m_info.type != _cjsExports.serverProto.JpType.None) {
            if (this.touchLock) {
              this.touchLock = false;

              if (this.m_resultTween) {
                this.m_resultTween.stop();
              }

              this.m_resultTween = null;
              this.SetCoin(this.m_info.win, this.m_info.win, 0, true);

              if (this.m_soundID.length > 0) {
                for (var i = 0; i < this.m_soundID.length; i++) {
                  SoundManager.getInstance().Stop(this.m_soundID[i]);
                }
              }

              SoundManager.getInstance().Play(JpAudioClips.JP_5);
              this.node.getComponent(Animation).play(AnimName.Stop);
              tween(this.node).delay(AnimTime.Stop).call(function () {
                _this3.node.getComponent(Animation).play(AnimName.End);
              }).delay(AnimTime.End).call(function () {
                if (_this3.m_resultTween) {
                  _this3.m_resultTween.stop();
                }

                _this3.m_resultTween = null;

                if (_this3.m_bottoBar && _this3.m_bottoBar.Wallet && _this3.m_info) {
                  _this3.m_bottoBar.SetChips(_this3.m_bottoBar.GetChips() + _this3.m_info.win);

                  _this3.m_bottoBar.SetNetWin(_this3.m_info.win);

                  _this3.m_info = null;
                }

                if (_this3.m_gameCB) {
                  _this3.m_gameCB();
                }

                _this3.m_gameCB = null;

                if (_this3.m_closeBannerCB) {
                  _this3.m_closeBannerCB();
                }

                _this3.m_closeBannerCB = null;
                JPManager.GetInstance().SetMarqueeUnLock();
                _this3.node.active = false;
                SoundManager.getInstance().SetVolumeForAll(1);
              }).start();
            }
          }
        };

        _proto.Rotation = function Rotation(isLandscape) {
          if (isLandscape) {
            this.node.position = v3(0, 350, 0);
          } else {
            this.node.position = v3(0, 630, 0);
          }
        };

        _proto.RandomID = function RandomID(gameID) {
          var newVec = [];

          for (var i = JPGameId.length - 1; i >= 0; i--) {
            if (gameID != JPGameId[i]) {
              newVec.push(JPGameId[i]);
            }
          }

          for (var _i = newVec.length - 1; _i >= 0; _i--) {
            var index = Math.floor(Math.random() * (_i + 1));
            var temp = newVec[index];
            newVec[index] = newVec[_i];
            newVec[_i] = temp;
          }

          return newVec;
        };

        return JPResult;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_mineIcon", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_otherIcon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_title", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_awardType", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_congrats", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_coin", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JPRollingValue.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Tools.ts', './JPManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Component, Tools, JPManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      JPManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "3ca60aHDs1Cfrv8tKMmz7JM", "JPRollingValue", undefined);

      var JPRate = 0.995;
      var RollTime = 61;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JPRollingValue = exports('default', (_dec = property({
        tooltip: "初始值與最終值是否改變"
      }), _dec2 = property({
        tooltip: "是否自行跑分"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JPRollingValue, _Component);

        function JPRollingValue() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_isChange", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_isRolling", _descriptor2, _assertThisInitialized(_this));

          _this.m_dotType = Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT;
          _this.m_isRate = true;
          _this.m_nowValue = 0;
          _this.m_finalValue = 0;
          _this.m_durTime = 0;
          return _this;
        }

        var _proto = JPRollingValue.prototype;
        /**
         * main function
         */

        _proto.update = function update(dt) {
          if (this.m_isRolling) {
            this.Rolling(dt);
          }
        };

        _proto.Rolling = function Rolling(dt) {
          if (JPManager.GetInstance()) {
            dt = Tools.strip(dt);
            this.m_finalValue = Tools.strip(this.m_finalValue);
            this.m_nowValue = Tools.strip(this.m_nowValue);
            this.m_durTime = Tools.strip(this.m_durTime);

            if (this.m_nowValue < this.m_finalValue && this.m_durTime > 0) {
              var tickCount = Tools.divide(this.m_durTime, dt);
              var intaval = Tools.divide(Tools.strip(this.m_finalValue - this.m_nowValue), tickCount);
              this.m_nowValue = Tools.strip(this.m_nowValue + intaval);

              if (this.m_nowValue > this.m_finalValue) {
                this.m_nowValue = this.m_finalValue;
              }

              if (this.m_isRate) {
                var newValue = Tools.strip(Tools.divide(this.m_nowValue, JPManager.GetInstance().GetRate()));
                Tools.SetLabelString(this.node, JPManager.GetInstance().GetDisplayValue(newValue), this.m_dotType);
              } else {
                Tools.SetLabelString(this.node, JPManager.GetInstance().GetDisplayValue(this.m_nowValue), this.m_dotType);
              }

              this.m_durTime = Tools.strip(this.m_durTime - dt);
            }
          }
        };

        _proto.SetCoin = function SetCoin(value, isRate) {
          if (isRate === void 0) {
            isRate = true;
          }

          this.m_nowValue = Tools.strip(value);

          if (isRate) {
            var newValue = Tools.strip(Tools.divide(this.m_nowValue, JPManager.GetInstance().GetRate()));
            Tools.SetLabelString(this.node, JPManager.GetInstance().GetDisplayValue(newValue), this.m_dotType);
          } else {
            Tools.SetLabelString(this.node, JPManager.GetInstance().GetDisplayValue(value), this.m_dotType);
          }
        };

        _createClass(JPRollingValue, [{
          key: "IsRolling",
          get: function get() {
            return this.m_isRolling;
          },
          set: function set(isRolling) {
            this.m_isRolling = isRolling;
          }
        }, {
          key: "IsRate",
          get: function get() {
            return this.m_isRate;
          },
          set: function set(isRate) {
            this.m_isRate = isRate;
          }
          /**
           * set and get function.
           */

        }, {
          key: "NowValue",
          get: function get() {
            return this.m_nowValue;
          },
          set: function set(value) {
            this.m_nowValue = Tools.strip(value);
          }
        }, {
          key: "FinalValue",
          get: function get() {
            return this.m_finalValue;
          },
          set: function set(value) {
            if (Tools.strip(this.m_finalValue) != Tools.strip(value) && this.m_isChange) {
              this.m_durTime = RollTime;
              this.m_nowValue = Tools.strip(value * JPRate);
              this.SetCoin(this.m_nowValue, this.m_isRate);
            }

            this.m_finalValue = Tools.strip(value);
          }
        }, {
          key: "DurTime",
          get: function get() {
            return this.m_durTime;
          },
          set: function set(time) {
            this.m_durTime = time;
          }
        }]);

        return JPRollingValue;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_isChange", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_isRolling", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LevelManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './EnvironmentConfig.ts', './gaiaProto.mjs_cjs=&original=.js', './DataStruct.ts', './ConnectManager.ts', './Wallet.ts', './GaiaManager.ts', './levelservice.mjs_cjs=&original=.js', './Tools.ts', './AppManager.ts', './gaiaProto.js', './levelservice.js'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, error, Define, EnvironmentConfig, ConnectionDataStruct, ConnectManager, walletManger, gaiaManager, Tools, AppManager, _cjsExports, _cjsExports$1;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      error = module.error;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, null, function (module) {
      ConnectionDataStruct = module.ConnectionDataStruct;
    }, function (module) {
      ConnectManager = module.default;
    }, function (module) {
      walletManger = module.walletManger;
    }, function (module) {
      gaiaManager = module.gaiaManager;
    }, null, function (module) {
      Tools = module.default;
    }, function (module) {
      AppManager = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      _cjsExports$1 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7d09fOLZYtJWJr6T0ZnpDkZ", "LevelManager", undefined); // export namespace Level
      // {
      //     export interface LevelAck
      //     {
      //         Data: LevelInfo,
      //         Error: string,
      //     }
      //     export interface LevelInfo
      //     {
      //         Level: number,
      //         Exp: number,
      //         NextExp: number,
      //         NextReward: RewardData[],
      //         Reward: RewardData[],
      //         Error: number,
      //         OpenBet: number,
      //     }
      //     export interface RewardData
      //     {
      //         Amount: number,
      //         BetOpen: number,
      //         NewGame: number,
      //     }
      // }


      var LevelReq = exports('LevelReq', /*#__PURE__*/function (_ConnectionDataStruct) {
        _inheritsLoose(LevelReq, _ConnectionDataStruct);

        function LevelReq() {
          var _this;

          _this = _ConnectionDataStruct.call(this) || this;
          _this.method = ConnectionDataStruct.RequestMethod.Post;
          _this.url = "/level/GetPlayerLevelProto";
          _this.reqData = null;
          return _this;
        }

        return LevelReq;
      }(ConnectionDataStruct.ProtocolData));
      var LevelManager = exports('default', /*#__PURE__*/function () {
        function LevelManager() {
          this.m_id = null;
          this.m_levelInfo = null;
          this.m_nowExp = 0;
          this.m_isLevelUp = false;
          this.m_doubleChecklvUp = false;
          this.m_unlockBetCB = null;
          this.m_hideCB = null;
          this.m_getLvReqInfo = false;
        }

        LevelManager.GetInstance = function GetInstance() {
          if (!this._instance) {
            this._instance = new LevelManager();
          }

          return this._instance;
        };

        LevelManager.OnExit = function OnExit() {
          delete this._instance;
          this._instance = null;
        };

        var _proto = LevelManager.prototype;

        _proto.OnExit = function OnExit() {
          if (this.m_id !== null) {
            clearInterval(this.m_id);
            this.m_id = null;
          }
        };

        _proto.SetIUnlockBetCB = function SetIUnlockBetCB(cb) {
          this.m_unlockBetCB = cb;
        };

        _proto.SetHideCB = function SetHideCB(cb) {
          this.m_hideCB = cb;
        };

        _proto.Init = function Init() {
          var _this2 = this;

          if (!Tools.IsTadaCasino) {
            return;
          } // 先自己叫一次,拿第一包


          this.ReqLevelInfo(true);

          var GetLevelData = function GetLevelData() {
            var data = new _cjsExports.gaiaProto.LevelReq();
            data.aid = Number(Define.APP.GetAID());
            data.token = Define.APP.GetAToken();

            if (walletManger.HasWallet) {
              data.currencynumber = walletManger.CurencyID;
            }

            var req = new LevelReq();
            req.reqData = _cjsExports.gaiaProto.LevelReq.encode(data).finish();
            return new Promise(function (resolve) {
              ConnectManager.GetInstance().SendCommand(req, function (ack) {
                gaiaManager.CheckAck(ack, function (type, data) {
                  var oldLevel = _this2.m_levelInfo.level;

                  var info = _cjsExports$1.levelProto.LevelServiceResp.decode(data); // error( '▶▶▶▶▶level info', JSON.stringify( info ) )


                  _this2.m_levelInfo = info;
                  _this2.m_levelInfo.error = info.error ? info.error : 0;

                  if (_this2.m_levelInfo.error == 0) {
                    if (info.level && info.level > oldLevel) {
                      _this2.m_isLevelUp = true;
                    }

                    _this2.m_levelInfo.exp = info.exp ? info.exp : 0;
                    _this2.m_levelInfo.level = info.level ? info.level : 0;
                    _this2.m_levelInfo.nextExp = info.nextExp ? info.nextExp : 0;
                    _this2.m_levelInfo.nextReward = info.nextReward ? info.nextReward : null;
                    _this2.m_levelInfo.reward = info.reward ? info.reward : null;
                    _this2.m_levelInfo.betOpen = info.betOpen ? info.betOpen : 0;
                    _this2.m_nowExp = _this2.m_levelInfo.exp;

                    if (_this2.m_unlockBetCB) {
                      _this2.m_unlockBetCB(_this2.m_levelInfo.betOpen, false);
                    } // error( '▶▶▶▶▶my level info', JSON.stringify( this.m_levelInfo ) )

                  } else {
                    error('▶▶▶▶▶level error', _this2.m_levelInfo.error);
                  }

                  if (_this2.m_isLevelUp) {
                    _this2.m_getLvReqInfo = true;
                  } // if ( this.m_isLevelUp )
                  // {
                  //     // 防止升級計算失誤狀態卡死
                  //     RoundController.GetInstance().LevelUpPerformance = false;
                  // }


                  resolve(info);
                });
              }, false, true);
            });
          };

          AppManager.InitLevelSystem(GetLevelData);
        };

        _proto.IsLevelInitComplete = function IsLevelInitComplete() {
          if (!Tools.IsTadaCasino) {
            return true;
          } else if (this.m_levelInfo) {
            return true;
          } else {
            return false;
          }
        };

        _proto.ReqLevelInfo = function ReqLevelInfo(isLogin) {
          var _this3 = this;

          if (isLogin === void 0) {
            isLogin = false;
          }

          if (!Tools.IsTadaCasino) {
            return;
          }

          if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
            // 測試用
            this.m_levelInfo.exp = isLogin ? 0 : this.m_levelInfo.exp;
            this.m_levelInfo.level = isLogin ? 0 : 1;
            this.m_levelInfo.nextExp = isLogin ? 50 : 100;
            this.m_levelInfo.nextReward = isLogin ? [{
              amount: 100,
              betOpen: 6,
              newGame: 0
            }] : [{
              amount: 200,
              betOpen: 10,
              newGame: 0
            }];
            this.m_levelInfo.reward = isLogin ? null : [{
              amount: 100,
              betOpen: 6,
              newGame: 0
            }];
            this.m_levelInfo.betOpen = isLogin ? 3 : 6;

            if (this.m_unlockBetCB) {
              this.m_unlockBetCB(this.m_levelInfo.betOpen, isLogin);
            }
          } else {
            // if ( isLogin )
            // {
            //     AppManager.SetLevelUpEndCb( () =>
            //     {
            //         RoundController.GetInstance().LevelUpPerformance = false;
            //     } )
            // }
            var data = new _cjsExports.gaiaProto.LevelReq();
            data.aid = Number(Define.APP.GetAID());
            data.token = Define.APP.GetAToken();

            if (walletManger.HasWallet) {
              data.currencynumber = walletManger.CurencyID;
            }

            var req = new LevelReq();
            req.reqData = _cjsExports.gaiaProto.LevelReq.encode(data).finish();
            ConnectManager.GetInstance().SendCommand(req, function (ack) {
              gaiaManager.CheckAck(ack, function (type, data) {
                var info = _cjsExports$1.levelProto.LevelServiceResp.decode(data); // error( '▶▶▶▶▶level info', JSON.stringify( info ) )


                _this3.m_levelInfo = info;
                _this3.m_levelInfo.error = info.error ? info.error : 0;

                if (_this3.m_levelInfo.error == 0) {
                  // double check是否真的升級
                  if (!isLogin) {
                    _this3.m_doubleChecklvUp = _this3.m_levelInfo.nextExp != info.nextExp;
                  }

                  _this3.m_levelInfo.exp = info.exp ? info.exp : 0;
                  _this3.m_levelInfo.level = info.level ? info.level : 0;
                  _this3.m_levelInfo.nextExp = info.nextExp ? info.nextExp : 0;
                  _this3.m_levelInfo.nextReward = info.nextReward ? info.nextReward : null;
                  _this3.m_levelInfo.reward = info.reward ? info.reward : null;
                  _this3.m_levelInfo.betOpen = info.betOpen ? info.betOpen : 0;
                  _this3.m_nowExp = _this3.m_levelInfo.exp;

                  if (_this3.m_unlockBetCB) {
                    _this3.m_unlockBetCB(_this3.m_levelInfo.betOpen, isLogin);
                  } // AppManager.SetLevelInfo( info );
                  // error( '▶▶▶▶▶my level info', JSON.stringify( this.m_levelInfo ) )

                } else {
                  error('▶▶▶▶▶level error', _this3.m_levelInfo.error);
                }

                if (_this3.m_isLevelUp) {
                  _this3.m_getLvReqInfo = true;
                } // if ( this.m_isLevelUp && !this.m_doubleChecklvUp )
                // {
                //     // 防止升級計算失誤狀態卡死
                //     RoundController.GetInstance().LevelUpPerformance = false;
                // }

              });
            }, false, true);
          }
        };

        _proto.GetAwardMoney = function GetAwardMoney() {
          this.m_isLevelUp = false;
          this.m_getLvReqInfo = false;

          if (this.m_levelInfo && this.m_levelInfo.reward && this.m_doubleChecklvUp) {
            return this.m_levelInfo.reward[0].amount ? this.m_levelInfo.reward[0].amount : 0;
          } else {
            return 0;
          }
        };

        _proto.SetLevelExp = function SetLevelExp(bet, coin) {
          if (!Tools.IsTadaCasino) {
            return;
          }

          var data = {
            coin: coin,
            exp: bet
          };
          AppManager.SetData(data); // this.m_levelInfo.exp = Tools.plus( this.m_levelInfo.exp, bet );
          // error( '●●●●● set exp', bet, JSON.stringify( this.m_levelInfo ) )
          // AppManager.SetLevelInfo( this.m_levelInfo );
          // if ( this.m_levelInfo.exp >= this.m_levelInfo.nextExp )
          // {
          //     this.m_isLevelUp = true;
          //     RoundController.GetInstance().LevelUpPerformance = true;
          //     this.ReqLevelInfo();
          // }
        };

        _createClass(LevelManager, [{
          key: "LevelInfo",
          get: function get() {
            if (this.m_levelInfo) {
              return this.m_levelInfo;
            } else {
              var emptyData = {
                level: 0,
                exp: 0,
                nextExp: 0,
                nextReward: null,
                reward: null,
                error: null,
                betOpen: 0
              };
              return emptyData;
            }
          }
        }, {
          key: "IsLevelUp",
          get: function get() {
            return this.m_isLevelUp;
          }
        }, {
          key: "GetLvReqInfo",
          get: function get() {
            return this.m_getLvReqInfo;
          }
        }]);

        return LevelManager;
      }());
      LevelManager._instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LifeSocket.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnvironmentConfig.ts', './MsgBox.ts', './Define.ts', './Tools.ts', './LocaleStringManager.ts', './ConnectionManager.ts', './VipManager.ts', './AppManager.ts', './lotto.mjs_cjs=&original=.js', './NotificationManager.ts', './lifeService.mjs_cjs=&original=.js', './pgame.mjs_cjs=&original=.js', './lifeService.js', './lotto.js', './pgame.js'], function (exports) {
  'use strict';

  var _createClass, cclegacy, error, sys, EnvironmentConfig, MsgBox, Define, Tools, LocaleStringManager, Default_Language, ConnectionManager, VipManager, AppManager, NotificationManager, _cjsExports, _cjsExports$1, _cjsExports$2;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      error = module.error;
      sys = module.sys;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
      Default_Language = module.Default_Language;
    }, function (module) {
      ConnectionManager = module.default;
    }, function (module) {
      VipManager = module.default;
    }, function (module) {
      AppManager = module.default;
    }, null, function (module) {
      NotificationManager = module.default;
    }, null, null, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      _cjsExports$1 = module.default;
    }, function (module) {
      _cjsExports$2 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fbe6f2eH5xFa76LNTYq+KVm", "LifeSocket", undefined);

      var InitInfo = /*#__PURE__*/function () {
        function InitInfo(userid, aid, gameid, token, apiId) {
          this.userId = "";
          this.aid = 0;
          this.gameId = "";
          this.token = "";
          this.apiId = 0;
          this.route = 1;
          this.userId = userid;
          this.aid = aid;
          this.gameId = gameid;
          this.token = token;
          this.apiId = apiId;
        }

        _createClass(InitInfo, [{
          key: "UserId",
          get: function get() {
            return this.userId;
          }
        }, {
          key: "AID",
          get: function get() {
            return this.aid;
          }
        }, {
          key: "GameID",
          get: function get() {
            return this.gameId;
          }
        }, {
          key: "Token",
          get: function get() {
            return this.token;
          }
        }, {
          key: "ApiID",
          get: function get() {
            return this.apiId;
          }
        }, {
          key: "Route",
          set: function set(v) {
            this.route = v;
          }
        }]);

        return InitInfo;
      }();

      var ErrorCode = {
        None: 0,
        ServerError: 1,
        Disconnected: 2,
        Duplicated: 3
      };
      var HeartBeatType = -1;
      var MsgType = {
        NONE: 0,
        MARQUEE: 1,
        RECOMMEND: 2,
        LINK_URL: 3,
        FAVOR_INFO: 4,
        MAINTAIN: 6,
        MAY_LIKE: 8,
        SyncBalance: 9,
        Notify: 10,
        VIP: 11,
        IndoRecommend: 12,
        JpMarquee: 13,
        LottoProgress: 14,
        UpdateLocker: 15,
        MhbMarquee: 16
      };
      var RecommendGame = exports('RecommendGame', function RecommendGame() {
        this.Enabled = false;
        this.Games = null;
        this.Labels = null;
        this.DAU = null;
        this.Mall = null;
      });
      var FavorInfo = exports('FavorInfo', function FavorInfo() {
        this.Enabled = false;
        this.Favorites = null;
        this.Promotions = null;
        this.Expired = null;
        this.BigWined = false;
        this.DAU = null;
      });
      var SyncBalance = exports('SyncBalance', function SyncBalance() {
        this.Errcode = 0;
        this.Message = null;
        this.Time = null;
        this.Balance = 0;
        this.CurrencyNumber = 0;
      });
      var MaintainInfo = exports('MaintainInfo', function MaintainInfo() {
        this.showType = 0;
        this.content = [];
      });
      var SwitchKeyInfo = exports('SwitchKeyInfo', function SwitchKeyInfo() {
        this.id = [];
      });
      var NewUrlGame = [Define.GAME_ID.CSH, Define.GAME_ID.TKS, Define.GAME_ID.CHILLI, Define.GAME_ID.LTS, Define.GAME_ID.FD, Define.GAME_ID.GEM, Define.GAME_ID.WS, Define.GAME_ID.HB, Define.GAME_ID.KK2, Define.GAME_ID.SH, Define.GAME_ID.SH2];
      var Brand = {
        JILI: "JILI",
        TADA: "TADA"
      };
      /**
       * 與GAP SERVER持續連線
       */

      var LifeSocket = exports('default', /*#__PURE__*/function () {
        function LifeSocket() {
          this.m_socket = null;
          this.m_initInfo = null;
          this.m_stop = false;
          this.m_loginFunc = null;
          this.m_isFirst = false;
          this.m_isClose = true;
          this.m_marqueeVec = [];
          this.m_reconnectTime = 3000;
          this.m_connectCount = 0;
          this.m_countCb = null;
          this.m_onErrorCb = null;
          this.m_isFristGetMsg = true;
          this.m_serviceCb = null;
          this.m_recommendCb = null;
          this.m_recommendCloseCb = null;
          this.m_favorInfoCbs = Array();
          this.m_mayLikeCb = null;
          this.m_syncBalanceCb = null;
          this.m_notifyCb = null;
          this.m_jpMarqueeCb = null;
          this.m_mhbMarqueeCb = null;
          this.m_lottoCb = null;
          this.m_syncBalanceRatio = 1;
          this.m_indoRecommend = null;

          if (LifeSocket._instance) {
            throw new Error("Error: Instantiation failed: Use LifeSocket.getInstance() instead of new.");
          }

          LifeSocket._instance = this;
        }

        LifeSocket.GetInstance = function GetInstance() {
          if (!this._instance) {
            this._instance = new LifeSocket();
          }

          return LifeSocket._instance;
        };

        LifeSocket.OnExit = function OnExit() {
          delete this._instance;
          this._instance = null;
        }
        /**
         * 建議遊戲功能開啟的CB
         */
        ;

        var _proto = LifeSocket.prototype;

        _proto.SetRecommendCb = function SetRecommendCb(v) {
          this.m_recommendCb = v;
        };

        _proto.SetRecommendCloseCb = function SetRecommendCloseCb(v) {
          this.m_recommendCloseCb = v;
        };

        _proto.SetFavorInfoCb = function SetFavorInfoCb(v) {
          this.m_favorInfoCbs.push(v);
        };

        _proto.SetInfo = function SetInfo(userId, aid, gameId, token, apiId, loginFunc) {
          this.m_loginFunc = loginFunc;
          this.m_initInfo = new InitInfo(userId, aid, gameId, token, apiId);
        };

        _proto.ConnectServer = function ConnectServer() {
          var _this = this;

          if (!this.m_isFirst && this.m_countCb) {
            this.m_connectCount++;

            if (this.m_connectCount === 1 || this.m_connectCount % 4) {
              this.m_countCb(this.m_connectCount);
            }
          } // let isNew = false;
          // for ( let i = 0; i < NewUrlGame.length; i++ )
          // {
          //     if ( this.m_initInfo.GameID === NewUrlGame[ i ].toString() )
          //     {
          //         isNew = true;
          //         break;
          //     }
          // }
          // if ( isNew )
          // {


          this.m_socket = new WebSocket(EnvironmentConfig.SOCKET_URL2); // }
          // else
          // {
          //     this.m_socket = new WebSocket( EnvironmentConfig.SOCKET_URL );
          // }

          this.m_socket.onopen = function () {
            // if ( isNew )
            // {
            var req = new _cjsExports.lifeServiceProto.LifeServiceInitInfo();
            req.accountID = _this.m_initInfo.AID;
            req.gameID = Number(_this.m_initInfo.GameID);
            req.apiID = _this.m_initInfo.ApiID;
            req.userID = _this.m_initInfo.UserId;
            req.route = _this.m_initInfo.Route;
            req.token = _this.m_initInfo.Token;

            var data = _cjsExports.lifeServiceProto.LifeServiceInitInfo.encode(req).finish();

            _this.m_socket.send(data); // }
            // else
            // {
            //     this.m_initInfo.Route = GameAppA.Route;
            //     this.m_socket.send( JSON.stringify( this.m_initInfo ) );
            // }


            _this.m_isClose = false;
            Define.IsLifeSocketClose = false;
          };

          this.m_socket.onclose = function (event) {
            _this.m_isClose = true;
            Define.IsLifeSocketClose = true;

            if (!_this.m_stop) {
              setTimeout(function () {
                _this.ConnectServer();
              }, _this.m_reconnectTime);
            }
          };

          this.m_socket.onerror = function (event) {
            // GameAppA.ChangeBaseConfig();
            _this.m_onErrorCb == null ? void 0 : _this.m_onErrorCb();

            _this.m_socket.close();
          };

          this.m_socket.onmessage = function (event) {
            var data = JSON.parse(event.data);

            if (_this.m_isFristGetMsg) {
              _this.m_isFristGetMsg = false;

              if (_this.m_serviceCb) {
                _this.m_serviceCb(data.error);
              }
            }

            if (data.error != ErrorCode.None) {
              _this.m_stop = true;
              var setting = {};
              setting.contextKey = Define.StringKey.MSGBOX_CONNECT_FAIL;
              setting.titleKey = Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO;
              setting.showCancelBtn = false;
              setting.showConfirmBtn = true;
              setting.showCloseBtn = false;

              setting.confirmCB = function () {
                Tools.CloseGameTab();
              };

              setting.errorCode = Tools.GetErrorCode(Define.ErrorStatus.PlatForm, data.error);
              MsgBox.getInstance().PushMessageBoxSetting(setting, true);
            } else {
              if (!_this.m_isFirst) {
                _this.m_loginFunc();

                _this.m_isFirst = true;
              }
            }

            if (data.message) {
              var msgContent = JSON.parse(data.message);

              switch (msgContent.cmdType) {
                case MsgType.MARQUEE:
                  var lang = LocaleStringManager.CurrLang;

                  if (lang == null) {
                    lang = Default_Language;
                  }

                  if (lang && LocaleStringManager.FormatLang(JSON.parse(data.message).content.lang) == lang) {
                    _this.m_marqueeVec.push(JSON.parse(data.message));
                  }

                  break;

                case MsgType.RECOMMEND:
                  {
                    var _content = msgContent.content;

                    if (_content.Enabled && _content.Games && _this.m_recommendCb) {
                      _this.m_recommendCb(_content.Games, _content.Labels, _content.Mall, _content.DAU);
                    } else if (!_content.Enabled && _this.m_recommendCloseCb) {
                      _this.m_recommendCloseCb();
                    }
                  }
                  break;

                case MsgType.LINK_URL:
                  if (!sys.isNative) {
                    window.location.replace(msgContent.content);
                  }

                  break;

                case MsgType.FAVOR_INFO:
                  {
                    var _content2 = msgContent.content;

                    if (_this.m_favorInfoCbs) {
                      for (var i = 0; i < _this.m_favorInfoCbs.length; i++) {
                        _this.m_favorInfoCbs[i](_content2);
                      }
                    }
                  }
                  break;

                case MsgType.MAINTAIN:
                  {
                    var _content3 = msgContent.content;

                    var startTime = _this.GetTimeString(_content3.content[0]);

                    var endTime = _this.GetTimeString(_content3.content[1]);

                    var brand = Brand.JILI;

                    if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
                      brand = Brand.TADA;
                    }

                    var maintainType = [Define.StringKey.MSGBOX_MAINTAIN_TYPE0, Define.StringKey.MSGBOX_MAINTAIN_TYPE1]; // MsgBox.getInstance().ShowMessageBox( Define.StringKey.MSGBOX_MAINTAIN_HINT );

                    MsgBox.getInstance().ShowMessageBoxFormat(maintainType[_content3.showType], Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, [brand, startTime, endTime]);
                  }
                  break;

                case MsgType.MAY_LIKE:
                  {
                    var _content4 = msgContent.content;

                    if (_this.m_mayLikeCb) {
                      _this.m_mayLikeCb(_content4);
                    }
                  }
                  break;

                case MsgType.SyncBalance:
                  {
                    var _content5 = msgContent.content;
                    if (_this.m_syncBalanceCb == null) ;

                    if (_content5.Errcode == ErrorCode.None && _this.m_syncBalanceCb) {
                      _this.m_syncBalanceCb(_content5.Balance * _this.m_syncBalanceRatio, null, true);
                    }
                  }
                  break;

                case MsgType.Notify:
                  {
                    var _content6 = msgContent.content;

                    _this.m_notifyCb(_content6);
                  }
                  break;

                case MsgType.VIP:
                  {
                    var _content7 = msgContent.content;
                    VipManager.GetInstance().OnRecvVipInfo(_content7);
                    NotificationManager.GetInstance().UpdateJiliLvNotify(_content7);
                  }
                  break;

                case MsgType.IndoRecommend:
                  {
                    _this.m_indoRecommend = msgContent.content;
                  }
                  break;

                case MsgType.JpMarquee:
                  {
                    var _content8 = msgContent.content;
                    var buf = new Uint8Array(_content8);

                    var _info = _cjsExports$2.serverProto.JpMarqueeInfo.decode(buf);

                    _info.win = _info.win * _this.m_syncBalanceRatio;

                    if (_this.m_jpMarqueeCb) {
                      _this.m_jpMarqueeCb(_info);
                    }
                  }
                  break;

                case MsgType.MhbMarquee:
                  {
                    var _content9 = msgContent.content;

                    var _buf = new Uint8Array(_content9);

                    var _info2 = _cjsExports$2.serverProto.JpMarqueeInfo.decode(_buf);

                    _info2.win = _info2.win * _this.m_syncBalanceRatio;

                    if (_this.m_mhbMarqueeCb) {
                      _this.m_mhbMarqueeCb(_info2);
                    }
                  }
                  break;

                case MsgType.LottoProgress:
                  {
                    if (_this.m_lottoCb) {
                      var _content10 = msgContent.content;

                      var _buf2 = new Uint8Array(_content10);

                      var _info3 = _cjsExports$1.lottoProto.LotteryTicketList.decode(_buf2);

                      _this.m_lottoCb(_info3);
                    }
                  }
                  break;

                case MsgType.UpdateLocker:
                  {
                    var _content11 = msgContent.content;
                    Define.SetSwitchOffKeys(_content11.id);
                    Tools.SwitchOffUpdate();
                    error('Define.switchoffkeys', Define.SwitchOffKeys);
                  }
                  break;
              }
            }
          };
        };

        _proto.Close = function Close() {
          if (this.m_socket && this.m_socket.readyState == this.m_socket.OPEN) {
            error("LifeSocket Closed!");
            this.m_stop = true;
            this.m_socket.close();
          }
        };

        _proto.ReqRecommendList = function ReqRecommendList() {
          if (this.m_socket && this.m_socket.readyState == this.m_socket.OPEN && this.m_initInfo) {
            var req = {
              cmdType: MsgType.RECOMMEND,
              content: {
                onUpdate: 1
              }
            };
            this.m_socket.send(JSON.stringify(req));
          }
        };

        _proto.SendAliveMsg = function SendAliveMsg() {
          if (this.m_socket && this.m_socket.readyState == this.m_socket.OPEN) {
            var date = new Date();
            var year = date.getUTCFullYear();
            var mon = date.getUTCMonth() + 1;
            var day = date.getUTCDate();
            var hour = date.getUTCHours();
            var min = date.getUTCMinutes();
            var sec = date.getUTCSeconds();
            var req = {
              cmdType: HeartBeatType,
              content: {
                currentDatetime: year + "/" + mon + "/" + day + " " + hour + ":" + min + ":" + sec
              }
            };
            this.m_socket.send(JSON.stringify(req));
          }
        };

        _proto.GetMarqueeMsg = function GetMarqueeMsg() {
          if (this.m_marqueeVec.length <= 0) {
            return null;
          } else {
            return this.m_marqueeVec.shift();
          }
        };

        _proto.ReqUrl = function ReqUrl(gameId, eventNo, itemIdx) {
          if (itemIdx === void 0) {
            itemIdx = null;
          }

          if (sys.isNative || AppManager.LobbyData
          /*|| AppManager.UrlLobbyData*/
          ) {
              AppManager.LeaveGame(true, gameId);
            } else {
            if (this.m_socket.readyState == this.m_socket.OPEN) {
              var req = {
                cmdType: MsgType.LINK_URL,
                content: {
                  "redirectTo": gameId,
                  "itemIdx": itemIdx,
                  "lang": Tools.ConvertLanguageToFull(LocaleStringManager.CurrLang)
                }
              };
              this.m_socket.send(JSON.stringify(req));
            }
          }

          var gameString = gameId;
          this.SendClickEvent(eventNo, gameString);
        };

        _proto.ReqFavor = function ReqFavor() {
          if (this.m_socket && this.m_socket.readyState == this.m_socket.OPEN) {
            var req = {
              cmdType: MsgType.FAVOR_INFO,
              content: {
                "favoriteupdate": 1
              }
            };
            this.m_socket.send(JSON.stringify(req));
          }
        };

        _proto.ReqAddFavor = function ReqAddFavor(gameId, eventNo) {
          if (this.m_socket && this.m_socket.readyState == this.m_socket.OPEN) {
            var req = {
              cmdType: MsgType.FAVOR_INFO,
              content: {
                "addFavorite": 1,
                "gameid": gameId
              }
            };
            this.m_socket.send(JSON.stringify(req));
            this.SendClickEvent(eventNo, gameId);
          }
        };

        _proto.ReqRemoveFavor = function ReqRemoveFavor(gameId, eventNo) {
          if (this.m_socket && this.m_socket.readyState == this.m_socket.OPEN) {
            var req = {
              cmdType: MsgType.FAVOR_INFO,
              content: {
                "removefavorite": 1,
                "gameid": gameId
              }
            };
            this.m_socket.send(JSON.stringify(req));
            this.SendClickEvent(eventNo, gameId);
          }
        };

        _proto.ReqVipInfo = function ReqVipInfo() {
          if (this.m_socket && this.m_socket.readyState == this.m_socket.OPEN) {
            var req = {
              cmdType: MsgType.VIP,
              content: {
                "vipupdate": 1
              }
            };
            this.m_socket.send(JSON.stringify(req));
          }
        };

        _proto.SendClickEvent = function SendClickEvent(eventID, eventStatus) {
          ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(this.m_initInfo.AID), Number(this.m_initInfo.ApiID), Number(this.m_initInfo.GameID), Define.GAME_VERSION, eventID, eventStatus));
        };

        _proto.ReqMayLike = function ReqMayLike() {
          return;
        };

        _proto.GetTimeString = function GetTimeString(time) {
          var date = new Date(Number(time) * 1000);
          var year = date.getFullYear().toString();
          var mon = (date.getMonth() + 1).toString();
          var day = date.getDate().toString();
          var hour = date.getHours().toString();
          var min = date.getMinutes();
          var minString = "";

          if (min < 10) {
            minString = "0" + min.toString();
          } else {
            minString = min.toString();
          }

          var dateString = day + "/" + mon + "/" + year + " " + hour + ":" + minString;
          return dateString;
        };

        _createClass(LifeSocket, [{
          key: "IsClose",
          get: function get() {
            return this.m_isClose;
          }
        }, {
          key: "ReconnectTime",
          get:
          /**
           * 回傳值為毫秒
           */
          function get() {
            return this.m_reconnectTime;
          }
        }, {
          key: "CountCb",
          set: function set(v) {
            this.m_countCb = v;
          }
        }, {
          key: "OnErrorCb",
          set: function set(v) {
            this.m_onErrorCb = v;
          }
        }, {
          key: "ServiceCb",
          set: function set(v) {
            this.m_serviceCb = v;
          }
        }, {
          key: "MayLikeCb",
          set: function set(v) {
            this.m_mayLikeCb = v;
          }
        }, {
          key: "SyncBalanceCb",
          set: function set(v) {
            this.m_syncBalanceCb = v;
          }
        }, {
          key: "NotifyCb",
          set: function set(v) {
            this.m_notifyCb = v;
          }
        }, {
          key: "JPMarqueeCb",
          set: function set(v) {
            this.m_jpMarqueeCb = v;
          }
        }, {
          key: "MHBMarqueeCb",
          set: function set(v) {
            this.m_mhbMarqueeCb = v;
          }
        }, {
          key: "LottoCb",
          set: function set(v) {
            this.m_lottoCb = v;
          }
        }, {
          key: "SyncBalanceRatio",
          set:
          /** 如果game server的錢包unit跟平台的不同的話,則須修改此值來對齊 */
          function set(ratio) {
            this.m_syncBalanceRatio = ratio;
          }
        }, {
          key: "IndoRecommend",
          get: function get() {
            return this.m_indoRecommend;
          }
        }]);

        return LifeSocket;
      }());
      LifeSocket._instance = new LifeSocket();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LinesGeneraterComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Material, SpriteFrame, Size, size, v2, Graphics, Node, Sprite, v3, UITransform, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Material = module.Material;
      SpriteFrame = module.SpriteFrame;
      Size = module.Size;
      size = module.size;
      v2 = module.v2;
      Graphics = module.Graphics;
      Node = module.Node;
      Sprite = module.Sprite;
      v3 = module.v3;
      UITransform = module.UITransform;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "047e3+6NQ1FhKxCEOzrrsCC", "LinesGeneraterComponent", undefined);

      var LineIdx = {
        Straight: 0,
        Downslope: 1,
        Upslope: 2
      };
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LinesGeneraterComponent = exports('default', (_dec = property({
        type: Material
      }), _dec2 = property({
        type: SpriteFrame,
        tooltip: "線圖，依序直線、下斜線、上斜線"
      }), _dec3 = property({
        type: Size,
        tooltip: "Symbol大小"
      }), _dec4 = property({
        type: Size,
        tooltip: "盤面為幾乘幾"
      }), _dec5 = property({
        type: Number,
        tooltip: "偏移角度數值，依序為偏0個、偏一格..."
      }), _dec6 = property({
        type: Number,
        tooltip: "偏移長度，依序為偏0個、偏一格..."
      }), _dec7 = property({
        type: Number,
        tooltip: "線的偏移，依序直線、下斜線、上斜線"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LinesGeneraterComponent, _Component);

        function LinesGeneraterComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_test", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lineSpriteFrames", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_symbolSize", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_symbolPlateSize", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_slopeDiffAngles", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_diffLens", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_posDiff", _descriptor7, _assertThisInitialized(_this));

          _this.m_plateSize = null;
          _this.m_lineSprites = [];
          return _this;
        }

        var _proto = LinesGeneraterComponent.prototype;

        _proto.onLoad = function onLoad() {
          this.m_plateSize = size(this.m_symbolSize.width * this.m_symbolPlateSize.height, this.m_symbolSize.height * this.m_symbolPlateSize.width);

          for (var i = 0; i < this.m_lineSpriteFrames.length; i++) {
            this.m_lineSpriteFrames[i].insetLeft = 10;
            this.m_lineSpriteFrames[i].insetRight = 10;
          }
        };

        _proto.start = function start() {
          this.Init([[v2(-328, 138), v2(-164, -138), v2(0, 138), v2(164, 138), v2(328, -138)], [v2(-328, 0), v2(-164, 138), v2(0, -138), v2(164, 0), v2(328, 138)], [v2(-328, -138), v2(-164, 0), v2(0, 0), v2(164, -138), v2(328, 0)]]);
          this.ShowLines([0, 1, 2]);
          var graphics = this.node.getComponent(Graphics);
          graphics.lineWidth = 6;
          graphics.moveTo(0, 0);
          graphics.lineTo(100, 100);
          graphics.stroke();
          graphics.fill();
        }
        /**
         * 
         * @param positions 依照線的編號排序
         */
        ;

        _proto.Init = function Init(positions) {
          //清除舊的線
          if (this.m_lineSprites) {
            while (this.m_lineSprites.length > 0) {
              var lineSprites = this.m_lineSprites.pop();

              if (lineSprites) {
                while (lineSprites.length > 0) {
                  var sprite = lineSprites.pop();

                  if (sprite) {
                    sprite.node.removeFromParent();
                    sprite.node.destroy();
                  }
                }
              }
            }
          } //產生新的線


          for (var i = 0; i < positions.length; i++) {
            this.CreateLine(positions[i]);
          } //關閉所有線


          for (var _i = 0; _i < this.m_lineSprites.length; _i++) {
            for (var j = 0; j < this.m_lineSprites[_i].length; j++) {
              this.m_lineSprites[_i][j].node.active = false;
            }
          }
        }
        /**
         * 顯示連線
         * @param idxs 線的編號
         */
        ;

        _proto.ShowLines = function ShowLines(idxs) {
          for (var i = 0; i < idxs.length; i++) {
            var lineSprites = this.m_lineSprites[idxs[i]];

            if (lineSprites) {
              for (var j = 0; j < lineSprites.length; j++) {
                lineSprites[j].node.active = true;
              }
            }
          }
        }
        /**
         * 隱藏連線
         * @param idxs 線的編號，沒給表示全關
         */
        ;

        _proto.HideLines = function HideLines(idxs) {
          if (idxs === void 0) {
            idxs = null;
          }

          if (idxs) {
            for (var i = 0; i < idxs.length; i++) {
              var lineSprites = this.m_lineSprites[idxs[i]];

              if (lineSprites) {
                for (var j = 0; j < lineSprites.length; j++) {
                  lineSprites[j].node.active = false;
                }
              }
            }
          } else {
            for (var _i2 = 0; _i2 < this.m_lineSprites.length; _i2++) {
              for (var _j = 0; _j < this.m_lineSprites[_i2].length; _j++) {
                this.m_lineSprites[_i2][_j].node.active = false;
              }
            }
          }
        };

        _proto.CreateLine = function CreateLine(positions) {
          var lines = []; //邊緣到第一個點和邊緣到最後一個

          positions.unshift(v2(-this.m_plateSize.width / 2, positions[0].y));
          positions.push(v2(this.m_plateSize.width / 2, positions[positions.length - 1].y)); //中間節點

          for (var i = 0; i < positions.length - 1; i++) {
            var startPoint = positions[i];
            var endPoint = positions[i + 1];
            var outNode = new Node();
            this.node.addChild(outNode);

            if (startPoint.y === endPoint.y) {
              //直線
              var node = this.CreateSpriteNode(outNode, LineIdx.Straight);
              var sprite = node.getComponent(Sprite);
              outNode.angle = 0;
              outNode.position = v3(startPoint.x, startPoint.y);
              var width = Math.abs(startPoint.x - endPoint.x) + (this.m_diffLens[0] ? this.m_diffLens[0] : 0) - (this.m_posDiff[LineIdx.Straight] ? this.m_posDiff[LineIdx.Straight] : 0);
              node.getComponent(UITransform).width = width;
              lines.push(sprite);
            } else if (startPoint.y > endPoint.y) {
              //下斜
              var _node = this.CreateSpriteNode(outNode, LineIdx.Downslope);

              var _sprite = _node.getComponent(Sprite);

              var diffIdx = Math.round(Math.abs(startPoint.y - endPoint.y) / this.m_symbolSize.height);
              var a = Math.abs(startPoint.y - endPoint.y);
              var b = Math.abs(startPoint.x - endPoint.x);
              var angle = Math.atan(a / b) / Math.PI * 180;
              outNode.angle = -(angle + (this.m_slopeDiffAngles[diffIdx] ? this.m_slopeDiffAngles[diffIdx] : 0));
              outNode.position = v3(startPoint.x, startPoint.y);

              var _width = Math.sqrt(Math.pow(startPoint.y - endPoint.y, 2) + Math.pow(startPoint.x - endPoint.x, 2)) + (this.m_diffLens[diffIdx] ? this.m_diffLens[diffIdx] : 0) - (this.m_posDiff[LineIdx.Downslope] ? this.m_posDiff[LineIdx.Downslope] : 0);

              _node.getComponent(UITransform).width = _width;
              lines.push(_sprite);
            } else {
              //上斜
              var _node2 = this.CreateSpriteNode(outNode, LineIdx.Upslope);

              var _sprite2 = _node2.getComponent(Sprite);

              var _diffIdx = Math.round(Math.abs(startPoint.y - endPoint.y) / this.m_symbolSize.height);

              var _a = Math.abs(startPoint.y - endPoint.y);

              var _b = Math.abs(startPoint.x - endPoint.x);

              var _angle = Math.atan(_a / _b) / Math.PI * 180;

              outNode.angle = _angle + (this.m_slopeDiffAngles[_diffIdx] ? this.m_slopeDiffAngles[_diffIdx] : 0);
              outNode.position = v3(startPoint.x, startPoint.y);

              var _width2 = Math.sqrt(Math.pow(startPoint.y - endPoint.y, 2) + Math.pow(startPoint.x - endPoint.x, 2)) + (this.m_diffLens[_diffIdx] ? this.m_diffLens[_diffIdx] : 0) - (this.m_posDiff[LineIdx.Upslope] ? this.m_posDiff[LineIdx.Upslope] : 0);

              _node2.getComponent(UITransform).width = _width2;
              lines.push(_sprite2);
            }
          } //存起來


          this.m_lineSprites.push(lines);
        };

        _proto.CreateSpriteNode = function CreateSpriteNode(parent, idx) {
          var node = new Node();
          var sprite = node.addComponent(Sprite);
          sprite.spriteFrame = this.m_lineSpriteFrames[idx];
          sprite.type = Sprite.Type.SLICED;
          parent.addChild(node);
          node.getComponent(UITransform).anchorX = 0;
          node.setPosition(v3(this.m_posDiff[idx] ? this.m_posDiff[idx] : 0, node.position.y));
          return node;
        };

        return LinesGeneraterComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_test", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_lineSpriteFrames", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_symbolSize", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_symbolPlateSize", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Size(3, 5);
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_slopeDiffAngles", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_diffLens", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_posDiff", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadPrefabManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createClass, cclegacy, log;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c8cca0fG6JHiJ5AJETAhs1y", "LoadPrefabManager", undefined);

      var SubData = /*#__PURE__*/function () {
        //所有設定完才能check
        function SubData() {
          this.m_count = 0;
          this.m_loadedCount = 0;
          this.m_okCallback = null;
          this.m_isWaitLoad = false;
          this.m_callbacks = null;
          this.m_callbacks = new Array();
        }

        var _proto = SubData.prototype;

        _proto.AddOnLoadedCallback = function AddOnLoadedCallback(cb) {
          this.m_callbacks.push(cb);
        };

        _proto.AddLoad = function AddLoad() {
          this.m_count = this.m_count + 1;
          return this.m_count;
        };

        _proto.OnLoaded = function OnLoaded() {
          this.m_loadedCount = this.m_loadedCount + 1;
        };

        _proto.CheckLoaded = function CheckLoaded() {
          log("CheckLoaded ", this.m_isWaitLoad, this.m_count, this.m_loadedCount);
          return this.m_isWaitLoad && this.m_count == this.m_loadedCount;
        };

        _proto.StartLoad = function StartLoad() {
          this.m_isWaitLoad = true;
        };

        _createClass(SubData, [{
          key: "OKCallback",
          get: function get() {
            return this.m_okCallback;
          },
          set: function set(cb) {
            this.m_okCallback = cb;
          }
        }, {
          key: "Callbacks",
          get: function get() {
            return this.m_callbacks;
          }
        }]);

        return SubData;
      }();

      var LoadPrefabManager = exports('default', /*#__PURE__*/function () {
        function LoadPrefabManager() {
          if (LoadPrefabManager._instance) {
            throw new Error("Error: Instantiation failed: Use LoadPrefabManager.getInstance() instead of new.");
          }

          LoadPrefabManager._instance = this;
        }

        LoadPrefabManager.getInstance = function getInstance() {
          if (!this._instance) {
            this._instance = new LoadPrefabManager();
          }

          return LoadPrefabManager._instance;
        };

        LoadPrefabManager.OnExit = function OnExit() {
          delete this._instance;
          this._instance = null;
        };

        var _proto2 = LoadPrefabManager.prototype;

        _proto2.GetManagerId = function GetManagerId(cb) {
          for (var i = 1; i <= LoadPrefabManager.MAX_LIST; i++) {
            if (LoadPrefabManager._DataList[i] == null) {
              LoadPrefabManager._DataList[i] = new SubData();
              LoadPrefabManager._DataList[i].OKCallback = cb;
              return i;
            }
          }

          return 0;
        };

        _proto2.AddOnLoadedCallback = function AddOnLoadedCallback(managerId, cb) {
          if (managerId == -1 || LoadPrefabManager._DataList[managerId] == null) {
            return;
          }

          return LoadPrefabManager._DataList[managerId].AddOnLoadedCallback(cb);
        };

        _proto2.AddLoad = function AddLoad(managerId) {
          if (managerId == -1 || LoadPrefabManager._DataList[managerId] == null) {
            return 0;
          }

          return LoadPrefabManager._DataList[managerId].AddLoad();
        };

        _proto2.OnLoaded = function OnLoaded(managerId) {
          if (managerId == -1 || LoadPrefabManager._DataList[managerId] == null) {
            return;
          }

          LoadPrefabManager._DataList[managerId].OnLoaded();

          this.CheckAndCallback(managerId);
        };

        _proto2.StartLoad = function StartLoad(managerId) {
          if (managerId == -1 || LoadPrefabManager._DataList[managerId] == null) {
            return;
          }

          LoadPrefabManager._DataList[managerId].StartLoad();

          this.CheckAndCallback(managerId);
        };

        _proto2.CheckAndCallback = function CheckAndCallback(managerId) {
          if (LoadPrefabManager._DataList[managerId].CheckLoaded()) {
            LoadPrefabManager._DataList[managerId].OKCallback();

            var arr = LoadPrefabManager._DataList[managerId].Callbacks;

            for (var i = 0; i < arr.length; i++) {
              arr[i]();
            }

            arr = null;
            this.DeleteManagerId(managerId);
          }
        };

        _proto2.DeleteManagerId = function DeleteManagerId(managerId) {
          if (managerId == -1 || LoadPrefabManager._DataList[managerId] == null) {
            return;
          }

          delete LoadPrefabManager._DataList[managerId];
        };

        return LoadPrefabManager;
      }());
      LoadPrefabManager.MAX_LIST = 50;
      LoadPrefabManager._instance = new LoadPrefabManager();
      LoadPrefabManager._DataList = {};

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadRemotePlist.ts", ['cc'], function (exports) {
  'use strict';

  var assetManager, path, Texture2D, cclegacy, SpriteAtlas, SpriteFrame, Rect, Vec2, Size;
  return {
    setters: [function (module) {
      assetManager = module.assetManager;
      path = module.path;
      Texture2D = module.Texture2D;
      cclegacy = module.cclegacy;
      SpriteAtlas = module.SpriteAtlas;
      SpriteFrame = module.SpriteFrame;
      Rect = module.Rect;
      Vec2 = module.Vec2;
      Size = module.Size;
    }],
    execute: function () {
      exports('default', LoadRemotePlist);

      cclegacy._RF.push({}, "9fea1skAf9Ifpz3LcP/CttE", "LoadRemotePlist", undefined);

      var BRACE_REGEX = /[{}]/g;
      /**
       * 遠程加載plist
       * @param url 網址
       * @param callback 下載結束的callback
       */

      function LoadRemotePlist(url, callback) {
        assetManager.loadRemote(url, function (err, plistAsset) {
          if (err) {
            callback(err, null);
            return;
          }

          var plist = plistAsset._nativeAsset;
          var texture = plist.metadata.realTextureFileName || plist.metadata.textureFileName;
          texture = path.join(path.dirname(url), texture);
          assetManager.loadRemote(texture, function (err, imageAsset) {
            if (err) {
              callback(err, null);
              return;
            }

            var texture = new Texture2D();
            texture.image = imageAsset;
            callback(null, parsePlist(plist, texture));
          });
        });
      }

      function parseSize(sizeStr) {
        sizeStr = sizeStr.slice(1, -1);
        var arr = sizeStr.split(",");
        var width = parseFloat(arr[0]);
        var height = parseFloat(arr[1]);
        return new Size(width, height);
      }

      function parseVec2(vec2Str) {
        vec2Str = vec2Str.slice(1, -1);
        var arr = vec2Str.split(",");
        var x = parseFloat(arr[0]);
        var y = parseFloat(arr[1]);
        return new Vec2(x, y);
      }

      function parseTriangles(trianglesStr) {
        return trianglesStr.split(" ").map(parseFloat);
      }

      function parseVertices(verticesStr) {
        return verticesStr.split(" ").map(parseFloat);
      }

      function parseRect(rectStr) {
        rectStr = rectStr.replace(BRACE_REGEX, "");
        var arr = rectStr.split(",");
        return new Rect(parseFloat(arr[0] || "0"), parseFloat(arr[1] || "0"), parseFloat(arr[2] || "0"), parseFloat(arr[3] || "0"));
      }

      function parsePlist(plist, texture) {
        var info = plist.metadata;
        var frames = plist.frames;
        var atlas = new SpriteAtlas();
        var spriteFrames = atlas.spriteFrames;

        for (var key in frames) {
          var frame = frames[key];
          var rotated = false,
              sourceSize = void 0,
              offsetStr = void 0,
              textureRect = void 0; // let trimmed = frame.trimmed;

          if (info.format === 0) {
            rotated = false; // trimmed = frame.trimmed;

            sourceSize = "{" + frame.originalWidth + "," + frame.originalHeight + "}";
            offsetStr = "{" + frame.offsetX + "," + frame.offsetY + "}";
            textureRect = "{{" + frame.x + "," + frame.y + "},{" + frame.width + "," + frame.height + "}}";
          } else if (info.format === 1 || info.format === 2) {
            rotated = frame.rotated; // trimmed = frame.trimmed;

            sourceSize = frame.sourceSize;
            offsetStr = frame.offset;
            textureRect = frame.frame;
          } else if (info.format === 3) {
            rotated = frame.textureRotated; // trimmed = frame.trimmed;

            sourceSize = frame.spriteSourceSize;
            offsetStr = frame.spriteOffset;
            textureRect = frame.textureRect;
          }

          var sprite = new SpriteFrame();
          sprite.texture = texture;
          sprite.rect = parseRect(textureRect);
          sprite.rotated = !!rotated;
          sprite.offset = parseVec2(offsetStr);
          sprite.originalSize = parseSize(sourceSize);

          if (frame.triangles) {
            var vertices = parseVertices(frame.vertices);
            var verticesUV = parseVertices(frame.verticesUV);
            sprite.vertices = {
              triangles: parseTriangles(frame.triangles),
              x: [],
              y: [],
              u: [],
              v: [],
              nu: [],
              nv: []
            };

            for (var i = 0; i < vertices.length; i += 2) {
              sprite.vertices.x.push(vertices[i]);
              sprite.vertices.y.push(vertices[i + 1]);
            }

            for (var _i = 0; _i < verticesUV.length; _i += 2) {
              sprite.vertices.u.push(verticesUV[_i]);
              sprite.vertices.v.push(verticesUV[_i + 1]);
            }
          }

          var name = path.basename(key).replace(/\.[aA-zZ]+/g, "");
          spriteFrames[name] = sprite;
        }

        return atlas;
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LocaleStringManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Tools.ts', './Define.ts', './EnvironmentConfig.ts', './StyleChangeManager.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, sys, JsonAsset, TextAsset, error, Font, SpriteAtlas, Tools, Define, EnvironmentConfig, styleChangeManager;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      JsonAsset = module.JsonAsset;
      TextAsset = module.TextAsset;
      error = module.error;
      Font = module.Font;
      SpriteAtlas = module.SpriteAtlas;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      styleChangeManager = module.styleChangeManager;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4b3660cqtxJ+qEiF+gh6vbI", "LocaleStringManager", undefined);

      var Default_Language = exports('Default_Language', Define.Lang.CN);
      var TTF_PATH = {
        MM: "Astt/framework/TTF/Zawgyi-One",
        TH: "Astt/framework/TTF/MN_Kui_Chai",

        /**BalooDa2-Regular
         * Kalpurush 任務、龍虎榜、滿額
         * Mukti_Narrow 任務、龍虎榜、滿額
         * Shonar 任務、龍虎榜、滿額
         * Siyamrupali_1_01 任務、龍虎榜、滿額
         * SolaimanLipi 任務、龍虎榜、滿額
         */
        // BN: "Astt/framework/TTF/SolaimanLipi",

        /**
         * akshar 任務、龍虎榜、滿額
         * Mangal Regular 任務、龍虎榜、滿額
         * MANGAL 任務、龍虎榜、滿額
         * Chanakya Regular 任務、龍虎榜、滿額
         * Preeti Normal 任務、龍虎榜、滿額
         * Kundli 任務、龍虎榜、滿額
         * KRDEV010
         */
        // HI: "Astt/framework/TTF/KRDEV010",
        NORMAL: {
          NORMAL: "Astt/framework/Common/TTF/TTF_BasicFont_Normal",
          BOLD: "Astt/framework/Common/TTF/TTF_BasicFont_Bold"
        },
        STREET: {
          NORMAL: "Astt/framework_americas/Common/TTF/TTF_BasicFont_Normal",
          BOLD: "Astt/framework_americas/Common/TTF/TTF_BasicFont_Bold"
        }
      };
      var LocaleStringManager = exports('default', /*#__PURE__*/function () {
        LocaleStringManager.GetInstance = function GetInstance() {
          if (!this._instance) {
            this._instance = new LocaleStringManager();
          }

          return LocaleStringManager._instance;
        };

        LocaleStringManager.OnExit = function OnExit() {
          this.m_currLang = Default_Language;
          delete this._instance;
          this._instance = null;
        };

        function LocaleStringManager() {
          this.m_commStringXml = null;
          this.m_gameStringXml = null;
          this.m_backpackStringXml = null;
          this.m_commStringJson = null;
          this.m_gameStringJson = null;
          this.m_backpackStringJson = null;
          this.m_backpackLock = false;
          this.m_commonAtlas = null;
          this.m_gameAtlas = null;
          this.m_freeSpinAtlas = null;
          this.m_onStringLoadedCb = [];
          this.m_onBackpackStringLoadedCb = [];
          this.m_onGameAltasLoadedCb = [];
          this.GetLanguage();
        }

        var _proto = LocaleStringManager.prototype;

        _proto.GetLanguage = function GetLanguage() {
          var Lang = Tools.GetLinkParameterByName("lang") || Tools.GetLinkParameterByName("ln");

          if (Lang) {
            var str = LocaleStringManager.FormatLang(Lang);

            if (str !== "") {
              LocaleStringManager.SetCurrLang(str);
              return;
            }
          }

          if (!sys.isNative) {
            var _str = LocaleStringManager.FormatLang(navigator.language);

            if (_str !== "") {
              LocaleStringManager.SetCurrLang(_str);
              return;
            }
          }

          LocaleStringManager.SetCurrLang(Default_Language);
        };

        LocaleStringManager.SetCurrLang = function SetCurrLang(str) {
          var fomatStr = LocaleStringManager.FormatLang(str);

          for (var key in Define.Lang) {
            if (Define.Lang.hasOwnProperty(key)) {
              var element = Define.Lang[key];

              if (element === fomatStr) {
                this.m_currLang = element;
                Tools.Lang = element;
              }
            }

            if (Tools.IsTada && this.CheckTaDaBannedLang()) {
              this.m_currLang = Define.Lang["EN"];
              Tools.Lang = Define.Lang["EN"];
            }
          }

          Tools.SetRevertDot(Define.RevertDotLang.includes(this.m_currLang));
        };

        _proto.SetWebUrlLang = function SetWebUrlLang() {
          EnvironmentConfig.WEB_URL = EnvironmentConfig.WEB_URL.replace("{lang}", Tools.ConvertLanguageToFull(LocaleStringManager.CurrLang));
          EnvironmentConfig.HISTORY_URL = EnvironmentConfig.HISTORY_URL.replace("{lang}", Tools.ConvertLanguageToFull(LocaleStringManager.CurrLang));
          EnvironmentConfig.COLLECT_URL = EnvironmentConfig.COLLECT_URL.replace("{lang}", Tools.ConvertLanguageToFull(LocaleStringManager.CurrLang));
          EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL.replace("{lang}", Tools.ConvertLanguageToFull(LocaleStringManager.CurrLang));
          EnvironmentConfig.BACKPACK_URL = EnvironmentConfig.BACKPACK_URL.replace("{lang}", Tools.ConvertLanguageToFull(LocaleStringManager.CurrLang));
          EnvironmentConfig.MEMBER_URL = EnvironmentConfig.MEMBER_URL.replace("{lang}", Tools.ConvertLanguageToFull(LocaleStringManager.CurrLang));
          EnvironmentConfig.ACTION_URL = EnvironmentConfig.ACTION_URL.replace("{lang}", Tools.ConvertLanguageToFull(LocaleStringManager.CurrLang));
          EnvironmentConfig.PROMOTE_ACTION_URL = EnvironmentConfig.PROMOTE_ACTION_URL.replace("{lang}", Tools.ConvertLanguageToFull(LocaleStringManager.CurrLang));
          EnvironmentConfig.PROMOTE_URL = EnvironmentConfig.PROMOTE_URL.replace("{lang}", Tools.ConvertLanguageToFull(LocaleStringManager.CurrLang));
          EnvironmentConfig.CLOSE_URL = EnvironmentConfig.CLOSE_URL.replace("{lang}", Tools.ConvertLanguageToFull(LocaleStringManager.CurrLang));
          Tools.CloseUrl = EnvironmentConfig.CLOSE_URL;
        };

        LocaleStringManager.FormatLang = function FormatLang(lang) {
          lang = lang.toLocaleLowerCase();

          if (lang == Define.Lang.CN || lang == Define.FullLang.CN.toLocaleLowerCase()) {
            return Define.Lang.CN;
          } else if (lang == Define.Lang.EN || lang == Define.FullLang.EN.toLocaleLowerCase()) {
            return Define.Lang.EN;
          } else if (lang == Define.Lang.TH || lang == Define.FullLang.TH.toLocaleLowerCase()) {
            return Define.Lang.TH;
          } else if (lang == Define.Lang.VN || lang == Define.FullLang.VN.toLocaleLowerCase()) {
            return Define.Lang.VN;
          } else if (lang == Define.Lang.ID || lang == Define.FullLang.ID.toLocaleLowerCase()) {
            return Define.Lang.ID;
          } else if (lang == Define.Lang.HI || lang == Define.FullLang.HI.toLocaleLowerCase()) {
            return Define.Lang.HI;
          } else if (lang == Define.Lang.TA || lang == Define.FullLang.TA.toLocaleLowerCase()) {
            return Define.Lang.TA;
          } else if (lang == Define.Lang.MM || lang == Define.FullLang.MM.toLocaleLowerCase()) {
            return Define.Lang.MM;
          } else if (lang == Define.Lang.JP || lang == Define.FullLang.JP.toLocaleLowerCase()) {
            return Define.Lang.JP;
          } else if (lang == Define.Lang.MS || lang == Define.FullLang.MS.toLocaleLowerCase()) {
            return Define.Lang.MS;
          } // 提醒：增加語系的時候 把該語系都搜過一次 一起加  ex: Define.Lang.MS
          else if (lang == Define.Lang.KO || lang == Define.FullLang.KO.toLocaleLowerCase()) {
              return Define.Lang.KO;
            } else if (lang == Define.Lang.BN || lang == Define.FullLang.BN.toLocaleLowerCase()) {
              return Define.Lang.BN;
            } else if (lang == Define.Lang.ES || lang == Define.FullLang.ES.toLocaleLowerCase()) {
              return Define.Lang.ES;
            } else if (lang == Define.Lang.PT || lang == Define.FullLang.PT.toLocaleLowerCase()) {
              return Define.Lang.PT;
            } else if (lang == Define.Lang.IT || lang == Define.FullLang.IT.toLocaleLowerCase()) {
              return Define.Lang.IT;
            } else if (lang == Define.Lang.SE || lang == Define.FullLang.SE.toLocaleLowerCase()) {
              return Define.Lang.SE;
            } else if (lang == Define.Lang.DE || lang == Define.FullLang.DE.toLocaleLowerCase()) {
              return Define.Lang.DE;
            } else if (lang == Define.Lang.DADK || lang == Define.FullLang.DADK.toLocaleLowerCase()) {
              return Define.Lang.DADK;
            } else if (lang == Define.Lang.RORO || lang == Define.FullLang.RORO.toLocaleLowerCase()) {
              return Define.Lang.RORO;
            } else if (lang == Define.Lang.NLNL || lang == Define.FullLang.NLNL.toLocaleLowerCase()) {
              return Define.Lang.NLNL;
            } else if (lang == Define.Lang.TRTR.toLocaleLowerCase() || lang == Define.FullLang.TRTR.toLocaleLowerCase()) {
              return Define.Lang.TRTR;
            } else if (lang == Define.Lang.RURU.toLocaleLowerCase() || lang == Define.FullLang.RURU.toLocaleLowerCase()) {
              return Define.Lang.RURU;
            } else if (lang == Define.Lang.GRGR.toLocaleLowerCase() || lang == Define.FullLang.GRGR.toLocaleLowerCase()) {
              return Define.Lang.GRGR;
            } else if (lang == Define.Lang.FRFR.toLocaleLowerCase() || lang == Define.FullLang.FRFR.toLocaleLowerCase()) {
              return Define.Lang.FRFR;
            }

          return "";
        }
        /**
         * 載入字串檔
         * @param gameFolderName 遊戲的資料夾名稱
         */
        ;

        _proto.LoadStringFile = function LoadStringFile(noGameBundle) {
          var _this = this;

          if (noGameBundle === void 0) {
            noGameBundle = false;
          }

          this.SetWebUrlLang();
          var url = "AsttText/" + LocaleStringManager.CurrLang + "/strings";
          if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) ; // 檢查json檔是否存在

          var info = Define.OtherBundle.getDirWithPath(url, JsonAsset);
          Define.OtherBundle.load(url, info && info.length > 0 ? JsonAsset : TextAsset, function (err, assets) {
            if (err) {
              error(err.message || err);
              return;
            } // 判斷要用json或是xml


            if (assets instanceof JsonAsset) {
              _this.m_commStringJson = assets.json;
            } else {
              var parser = new DOMParser();
              _this.m_commStringXml = parser.parseFromString(String(assets), "text/xml");
            }

            if (_this.m_onStringLoadedCb && _this.m_onStringLoadedCb.length > 0) {
              for (var i = 0; i < _this.m_onStringLoadedCb.length; i++) {
                _this.m_onStringLoadedCb[i]();
              }

              _this.m_onStringLoadedCb.length = 0;
            }
          });

          if (!noGameBundle) {
            //url  = "/Text/tw/gameStrings";
            url = "/Text/" + LocaleStringManager.CurrLang + "/gameStrings";
            Define.GameBundle.load(url, function (err, assets) {
              if (err) {
                error(err.message || err);
                return;
              }

              var parser = new DOMParser();
              _this.m_gameStringXml = parser.parseFromString(String(assets), "text/xml");
            });
          }

          if (LocaleStringManager.CurrLang === Define.Lang.MM) {
            Define.CommonBundle.load(TTF_PATH.MM, Font, function (err, asset) {
              if (err) {
                error(err.message || err);
                return;
              }

              Define.DefaultFont = asset;
              Define.DefaultExtraFont = asset;
            });
          } else if (LocaleStringManager.CurrLang === Define.Lang.TH) {
            Define.CommonBundle.load(TTF_PATH.TH, Font, function (err, asset) {
              if (err) {
                error(err.message || err);
                return;
              }

              Define.DefaultFont = asset;
              Define.DefaultExtraFont = asset;
            });
          } // else if ( LocaleStringManager.CurrLang === Define.Lang.BN )
          // {
          //     Define.CommonBundle.load( TTF_PATH.BN, Font, ( err: Error, asset: TTFFont ) =>
          //     {
          //         if ( err )
          //         {
          //             error( err.message || err );
          //             return;
          //         }
          //         Define.DefaultFont = asset;
          //         Define.DefaultExtraFont = asset;
          //     } );
          // }
          // else if ( LocaleStringManager.CurrLang === Define.Lang.HI )
          // {
          //     Define.CommonBundle.load( TTF_PATH.HI, Font, ( err: Error, asset: TTFFont ) =>
          //     {
          //         if ( err )
          //         {
          //             error( err.message || err );
          //             return;
          //         }
          //         Define.DefaultFont = asset;
          //         Define.DefaultExtraFont = asset;
          //     } );
          // }
          else {
              var ttfSetting = TTF_PATH.NORMAL;

              if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
                ttfSetting = TTF_PATH.STREET;
              }

              Define.CommonBundle.load(ttfSetting.NORMAL, Font, function (err, assets) {
                if (err) {
                  error(err.message || err);
                  return;
                }

                Define.DefaultFont = assets;
              });
              Define.CommonBundle.load(ttfSetting.BOLD, Font, function (err, assets) {
                if (err) {
                  error(err.message || err);
                  return;
                }

                Define.DefaultExtraFont = assets;
              });
            }

          this.LoadCommonAtlasFile();
          this.LoadFreeSpinAtlasFile();
        }
        /**
         * 載入共用合圖
         */
        ;

        _proto.LoadCommonAtlasFile = function LoadCommonAtlasFile() {
          var _this2 = this;

          var filePath = "/framework/CommonStringAtlas2/CommonStringAtlas2"; // "/CommonStringAtlas2";
          // if ( Define.CURRENCY_CHANGE_ENABLE )
          // {
          //     filePath = "/CommonStringAtlas2_API_BC.plist";
          // }

          if (Tools.Line === Define.LineSetting.sec) {
            filePath = "/CommonStringAtlas2_API_2";
          } else if (Tools.Line === Define.LineSetting.street) ;else if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
            filePath = "/framework_americas/CommonStringAtlas2/CommonStringAtlas2";
          }

          var url = "AsttText/" + LocaleStringManager.CurrLang + filePath;
          Define.OtherBundle.load(url, SpriteAtlas, function (err, assets) {
            if (err) {
              error(err.message || err);
              return;
            }

            _this2.m_commonAtlas = assets;
          });
        }
        /**
         * 載入FreeSpin自動合圖
         */
        ;

        _proto.LoadFreeSpinAtlasFile = function LoadFreeSpinAtlasFile() {
          var _this3 = this;

          var filePath = "/FreeSpin/AutoAtlas"; // 以下預留
          // if ( Tools.Line === Define.LineSetting.sec )
          // {
          //     filePath = "/CommonStringAtlas2_API_2";
          // }
          // else if ( Tools.Line === Define.LineSetting.street )
          // {
          //     filePath = "/CommonStringAtlas2_API_machine";
          // }
          // else if ( Tools.Line === Define.LineSetting.americas )
          // {
          //     filePath = "/framework_americas/CommonStringAtlas2/CommonStringAtlas2";
          // }
          // else if ( Tools.Line === Define.LineSetting.americas_str )
          // {
          //     filePath = "/framework_americas_1.5/CommonStringAtlas2/CommonStringAtlas2";
          // }

          var url = "AsttText/" + LocaleStringManager.CurrLang + filePath;
          Define.OtherBundle.load(url, SpriteAtlas, function (err, assets) {
            if (err) {
              error(err.message || err);
              return;
            }

            _this3.m_freeSpinAtlas = assets;
          });
        }
        /**
         * 載入遊戲合圖
         */
        ;

        _proto.LoadGameAtlasFile = function LoadGameAtlasFile(path, finishCb) {
          var _this4 = this;

          var url = path + LocaleStringManager.CurrLang + "/GameTextImg";

          if (styleChangeManager.NeedChange) {
            var info = Define.GameBundle.getDirWithPath("" + styleChangeManager.FolderName + path);

            if (info && info.length > 0) {
              url = "" + styleChangeManager.FolderName + url;
            }
          }

          Define.GameBundle.load(url, SpriteAtlas, function (err, assets) {
            if (err) {
              error(err.message || err);
              return;
            }

            _this4.m_gameAtlas = assets;

            if (finishCb) {
              _this4.m_onGameAltasLoadedCb.push(finishCb);
            }

            if (_this4.m_onGameAltasLoadedCb && _this4.m_onGameAltasLoadedCb.length > 0) {
              for (var i = 0; i < _this4.m_onGameAltasLoadedCb.length; i++) {
                _this4.m_onGameAltasLoadedCb[i]();
              }

              _this4.m_onGameAltasLoadedCb.length = 0;
            }
          });
        };

        _proto.LoadBackPackStringFile = function LoadBackPackStringFile(endCb) {
          var _this5 = this;

          if (endCb === void 0) {
            endCb = null;
          } // let url = "Astt/framework/backpack/Text/" + LocaleStringManager.CurrLang + "/backpackStrings";
          // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {
          //     url = "Astt/framework_americas/backpack/Text/" + LocaleStringManager.CurrLang + "/backpackStrings";
          // }


          var url = "AsttText/" + LocaleStringManager.CurrLang + "/backpackStrings";

          if (!this.m_backpackLock) {
            this.m_backpackLock = true; // 檢查json檔是否存在

            var info = Define.OtherBundle.getDirWithPath(url, JsonAsset);
            Define.OtherBundle.load(url, info && info.length > 0 ? JsonAsset : TextAsset, function (err, assets) {
              if (err) {
                _this5.m_backpackLock = false;
                error(err.message || err);
                return;
              } // 判斷要用json或是xml


              if (assets instanceof JsonAsset) {
                _this5.m_backpackStringJson = assets.json;
              } else {
                var parser = new DOMParser();
                _this5.m_backpackStringXml = parser.parseFromString(String(assets), "text/xml");
              }

              _this5.m_backpackLock = false;

              if (_this5.m_onBackpackStringLoadedCb && _this5.m_onBackpackStringLoadedCb.length > 0) {
                for (var i = 0; i < _this5.m_onBackpackStringLoadedCb.length; i++) {
                  _this5.m_onBackpackStringLoadedCb[i]();
                }

                _this5.m_onBackpackStringLoadedCb.length = 0;
              }

              endCb && endCb();
            });
          }
        };

        LocaleStringManager.CheckTaDaBannedLang = function CheckTaDaBannedLang() {
          for (var i = 0; i < Define.TADA_BANNED_LANG.length; i++) {
            if (LocaleStringManager.CurrLang === Define.TADA_BANNED_LANG[i]) {
              return true;
            }
          }

          return false;
        }
        /**
         * 取得遊戲名稱
         * @param gameId 遊戲ID
         * @returns 遊戲名稱
         */
        ;

        _proto.GetGameName = function GetGameName(gameId) {
          if (gameId === Define.GAME_ID.ENTITY) {
            return LocaleStringManager.GetInstance().GetString(Define.StringKey.GF_GIFTCARD);
          }

          if (Tools.IsTada) {
            return this.GetString(Define.StringKey.TADA_GAMEID + gameId);
          } else {
            return this.GetString(Define.StringKey.GAMEID + gameId);
          }
        };

        _proto.GetString = function GetString(key) {
          var resStr = key; // log("getString", key, this.m_gameStringXml,this.m_commStringXml );
          // JSON

          if (this.m_gameStringJson && this.m_gameStringJson[key]) {
            resStr = this.m_gameStringJson[key];
          } else if (this.m_commStringJson && this.m_commStringJson[key]) {
            resStr = this.m_commStringJson[key];
          } else if (this.m_backpackStringJson && this.m_backpackStringJson[key]) {
            resStr = this.m_backpackStringJson[key];
          } // XML
          else if (this.m_gameStringXml && this.m_gameStringXml.getElementsByTagName(key) && this.m_gameStringXml.getElementsByTagName(key)[0] && this.m_gameStringXml.getElementsByTagName(key)[0].childNodes && this.m_gameStringXml.getElementsByTagName(key)[0].childNodes[0]) {
              resStr = this.m_gameStringXml.getElementsByTagName(key)[0].childNodes[0].nodeValue;
            } else if (this.m_commStringXml && this.m_commStringXml.getElementsByTagName(key) && this.m_commStringXml.getElementsByTagName(key)[0] && this.m_commStringXml.getElementsByTagName(key)[0].childNodes && this.m_commStringXml.getElementsByTagName(key)[0].childNodes[0]) {
              resStr = this.m_commStringXml.getElementsByTagName(key)[0].childNodes[0].nodeValue;
            } else if (this.m_backpackStringXml && this.m_backpackStringXml.getElementsByTagName(key) && this.m_backpackStringXml.getElementsByTagName(key)[0] && this.m_backpackStringXml.getElementsByTagName(key)[0].childNodes && this.m_backpackStringXml.getElementsByTagName(key)[0].childNodes[0]) {
              resStr = this.m_backpackStringXml.getElementsByTagName(key)[0].childNodes[0].nodeValue;
            }

          if (resStr) {
            // 判斷可能會有名稱為數字的value 不管怎樣 都要直接toString()
            resStr = resStr.toString().replace(/\\n/g, "\n");
          } else {
            // 回傳key就好
            resStr = key;
          }

          resStr = this.RichTextParse(resStr);
          return resStr;
        };

        _proto.RichTextParse = function RichTextParse(orgStr) {
          var _this6 = this;

          var pattern;
          var pattern2;

          if (LocaleStringManager.CurrLang == Define.Lang.EN || LocaleStringManager.CurrLang == Define.Lang.TH || LocaleStringManager.CurrLang == Define.Lang.ID || LocaleStringManager.CurrLang == Define.Lang.VN || LocaleStringManager.CurrLang == Define.Lang.HI || LocaleStringManager.CurrLang == Define.Lang.TA || LocaleStringManager.CurrLang == Define.Lang.MM || LocaleStringManager.CurrLang == Define.Lang.MS || LocaleStringManager.CurrLang == Define.Lang.KO || LocaleStringManager.CurrLang == Define.Lang.BN || LocaleStringManager.CurrLang == Define.Lang.ES || LocaleStringManager.CurrLang == Define.Lang.PT || LocaleStringManager.CurrLang == Define.Lang.IT || LocaleStringManager.CurrLang == Define.Lang.SE || LocaleStringManager.CurrLang == Define.Lang.DE || LocaleStringManager.CurrLang == Define.Lang.DADK || LocaleStringManager.CurrLang == Define.Lang.RORO || LocaleStringManager.CurrLang == Define.Lang.NLNL || LocaleStringManager.CurrLang == Define.Lang.TRTR || LocaleStringManager.CurrLang == Define.Lang.RURU || LocaleStringManager.CurrLang == Define.Lang.GRGR || LocaleStringManager.CurrLang == Define.Lang.FRFR) {
            pattern = /[a-z]+;[0-9]+;[^，]*/g;
            pattern2 = /[a-zA-Z0-9]+;[0-9]+;[^，]*/g;
          } else if (LocaleStringManager.CurrLang == Define.Lang.CN || LocaleStringManager.CurrLang == Define.Lang.JP) {
            pattern = /[a-z]+;[0-9]+;[^,]*/g;
            pattern2 = /[a-zA-Z0-9]+;[0-9]+;[^,]*/g;
          } else {
            // 看起來這類可能常用 塞個預設做預防  如果有明確的分類  上面建議要設定
            pattern = /[a-z]+;[0-9]+;[^，]*/g;
            pattern2 = /[a-zA-Z0-9]+;[0-9]+;[^，]*/g;
          }

          var sm = orgStr.match(pattern);

          if (!sm) {
            sm = orgStr.match(pattern2);
          }

          var colorKey = ["<color=#%s>", "</c>"];
          var sizeKey = ["<size=%s>", "</size>"];
          var resStr = orgStr;

          if (sm != undefined && sm != null) {
            resStr = "";
            sm.forEach(function (value) {
              var tmpArr = value.split(";");

              if (tmpArr.length == 3) {
                resStr = resStr + colorKey[0].replace("%s", _this6.GetColor(tmpArr[0]));
                resStr = resStr + sizeKey[0].replace("%s", tmpArr[1]);
                resStr = resStr + tmpArr[2] + sizeKey[1] + colorKey[1];
              }
            });
          }

          return resStr;
        };

        _proto.GetColor = function GetColor(strKey) {
          if (strKey.length != 6) {
            switch (strKey) {
              case "w":
                return "ffffff";

              case "b":
                return "6DB2F8";

              case "y":
                return "FFCC00";

              case "blk":
                return "000000";

              case "g":
                return "00FF1E";

              case "r":
                return "FF0D00";

              case "o":
                return "FFCC00 ";

              case "br":
                return "E4D19B";

              case "gr":
                return "808080";

              case "cb":
                return "00F6D7";

              case "p":
                return "EE60E1";

              case "by":
                return "FFFF00";

              case "wb":
                return "00FFFF";

              case "py":
                return "FFFC9A";

              case "lr":
                return "FFA7A7";

              case "lp":
                return "F5AAFF";

              case "lb":
                return "BCB7FF";

              case "rw":
                return "FFE1D0";

              default:
                return "ffffff";
            }
          } else {
            return strKey;
          }
        };

        _proto.RegisterOnLoadedCb = function RegisterOnLoadedCb(cb) {
          this.m_onStringLoadedCb.push(cb);
        };

        _proto.RegisterOnBackpackStringLoadedCb = function RegisterOnBackpackStringLoadedCb(cb) {
          this.m_onBackpackStringLoadedCb.push(cb);
        };

        _proto.RegisterOnGameAltasLoadedCb = function RegisterOnGameAltasLoadedCb(cb) {
          this.m_onGameAltasLoadedCb.push(cb);
        };

        _proto.IsLoaded = function IsLoaded() {
          var isMMReady = false;

          if (LocaleStringManager.CurrLang === Define.Lang.MM) {
            if (Define.DefaultFont !== null) {
              isMMReady = true;
            }
          } else {
            isMMReady = true;
          }

          var isEnFontReady = false;

          if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
            if (Define.DefaultFont !== null && Define.DefaultExtraFont !== null) {
              isEnFontReady = true;
            }
          } else {
            isEnFontReady = true;
          }

          return this.IsCommStringLoaded() && this.IsGameStringLoaded() && this.IsCommonAtlasLoaded() && isMMReady && isEnFontReady;
        };

        _proto.IsGameLoaded = function IsGameLoaded() {
          return this.m_gameAtlas != undefined;
        };

        _proto.IsCommStringLoaded = function IsCommStringLoaded() {
          return this.m_commStringXml != undefined || this.m_commStringJson != undefined;
        };

        _proto.IsGameStringLoaded = function IsGameStringLoaded() {
          return this.m_gameStringXml != undefined && this.m_gameStringXml != null || this.m_gameStringJson != undefined && this.m_gameStringJson != null;
        };

        _proto.IsCommonAtlasLoaded = function IsCommonAtlasLoaded() {
          return this.m_commonAtlas != undefined;
        };

        _proto.IsFreeSpinAtlasLoaded = function IsFreeSpinAtlasLoaded() {
          return this.m_freeSpinAtlas != undefined;
        };

        _proto.IsBackpackStringLoaded = function IsBackpackStringLoaded() {
          return this.m_backpackStringXml != undefined || this.m_backpackStringJson != undefined;
        };

        LocaleStringManager.IsChinese = function IsChinese() {
          return this.CurrLang == Define.Lang.CN;
        };

        _proto.GetCommonAtlas = function GetCommonAtlas() {
          return this.m_commonAtlas;
        };

        _proto.GetFreeSpinAtlas = function GetFreeSpinAtlas() {
          return this.m_freeSpinAtlas;
        };

        _proto.GetGameAtlas = function GetGameAtlas() {
          return this.m_gameAtlas;
        };

        _createClass(LocaleStringManager, null, [{
          key: "CurrLang",
          get: function get() {
            return this.m_currLang;
          }
        }]);

        return LocaleStringManager;
      }());
      LocaleStringManager.m_currLang = Default_Language;
      LocaleStringManager._instance = new LocaleStringManager();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LocalStorageManager.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, sys, error, warn;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      error = module.error;
      warn = module.warn;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fb5bcC9ImxHebvSV6GH75xx", "LocalStorageManager", undefined);

      var LocalStorageManager = exports('default', /*#__PURE__*/function () {
        function LocalStorageManager() {}
        /**
         * boolean data
         * @param {*key} key
         * @param {*value} boolean
         */


        LocalStorageManager.SetBool = function SetBool(key, value) {
          if (typeof value == "boolean") {
            sys.localStorage.setItem(key, value.toString());
          } else {
            error("LocalStorage error: SetBool fault");
          }
        }
        /**
         * 取出boolean data
         */
        ;

        LocalStorageManager.GetBool = function GetBool(key) {
          var value;
          value = sys.localStorage.getItem(key);

          if (value != null) {
            if (value == "false") {
              return false;
            } else if (value == "true") {
              return true;
            } else {
              error("LocalStorage error: GetBool fault");
              return null;
            }
          } else {
            warn("LocalStorage error: Key not found ");
            return null;
          }
        }
        /**
         * 存入Int data
         * @param {*key} key
         * @param {*value} number
         */
        ;

        LocalStorageManager.SetInt = function SetInt(key, value) {
          if (typeof value == "number") {
            sys.localStorage.setItem(key, value.toString());
          } else {
            error("LocalStorage error: SetInt fault");
          }
        }
        /**
         * 取出Int data
         */
        ;

        LocalStorageManager.GetInt = function GetInt(key) {
          var value;
          value = sys.localStorage.getItem(key);

          if (value != null) {
            if (!isNaN(Number(value))) {
              return Number(value);
            } else {
              error("LocalStorage error: GetInt fault");
              return null;
            }
          } else {
            warn("LocalStorage error: Key not found ");
            return null;
          }
        }
        /**
         * 存入String data
         * @param {*key} key
         * @param {*value} string
         */
        ;

        LocalStorageManager.SetString = function SetString(key, value) {
          if (typeof value == "string") {
            sys.localStorage.setItem(key, value);
          } else {
            error("LocalStorage error: SetString fault");
          }
        }
        /**
         * 取出String data
         */
        ;

        LocalStorageManager.GetString = function GetString(key) {
          var value;
          value = sys.localStorage.getItem(key);

          if (value != null) {
            return value;
          } else {
            warn("LocalStorage error: Key not found ");
            return null;
          }
        }
        /**
         * 存入Object data
         * @param {*key} key
         * @param {*value} Boolean
         */
        ;

        LocalStorageManager.SetObject = function SetObject(key, value) {
          if (typeof value == "object") {
            sys.localStorage.setItem(key, JSON.stringify(value));
          } else {
            error("LocalStorage error: setObject fault");
          }
        }
        /**
         * 取出Object data
         * 請確定取出的string能轉成object
         */
        ;

        LocalStorageManager.GetObject = function GetObject(key) {
          var value;
          value = sys.localStorage.getItem(key);

          if (value != null) {
            try {
              var object = JSON.parse(value);

              if (object && typeof object === "object") {
                return object;
              }
            } catch (e) {
              error("LocalStorage error: Value is not object");
              return null;
            }
          } else {
            warn("LocalStorage error: Key not found ");
            return null;
          }
        }
        /**
         * 刪除指定 data
         * @param {*key} key
         */
        ;

        LocalStorageManager.RemoveData = function RemoveData(key) {
          return sys.localStorage.removeItem(key);
        }
        /**
         * 清除所有data
         */
        ;

        LocalStorageManager.ClearData = function ClearData() {
          return sys.localStorage.clear();
        };

        return LocalStorageManager;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ManagerDataStructure.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DataStruct.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, ConnectionDataStruct;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ConnectionDataStruct = module.ConnectionDataStruct;
    }],
    execute: function () {
      exports('ManagerDataStructure', void 0);

      cclegacy._RF.push({}, "f6436QqqpdOmoX8eP+HiWjG", "ManagerDataStructure", undefined);

      var ManagerDataStructure;

      (function (_ManagerDataStructure) {
        var JPInfoReq = /*#__PURE__*/function (_ConnectionDataStruct) {
          _inheritsLoose(JPInfoReq, _ConnectionDataStruct);

          function JPInfoReq() {
            var _this;

            _this = _ConnectionDataStruct.call(this) || this;
            _this.method = ConnectionDataStruct.RequestMethod.Post;
            _this.url = "/unionjp/JPInfoProto";
            _this.reqData = null;
            return _this;
          }

          return JPInfoReq;
        }(ConnectionDataStruct.ProtocolData);

        _ManagerDataStructure.JPInfoReq = JPInfoReq;

        var JPHistoryReq = /*#__PURE__*/function (_ConnectionDataStruct2) {
          _inheritsLoose(JPHistoryReq, _ConnectionDataStruct2);

          function JPHistoryReq() {
            var _this2;

            _this2 = _ConnectionDataStruct2.call(this) || this;
            _this2.method = ConnectionDataStruct.RequestMethod.Post;
            _this2.url = "/unionjp/JPHistoryProto";
            _this2.reqData = null;
            return _this2;
          }

          return JPHistoryReq;
        }(ConnectionDataStruct.ProtocolData);

        _ManagerDataStructure.JPHistoryReq = JPHistoryReq;

        var JPBlockReq = /*#__PURE__*/function (_ConnectionDataStruct3) {
          _inheritsLoose(JPBlockReq, _ConnectionDataStruct3);

          function JPBlockReq() {
            var _this3;

            _this3 = _ConnectionDataStruct3.call(this) || this;
            _this3.method = ConnectionDataStruct.RequestMethod.Post;
            _this3.url = "/unionjp/JPBlockProto";
            _this3.reqData = null;
            return _this3;
          }

          return JPBlockReq;
        }(ConnectionDataStruct.ProtocolData);

        _ManagerDataStructure.JPBlockReq = JPBlockReq;

        var JPBAllReq = /*#__PURE__*/function (_ConnectionDataStruct4) {
          _inheritsLoose(JPBAllReq, _ConnectionDataStruct4);

          function JPBAllReq() {
            var _this4;

            _this4 = _ConnectionDataStruct4.call(this) || this;
            _this4.method = ConnectionDataStruct.RequestMethod.Post;
            _this4.url = "/unionjp/JPInfoAllProto";
            _this4.reqData = null;
            return _this4;
          }

          return JPBAllReq;
        }(ConnectionDataStruct.ProtocolData);

        _ManagerDataStructure.JPBAllReq = JPBAllReq;

        var MHBInfoReq = /*#__PURE__*/function (_ConnectionDataStruct5) {
          _inheritsLoose(MHBInfoReq, _ConnectionDataStruct5);

          function MHBInfoReq() {
            var _this5;

            _this5 = _ConnectionDataStruct5.call(this) || this;
            _this5.method = ConnectionDataStruct.RequestMethod.Post;
            _this5.url = "/fulljp/JPInfoProto";
            _this5.reqData = null;
            return _this5;
          }

          return MHBInfoReq;
        }(ConnectionDataStruct.ProtocolData);

        _ManagerDataStructure.MHBInfoReq = MHBInfoReq;

        var MHBInfoAllReq = /*#__PURE__*/function (_ConnectionDataStruct6) {
          _inheritsLoose(MHBInfoAllReq, _ConnectionDataStruct6);

          function MHBInfoAllReq() {
            var _this6;

            _this6 = _ConnectionDataStruct6.call(this) || this;
            _this6.method = ConnectionDataStruct.RequestMethod.Post;
            _this6.url = "/fulljp/JPInfoAllProto";
            _this6.reqData = null;
            return _this6;
          }

          return MHBInfoAllReq;
        }(ConnectionDataStruct.ProtocolData);

        _ManagerDataStructure.MHBInfoAllReq = MHBInfoAllReq;

        var MHBHistoryReq = /*#__PURE__*/function (_ConnectionDataStruct7) {
          _inheritsLoose(MHBHistoryReq, _ConnectionDataStruct7);

          function MHBHistoryReq() {
            var _this7;

            _this7 = _ConnectionDataStruct7.call(this) || this;
            _this7.method = ConnectionDataStruct.RequestMethod.Post;
            _this7.url = "/fulljp/JPHistoryProto";
            _this7.reqData = null;
            return _this7;
          }

          return MHBHistoryReq;
        }(ConnectionDataStruct.ProtocolData);

        _ManagerDataStructure.MHBHistoryReq = MHBHistoryReq;

        var CheckMallReq = /*#__PURE__*/function (_ConnectionDataStruct8) {
          _inheritsLoose(CheckMallReq, _ConnectionDataStruct8);

          function CheckMallReq() {
            var _this8;

            _this8 = _ConnectionDataStruct8.call(this) || this;
            _this8.type = ConnectionDataStruct.ErrorHandleType.Ignore;
            _this8.method = ConnectionDataStruct.RequestMethod.Post;
            _this8.url = "/mall/checkmallproto";
            _this8.reqData = null;
            return _this8;
          }

          return CheckMallReq;
        }(ConnectionDataStruct.ProtocolData);

        _ManagerDataStructure.CheckMallReq = CheckMallReq;

        var TrialInfoReq = /*#__PURE__*/function (_ConnectionDataStruct9) {
          _inheritsLoose(TrialInfoReq, _ConnectionDataStruct9);

          function TrialInfoReq() {
            var _this9;

            _this9 = _ConnectionDataStruct9.call(this) || this;
            _this9.type = ConnectionDataStruct.ErrorHandleType.Ignore;
            _this9.method = ConnectionDataStruct.RequestMethod.Post;
            _this9.url = "/trial/InfoProto";
            _this9.reqData = null;
            return _this9;
          }

          return TrialInfoReq;
        }(ConnectionDataStruct.ProtocolData);

        _ManagerDataStructure.TrialInfoReq = TrialInfoReq;

        var TrialSignUpReq = /*#__PURE__*/function (_ConnectionDataStruct10) {
          _inheritsLoose(TrialSignUpReq, _ConnectionDataStruct10);

          function TrialSignUpReq() {
            var _this10;

            _this10 = _ConnectionDataStruct10.call(this) || this;
            _this10.type = ConnectionDataStruct.ErrorHandleType.Ignore;
            _this10.method = ConnectionDataStruct.RequestMethod.Post;
            _this10.url = "/trial/SignUpProto";
            _this10.reqData = null;
            return _this10;
          }

          return TrialSignUpReq;
        }(ConnectionDataStruct.ProtocolData);

        _ManagerDataStructure.TrialSignUpReq = TrialSignUpReq;

        var TrialGiveUpReq = /*#__PURE__*/function (_ConnectionDataStruct11) {
          _inheritsLoose(TrialGiveUpReq, _ConnectionDataStruct11);

          function TrialGiveUpReq() {
            var _this11;

            _this11 = _ConnectionDataStruct11.call(this) || this;
            _this11.type = ConnectionDataStruct.ErrorHandleType.Ignore;
            _this11.method = ConnectionDataStruct.RequestMethod.Post;
            _this11.url = "/trial/GiveUpProto";
            _this11.reqData = null;
            return _this11;
          }

          return TrialGiveUpReq;
        }(ConnectionDataStruct.ProtocolData);

        _ManagerDataStructure.TrialGiveUpReq = TrialGiveUpReq;
      })(ManagerDataStructure || (ManagerDataStructure = exports('ManagerDataStructure', {})));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ManualComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './MsgBox.ts', './LocaleStringManager.ts', './SoundManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Sprite, tween, Animation, Component, Define, MsgBox, LocaleStringManager, SoundManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Sprite = module.Sprite;
      tween = module.tween;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      SoundManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "0c18bO40hVJB4/zzDByb8vr", "ManualComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Manual_Ani_Name = {
        Manual_Open: "Manual_Open",
        Manual_Loop: "Manual_Loop",
        Manual_Close: "Manual_Close"
      };
      var State = exports('State', {
        Open: "Open",
        Opening: "Opening",
        Close: "Close",
        Closing: "Closing"
      });
      var ManualComponent = exports('default', (_dec = ccclass("ManualComponent"), _dec2 = property({
        type: Node,
        tooltip: "特色說明按鈕(新版跑馬燈)"
      }), _dec3 = property({
        type: Node,
        tooltip: "特色說明本體(新版跑馬燈)"
      }), _dec4 = property({
        type: Node,
        tooltip: "特色說明關閉按鈕(新版跑馬燈)"
      }), _dec5 = property({
        type: Node,
        tooltip: "特色說明周圍關閉按鈕(新版跑馬燈)"
      }), _dec6 = property({
        type: Sprite,
        tooltip: "特色說明內容(新版跑馬燈)"
      }), _dec7 = property({
        type: Sprite,
        tooltip: "標題"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ManualComponent, _Component);

        function ManualComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_featureInfoBtn", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featureInfoBoard", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featureInfoCloseBtn", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featureInfoSideBtn", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_featureInfoTxt", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_titleSprite", _descriptor6, _assertThisInitialized(_this));

          _this.m_manulState = State.Close;
          _this.m_manulOpenLock = false;
          return _this;
        }

        var _proto = ManualComponent.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          if (this.m_featureInfoBtn) {
            this.m_featureInfoBtn.on(Node.EventType.TOUCH_END, function () {
              _this2.OpenManul();

              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
            });
          }

          if (this.m_featureInfoCloseBtn) {
            this.m_featureInfoCloseBtn.on(Node.EventType.TOUCH_END, function () {
              _this2.CloseManul();

              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
            });
          }

          if (this.m_featureInfoSideBtn) {
            this.m_featureInfoSideBtn.on(Node.EventType.TOUCH_END, function () {
              _this2.CloseManul();
            });
          }
        };

        _proto.OpenManul = function OpenManul() {
          var _this3 = this;

          if (this.m_manulOpenLock) {
            MsgBox.getInstance().ShowMessageBox(Define.StringKey.FREEWINCASH_PLAYING1);
          } else if (this.m_manulState == State.Close) {
            this.m_featureInfoBoard.active = true;
            tween(this.m_featureInfoBoard).call(function () {
              _this3.m_manulState = State.Opening;

              _this3.m_featureInfoBoard.getComponentInChildren(Animation).play(Manual_Ani_Name.Manual_Open);
            }).delay(0.5).call(function () {
              _this3.m_manulState = State.Open;
            }).start();
          }
        };

        _proto.CloseManul = function CloseManul() {
          var _this4 = this;

          if (this.m_manulState == State.Open) {
            tween(this.m_featureInfoBoard).call(function () {
              _this4.m_manulState = State.Closing;

              _this4.m_featureInfoBoard.getComponentInChildren(Animation).play(Manual_Ani_Name.Manual_Close);
            }).delay(0.5).call(function () {
              _this4.m_manulState = State.Close;
              _this4.m_featureInfoBoard.active = false;
            }).start();
          }
        };

        _proto.SetTxt = function SetTxt(spriteName, titleName) {
          if (titleName === void 0) {
            titleName = null;
          }

          var spriteAtlas = LocaleStringManager.GetInstance().GetGameAtlas();

          for (var i = 0; i < this.m_featureInfoTxt.length; i++) {
            var text = spriteAtlas.getSpriteFrame(spriteName[i]);

            if (text) {
              this.m_featureInfoTxt[i].spriteFrame = spriteAtlas.getSpriteFrame(spriteName[i]);
            }
          }

          if (this.m_titleSprite && titleName) {
            this.m_titleSprite.spriteFrame = spriteAtlas.getSpriteFrame(titleName);
          }
        };

        _createClass(ManualComponent, [{
          key: "FeatureInfoBtn",
          get: function get() {
            return this.m_featureInfoBtn;
          }
          /**@ch 新版跑馬燈大顆Node */

        }, {
          key: "ManulState",
          get: function get() {
            return this.m_manulState;
          }
        }, {
          key: "ManulOpenLock",
          get: function get() {
            return this.m_manulOpenLock;
          },
          set: function set(b) {
            this.m_manulOpenLock = b;
          }
        }]);

        return ManualComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_featureInfoBtn", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_featureInfoBoard", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_featureInfoCloseBtn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_featureInfoSideBtn", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_featureInfoTxt", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_titleSprite", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MarqueeComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, UITransform, Node, v2, Sprite, Component, v3, tween, Define, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      Node = module.Node;
      v2 = module.v2;
      Sprite = module.Sprite;
      Component = module.Component;
      v3 = module.v3;
      tween = module.tween;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "1d950BFoN5LhJJ79uyt+/E+", "MarqueeComponent", undefined);
      /**
       * 此節點錨點須為( 0, 0.5 )，Mask要設定好
       */


      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MarqueeComponent = exports('default', (_dec = property({
        type: Number,
        tooltip: "每秒的位移量"
      }), _dec2 = property({
        type: Number,
        tooltip: "循環播放的間隔"
      }), _dec3 = property({
        type: Number,
        tooltip: "未超出的停留時間"
      }), _dec4 = property({
        type: Number,
        tooltip: "超出時的停留時間"
      }), _dec5 = property({
        type: Number,
        tooltip: "尾部保留的空間"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MarqueeComponent, _Component);

        function MarqueeComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_moveSpeed", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_delayTime", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_waitTime", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_moveDelayTime", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tailLeftSpace", _descriptor5, _assertThisInitialized(_this));

          _this.m_imgs = null;
          _this.m_viewWidth = null;
          _this.m_stringSprite = null;
          _this.m_isStart = false;
          _this.m_isStop = false;
          _this.m_scale = 1;
          _this.m_imgIndex = -1;
          return _this;
        }

        var _proto = MarqueeComponent.prototype;

        _proto.Init = function Init(imgs) {
          this.m_imgs = imgs;
          this.m_viewWidth = this.node.getComponent(UITransform).contentSize.width; //檢查文字顯示節點

          var stringNode = this.node.children[0];

          if (!stringNode) {
            stringNode = new Node();
            stringNode.addComponent(UITransform);
            this.node.addChild(stringNode);
          }

          stringNode.getComponent(UITransform).setAnchorPoint(v2(0, 0.5));
          this.m_scale = stringNode.scale.x;
          this.m_stringSprite = stringNode.getComponent(Sprite);

          if (!this.m_stringSprite) {
            this.m_stringSprite = stringNode.addComponent(Sprite);
          }

          this.m_stringSprite.type = Sprite.Type.SIMPLE;
          this.m_stringSprite.sizeMode = Sprite.SizeMode.TRIMMED;
        }
        /**
         * 顯示一次跑馬燈
         */
        ;

        _proto.ShowOnce = /*#__PURE__*/function () {
          var _ShowOnce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(isByOrder) {
            var spriteFrame, width, moveLength, moveTime, dif;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (isByOrder === void 0) {
                      isByOrder = false;
                    }

                    if (!this.m_isStart) {
                      _context.next = 3;
                      break;
                    }

                    return _context.abrupt("return");

                  case 3:
                    this.m_isStart = true;

                    if (isByOrder) {
                      this.m_imgIndex++;

                      if (this.m_imgIndex >= this.m_imgs.length) {
                        this.m_imgIndex = 0;
                      }

                      spriteFrame = this.m_imgs[this.m_imgIndex];
                    } else {
                      spriteFrame = this.m_imgs[Math.floor(Math.random() * this.m_imgs.length)];
                    }

                    this.m_stringSprite.spriteFrame = spriteFrame; // let width = Tools.times( this.m_stringSprite.spriteFrame.getRect().width + this.m_tailLeftSpace, this.m_scale );

                    width = Tools.times(this.m_stringSprite.spriteFrame.rect.width + this.m_tailLeftSpace, this.m_scale);
                    this.m_stringSprite.node.active = true;

                    if (!(width > this.m_viewWidth)) {
                      _context.next = 19;
                      break;
                    }

                    this.m_stringSprite.node.position = v3(0, 0);
                    _context.next = 12;
                    return Define.Wait(this, this.m_moveDelayTime);

                  case 12:
                    moveLength = width + this.m_viewWidth;
                    moveTime = Tools.divide(moveLength, this.m_moveSpeed);
                    tween(this.m_stringSprite.node).to(moveTime, {
                      position: v3(-width, 0)
                    }).start();
                    _context.next = 17;
                    return Define.Wait(this, moveTime);

                  case 17:
                    _context.next = 23;
                    break;

                  case 19:
                    dif = Tools.minus(this.m_viewWidth, width);
                    this.m_stringSprite.node.position = v3(Tools.divide(dif, 2), 0);
                    _context.next = 23;
                    return Define.Wait(this, this.m_waitTime);

                  case 23:
                    this.m_stringSprite.node.active = false;
                    this.m_isStart = false;

                  case 25:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function ShowOnce(_x) {
            return _ShowOnce.apply(this, arguments);
          }

          return ShowOnce;
        }()
        /**
         * 永久播放
         * @param isByOrder 是否依序顯示
         */
        ;

        _proto.ShowForever = /*#__PURE__*/function () {
          var _ShowForever = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(isByOrder) {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    if (isByOrder === void 0) {
                      isByOrder = false;
                    }

                  case 1:
                    if (this.m_isStop) {
                      _context2.next = 9;
                      break;
                    }

                    _context2.next = 4;
                    return this.ShowOnce(isByOrder);

                  case 4:
                    if (!(this.m_delayTime && this.m_delayTime > 0)) {
                      _context2.next = 7;
                      break;
                    }

                    _context2.next = 7;
                    return Define.Wait(this, this.m_delayTime);

                  case 7:
                    _context2.next = 1;
                    break;

                  case 9:
                    this.m_isStop = false;

                  case 10:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function ShowForever(_x2) {
            return _ShowForever.apply(this, arguments);
          }

          return ShowForever;
        }()
        /**
         * 暫停播放
         */
        ;

        _proto.Stop = function Stop() {
          this.m_isStop = true;
        }
        /**
         * 調整跑馬燈時間設定
         */
        ;

        _proto.ChangeTimeSetting = function ChangeTimeSetting(moveSpeed, delayTime, waitTime, moveDelayTime, tailLeftSpace) {
          this.m_moveSpeed = moveSpeed;
          this.m_delayTime = delayTime;
          this.m_waitTime = waitTime;
          this.m_moveDelayTime = moveDelayTime;
          this.m_tailLeftSpace = tailLeftSpace;
        };

        return MarqueeComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_moveSpeed", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_delayTime", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_waitTime", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_moveDelayTime", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_tailLeftSpace", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MayLike.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LocaleStringManager.ts', './Define.ts', './LifeSocket.ts', './ViewTemplate.ts', './IconTemplate.ts', './BottombarManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Node, Label, Button, Prefab, instantiate, LocaleStringManager, Define, LifeSocket, ViewTemplate, IconTemplate, BigFavorUser;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Node = module.Node;
      Label = module.Label;
      Button = module.Button;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      ViewTemplate = module.default;
    }, function (module) {
      IconTemplate = module.default;
    }, function (module) {
      BigFavorUser = module.BigFavorUser;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "fecc9YHNjxChJ0WwNxAJeWh", "MayLike", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MayLike = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "標題圖"
      }), _dec2 = property({
        type: Node,
        tooltip: "放icon的位置"
      }), _dec3 = property({
        type: Label,
        tooltip: "提示文字"
      }), _dec4 = property({
        type: Button,
        tooltip: "關閉按鈕"
      }), _dec5 = property({
        type: Button,
        tooltip: "關閉按鈕bg"
      }), _dec6 = property({
        type: Prefab,
        tooltip: "icon樣版"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_ViewTemplate) {
        _inheritsLoose(MayLike, _ViewTemplate);

        function MayLike() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _ViewTemplate.call.apply(_ViewTemplate, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_titleSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_iconViewNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_hintLabel", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_closeBtn", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_bgCloseBtn", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_iconPrefab", _descriptor6, _assertThisInitialized(_this));

          _this.m_bottomBar = null;
          _this.m_discount = null;
          _this.m_isClose = false;
          _this.m_info = null;
          _this.m_iconNodes = new Array();
          return _this;
        }

        var _proto = MayLike.prototype; // onLoad () {}

        _proto.start = function start() {
          var _this2 = this;

          this.m_closeBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this2.m_currentTouchName == null && _this2.m_closeBtn.interactable) {
              _this2.m_currentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this2.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_closeBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this2.m_currentTouchName == event.target.name) {
              _this2.m_currentTouchName = null;
            }
          });
          this.m_closeBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            if (_this2.m_currentTouchName != event.target.name) {
              return;
            }

            _this2.m_currentTouchName = null;

            if (_this2.m_closeBtn.interactable && _this2.m_discount) {
              _this2.Hide();
            }
          });
          this.m_bgCloseBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this2.m_currentTouchName == null && _this2.m_bgCloseBtn.interactable) {
              _this2.m_currentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this2.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_bgCloseBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this2.m_currentTouchName == event.target.name) {
              _this2.m_currentTouchName = null;
            }
          });
          this.m_bgCloseBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            if (_this2.m_currentTouchName != event.target.name) {
              return;
            }

            _this2.m_currentTouchName = null;

            if (_this2.m_bgCloseBtn.interactable && _this2.m_discount) {
              _this2.Hide();
            }
          });
        };

        _proto.Init = function Init(bottombar, discount) {
          var _this3 = this;

          this.m_bottomBar = bottombar;
          this.m_discount = discount;

          LifeSocket.GetInstance().MayLikeCb = function (info) {
            _this3.OnRecvInfo(info);
          };

          this.ReqInfo();
        };

        _proto.SetTxt = function SetTxt() {
          if (this.m_hintLabel) {
            this.m_hintLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RECOMMEND_HINT);

            if (!this.m_hintLabel.font) {
              this.m_hintLabel.font = Define.DefaultFont;
            }
          }

          if (this.m_titleSprite) {
            var spriteAtlas = LocaleStringManager.GetInstance().GetCommonAtlas();
            var lang = LocaleStringManager.CurrLang;
            this.m_titleSprite.spriteFrame = spriteAtlas.getSpriteFrame("suggestions_" + lang);
          }
        };

        _proto.ReqInfo = function ReqInfo() {
          LifeSocket.GetInstance().ReqMayLike();
        };

        _proto.Show = function Show() {
          //只顯示一次
          if (this.m_isClose) {
            return;
          }

          this.node.active = true;
          this.m_bottomBar.SetFavorBtnVisible(false, BigFavorUser.MayLike);
        };

        _proto.Hide = function Hide() {
          this.m_isClose = true;
          this.node.active = false;
          this.m_bottomBar.SetFavorBtnVisible(false, BigFavorUser.MayLike);
        } //收到的資訊處理
        ;

        _proto.OnRecvInfo = function OnRecvInfo(info) {
          var _this4 = this;

          if (!info.Enabled || this.m_isClose) {
            this.Hide();
            return;
          }

          this.m_info = info;
          var icons = this.m_discount.Icons;
          var tags = this.m_discount.Tags;
          var isLose = false;
          var length = this.m_info.Games.length > 3 ? 3 : this.m_info.Games.length;

          for (var i = 0; i < length; i++) {
            var gameId = info.Games[i];

            if (!icons[gameId]) {
              isLose = true;
              this.m_discount.LoadIcon(gameId, function () {
                _this4.CheckIconsAndTags();
              });
            }
          }

          for (var _i = 1; _i < Object.keys(Define.TagType).length; _i++) {
            if (this.m_discount.Tags[_i] !== Define.TagType.None && !this.m_discount.Tags[_i]) {
              var name = Define.TagName[_i];
              this.m_discount.LoadTag(name, _i, function () {
                _this4.CheckIconsAndTags();
              });
            }
          }

          if (!isLose) {
            this.SetIconsAndTags();
          }
        };

        _proto.CheckIconsAndTags = function CheckIconsAndTags() {
          if (!this.m_info) {
            return;
          }

          var isLose = false;
          var icons = this.m_discount.Icons;
          var length = this.m_info.Games.length > 3 ? 3 : this.m_info.Games.length;

          for (var i = 0; i < length; i++) {
            var gameId = this.m_info.Games[i];

            if (!icons[gameId]) {
              isLose = true;
              break;
            }
          } //所有tag都有


          for (var _i2 = 1; _i2 < Object.keys(Define.TagType).length; _i2++) {
            if (!this.m_discount.Tags[_i2]) {
              isLose = true;
              break;
            }
          }

          if (!isLose) {
            this.SetIconsAndTags();
          }
        };

        _proto.SetIconsAndTags = function SetIconsAndTags() {
          var _this5 = this;

          var icons = this.m_discount.Icons;
          var tags = this.m_discount.Tags; //調整node數量

          if (this.m_iconNodes.length > this.m_info.Games.length) {
            for (var i = 0; i < this.m_iconNodes.length; i++) {
              if (i < this.m_info.Games.length) {
                this.m_iconNodes[i].active = true;
              } else {
                this.m_iconNodes[i].active = false;
              }
            }
          } else if (this.m_iconNodes.length < this.m_info.Games.length) {
            var dif = this.m_info.Games.length - this.m_iconNodes.length;

            for (var _i3 = 0; _i3 < dif; _i3++) {
              var node = instantiate(this.m_iconPrefab);
              this.m_iconViewNode.addChild(node);
              this.m_iconNodes.push(node);
            }
          }

          for (var _i4 = 0; _i4 < this.m_iconNodes.length; _i4++) {
            var _node = this.m_iconNodes[_i4];

            var icon = _node.getComponent(IconTemplate);

            var tag = this.m_info.Labels[_i4];
            icon.Init(this, this.m_discount.GameId);
            icon.SetIsFavor(false, false);
            icon.SetCb(Define.BTN_CLICK_EVENT.LIKE_CHANGE_GAME, function (gameId) {
              _this5.m_discount.AddFavor(gameId, Define.BTN_CLICK_EVENT.RECOM_FAVOR_ADD);
            }, function (gameId) {
              _this5.m_discount.RemoveFavor(gameId, Define.BTN_CLICK_EVENT.RECOM_FAVOR_REMOVE);
            });
            icon.SetIconSpriteFrame(icons[this.m_info.Games[_i4]], this.m_info.Games[_i4]);

            if (tag === Define.TagType.None) {
              icon.SetTagSpriteFrame(null);
            } else {
              var tagSpirteFrames = [];
              tagSpirteFrames.push(tags[tag]);
              icon.SetTagSpriteFrame(tagSpirteFrames);
            }

            if (_i4 === 0) {
              icon.ShowIconHint();
            }
          }

          this.m_bottomBar.SetFavorBtnVisible(true, BigFavorUser.MayLike);
        } // update (dt) {}
        ;

        return MayLike;
      }(ViewTemplate), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_titleSprite", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_iconViewNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_hintLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_closeBtn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_bgCloseBtn", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_iconPrefab", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Mechanism.ts", ['cc', './Tools.ts'], function (exports) {
  'use strict';

  var cclegacy, error, Tools;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      error = module.error;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "76a07KBTgtNwbGJSPP+M8YW", "Mechanism", undefined);
      /**
       * 
       * Created by HuiRu on 2018/10/17.
       */


      var Mechanism = exports('default', /*#__PURE__*/function () {
        function Mechanism(gameName) {
          this.m_gameName = void 0;
          this.m_gameName = gameName;
        }

        var _proto = Mechanism.prototype;

        _proto.SaveAutoplayData = function SaveAutoplayData() {// SetCookie(cookieName:string, dataStr:string, expires:Date = undefined):string{
        };

        _proto.GetAutoplayData = function GetAutoplayData() {// Tools.GetCookie(this.m_gameName + Mechanism.SAVE_KEY.AUTOPLAY_A);
        };

        _proto.SaveBetData = function SaveBetData(betvalue) {
          Tools.SetCookie(this.m_gameName + Mechanism.SAVE_KEY.BET, betvalue.toString());
          error("SAVE OK", betvalue.toString());
        };

        _proto.GetBetData = function GetBetData(betVec) {
          var resIndex = 0;
          var lastbet = Number(Tools.GetCookie(this.m_gameName + Mechanism.SAVE_KEY.BET));

          if (lastbet == undefined || lastbet == null || lastbet == NaN || lastbet < 0) {
            lastbet = 0;
          }

          error(lastbet);
          var betVecLen = betVec.length;

          for (var i = 0; i < betVecLen; i++) {
            if (betVec[i] <= lastbet) {
              resIndex = i;
            }
          }

          return resIndex;
        };

        return Mechanism;
      }());
      Mechanism.SAVE_KEY = {
        AUTOPLAY_A: "_AUTOPLAY_A",
        BET: "_BET"
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MHBBtn.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './SoundManager.ts', './MHBManager.ts', './MHBMarquee.ts', './MHBRollingValue.ts', './Tools.ts', './LifeSocket.ts', './IconBox.ts', './LocaleStringManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Node, RichText, tween, js, Component, Define, SoundManager, MHBManager, MHBMarquee, MHBRollingValue, Tools, LifeSocket, IconUpdates, LocaleStringManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Node = module.Node;
      RichText = module.RichText;
      tween = module.tween;
      js = module.js;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      MHBManager = module.default;
    }, function (module) {
      MHBMarquee = module.default;
    }, function (module) {
      MHBRollingValue = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      IconUpdates = module.IconUpdates;
    }, function (module) {
      LocaleStringManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "5cd08Th/RNFY7qLhlTH7awt", "MHBBtn", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GetInfoTime = 30;
      var TxtName;

      (function (TxtName) {
        TxtName["MHB"] = "Txt_MusthitbyBtn";
      })(TxtName || (TxtName = {}));

      var MHBBtn = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "按鈕滿額必開圖字"
      }), _dec2 = property({
        type: MHBRollingValue,
        tooltip: "按鈕現在累計獎金"
      }), _dec3 = property({
        type: MHBMarquee,
        tooltip: "跑馬燈"
      }), _dec4 = property({
        type: Node,
        tooltip: "押注提示"
      }), _dec5 = property({
        type: RichText,
        tooltip: "押注提示文字"
      }), _dec6 = property({
        type: Node,
        tooltip: "解鎖提示"
      }), _dec7 = property({
        type: RichText,
        tooltip: "解鎖提示文字"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MHBBtn, _Component);

        function MHBBtn() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_MHBTxt", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_currentValue", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_marquee", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betHint", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_betHintTxt", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_unlockHint", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_unlockHintTxt", _descriptor7, _assertThisInitialized(_this));

          _this.m_bottomBar = null;
          _this.m_iconBox = null;
          _this.m_prizeValue = 0;
          _this.m_isInit = false;
          _this.m_mhbDesc = null;
          _this.m_isFirst = true;
          _this.m_infoCB = void 0;
          _this.m_infoAllCB = void 0;
          _this.m_list = null;
          _this.m_minVip = 0;
          _this.m_minBet = 0;
          _this.m_descTxtSet = false;
          _this.m_nowBet = 0;
          _this.m_showingHint = false;
          _this.m_hintPerformance = null;
          return _this;
        }

        var _proto = MHBBtn.prototype;

        _proto.update = function update(dt) {
          // this.AddMarquee();
          // if ( this.m_mhbDesc )
          // {
          //     this.m_mhbDesc.SetCoin( this.m_currentValue.NowValue, this.m_prizeValue );
          // }
          if (!Tools.IsTadaCasino) {
            this.UpdateSelf();
          }
        };

        _proto.UpdateSelf = function UpdateSelf() {
          this.AddMarquee();

          if (this.m_mhbDesc) {
            this.m_mhbDesc.SetCoin(this.m_currentValue.NowValue, this.m_prizeValue);
          }

          var bet = this.m_bottomBar ? this.m_bottomBar.GetNowBetValue() : 0;
          var hint = this.CheckShowHint(bet);

          if (this.m_betHint && hint >= 0) {
            this.ShowHint(hint);
          }

          this.m_nowBet = bet;
        };

        _proto.Init = function Init(mhbDesc, bottomBar, infoCB, infoAllCB) {
          if (this.m_isInit) {
            return;
          }

          this.m_isInit = true;
          this.m_bottomBar = bottomBar;
          this.m_mhbDesc = mhbDesc;
          this.m_infoCB = infoCB;
          this.m_infoAllCB = infoAllCB;
          this.SetInfo();

          if (this.m_marquee) {
            this.m_marquee.node.active = false;
          }

          this.SetInfoSchedule();
        };

        _proto.CheckShowHint = function CheckShowHint(bet) {
          // console.error( '✚✚✚✚✚CheckShowHint', bet, this.m_nowBet, this.m_minBet )
          if (bet < this.m_minBet && this.m_nowBet >= this.m_minBet) {
            return 1;
          } else if (bet >= this.m_minBet && this.m_nowBet < this.m_minBet) {
            return 0;
          }

          return -1;
        }
        /** 彈出式提示
         * @param type 0:unlock 1:bet 
         */
        ;

        _proto.ShowHint = function ShowHint(type) {
          var _this2 = this;

          if (Tools.IsTadaCasino && this.m_iconBox) {
            if (this.m_hintPerformance) {
              this.m_hintPerformance.stop();
              this.m_hintPerformance = null;
            }

            this.m_betHint.active = false;
            this.m_unlockHint.active = false;
            var hint;

            switch (type) {
              case 0:
                hint = this.m_unlockHint;
                break;

              case 1:
                hint = this.m_betHint;
                break;
            }

            this.m_hintPerformance = tween(this.m_iconBox.node).call(function () {
              _this2.m_showingHint = true;

              _this2.m_iconBox.OpenMenu();
            }).delay(0.2).call(function () {
              hint.active = true;
            }).delay(2).call(function () {
              hint.active = false;
              _this2.m_showingHint = false;
              _this2.m_hintPerformance = null;
            }).start();
          }
        };

        _proto.SetIconBoxUpdate = function SetIconBoxUpdate(iconBox) {
          var _this3 = this;

          this.m_iconBox = iconBox;

          var cb = function cb(dt) {
            _this3.UpdateSelf();
          };

          this.m_iconBox.SetUpdateFuns(IconUpdates.MHBBtn, cb);
        };

        _proto.SetInfoSchedule = function SetInfoSchedule(isRun) {
          var _this4 = this;

          if (isRun === void 0) {
            isRun = true;
          }

          var info = function info() {
            _this4.SetInfo();
          };

          isRun ? this.schedule(info, GetInfoTime) : this.unschedule(info);
        };

        _proto.SetInfo = function SetInfo() {
          var _this5 = this;

          if (LifeSocket.GetInstance().IsClose) {
            this.SetInfoSchedule(false);
            return;
          }

          if (this.m_infoCB) {
            this.m_infoCB(function (info) {
              MHBManager.GetInstance().MustHitByInfo = info;

              if (info.value >= 0 && info.full > 0) {
                MHBManager.GetInstance().MustHitByShow();
              } else {
                MHBManager.GetInstance().MustHitByShow(true);
                return;
              }

              if (info) {
                _this5.m_currentValue.FinalValue = info.value;
                _this5.m_prizeValue = info.full;
                _this5.m_minVip = info.minvip;
                _this5.m_minBet = info.minbet;
                _this5.m_minBet = Tools.strip(Tools.times(_this5.m_minBet, MHBManager.GetInstance().GetRatio()));

                if (_this5.m_betHintTxt) {
                  var num = "<color=#b73538>" + _this5.m_minBet.toString() + "</c>";
                  var txt = js.formatStr("<color=#ff7b00>BET %s\nto unlock</c>", num);
                  _this5.m_betHintTxt.string = txt;
                }

                if (_this5.m_mhbDesc && !_this5.m_descTxtSet) {
                  _this5.m_mhbDesc.SetTxt(_this5.m_minVip.toString(), _this5.m_minBet.toString());

                  _this5.m_descTxtSet = true;
                }
              }
            });
          }

          if (this.m_infoAllCB) {
            this.m_infoAllCB(function (list) {
              if (list && _this5.m_mhbDesc) {
                _this5.m_list = list;

                if (_this5.m_list) {
                  _this5.m_mhbDesc.ActiveMHB(_this5.m_list.length > 0);

                  if (_this5.m_isFirst) {
                    _this5.m_mhbDesc.SetOtherGameView(list);

                    _this5.m_isFirst = false;
                  } else {
                    _this5.m_mhbDesc.SetOtherGameFinalValue(list);
                  }
                }
              }
            });
          }
        } // CloseBanner()
        // {
        //     if ( this.m_banner )
        //     {
        //         this.m_banner.CloseBanner();
        //     }
        // }
        // ShowJPAward( info: serverProto.serverProto.JpOpen, jpResultCB: Function )
        // {
        //     if ( this.m_banner )
        //     {
        //         this.m_banner.ShowJPAward( info, jpResultCB );
        //     }
        // }
        ;

        _proto.ShowMHBAward = function ShowMHBAward(mhbResultCB) {
          if (mhbResultCB) {
            mhbResultCB();
          }
        } // StopJPAward()
        // {
        //     if ( this.m_banner )
        //     {
        //         this.m_banner.StopJPAward();
        //     }
        // }
        // ResumeRolling()
        // {
        //     if ( this.m_banner )
        //     {
        //         this.m_banner.ResumeRolling();
        //     }
        // }
        ;

        _proto.SetTxt = function SetTxt() {
          // this.m_MHBTxt.spriteFrame = this.m_MHBSprite;
          if (MHBManager.GetInstance().MHBAtlas) {
            var altas = MHBManager.GetInstance().MHBAtlas;
            this.m_MHBTxt.spriteFrame = altas.getSpriteFrame(TxtName.MHB);
          }

          if (this.m_marquee) {
            this.m_marquee.SetTxt();
          }

          if (this.m_unlockHintTxt) {
            var txt = "<color=#ff7b00>" + LocaleStringManager.GetInstance().GetString(Define.StringKey.UNLOCK) + "</c>";
            this.m_unlockHintTxt.string = txt;
          }
        };

        _proto.TouchEnd = function TouchEnd() {
          // if ( this.m_banner )
          // {
          //     if ( this.m_banner.node.opacity >= 255 )
          //     {
          //         this.m_banner.CloseBanner();
          //     }
          //     else
          //     {
          //         this.m_banner.OpenBanner();
          //     }
          // }
          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN); // ConnectionManager.getInstance().SendBtnClickEvent(
          //     ConnectionManager.FormBtnClickParams(
          //         Number( Define.AID ),
          //         Number( Define.API_ID ),
          //         Number( Define.NOW_GAME_ID ),
          //         Define.GAME_VERSION,
          //         Define.BTN_CLICK_EVENT.VOLATILITY
          //     )
          // )
        };

        _proto.SetMarqueeInfo = function SetMarqueeInfo(info) {
          if (info) {
            if (this.m_marquee) {
              this.m_marquee.SetInfo(info);
            }
          }
        };

        _proto.ResumeRolling = function ResumeRolling() {
          this.m_currentValue.IsRolling = true;
        };

        _proto.SetMarqueeUnLock = function SetMarqueeUnLock() {
          this.m_marquee.UnLock = true;
        };

        _proto.AddMarquee = function AddMarquee() {
          if (this.m_marquee) {
            this.m_marquee.AddMarquee();
          }
        };

        _createClass(MHBBtn, [{
          key: "GameList",
          get: function get() {
            return this.m_list;
          }
        }]);

        return MHBBtn;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_MHBTxt", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_currentValue", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_marquee", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_betHint", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_betHintTxt", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_unlockHint", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_unlockHintTxt", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MHBDataStructure.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('MHBDataStructure', void 0);

      cclegacy._RF.push({}, "56c53rbJp5CLK+mKmBJlGku", "MHBDataStructure", undefined);

      var MHBDataStructure;

      (function (_MHBDataStructure) {
        var MHBInfo = function MHBInfo() {
          this.value = 0;
          this.full = 0;
          this.minvip = 0;
          this.minbet = 0;
        };

        _MHBDataStructure.MHBInfo = MHBInfo;

        var MHBInfoAll = function MHBInfoAll() {
          this.gameid = 0;
          this.value = 0;
          this.full = 0;
        };

        _MHBDataStructure.MHBInfoAll = MHBInfoAll;

        var MHBHistoryInfo = function MHBHistoryInfo() {
          this.winner = "";
          this.nickname = "";
          this.win = 0;
          this.time = 0;
        };

        _MHBDataStructure.MHBHistoryInfo = MHBHistoryInfo;
      })(MHBDataStructure || (MHBDataStructure = exports('MHBDataStructure', {})));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MHBDesc.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './SoundManager.ts', './Tools.ts', './MHBItem.ts', './MHBManager.ts', './MHBRollingValue.ts', './MHBOtherGameView.ts', './MHBInfo.ts', './ExtraManager.ts', './Discount.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Animation, Prefab, Label, Sprite, RichText, SpriteFrame, Button, js, instantiate, error, Component, Define, LocaleStringManager, SoundManager, Tools, MHBItem, MHBManager, MHBRollingValue, MHBOtherGameView, ItemInfo, ExtraManager, PageName;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Animation = module.Animation;
      Prefab = module.Prefab;
      Label = module.Label;
      Sprite = module.Sprite;
      RichText = module.RichText;
      SpriteFrame = module.SpriteFrame;
      Button = module.Button;
      js = module.js;
      instantiate = module.instantiate;
      error = module.error;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      MHBItem = module.default;
    }, function (module) {
      MHBManager = module.default;
    }, function (module) {
      MHBRollingValue = module.default;
    }, function (module) {
      MHBOtherGameView = module.default;
    }, function (module) {
      ItemInfo = module.default;
    }, function (module) {
      ExtraManager = module.default;
    }, function (module) {
      PageName = module.PageName;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _descriptor36, _descriptor37;

      cclegacy._RF.push({}, "13941Pl1JRHgYSI0AMoqY04", "MHBDesc", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TxtName;

      (function (TxtName) {
        TxtName["full"] = "Txt_Musthitby";
        TxtName["current"] = "Txt_CurrentJP";
      })(TxtName || (TxtName = {}));

      var TabName = ["MustHitBy_MHB", "MustHitBy_Popular"];
      var MhbHistoryInfo = exports('MhbHistoryInfo', function MhbHistoryInfo() {
        this.winner = "";
        this.win = 0;
        this.date = 0;
      });
      var MHBDesc = exports('default', (_dec = property({
        type: Node,
        tooltip: "Logo"
      }), _dec2 = property({
        type: Node,
        tooltip: "Other Logo"
      }), _dec3 = property({
        type: Node,
        tooltip: "TaDa Casino"
      }), _dec4 = property({
        type: Node,
        tooltip: "中獎表單item的layout"
      }), _dec5 = property({
        type: Node,
        tooltip: "中獎表單mask"
      }), _dec6 = property({
        type: Animation,
        tooltip: "中獎頁面"
      }), _dec7 = property({
        type: Prefab,
        tooltip: "中獎表單item的prefab"
      }), _dec8 = property({
        type: Label,
        tooltip: "中獎表單說明敘述"
      }), _dec9 = property({
        type: Label,
        tooltip: "中獎表單說明敘述"
      }), _dec10 = property({
        type: Label,
        tooltip: "中獎標題"
      }), _dec11 = property({
        type: Sprite,
        tooltip: "中獎標題"
      }), _dec12 = property({
        type: Label,
        tooltip: "中獎表單得獎名單標題"
      }), _dec13 = property({
        type: Sprite,
        tooltip: "中獎表單得獎名單標題"
      }), _dec14 = property({
        type: Label,
        tooltip: "中獎表單中獎類型標題"
      }), _dec15 = property({
        type: Label,
        tooltip: "中獎表單中獎得主標題"
      }), _dec16 = property({
        type: Label,
        tooltip: "中獎表單中獎金額標題"
      }), _dec17 = property({
        type: Node,
        tooltip: "中獎表單關閉按鈕"
      }), _dec18 = property({
        type: Sprite,
        tooltip: "中獎表單金額標題"
      }), _dec19 = property({
        type: Sprite,
        tooltip: "中獎表單目前累計金額標題"
      }), _dec20 = property({
        type: MHBRollingValue,
        tooltip: "中獎表單滿額金額"
      }), _dec21 = property({
        type: MHBRollingValue,
        tooltip: "中獎表單目前累計金額"
      }), _dec22 = property({
        type: Node,
        tooltip: "中獎表單滿額金額鎖"
      }), _dec23 = property({
        type: RichText,
        tooltip: "中獎表單滿額金額鎖文字"
      }), _dec24 = property({
        type: Node,
        tooltip: "中獎表單loading"
      }), _dec25 = property({
        type: SpriteFrame,
        tooltip: "中獎表單金額標題字樣"
      }), _dec26 = property({
        type: SpriteFrame,
        tooltip: "中獎表單金額標題字樣"
      }), _dec27 = property({
        type: Button,
        tooltip: "中獎本遊戲頁籤鈕"
      }), _dec28 = property({
        type: Node,
        tooltip: "中獎本遊戲頁籤鈕-亮"
      }), _dec29 = property({
        type: Button,
        tooltip: "中獎其他遊戲頁籤鈕"
      }), _dec30 = property({
        type: Node,
        tooltip: "中獎其他遊戲頁籤鈕-亮"
      }), _dec31 = property({
        type: MHBOtherGameView,
        tooltip: "中獎其他遊戲頁面"
      }), _dec32 = property({
        type: Prefab,
        tooltip: "贏更多的其他遊戲"
      }), _dec33 = property({
        type: Node,
        tooltip: "說明按鈕"
      }), _dec34 = property({
        type: ItemInfo,
        tooltip: "說明"
      }), _dec35 = property({
        type: Sprite,
        tooltip: "中獎logo"
      }), _dec36 = property({
        type: Sprite,
        tooltip: "頁簽標題-暗"
      }), _dec37 = property({
        type: Sprite,
        tooltip: "頁簽標題-亮"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MHBDesc, _Component);

        function MHBDesc() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_logoNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_otherLogoNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_tadaCasinoLogoNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_mhbItemContainer", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_mask", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_thisGameAnim", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_mhbItemPrefab", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_mhbDescL", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_mhbDescS", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_title", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_titleSprite", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_titleForList", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_titleForListSprite", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_winnerTitleLabel", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_amountTitleLabel", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_dateTitleLabel", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_close", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_needTxt", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_currentTxt", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_fullValue", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_currentValue", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_valueLocks", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_valueLockTxts", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_loading", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_fullSprite", _descriptor25, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_currentSprite", _descriptor26, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_thisGameBtn", _descriptor27, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_thisGameLightNode", _descriptor28, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_otherGameBtn", _descriptor29, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_otherGameLightNode", _descriptor30, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_otherGameView", _descriptor31, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_extraOtherGamePrefab", _descriptor32, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_infoBtn", _descriptor33, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_infoPage", _descriptor34, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_logo", _descriptor35, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_darkTabTitleSprites", _descriptor36, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lightTabTitleSprites", _descriptor37, _assertThisInitialized(_this));

          _this.m_bottomBar = null;
          _this.m_mhbItemList = [];
          _this.m_isLandscape = false;
          _this.m_loadFinish = true;
          _this.m_currentTouchName = null;
          _this.m_minVip = "0";
          _this.m_minBet = "0";
          _this.m_isAddToDiscount = false;
          _this.m_extraOtherGameView = null;
          _this.m_historyCB = void 0;
          return _this;
        }

        var _proto = MHBDesc.prototype;

        _proto.Init = function Init(bottomBar, historyCB) {
          var _this2 = this;

          this.m_bottomBar = bottomBar;
          this.m_historyCB = historyCB;

          if (LocaleStringManager.GetInstance().IsGameStringLoaded() && this.m_loadFinish) {
            this.m_loadFinish = false;
            this.SetTxt();
          }

          if (this.m_infoPage) {
            this.m_infoPage.Init();
          }

          this.m_thisGameBtn.interactable = false; // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     this.m_thisGameBtn.node.getChildByName( 'Label' ).color = cc.color( 36, 30, 8 );
          // }
          // else
          // {

          this.m_thisGameLightNode.active = true; // }

          if (this.m_valueLocks[0]) {
            this.m_valueLocks[0].active = false;
            this.m_valueLocks[1].active = false;
          }

          this.m_thisGameBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this2.m_currentTouchName == null) {
              _this2.m_currentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this2.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_thisGameBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this2.m_currentTouchName == event.target.name) {
              _this2.m_currentTouchName = null;
            }
          });
          this.m_thisGameBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            if (_this2.m_currentTouchName != event.target.name) {
              return;
            }

            _this2.m_currentTouchName = null;

            if (_this2.m_thisGameAnim) {
              _this2.m_thisGameAnim.node.active = true;
            }

            _this2.m_otherGameView.node.active = false;
            _this2.m_thisGameBtn.interactable = false;
            _this2.m_otherGameBtn.interactable = true; // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     let thisGameLabel = this.m_thisGameBtn.node.getChildByName( 'Label' );
            //     thisGameLabel.color = cc.color( 36, 30, 8 );
            //     let otherGameLabel = this.m_otherGameBtn.node.getChildByName( 'Label' );
            //     otherGameLabel.color = cc.color( 208, 199, 173 );
            // }
            // else
            // {

            _this2.m_thisGameLightNode.active = true;
            _this2.m_otherGameLightNode.active = false; // }

            if (_this2.m_infoPage) {
              _this2.m_infoPage.node.active = false;
            }

            _this2.m_bottomBar.CloseCommonText();
          });
          this.m_otherGameBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this2.m_currentTouchName == null) {
              _this2.m_currentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this2.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_otherGameBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this2.m_currentTouchName == event.target.name) {
              _this2.m_currentTouchName = null;
            }
          });
          this.m_otherGameBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            if (_this2.m_currentTouchName != event.target.name) {
              return;
            }

            _this2.m_currentTouchName = null;

            if (_this2.m_thisGameAnim) {
              _this2.m_thisGameAnim.node.active = false;
            }

            _this2.m_otherGameView.node.active = true;
            _this2.m_thisGameBtn.interactable = true;
            _this2.m_otherGameBtn.interactable = false; // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     let thisGameLabel = this.m_thisGameBtn.node.getChildByName( 'Label' );
            //     thisGameLabel.color = cc.color( 208, 199, 173 );
            //     let otherGameLabel = this.m_otherGameBtn.node.getChildByName( 'Label' );
            //     otherGameLabel.color = cc.color( 36, 30, 8 );
            // }
            // else
            // {

            _this2.m_thisGameLightNode.active = false;
            _this2.m_otherGameLightNode.active = true; // }

            if (_this2.m_infoPage) {
              _this2.m_infoPage.node.active = false;
            }

            _this2.m_bottomBar.CloseCommonText();

            _this2.Rotation(_this2.m_isLandscape);
          });
          this.m_infoBtn.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this2.m_currentTouchName == null) {
              _this2.m_currentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this2.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_infoBtn.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this2.m_currentTouchName == event.target.name) {
              _this2.m_currentTouchName = null;
            }
          });
          this.m_infoBtn.on(Node.EventType.TOUCH_END, function (event) {
            if (_this2.m_currentTouchName != event.target.name) {
              return;
            }

            _this2.m_currentTouchName = null;

            if (_this2.m_infoPage) {
              _this2.m_infoPage.node.active = true;
            }

            _this2.m_bottomBar.OpenCommonText(LocaleStringManager.GetInstance().GetString(Define.StringKey.MHB_INFO_TITLE), js.formatStr(LocaleStringManager.GetInstance().GetString(Define.StringKey.MHB_DESC_TEXT_1), _this2.m_minVip, _this2.m_minBet));
          }); // this.m_logo = Tools.UsingLogoSpriteFrame();

          if (this.m_logoNode) {
            if (Tools.Line != Define.LineSetting.americas && Tools.Line != Define.LineSetting.americas_str) {
              var spriteFrame = Tools.UsingLogoSpriteFrame();

              if (spriteFrame) {
                if (Tools.OtherLogo && this.m_otherLogoNode) {
                  this.m_otherLogoNode.active = true;
                  this.m_logoNode.active = false;
                  this.m_otherLogoNode.getComponent(Sprite).spriteFrame = spriteFrame;
                } else {
                  this.m_logoNode.active = true;
                }
              } else {
                this.m_logoNode.active = false;
              }
            } else {
              //TaDa
              if (Tools.IsTadaCasino && this.m_tadaCasinoLogoNode) {
                this.m_logoNode.active = false;
                this.m_tadaCasinoLogoNode.active = true;
              }
            }
          }
        };

        _proto.ActiveMHB = function ActiveMHB(isActive) {
          var _this3 = this;

          if (isActive) {
            if (!this.m_isAddToDiscount) {
              this.m_isAddToDiscount = true;

              if (!this.m_extraOtherGameView) {
                var target = this.m_extraOtherGamePrefab ? this.m_extraOtherGamePrefab : this.m_otherGameView.node;
                var node = instantiate(target);
                this.m_extraOtherGameView = node.getComponent(MHBOtherGameView);
              }

              if (this.m_extraOtherGameView.node.parent) {
                this.m_extraOtherGameView.node.removeFromParent();
              }

              this.m_extraOtherGameView.SetTxt();
              var extraManager = this.m_bottomBar.getComponent(ExtraManager);
              extraManager.AddDiscountPage(this.m_extraOtherGameView.node, PageName.mhb, Define.StringKey.MHB_DESC_BTN_THIS, function (isLandscape) {
                _this3.m_extraOtherGameView.OnRotation(isLandscape);
              });
            }
          } else {
            if (this.m_isAddToDiscount) {
              this.m_isAddToDiscount = false;

              var _extraManager = this.m_bottomBar.getComponent(ExtraManager);

              _extraManager.RemoveDiscountPage(PageName.mhb);
            }
          }
        };

        _proto.OpenDesc = function OpenDesc() {
          var _this4 = this;

          this.node.active = true;
          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN); //重製頁面
          // this.m_otherGameView.node.active = false;
          // this.m_thisGameBtn.interactable = false;
          // this.m_otherGameBtn.interactable = true;
          // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     let thisGameLabel = this.m_thisGameBtn.node.getChildByName( 'Label' );
          //     thisGameLabel.getComponent( Label ).color = color( 36, 30, 8 );
          //     let otherGameLabel = this.m_otherGameBtn.node.getChildByName( 'Label' );
          //     otherGameLabel.getComponent( Label ).color = color( 208, 199, 173 );
          // }
          // else
          // {
          //     this.m_thisGameLightNode.active = true;
          //     this.m_otherGameLightNode.active = false;
          // }

          this.Rotation(this.m_isLandscape);

          if (this.m_historyCB) {
            // this.m_loading.active = true;
            this.m_historyCB(function (info) {
              // this.SetInfo( info );
              if (info && info.length > 0) {
                _this4.SetInfo(info); // this.m_loading.active = false;

              }
            });
          }

          var bet = this.m_bottomBar ? this.m_bottomBar.GetNowBetValue() : Number(this.m_minBet);

          if (this.m_valueLocks[0]) {
            this.m_valueLocks[0].active = bet < Number(this.m_minBet);
            this.m_valueLocks[1].active = bet < Number(this.m_minBet);
            this.m_fullValue.node.active = !(bet < Number(this.m_minBet));
            this.m_currentValue.node.active = !(bet < Number(this.m_minBet));
          }
        };

        _proto.CloseDesc = function CloseDesc() {
          SoundManager.getInstance().Play(Define.AudioClips.COMMON_CANCEL_BTN);
          this.node.active = false;

          if (this.m_infoPage) {
            this.m_infoPage.node.active = false;
          }

          this.m_bottomBar.CloseCommonText();
        };

        _proto.SetTxt = function SetTxt(minVip, minBet) {
          if (minVip === void 0) {
            minVip = "0";
          }

          if (minBet === void 0) {
            minBet = "0";
          }

          var brand = LocaleStringManager.GetInstance().GetString(Define.StringKey.BRAND_JILI);

          if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
            brand = LocaleStringManager.GetInstance().GetString(Define.StringKey.BRAND_TADA);
          }

          this.m_minVip = minVip;
          this.m_minBet = minBet;
          Tools.SetFont(this.m_mhbDescL);
          Tools.SetFont(this.m_mhbDescS);

          if (this.m_valueLockTxts[0]) {
            this.m_valueLockTxts[0].string = js.formatStr("Bet %s to unlock", this.m_minBet);
            this.m_valueLockTxts[1].string = js.formatStr("Bet %s to unlock", this.m_minBet);
          }

          Tools.SetFont(this.m_winnerTitleLabel);
          Tools.SetFont(this.m_amountTitleLabel);
          Tools.SetFont(this.m_dateTitleLabel);
          this.m_mhbDescL.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.MHB_INFO);
          this.m_mhbDescS.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.MHB_INFO);
          this.m_winnerTitleLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.MHB_WINNER_TEXT);
          this.m_amountTitleLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.MHB_AMOUNT_TEXT);
          this.m_dateTitleLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.MHB_DATE_TEXT);
          this.m_needTxt.spriteFrame = this.m_fullSprite;
          this.m_currentTxt.spriteFrame = this.m_currentSprite;

          if (MHBManager.GetInstance().MHBAtlas) {
            var atlas = MHBManager.GetInstance().MHBAtlas;
            this.m_needTxt.spriteFrame = atlas.getSpriteFrame(TxtName.full);
            this.m_currentTxt.spriteFrame = atlas.getSpriteFrame(TxtName.current); // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {

            if (this.m_titleSprite) {
              this.m_titleSprite.spriteFrame = atlas.getSpriteFrame("MustHitBy_Title");
            }

            if (this.m_titleForListSprite) {
              this.m_titleForListSprite.spriteFrame = atlas.getSpriteFrame("Jackpot_ListTitle");
            }

            for (var i = 0; i < this.m_darkTabTitleSprites.length; i++) {
              this.m_darkTabTitleSprites[i].spriteFrame = atlas.getSpriteFrame(TabName[i]);
              this.m_lightTabTitleSprites[i].spriteFrame = atlas.getSpriteFrame(TabName[i] + "_On");
            } // }

          }

          this.m_otherGameView.SetTxt();

          if (this.m_extraOtherGameView) {
            this.m_extraOtherGameView.SetTxt();
          }
        };

        _proto.SetCoin = function SetCoin(value, full) {
          this.m_currentValue.SetCoin(value);
          this.m_fullValue.SetCoin(full, true);
        };

        _proto.SetInfo = function SetInfo(mhbItem) {
          for (var i = 0; i < mhbItem.length; i++) // for ( let i = 0; i < testData.length; i++ )
          {
            var nowItem = mhbItem[i]; // let nowItem: MhbHistoryInfo = testData[ i ];

            if (this.m_mhbItemList.length > i && nowItem.win > 0) {
              var item = this.m_mhbItemList[i];
              item.Reset(); // item.SetInfo( nowItem.type, nowItem.winner, nowItem.win );

              item.SetInfo(0, nowItem.winner, nowItem.nickname, nowItem.win, nowItem.time);
            } else if (nowItem.win > 0) {
              var _item = instantiate(this.m_mhbItemPrefab).getComponent(MHBItem);

              this.m_mhbItemContainer.addChild(_item.node);
              this.m_mhbItemList.push(_item); // item.SetInfo( nowItem.type, nowItem.winner, nowItem.win );

              _item.SetInfo(0, nowItem.winner, nowItem.nickname, nowItem.win, nowItem.time);
            } else {
              error('MHB Item No.' + i + ' value error ' + nowItem.win);
            }
          }

          this.Rotation(this.m_isLandscape);
        };

        _proto.Rotation = function Rotation(isLandscape) {
          this.m_isLandscape = isLandscape; // let isAmericas = Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str;

          if (isLandscape) {
            // this.node.getComponent( cc.Animation ).play( isAmericas ? "Clip_Common_TagFrame_Landscape" : 'DescL' );
            this.node.getComponent(Animation).play("Clip_Common_TagFrame_Landscape");

            if (this.m_thisGameAnim) {
              this.m_thisGameAnim.play("Clip_MustHitBy_MHB_Page_Landscape");
            }

            if (this.m_mhbItemList.length > 0) {
              for (var i = 0; i < this.m_mhbItemList.length; i++) {
                var item = this.m_mhbItemList[i].getComponent(MHBItem); // item.node.getComponent( cc.Animation ).play( isAmericas ? "Clip_MustHitBy_MHB_Cell_Landscape" : 'MsgL' );

                item.node.getComponent(Animation).play("Clip_MustHitBy_MHB_Cell_Landscape");
              }
            }
          } else {
            // this.node.getComponent( cc.Animation ).play( isAmericas ? "Clip_Common_TagFrame_Portrait" : 'DescS' );
            this.node.getComponent(Animation).play("Clip_Common_TagFrame_Portrait");

            if (this.m_thisGameAnim) {
              this.m_thisGameAnim.play("Clip_MustHitBy_MHB_Page_Portrait");
            }

            if (this.m_mhbItemList.length > 0) {
              for (var _i = 0; _i < this.m_mhbItemList.length; _i++) {
                var _item2 = this.m_mhbItemList[_i].getComponent(MHBItem); // item.node.getComponent( cc.Animation ).play( isAmericas ? "Clip_MustHitBy_MHB_Cell_Portrait" : 'MsgS' );


                _item2.node.getComponent(Animation).play("Clip_MustHitBy_MHB_Cell_Portrait");
              }
            }
          }

          this.m_otherGameView.OnRotation(isLandscape);

          if (this.m_extraOtherGameView) {
            this.m_extraOtherGameView.OnRotation(isLandscape);
          }
        };

        _proto.SetOtherGameView = function SetOtherGameView(list) {
          this.m_otherGameView.SetIcons(list, this.m_isLandscape);

          if (this.m_extraOtherGameView) {
            this.m_extraOtherGameView.SetIcons(list, this.m_isLandscape);
          }
        };

        _proto.SetOtherGameFinalValue = function SetOtherGameFinalValue(list) {
          this.m_otherGameView.SetFinalValue(list);

          if (this.m_extraOtherGameView) {
            this.m_extraOtherGameView.SetFinalValue(list);
          }
        };

        _createClass(MHBDesc, [{
          key: "Mask",
          get: function get() {
            return this.m_mask;
          }
        }, {
          key: "Close",
          get: function get() {
            return this.m_close;
          }
        }, {
          key: "CurrentValue",
          get: function get() {
            return this.m_currentValue;
          }
        }]);

        return MHBDesc;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_logoNode", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_otherLogoNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_tadaCasinoLogoNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_mhbItemContainer", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_mask", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_thisGameAnim", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_mhbItemPrefab", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_mhbDescL", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_mhbDescS", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_title", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_titleSprite", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_titleForList", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_titleForListSprite", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_winnerTitleLabel", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_amountTitleLabel", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_dateTitleLabel", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "m_close", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "m_needTxt", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "m_currentTxt", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "m_fullValue", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "m_currentValue", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "m_valueLocks", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "m_valueLockTxts", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "m_loading", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "m_fullSprite", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "m_currentSprite", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "m_thisGameBtn", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "m_thisGameLightNode", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "m_otherGameBtn", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "m_otherGameLightNode", [_dec30], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor31 = _applyDecoratedDescriptor(_class2.prototype, "m_otherGameView", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor32 = _applyDecoratedDescriptor(_class2.prototype, "m_extraOtherGamePrefab", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor33 = _applyDecoratedDescriptor(_class2.prototype, "m_infoBtn", [_dec33], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor34 = _applyDecoratedDescriptor(_class2.prototype, "m_infoPage", [_dec34], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor35 = _applyDecoratedDescriptor(_class2.prototype, "m_logo", [_dec35], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor36 = _applyDecoratedDescriptor(_class2.prototype, "m_darkTabTitleSprites", [_dec36], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor37 = _applyDecoratedDescriptor(_class2.prototype, "m_lightTabTitleSprites", [_dec37], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MHBIconTemplate.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LifeSocket.ts', './MsgBox.ts', './Define.ts', './LocaleStringManager.ts', './Tools.ts', './MHBRollingValue.ts', './MHBManager.ts', './GameIconComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Component, LifeSocket, MsgBox, Define, LocaleStringManager, Tools, MHBRollingValue, MHBManager, GameIconComponent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      MHBRollingValue = module.default;
    }, function (module) {
      MHBManager = module.default;
    }, function (module) {
      GameIconComponent = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "0ecd10St9ZE2JOxqgYLRb7K", "MHBIconTemplate", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TxtName;

      (function (TxtName) {
        TxtName["full"] = "Txt_Musthitby3";
        TxtName["current"] = "Txt_CurrentJP2";
      })(TxtName || (TxtName = {}));

      var MHBIconTemplate = exports('default', (_dec = property({
        type: Boolean,
        tooltip: "Icon是否可以點擊"
      }), _dec2 = property({
        type: GameIconComponent,
        tooltip: "遊戲icon"
      }), _dec3 = property({
        type: MHBRollingValue,
        tooltip: "說明頁表單滿額金額"
      }), _dec4 = property({
        type: MHBRollingValue,
        tooltip: "說明頁表單目前累計金額"
      }), _dec5 = property({
        type: Sprite,
        tooltip: "說明頁表單滿額金額"
      }), _dec6 = property({
        type: Sprite,
        tooltip: "說明頁表單目前累計金額"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MHBIconTemplate, _Component);

        function MHBIconTemplate() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_iconTouchDisable", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_gameIcon", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_fullValue", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_currentValue", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_fullTxt", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_currentTxt", _descriptor6, _assertThisInitialized(_this));

          _this.m_gameId = null;
          _this.m_controller = null;
          _this.m_currentTouchName = null;
          _this.m_inGameId = 0;
          _this.m_iconEventNo = 0;
          return _this;
        }

        var _proto = MHBIconTemplate.prototype; // start()
        // {
        //     //icon
        //     if ( !this.m_iconTouchDisable )
        //     {
        //         this.m_gameIcon.node.on( Node.EventType.TOUCH_START, ( event: EventTouch ) =>
        //         {
        //             event.stopPropagationImmediate();
        //             event.stopPropagation();
        //             if ( this.m_controller )
        //             {
        //                 if ( this.m_controller.CurrentTouchName == null && this.m_gameIcon.node.active )
        //                 {
        //                     this.m_controller.CurrentTouchName = event.target.name;
        //                     // error( 'icon touch start', this.m_controller.CurrentTouchName )
        //                 }
        //                 else
        //                 {
        //                     if ( event.target && event.target.active == false )
        //                     {
        //                         this.m_controller.CurrentTouchName = event.target.name;
        //                     }
        //                 }
        //             }
        //         } );
        //         this.m_gameIcon.node.on( Node.EventType.TOUCH_CANCEL, ( event ) =>
        //         {
        //             if ( this.m_controller && this.m_controller.CurrentTouchName == event.target.name )
        //             {
        //                 this.m_controller.CurrentTouchName = null;
        //             }
        //         } );
        //         this.m_gameIcon.node.on( Node.EventType.TOUCH_END, ( event ) =>
        //         {
        //             if ( this.m_controller )
        //             {
        //                 if ( this.m_controller.CurrentTouchName != event.target.name )
        //                 {
        //                     // error( 'icon touch start', this.m_controller.CurrentTouchName, event.target.name )
        //                     return;
        //                 }
        //                 this.m_controller.CurrentTouchName = null;
        //                 // if ( Tools.CheckSwitchOff( Define.SwitchOffKeyDefine.AllChangeGameImport ) )
        //                 if ( Tools.CheckSwitchOff( Define.SwitchOffKeyDefine.AllChangeGameImport ) )
        //                 {
        //                     // error( 'CheckSwitchOff' )
        //                     return;
        //                 }
        //                 if ( this.m_gameId === this.m_inGameId )
        //                 {
        //                     MsgBox.getInstance().ShowMessageBox( Define.StringKey.FAVOR_INVALID_HINT );
        //                 }
        //                 else
        //                 {
        //                     let gameName = LocaleStringManager.GetInstance().GetGameName( this.m_gameId )
        //                     MsgBox.getInstance().ShowFullMessageBox( Define.StringKey.CHANGE_GAME_HINT, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, [ gameName ],
        //                         () =>
        //                         {
        //                             LifeSocket.GetInstance().ReqUrl( this.m_gameId, this.m_iconEventNo );
        //                         },
        //                         () => { },
        //                         () => { }
        //                     );
        //                 }
        //             }
        //         } );
        //     }
        // }

        _proto.Init = function Init(controller, inGameId) {
          this.m_controller = controller;
          this.m_inGameId = inGameId;
          this.m_currentValue.SetCoin(0);
          this.m_fullValue.SetCoin(0);
        };

        _proto.SetIconSpriteFrame = function SetIconSpriteFrame(gameIcon, gameId) {
          var _this2 = this;

          this.m_gameIcon.SetGameIcon(gameIcon, function () {
            if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.AllChangeGameImport)) {
              return;
            }

            if (_this2.m_gameId === _this2.m_inGameId) {
              MsgBox.getInstance().ShowMessageBox(Define.StringKey.FAVOR_INVALID_HINT);
            } else {
              var gameName = LocaleStringManager.GetInstance().GetGameName(_this2.m_gameId);
              MsgBox.getInstance().ShowFullMessageBox(Define.StringKey.CHANGE_GAME_HINT, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, [gameName], function () {
                LifeSocket.GetInstance().ReqUrl(_this2.m_gameId, Define.BTN_CLICK_EVENT.MHB_CHANGE_GAME);
              }, function () {}, function () {});
            }
          });
          this.m_gameId = gameId;
          this.SetTxt();
        };

        _proto.SetTxt = function SetTxt() {
          if (MHBManager.GetInstance().MHBAtlas) {
            var altas = MHBManager.GetInstance().MHBAtlas;
            this.m_fullTxt.spriteFrame = altas.getSpriteFrame(TxtName.full);
            this.m_currentTxt.spriteFrame = altas.getSpriteFrame(TxtName.current);
          }
        };

        _proto.SetFinalValue = function SetFinalValue(value, full) {
          this.m_currentValue.FinalValue = value;
          this.m_fullValue.SetCoin(full, true);
        };

        _proto.SetCoin = function SetCoin(full) {
          this.m_currentValue.SetCoin(this.m_currentValue.NowValue);
          this.m_fullValue.SetCoin(full, true);
        };

        _createClass(MHBIconTemplate, [{
          key: "GameId",
          get: function get() {
            return this.m_gameId;
          }
        }]);

        return MHBIconTemplate;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_iconTouchDisable", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_gameIcon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_fullValue", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_currentValue", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_fullTxt", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_currentTxt", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MHBInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LocaleStringManager.ts', './Define.ts', './SoundManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, js, Component, LocaleStringManager, Define, SoundManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      js = module.js;
      Component = module.Component;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }],
    execute: function () {
      exports('ItemInfoType', void 0);

      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "735c5k7ArtMY4LPcjtK27Hw", "MHBInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      /**
       * @Item 道具說明
       * @Desc 任務說明
       */

      var ItemInfoType;

      (function (ItemInfoType) {
        ItemInfoType[ItemInfoType["Item"] = 0] = "Item";
        ItemInfoType[ItemInfoType["Desc"] = 1] = "Desc";
      })(ItemInfoType || (ItemInfoType = exports('ItemInfoType', {})));

      var ItemInfo = exports('default', (_dec = property([Label]), _dec2 = property([Label]), _dec3 = property([Node]), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ItemInfo, _Component);

        function ItemInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "title", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "texts", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "close_btn", _descriptor3, _assertThisInitialized(_this));

          _this.m_controller = void 0;
          _this.m_currentTouchName = null;
          return _this;
        }

        var _proto = ItemInfo.prototype; // LIFE-CYCLE CALLBACKS:
        // onLoad () {}
        // start() {}

        _proto.Init = function Init() {
          var _this2 = this; // this.m_controller = controller;


          this.close_btn.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this2.m_currentTouchName == null) {
              _this2.m_currentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this2.m_currentTouchName = event.target.name;
              }
            }
          });
          this.close_btn.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this2.m_currentTouchName == event.target.name) {
              _this2.m_currentTouchName = null;
            }
          });
          this.close_btn.on(Node.EventType.TOUCH_END, function (event) {
            if (_this2.m_currentTouchName != event.target.name) {
              return;
            }

            _this2.m_currentTouchName = null;

            _this2.hide();
          });
        };

        _proto.SetTxt = function SetTxt(minVip, minBet) {
          if (minVip === void 0) {
            minVip = "0";
          }

          if (minBet === void 0) {
            minBet = "0";
          }

          if (!this.title.font) {
            this.title.font = Define.DefaultFont;
          }

          if (!this.texts.font) {
            this.texts.font = Define.DefaultFont;
          }

          this.title.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.MHB_INFO_TITLE);
          this.texts.string = js.formatStr(LocaleStringManager.GetInstance().GetString(Define.StringKey.MHB_DESC_TEXT_1), minVip, minBet); // let rate = 1;
          // switch ( LocaleStringManager.CurrLang )
          // {
          //     case "en":
          //     case "th":
          //     case "vn":
          //     case "id":
          //         rate = 4 / 5;
          // }
        };

        _proto.show = function show(parm) {
          this.node.active = true;
        };

        _proto.hide = function hide() {
          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
          this.node.active = false;
        } // update( dt ) {}
        // OnRotation( isLandscape: boolean, isSmall?: boolean )
        // {
        //     // this.node.setPosition( this.m_controller.DiffPos() );
        //     let anim = this.getComponent( Animation );
        //     if ( isLandscape )
        //     {
        //         anim.play( "ItemInfo_L" );
        //     }
        //     else
        //     {
        //         anim.play( "ItemInfo_S" );
        //     }
        // }
        ;

        return ItemInfo;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "texts", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "close_btn", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MHBItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Tools.ts', './MHBManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, Tools, MHBManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      MHBManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "92f22HYi/JOpKF/rP73SdDx", "MHBItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TxtName;

      (function (TxtName) {
        TxtName["grand"] = "Txt_Msg_Grand";
        TxtName["major"] = "Txt_Msg_Major";
        TxtName["mini"] = "Txt_Msg_Mini";
      })(TxtName || (TxtName = {}));

      var MHBItem = exports('default', (_dec = property({
        type: Label,
        tooltip: "中獎得主名稱"
      }), _dec2 = property({
        type: Label,
        tooltip: "中獎金額"
      }), _dec3 = property({
        type: Label,
        tooltip: "中獎時間"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MHBItem, _Component);

        function MHBItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_winner", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_coin", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_date", _descriptor3, _assertThisInitialized(_this));

          _this.m_type = null;
          _this.m_player = null;
          _this.m_nickname = null;
          _this.m_value = null;
          _this.m_time = "";
          _this.dotType = Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT;
          return _this;
        }

        var _proto = MHBItem.prototype; // update( dt )
        // {
        //     if ( this.m_type != null && this.m_player != null && this.m_value != null )
        //     {
        //         this.SetItem( this.m_type, this.m_player, this.m_value );
        //         this.m_type = null;
        //         this.m_player = null;
        //         this.m_value = null;
        //     }
        // }

        _proto.SetInfo = function SetInfo(type, winner, nickname, value, time) {
          this.m_type = type;
          this.m_player = winner;
          this.m_nickname = nickname;
          this.m_value = value;
          this.m_time = this.GetTimeString(time);
          this.node.active = true;
          this.SetItem(this.m_type, this.m_player, this.m_nickname, this.m_value, this.m_time);
        };

        _proto.Reset = function Reset() {
          this.m_type = null;
          this.m_player = null;
          this.m_value = null;
          this.node.active = false;
        };

        _proto.SetItem = function SetItem(type, winner, nickname, value, time) {
          // if ( MHBManager.GetInstance().JPAtlas )
          // {
          //     if ( type == serverProto.serverProto.JpType.Grand )
          //     {
          //         this.m_awardType.spriteFrame = MHBManager.GetInstance().JPAtlas.getSpriteFrame( TxtName.grand );
          //     }
          //     if ( type == serverProto.serverProto.JpType.Major )
          //     {
          //         this.m_awardType.spriteFrame = MHBManager.GetInstance().JPAtlas.getSpriteFrame( TxtName.major );
          //     }
          //     if ( type == serverProto.serverProto.JpType.Mini )
          //     {
          //         this.m_awardType.spriteFrame = MHBManager.GetInstance().JPAtlas.getSpriteFrame( TxtName.mini );
          //     }
          // }
          Tools.SetFont(this.m_winner);
          this.m_winner.string = MHBManager.GetInstance().GetWinnerString(winner, nickname);

          if (MHBManager.GetInstance()) {
            var newValue = Tools.strip(Tools.divide(value, MHBManager.GetInstance().GetRate()));
            Tools.SetFont(this.m_coin);
            Tools.SetLabelString(this.m_coin.node, MHBManager.GetInstance().GetDisplayValue(newValue), this.dotType);
          }

          Tools.SetFont(this.m_date);
          this.m_date.string = time;
        };

        _proto.GetTimeString = function GetTimeString(time) {
          var date = new Date(time * 1000);
          var mon = (date.getMonth() + 1).toString();
          var day = date.getDate().toString();
          var hour = date.getHours().toString();
          var min = date.getMinutes();
          var minString = "";

          if (min < 10) {
            minString = "0" + min.toString();
          } else {
            minString = min.toString();
          }

          var dateString = mon + "/" + day + " " + hour + ":" + minString;
          return dateString;
        };

        return MHBItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_winner", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_coin", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_date", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MHBManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LifeSocket.ts', './Define.ts', './LocaleStringManager.ts', './Tools.ts', './ExtraManager.ts', './FloatView.ts', './MHBBtn.ts', './MHBDesc.ts', './MHBResult.ts', './IconBox.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, Prefab, error, instantiate, Node, SpriteAtlas, LifeSocket, Define, LocaleStringManager, Tools, ExtraManager, FloatView, MHBBtn, MHBDesc, MHBResult, IconBoxSeat;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      error = module.error;
      instantiate = module.instantiate;
      Node = module.Node;
      SpriteAtlas = module.SpriteAtlas;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      ExtraManager = module.default;
    }, function (module) {
      FloatView = module.default;
    }, function (module) {
      MHBBtn = module.default;
    }, function (module) {
      MHBDesc = module.default;
    }, function (module) {
      MHBResult = module.default;
    }, function (module) {
      IconBoxSeat = module.IconBoxSeat;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e9c5dM+90lIWqocToUuUrH8", "MHBManager", undefined);

      var btnPath = "Astt/%s/mustHitBy/Prefab/MHB_Btn";
      var descPath = "Astt/%s/mustHitBy/Prefab/MustHitByDesc";
      var resultPath = "Astt/%s/mustHitBy/Prefab/MHB_Compliment";
      var JpAudioClipsPath = "Astt/%s/mustHitBy/Sound/mp3/";
      var BetUnLockCoin = exports('BetUnLockCoin', null);
      var JpAudioClips = exports('JpAudioClips', {
        JP_0: null,
        JP_1: null,
        JP_2: null,
        JP_3: null,
        JP_5: null,
        JP_6: null
      });
      var MHBManager = exports('default', /*#__PURE__*/function () {
        function MHBManager() {
          this.m_mhbBtn = null;
          this.m_mhbDesc = null;
          this.m_mhbResult = null;
          this.m_bottoBar = null;
          this.m_isLandscape = false;
          this.m_lang = null;
          this.isFirst = true;
          this.m_mustHitByBtn = null;
          this.m_info = null;
          this.m_isJpResultAward = false;
          this.m_gameID = null;
          this.m_jpEnable = 1;
          this.m_mhbAtlas = null;
        }

        MHBManager.GetInstance = function GetInstance() {
          if (!MHBManager._instance) {
            MHBManager._instance = new MHBManager();
          }

          return MHBManager._instance;
        };

        MHBManager.OnExit = function OnExit() {
          delete this._instance;
          this._instance = null;
        };

        var _proto = MHBManager.prototype;

        _proto.Init = function Init(bottomBar, infoCB, infoAllCB, historyCB) {
          var _this = this;

          if (this.m_jpEnable != 1 || Define.IS_DEMO) {
            return;
          }

          this.m_lang = LocaleStringManager.CurrLang;
          this.m_bottoBar = bottomBar;
          var unLockBetList = [];

          if (this.m_bottoBar.IsGLIGames || this.m_bottoBar.IsBMMGames) {
            return;
          }

          BetUnLockCoin = exports('BetUnLockCoin', unLockBetList);
          this.m_mustHitByBtn = this.m_bottoBar.MustHitByBtn;
          var parent = this.m_mustHitByBtn.node.getChildByName('btn');
          var btn_path = Tools.GetFilePath(btnPath);
          var desc_path = Tools.GetFilePath(descPath); //:

          var result_path = Tools.GetFilePath(resultPath);
          Define.CommonBundle.load(btn_path, Prefab, function (err, prefab) {
            if (err) {
              error(err);
              return;
            }

            _this.m_mhbBtn = instantiate(prefab).getComponent(MHBBtn);

            if (
            /*Tools.IsTadaCasino*/
            _this.m_bottoBar.node.getComponent(ExtraManager).IconBox) {
              _this.m_bottoBar.node.getComponent(ExtraManager).SetIconBoxSeat(_this.m_mhbBtn.node, "mhb");

              _this.m_mhbBtn.SetIconBoxUpdate(_this.m_bottoBar.node.getComponent(ExtraManager).IconBox);

              parent.active = false;
            } else {
              parent.addChild(_this.m_mhbBtn.node);
            }

            _this.m_mhbBtn.SetTxt();

            _this.SetBtnTouch(); // this.TouchEvent();


            Define.CommonBundle.load(desc_path, Prefab, function (err, prefab) {
              if (err) {
                error(err);
                return;
              }

              _this.m_mhbDesc = instantiate(prefab).getComponent(MHBDesc);
              _this.m_mhbDesc.node.active = false;

              _this.m_bottoBar.node.addChild(_this.m_mhbDesc.node);

              Tools.SetZIndex(_this.m_mhbDesc.node, Define.ZOrder.JACKPOTDESC);

              _this.m_mhbDesc.SetTxt();

              _this.m_mhbDesc.Init(_this.m_bottoBar, historyCB);

              _this.m_mhbDesc.Rotation(_this.m_isLandscape);

              if (_this.m_mhbBtn) {
                _this.m_mhbBtn.Init(_this.m_mhbDesc, _this.m_bottoBar, infoCB, infoAllCB);
              }

              _this.TouchEvent();
            });
          });
          Define.CommonBundle.load(result_path, Prefab, function (err, prefab) {
            if (err) {
              error(err);
              return;
            }

            _this.m_mhbResult = instantiate(prefab).getComponent(MHBResult);

            _this.m_bottoBar.node.addChild(_this.m_mhbResult.node);

            Tools.SetZIndex(_this.m_mhbResult.node, Define.ZOrder.JACKPOTRESULT);

            _this.m_mhbResult.SetTxt();

            _this.m_mhbResult.node.active = false;

            _this.m_mhbResult.Init(_this.m_bottoBar);

            _this.m_mhbResult.Rotation(_this.m_isLandscape);

            _this.TouchEvent();
          });
          this.LoadIcons();
          this.LoadMustHitByAtlasFile();
          this.LoadMustHitBySoundFile(); // LifeSocket.GetInstance().JPMarqueeCb = ( info: serverProto.serverProto.JpMarqueeInfo ) =>

          LifeSocket.GetInstance().MHBMarqueeCb = function (info) {
            // error( "MHBMarqueeCb", info )
            // 額外呼一次更新banner跑分數值
            if (info.gameID == Number(Define.NOW_GAME_ID)) {
              if (_this.m_mhbBtn) {
                _this.m_mhbBtn.SetMarqueeInfo(info);

                if (info.aID.toString() != Define.AID && !_this.m_isJpResultAward) {
                  // this.m_jpBar.SyncBannerInfo();
                  _this.m_mhbBtn.SetInfo();
                } else {
                  _this.m_isJpResultAward = true;
                }
              }
            }
          };
        };

        _proto.ShowMhbResult = function ShowMhbResult(value, gameCB) {
          var _this2 = this;

          if (value > 0 && this.m_mhbBtn) {
            // let mhbResultCB = () =>
            // {
            if (this.m_mhbResult) {
              var closeBannerCB = function closeBannerCB() {
                if (_this2.m_mhbBtn) {
                  // this.m_jpBar.ResumeRolling();
                  // this.m_jpBar.StopJPAward();
                  _this2.m_isJpResultAward = false;
                }
              };

              this.m_mhbResult.SetInfo(value);
              this.m_mhbResult.OpenResult(gameCB, closeBannerCB);
            } // }


            this.m_isJpResultAward = true; // error( 'SetChips', value )

            this.m_mhbBtn.SetInfo(); // this.m_bottoBar.SetChips( this.m_bottoBar.GetChips() + value )
            // if ( gameCB )
            // {
            //     gameCB();
            // }
            // if ( this.m_mhbBtn )
            // {
            //     this.m_mhbBtn.ShowMHBAward( mhbResultCB );
            // }
          } else {
            if (gameCB) {
              gameCB();
            }
          }
        };

        _proto.SetMarqueeUnLock = function SetMarqueeUnLock() {
          if (this.m_mhbBtn) {
            this.m_mhbBtn.SetMarqueeUnLock();
          }
        };

        _proto.ResetPosition = function ResetPosition() {
          if (this.m_mustHitByBtn) {
            this.m_mustHitByBtn.node.getComponent(FloatView).ResetPosition();
          }
        };

        _proto.GetDisplayValue = function GetDisplayValue(value) {
          if (this.m_bottoBar) {
            return this.m_bottoBar.GetDisplayValue(value);
          }

          return value;
        };

        _proto.GetRate = function GetRate() {
          if (this.m_bottoBar && this.m_bottoBar.Wallet) {
            return this.m_bottoBar.Wallet.Rate;
          }

          return 1;
        };

        _proto.GetRatio = function GetRatio() {
          if (this.m_bottoBar && this.m_bottoBar.Wallet) {
            return this.m_bottoBar.Wallet.Ratio;
          }

          return 1;
        };

        _proto.GetNowBetValue = function GetNowBetValue() {
          if (this.m_bottoBar && this.m_bottoBar.Wallet) {
            return this.m_bottoBar.GetNowBetValue();
          }

          return null;
        };

        _proto.GetBetByIndex = function GetBetByIndex() {
          if (this.m_bottoBar && this.m_bottoBar.Wallet) {
            return this.m_bottoBar.GetBetByIndex(0);
          }

          return null;
        };

        _proto.GetWinnerString = function GetWinnerString(winner, nickname) {
          var player = '';

          if (nickname.length == 0) {
            player = '****';
            var str = winner.split(''); // for ( let i = 0; i < str.length - 3; i++ )
            // {
            //     str[ i ] = '*';
            // }

            for (var i = str.length - 3; i < str.length; i++) {
              player += str[i];
            }
          } else {
            player = nickname;
          }

          return player;
        };

        _proto.SetScaleAction = function SetScaleAction(node, isPress) {
          if (this.m_bottoBar) {
            this.m_bottoBar.SetScaleAction(node, isPress);
          }
        };

        _proto.Rotation = function Rotation(isLandscape) {
          this.m_isLandscape = isLandscape;

          if (this.m_mhbDesc) {
            this.m_mhbDesc.Rotation(isLandscape);
          }

          if (this.m_mhbResult) {
            this.m_mhbResult.Rotation(isLandscape);
          }
        };

        _proto.MustHitByShow = function MustHitByShow(closeMHB) {
          if (closeMHB === void 0) {
            closeMHB = false;
          }

          var loadSuccess = false;

          if (this.m_mhbAtlas && this.m_mustHitByBtn && this.m_bottoBar && this.m_bottoBar.Wallet) {
            loadSuccess = true;
          }

          if (loadSuccess && this.m_info && this.m_info.value >= 0 && this.m_info.full > 0 && !closeMHB) {
            this.m_mustHitByBtn.node.active = true;

            if (Tools.IsTadaCasino && this.m_bottoBar && this.m_mhbBtn) {
              this.m_bottoBar.node.getComponent(ExtraManager).IconBox.OpenBtnSeat(IconBoxSeat.MustHitBy, true);
            }

            if (this.isFirst) {
              if (this.m_bottoBar) this.m_bottoBar.node.getComponent(ExtraManager).SetAddIcon('musthitby', this.m_mustHitByBtn.node);
              this.m_mustHitByBtn.node.getComponent(FloatView).ResetPosition();
              this.isFirst = false;
            }
          } else {
            if (
            /*Tools.IsTadaCasino*/
            this.m_bottoBar.node.getComponent(ExtraManager).IconBox && this.m_bottoBar && this.m_mhbBtn) {
              this.m_bottoBar.node.getComponent(ExtraManager).SetIconBoxSeat(this.m_mhbBtn.node, "mhb", false);
            }

            this.m_mustHitByBtn.node.active = false;
            this.isFirst = true;
            if (this.m_bottoBar) this.m_bottoBar.node.getComponent(ExtraManager).RemoveAddIcon('musthitby');

            if (this.m_mhbDesc) {
              this.m_mhbDesc.node.active = false;
            }
          }

          if (this.m_mhbBtn && this.m_mhbDesc) {
            this.m_mhbDesc.ActiveMHB(this.m_mhbBtn.GameList && this.m_mhbBtn.GameList.length > 0);
          }
        };

        _proto.SetBtnTouch = function SetBtnTouch() {
          var _this3 = this;

          var target = null;

          if (
          /*Tools.IsTadaCasino*/
          this.m_bottoBar.node.getComponent(ExtraManager).IconBox && this.m_mhbBtn) {
            target = this.m_mhbBtn.node;
          } else {
            target = this.m_mustHitByBtn.node;
          } // JP的按鈕Icon(特殊操作 利用子節點控制父節點位置 原因:問號按鈕的事件會被m_jackPotBtn聽見 因此要改成m_jpBar.Btn作為監聽依據)


          if (target) {
            target.on(Node.EventType.TOUCH_START, function (event) {
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (target.name != event.target.name) {
                return;
              }

              if (_this3.m_bottoBar.CurrentTouchName == null) {
                _this3.m_bottoBar.CurrentTouchName = event.target.name;

                if (
                /*!Tools.IsTadaCasino*/
                !_this3.m_bottoBar.node.getComponent(ExtraManager).IconBox) {
                  _this3.m_mustHitByBtn.node.getComponent(FloatView).OnTouchStart(event.getLocation());
                }
              } else {
                if (event.target && event.target.active == false) {
                  _this3.m_bottoBar.CurrentTouchName = event.target.name;
                }
              }
            });
            target.on(Node.EventType.TOUCH_MOVE, function (event) {
              if (target.name != event.target.name) {
                return;
              }

              if (_this3.m_bottoBar.CurrentTouchName == event.target.name) {
                _this3.m_bottoBar.CurrentTouchName = event.target.name;

                if (
                /*!Tools.IsTadaCasino*/
                !_this3.m_bottoBar.node.getComponent(ExtraManager).IconBox) {
                  _this3.m_mustHitByBtn.node.getComponent(FloatView).OnTouchMove(event.getLocation());
                }
              } else {
                if (event.target && event.target.active == false) {
                  _this3.m_bottoBar.CurrentTouchName = event.target.name;
                }
              }
            });
            target.on(Node.EventType.TOUCH_CANCEL, function (event) {
              if (target.name != event.target.name) {
                return;
              }

              if (_this3.m_bottoBar.CurrentTouchName == event.target.name) {
                _this3.m_bottoBar.CurrentTouchName = null;
              }
            });
            target.on(Node.EventType.TOUCH_END, function (event) {
              if (target.name != event.target.name) {
                return;
              }

              if (_this3.m_bottoBar.CurrentTouchName != event.target.name) {
                return;
              }

              _this3.m_bottoBar.CurrentTouchName = null;

              var cb = function cb() {
                if (_this3.m_mhbDesc) {
                  // this.m_mhbBar.TouchEnd();
                  _this3.m_mhbDesc.OpenDesc();
                }
              };

              if (
              /*!Tools.IsTadaCasino*/
              !_this3.m_bottoBar.node.getComponent(ExtraManager).IconBox) {
                _this3.m_mustHitByBtn.node.getComponent(FloatView).OnTouchEnd(event.getLocation(), cb);
              } else {
                cb();
              }
            });
          }
        };

        _proto.TouchEvent = function TouchEvent() {
          var _this4 = this; //:


          if (!this.m_bottoBar || !this.m_mustHitByBtn || !this.m_mhbDesc || !this.m_mhbBtn) //|| !this.m_mhbResult )
            {
              return;
            } // 說明頁本身


          this.m_mhbDesc.Mask.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this4.m_bottoBar.CurrentTouchName == null) {
              _this4.m_bottoBar.CurrentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this4.m_bottoBar.CurrentTouchName = event.target.name;
              }
            }
          });
          this.m_mhbDesc.Mask.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this4.m_bottoBar.CurrentTouchName == event.target.name) {
              _this4.m_bottoBar.CurrentTouchName = null;
            }
          });
          this.m_mhbDesc.Mask.on(Node.EventType.TOUCH_END, function (event) {
            if (_this4.m_bottoBar.CurrentTouchName != event.target.name) {
              return;
            }

            _this4.m_bottoBar.CurrentTouchName = null;

            _this4.m_mhbDesc.CloseDesc();
          }); // 說明頁關閉按鈕

          this.m_mhbDesc.Close.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this4.m_bottoBar.CurrentTouchName == null) {
              _this4.m_bottoBar.CurrentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this4.m_bottoBar.CurrentTouchName = event.target.name;
              }
            }
          });
          this.m_mhbDesc.Close.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this4.m_bottoBar.CurrentTouchName == event.target.name) {
              _this4.m_bottoBar.CurrentTouchName = null;
            }
          });
          this.m_mhbDesc.Close.on(Node.EventType.TOUCH_END, function (event) {
            if (_this4.m_bottoBar.CurrentTouchName != event.target.name) {
              return;
            }

            _this4.m_bottoBar.CurrentTouchName = null;

            _this4.m_mhbDesc.CloseDesc();
          }); // 結算畫面

          if (this.m_mhbResult) {
            this.m_mhbResult.node.on(Node.EventType.TOUCH_START, function (event) {
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this4.m_bottoBar.CurrentTouchName == null) {
                _this4.m_bottoBar.CurrentTouchName = event.target.name;
              } else {
                if (event.target && event.target.active == false) {
                  _this4.m_bottoBar.CurrentTouchName = event.target.name;
                }
              }
            });
            this.m_mhbResult.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              if (_this4.m_bottoBar.CurrentTouchName == event.target.name) {
                _this4.m_bottoBar.CurrentTouchName = null;
              }
            });
            this.m_mhbResult.node.on(Node.EventType.TOUCH_END, function (event) {
              if (_this4.m_bottoBar.CurrentTouchName != event.target.name) {
                return;
              }

              _this4.m_bottoBar.CurrentTouchName = null;

              _this4.m_mhbResult.StopResult();
            });
          }
        };

        _proto.LoadIcons = function LoadIcons() {
          var _this5 = this;

          var _loop = function _loop(i) {
            if (!Tools.Icons[Define.MHB_GAME_ID[i]]) {
              var checkCB = function checkCB() {
                for (var j = 0; j < Define.MHB_GAME_ID.length; j++) {
                  if (!Tools.Icons[Define.MHB_GAME_ID[i]]) {
                    Tools.LoadIcon(_this5.m_lang, Define.MHB_GAME_ID[j], checkCB);
                  }
                }
              };

              Tools.LoadIcon(_this5.m_lang, Define.MHB_GAME_ID[i], checkCB);
            }
          };

          for (var i = 0; i < Define.MHB_GAME_ID.length; i++) {
            _loop(i);
          }
        }
        /**
        * 載入共用JP合圖
        */
        ;

        _proto.LoadMustHitByAtlasFile = function LoadMustHitByAtlasFile() {
          var _this6 = this;

          var filePath = "/framework/mustHitBy/mustHitBy";

          if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
            filePath = "/framework_americas/mustHitBy/mustHitBy";
          }

          var url = "AsttText/" + LocaleStringManager.CurrLang + filePath;
          Define.OtherBundle.load(url, SpriteAtlas, function (err, assets) {
            if (err) {
              error(err.message || err);

              _this6.LoadMustHitByAtlasFile();

              return;
            }

            _this6.m_mhbAtlas = assets;

            if (_this6.m_mhbBtn) {
              _this6.m_mhbBtn.SetTxt();
            }

            if (_this6.m_mhbDesc) {
              _this6.m_mhbDesc.SetTxt();
            }

            _this6.MustHitByShow();
          });
        };

        _proto.LoadMustHitBySoundFile = function LoadMustHitBySoundFile() {
          var _loop2 = function _loop2(key) {
            if (JpAudioClips.hasOwnProperty(key)) {
              Define.CommonBundle.load(Tools.GetFilePath(JpAudioClipsPath) + key, function (err, clip) {
                if (err) {
                  error('LoadMustHitBySoundFile Error');
                  return;
                }

                JpAudioClips[key] = clip;
              });
            }
          };

          for (var key in JpAudioClips) {
            _loop2(key);
          }
        };

        _createClass(MHBManager, [{
          key: "MustHitByBtn",
          get: function get() {
            if (this.m_mustHitByBtn) {
              return this.m_mustHitByBtn;
            } else {
              return null;
            }
          }
        }, {
          key: "MustHitByInfo",
          set: function set(info) {
            this.m_info = info;
          }
        }, {
          key: "IsJpResultAward",
          get: function get() {
            return this.m_isJpResultAward;
          },
          set: function set(isAward) {
            this.m_isJpResultAward = isAward;
          }
        }, {
          key: "GameID",
          get: function get() {
            return this.m_gameID;
          }
        }, {
          key: "JPEnable",
          get: function get() {
            return this.m_jpEnable;
          }
        }, {
          key: "MHBAtlas",
          get: function get() {
            return this.m_mhbAtlas;
          }
        }]);

        return MHBManager;
      }());
      MHBManager._instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MHBMarquee.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './pgame.mjs_cjs=&original=.js', './Define.ts', './SoundManager.ts', './Tools.ts', './GameIconComponent.ts', './MHBManager.ts', './pgame.js'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Label, Animation, tween, Component, Define, SoundManager, Tools, GameIconComponent, MHBManager, JpAudioClips, _cjsExports;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Animation = module.Animation;
      tween = module.tween;
      Component = module.Component;
    }, null, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      GameIconComponent = module.default;
    }, function (module) {
      MHBManager = module.default;
      JpAudioClips = module.JpAudioClips;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "6dc9a52xzpLsafSdwvWw0cZ", "MHBMarquee", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TxtName = {
        title: 'Txt_Musthitby2',
        prize: 'Txt_JP',
        New: "Txt_Musthitby"
      };
      var AnimName = {
        MarqueeShow: 'Clip_MHB_Marquee_Hit',
        MarqueeLoop: 'Clip_MHB_Marquee_Loop',
        MarqueeClose: 'Clip_MHB_Marquee_End'
      };
      var AnimName3 = {
        MarqueeShow: 'Clip_MustHitBy_IconBtn_Marquee_Hit',
        MarqueeLoop: 'Clip_MustHitBy_IconBtn_Marquee_Loop',
        MarqueeClose: 'Clip_MustHitBy_IconBtn_Marquee_End'
      };
      var AnimTime = {
        MarqueeShow: 0.25,
        MarqueeLoop: 0.5,
        MarqueeClose: 0.25
      };
      var NextTime = 1.0;
      var MHBMarquee = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "跑馬燈標題圖字"
      }), _dec2 = property({
        type: Sprite,
        tooltip: "跑馬燈獎項圖字"
      }), _dec3 = property({
        type: GameIconComponent,
        tooltip: "跑馬燈遊戲Icon"
      }), _dec4 = property({
        type: Label,
        tooltip: "跑馬燈中獎者名稱"
      }), _dec5 = property({
        type: Label,
        tooltip: "跑馬燈中獎金額"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MHBMarquee, _Component);

        function MHBMarquee() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_titleTxt", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_prizeTxt", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_icon", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_winner", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_coin", _descriptor5, _assertThisInitialized(_this));

          _this.m_type = null;
          _this.m_gameID = null;
          _this.m_player = null;
          _this.m_nickname = null;
          _this.m_value = null;
          _this.dotType = Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT;
          _this.m_infoList = [];
          _this.m_isNowOpen = false;
          _this.m_unLock = false;
          return _this;
        }

        var _proto = MHBMarquee.prototype;

        _proto.SetTxt = function SetTxt() {
          if (MHBManager.GetInstance().MHBAtlas) {
            var altas = MHBManager.GetInstance().MHBAtlas; // let isAmericas = Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str;
            // this.m_titleTxt.spriteFrame = altas.getSpriteFrame( isAmericas ? TxtName.New : TxtName.title );
            // this.m_prizeTxt.spriteFrame = altas.getSpriteFrame( isAmericas ? TxtName.New : TxtName.prize );

            this.m_titleTxt.spriteFrame = altas.getSpriteFrame(TxtName.New);
            this.m_prizeTxt.spriteFrame = altas.getSpriteFrame(TxtName.New); // this.m_titleTxt.spriteFrame = this.m_titleSprite;
            // this.m_prizeTxt.spriteFrame = this.m_prizeSprite;
          }
        };

        _proto.SetInfo = function SetInfo(info) {
          var mInfo = new _cjsExports.serverProto.JpMarqueeInfo();
          mInfo.aID = info.aID;
          mInfo.gameID = info.gameID;
          mInfo.type = info.type;
          mInfo.winner = info.winner;
          mInfo.winnerNickname = info.winnerNickname;
          mInfo.win = info.win;
          this.m_infoList.push(mInfo);
        };

        _proto.SetMarquee = function SetMarquee(type, gameID, winner, nickname, value) {
          this.m_type = type;
          this.m_gameID = gameID;
          this.m_player = winner;
          this.m_nickname = nickname;
          this.m_value = value;

          if (MHBManager.GetInstance().MHBAtlas) {
            var altas = MHBManager.GetInstance().MHBAtlas; // if ( this.m_type == serverProto.serverProto.JpType.Grand )
            // {
            //     this.m_prizeTxt.spriteFrame = altas.getSpriteFrame( TxtName.grand );
            // }
            // if ( this.m_type == serverProto.serverProto.JpType.Major )
            // {
            //     this.m_prizeTxt.spriteFrame = altas.getSpriteFrame( TxtName.major );
            // }
            // if ( this.m_type == serverProto.serverProto.JpType.Mini )
            // {
            //     this.m_prizeTxt.spriteFrame = altas.getSpriteFrame( TxtName.mini );
            // }
          }

          this.m_icon.SetGameIcon(Tools.Icons[this.m_gameID]);

          if (!this.m_winner.font) {
            this.m_winner.font = Define.DefaultFont;
          }

          this.m_winner.string = MHBManager.GetInstance().GetWinnerString(this.m_player, this.m_nickname);
          var newValue = Tools.strip(Tools.divide(value, MHBManager.GetInstance().GetRate()));
          Tools.SetLabelString(this.m_coin.node, MHBManager.GetInstance().GetDisplayValue(newValue), this.dotType);
        };

        _proto.AddMarquee = function AddMarquee() {
          if (!this.m_isNowOpen) {
            var open = false;

            for (var i = 0; i < this.m_infoList.length; i++) {
              if (this.m_infoList[i].aID.toString() != Define.AID) {
                var info = this.m_infoList.splice(i, 1)[0];
                this.SetMarquee(info.type, info.gameID, info.winner, info.winnerNickname, info.win);
                open = true;
                break;
              } else {
                if (this.m_unLock) {
                  this.m_unLock = false;
                  var _info = this.m_infoList.splice(i, 1)[0];
                  this.SetMarquee(_info.type, _info.gameID, _info.winner, _info.winnerNickname, _info.win);
                  this.m_infoList.splice(i, 1);
                  open = true;
                  break;
                }
              }
            }

            if (open) {
              this.m_isNowOpen = true;
              this.OpenMarquee();
            }
          }
        };

        _proto.OpenMarquee = function OpenMarquee() {
          var _this2 = this;

          SoundManager.getInstance().Play(JpAudioClips.JP_6);
          var animName = AnimName;

          if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
            animName = AnimName3;
          }

          this.node.active = true;
          this.node.getComponent(Animation).play(animName.MarqueeShow);
          tween(this.node).delay(AnimTime.MarqueeShow).call(function () {
            _this2.node.getComponent(Animation).play(animName.MarqueeLoop);
          }).delay(AnimTime.MarqueeLoop * 16).call(function () {
            _this2.CloseMarquee();
          }).start();
        };

        _proto.CloseMarquee = function CloseMarquee() {
          var _this3 = this;

          var animName = AnimName;

          if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
            animName = AnimName3;
          }

          this.node.getComponent(Animation).play(animName.MarqueeClose);
          tween(this.node).delay(AnimTime.MarqueeClose).delay(NextTime).call(function () {
            _this3.node.active = false;
            _this3.m_isNowOpen = false;
          }).start();
        };

        _createClass(MHBMarquee, [{
          key: "UnLock",
          set: function set(unlock) {
            this.m_unLock = unlock;
          }
        }]);

        return MHBMarquee;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_titleTxt", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_prizeTxt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_icon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_winner", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_coin", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MHBOtherGameView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LocaleStringManager.ts', './MHBIconTemplate.ts', './Define.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Prefab, Node, Label, instantiate, Animation, Component, LocaleStringManager, MHBIconTemplate, Define, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Label = module.Label;
      instantiate = module.instantiate;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      MHBIconTemplate = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "057f79+MklPkYmQ8PK8xGG5", "MHBOtherGameView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MHBOtherGameView = exports('default', (_dec = property({
        type: Prefab,
        tooltip: "icon樣版"
      }), _dec2 = property({
        type: Node,
        tooltip: "icon容器"
      }), _dec3 = property({
        type: Node,
        tooltip: "icon容器L"
      }), _dec4 = property({
        type: Node,
        tooltip: "icon容器S"
      }), _dec5 = property({
        type: Label,
        tooltip: "其他遊戲頁面紅色標籤L"
      }), _dec6 = property({
        type: Label,
        tooltip: "其他遊戲頁面紅色標籤S"
      }), _dec7 = property({
        type: Node,
        tooltip: "橫版"
      }), _dec8 = property({
        type: Node,
        tooltip: "直版"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MHBOtherGameView, _Component);

        function MHBOtherGameView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_iconPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_content", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentL", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentS", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_otherGameViewHintL", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_otherGameViewHintS", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rootNodeL", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rootNodeS", _descriptor8, _assertThisInitialized(_this));

          _this.m_iconList = [];
          _this.m_iconListL = [];
          _this.m_iconListS = [];
          _this.m_gameList = [];
          _this.m_currentTouchName = null;
          _this.m_isLandscape = void 0;
          return _this;
        }

        var _proto = MHBOtherGameView.prototype; // onLoad () {}

        _proto.start = function start() {};

        _proto.SetIcons = function SetIcons(list, isLandscape) {
          var _this2 = this;

          this.m_gameList = list;

          var _loop = function _loop(i) {
            if (_this2.m_gameList[i].gameid != Number(Define.NOW_GAME_ID)) {
              if (!Tools.Icons[_this2.m_gameList[i].gameid]) {
                Tools.LoadIcon(LocaleStringManager.CurrLang, _this2.m_gameList[i].gameid, function () {
                  _this2.CreateIcons(i);
                });
              } else {
                _this2.CreateIcons(i);
              }
            }
          };

          for (var i = 0; i < this.m_gameList.length; i++) {
            _loop(i);
          }
        };

        _proto.CreateIcons = function CreateIcons(index) {
          // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     let nodeL: cc.Node = cc.instantiate( this.m_iconPrefab );
          //     let nodeS: cc.Node = cc.instantiate( this.m_iconPrefab );
          //     let iconL: MHBIconTemplate = nodeL.getComponent( MHBIconTemplate );
          //     let iconS: MHBIconTemplate = nodeS.getComponent( MHBIconTemplate );
          //     this.m_iconListL.push( iconL );
          //     this.m_iconListS.push( iconS );
          //     this.m_contentL.addChild( nodeL );
          //     this.m_contentS.addChild( nodeS );
          //     iconL.Init( this, Number( Define.NOW_GAME_ID ) );
          //     iconL.SetIconSpriteFrame( Tools.Icons[ this.m_gameList[ index ].gameid ], this.m_gameList[ index ].gameid );
          //     iconL.SetFinalValue( this.m_gameList[ index ].value, this.m_gameList[ index ].full );
          //     iconS.Init( this, Number( Define.NOW_GAME_ID ) );
          //     iconS.SetIconSpriteFrame( Tools.Icons[ this.m_gameList[ index ].gameid ], this.m_gameList[ index ].gameid );
          //     iconS.SetFinalValue( this.m_gameList[ index ].value, this.m_gameList[ index ].full );
          // }
          // else
          // {
          var node = instantiate(this.m_iconPrefab);
          var icon = node.getComponent(MHBIconTemplate);
          this.m_iconList.push(icon);
          this.m_content.addChild(node);
          icon.Init(this, Number(Define.NOW_GAME_ID));
          icon.SetIconSpriteFrame(Tools.Icons[this.m_gameList[index].gameid], this.m_gameList[index].gameid);
          icon.SetFinalValue(this.m_gameList[index].value, this.m_gameList[index].full); // }
        };

        _proto.SetFinalValue = function SetFinalValue(list) {
          for (var i = 0; i < list.length; i++) {
            for (var j = 0; j < this.m_iconListL.length; j++) {
              if (list[i].gameid == this.m_iconListL[j].GameId) {
                this.m_iconListL[j].SetFinalValue(list[i].value, list[i].full);
                this.m_iconListS[j].SetFinalValue(list[i].value, list[i].full);
              }
            }

            for (var _j = 0; _j < this.m_iconList.length; _j++) {
              if (list[i].gameid == this.m_iconList[_j].GameId) {
                this.m_iconList[_j].SetFinalValue(list[i].value, list[i].full);
              }
            }
          }
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          this.m_isLandscape = isLandscape; // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {

          if (isLandscape) {
            this.node.getComponent(Animation).play("Clip_MustHitBy_Popular_Page_Landscape");
          } else {
            this.node.getComponent(Animation).play("Clip_MustHitBy_Popular_Page_Portrait");
          } // }
          // else
          // {
          //     if ( this.m_rootNodeL )
          //     {
          //         this.m_rootNodeL.active = isLandscape;
          //     }
          //     if ( this.m_rootNodeS )
          //     {
          //         this.m_rootNodeS.active = !isLandscape;
          //     }
          // }

        };

        _proto.SetTxt = function SetTxt() {
          Tools.SetFont(this.m_otherGameViewHintL);
          this.m_otherGameViewHintL.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RECOMMEND_HINT);
          Tools.SetFont(this.m_otherGameViewHintS);
          this.m_otherGameViewHintS.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RECOMMEND_HINT);
        };

        _createClass(MHBOtherGameView, [{
          key: "CurrentTouchName",
          get: function get() {
            return this.m_currentTouchName;
          },
          set: function set(v) {
            this.m_currentTouchName = v;
          }
        }]);

        return MHBOtherGameView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_iconPrefab", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_content", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_contentL", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_contentS", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_otherGameViewHintL", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_otherGameViewHintS", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_rootNodeL", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_rootNodeS", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MHBResult.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './SoundManager.ts', './MHBManager.ts', './MHBRollingValue.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Animation, tween, v3, Component, Define, SoundManager, MHBManager, JpAudioClips, MHBRollingValue;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Animation = module.Animation;
      tween = module.tween;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      MHBManager = module.default;
      JpAudioClips = module.JpAudioClips;
    }, function (module) {
      MHBRollingValue = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "9b3b2jGzOZGF7kzxipR6epU", "MHBResult", undefined);

      var TxtName;

      (function (TxtName) {
        TxtName["title"] = "Title_Txt";
        TxtName["congrats"] = "Txt_Congrats";
        TxtName["grand"] = "Txt_Grand";
        TxtName["major"] = "Txt_Major";
        TxtName["mini"] = "Txt_Mini";
      })(TxtName || (TxtName = {}));

      var AnimName = {
        Start: 'Clip_MHB_Compliment_Start',
        Loop: 'Clip_MHB_Compliment_Loop',
        Stop: 'Clip_MHB_Compliment_Stop',
        End: 'Clip_MHB_Compliment_End'
      };
      var AnimTime = {
        Start: 0.67,
        Loop: 3.0,
        Stop: 3.0,
        End: 0.1
      };
      var JPTime = {
        Grand: 16.5,
        Major: 12.5,
        Mini: 8.5
      };
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MHBResult = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "標題"
      }), _dec2 = property({
        type: Sprite,
        tooltip: "恭喜字樣"
      }), _dec3 = property({
        type: MHBRollingValue,
        tooltip: "中獎金額"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MHBResult, _Component);

        function MHBResult() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_title", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_congrats", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_coin", _descriptor3, _assertThisInitialized(_this));

          _this.m_bottoBar = null;
          _this.m_resultTween = null;
          _this.m_win = 0;
          _this.m_gameCB = null;
          _this.m_closeBannerCB = null;
          _this.m_soundID = [];
          _this.touchLock = false;
          return _this;
        }

        var _proto = MHBResult.prototype;

        _proto.SetTxt = function SetTxt() {
          if (MHBManager.GetInstance().MHBAtlas) {
            var altas = MHBManager.GetInstance().MHBAtlas;
            this.m_title.spriteFrame = altas.getSpriteFrame(TxtName.title);
            this.m_congrats.spriteFrame = altas.getSpriteFrame(TxtName.congrats);
          }
        };

        _proto.Init = function Init(bottoBar) {
          this.m_bottoBar = bottoBar;
        } // SetInfo( info: serverProto.serverProto.JpOpen )
        ;

        _proto.SetInfo = function SetInfo(win) {
          if (win > 0) {
            // this.m_info = info;
            this.m_win = win;
            var gameID = Number(Define.NOW_GAME_ID);
            var newVec = this.RandomID(gameID);
            var RunningTime = AnimTime.Start;
            RunningTime += JPTime.Mini;
            this.SetCoin(0, win, RunningTime);
          } else {
            this.m_win = 0;
          }
        };

        _proto.SetCoin = function SetCoin(nowCoin, finalCoin, durTime, isStop) {
          if (isStop === void 0) {
            isStop = false;
          }

          if (this.m_coin) {
            this.m_coin.IsRate = false;
            this.m_coin.NowValue = nowCoin;
            this.m_coin.FinalValue = finalCoin;
            this.m_coin.DurTime = durTime;

            if (isStop) {
              this.m_coin.SetCoin(finalCoin, false, false);
            }
          }
        };

        _proto.OpenResult = function OpenResult(gameCB, closeBannerCB) {
          var _this2 = this;

          if (this.m_win > 0) {
            SoundManager.getInstance().SetVolumeForAll(0);
            var soundID = -1;
            var LoopTime = 0; // if ( this.m_info.type == serverProto.serverProto.JpType.Grand )
            // {
            //     soundID = SoundManager.getInstance().Play( JpAudioClips.JP_3, true );
            //     LoopTime = JPTime.Grand;
            // }
            // if ( this.m_info.type == serverProto.serverProto.JpType.Major )
            // {
            //     soundID = SoundManager.getInstance().Play( JpAudioClips.JP_2, true );
            //     LoopTime = JPTime.Major;
            // }
            // if ( this.m_info.type == serverProto.serverProto.JpType.Mini )
            // {

            soundID = SoundManager.getInstance().Play(JpAudioClips.JP_1, true);
            LoopTime = JPTime.Mini; // }

            this.m_soundID.push(soundID);
            this.m_gameCB = gameCB;
            this.m_closeBannerCB = closeBannerCB;
            this.node.getComponent(Animation).play(AnimName.Start);
            this.node.active = true;
            this.m_resultTween = tween(this.node).delay(AnimTime.Start).call(function () {
              _this2.touchLock = true;

              _this2.node.getComponent(Animation).play(AnimName.Loop);
            }).delay(LoopTime).call(function () {
              _this2.touchLock = false;

              if (_this2.m_soundID.length > 0) {
                for (var i = 0; i < _this2.m_soundID.length; i++) {
                  SoundManager.getInstance().Stop(_this2.m_soundID[i]);
                }
              }

              SoundManager.getInstance().Play(JpAudioClips.JP_5);

              _this2.node.getComponent(Animation).play(AnimName.Stop);
            }).delay(AnimTime.Stop).call(function () {
              _this2.node.getComponent(Animation).play(AnimName.End);
            }).delay(AnimTime.End).call(function () {
              if (_this2.m_resultTween) {
                _this2.m_resultTween.stop();
              }

              _this2.m_resultTween = null;

              if (_this2.m_bottoBar && _this2.m_bottoBar.Wallet && _this2.m_win > 0) {
                _this2.m_bottoBar.SetChips(_this2.m_bottoBar.GetChips() + _this2.m_win);

                _this2.m_bottoBar.SetNetWin(_this2.m_win); // this.m_info = null;


                _this2.m_win = 0;
              }

              if (_this2.m_gameCB) {
                _this2.m_gameCB();
              }

              _this2.m_gameCB = null;
              MHBManager.GetInstance().SetMarqueeUnLock();
              _this2.node.active = false;
              SoundManager.getInstance().SetVolumeForAll(1);
            }).start();
          }
        };

        _proto.StopResult = function StopResult() {
          var _this3 = this;

          if (this.m_win > 0) {
            if (this.touchLock) {
              this.touchLock = false;

              if (this.m_resultTween) {
                this.m_resultTween.stop();
              }

              this.m_resultTween = null;
              this.SetCoin(this.m_win, this.m_win, 0, true);

              if (this.m_soundID.length > 0) {
                for (var i = 0; i < this.m_soundID.length; i++) {
                  SoundManager.getInstance().Stop(this.m_soundID[i]);
                }
              }

              SoundManager.getInstance().Play(JpAudioClips.JP_5);
              this.node.getComponent(Animation).play(AnimName.Stop);
              tween(this.node).delay(AnimTime.Stop).call(function () {
                _this3.node.getComponent(Animation).play(AnimName.End);
              }).delay(AnimTime.End).call(function () {
                if (_this3.m_resultTween) {
                  _this3.m_resultTween.stop();
                }

                _this3.m_resultTween = null;

                if (_this3.m_bottoBar && _this3.m_bottoBar.Wallet && _this3.m_win > 0) {
                  _this3.m_bottoBar.SetChips(_this3.m_bottoBar.GetChips() + _this3.m_win);

                  _this3.m_bottoBar.SetNetWin(_this3.m_win); // this.m_info = null;


                  _this3.m_win = 0;
                }

                if (_this3.m_gameCB) {
                  _this3.m_gameCB();
                }

                _this3.m_gameCB = null;
                MHBManager.GetInstance().SetMarqueeUnLock();
                _this3.node.active = false;
                SoundManager.getInstance().SetVolumeForAll(1);
              }).start();
            }
          }
        };

        _proto.Rotation = function Rotation(isLandscape) {
          if (isLandscape) {
            this.node.position = v3(0, 350, 0);
          } else {
            this.node.position = v3(0, 630, 0);
          }
        };

        _proto.RandomID = function RandomID(gameID) {
          var newVec = [];

          for (var i = Define.MHB_GAME_ID.length - 1; i >= 0; i--) {
            if (gameID != Define.MHB_GAME_ID[i]) {
              newVec.push(Define.MHB_GAME_ID[i]);
            }
          }

          for (var _i = newVec.length - 1; _i >= 0; _i--) {
            var index = Math.floor(Math.random() * (_i + 1));
            var temp = newVec[index];
            newVec[index] = newVec[_i];
            newVec[_i] = temp;
          }

          return newVec;
        };

        return MHBResult;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_title", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_congrats", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_coin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MHBRollingValue.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Tools.ts', './MHBManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Component, Tools, MHBManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      MHBManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "c9a33L5UN5MCJ5tXdxcP73n", "MHBRollingValue", undefined);

      var JPRate = 0.995;
      var RollTime = 25;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MHBRollingValue = exports('default', (_dec = property({
        tooltip: "初始值與最終值是否改變"
      }), _dec2 = property({
        tooltip: "是否自行跑分"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MHBRollingValue, _Component);

        function MHBRollingValue() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_isChange", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_isRolling", _descriptor2, _assertThisInitialized(_this));

          _this.m_dotType = Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT;
          _this.m_isRate = true;
          _this.m_nowValue = 0;
          _this.m_finalValue = 0;
          _this.m_durTime = 0;
          return _this;
        }

        var _proto = MHBRollingValue.prototype;
        /**
         * main function
         */

        _proto.update = function update(dt) {
          if (this.m_isRolling) {
            this.Rolling(dt);
          }
        };

        _proto.Rolling = function Rolling(dt) {
          if (MHBManager.GetInstance()) {
            dt = Tools.strip(dt);
            this.m_finalValue = Tools.strip(this.m_finalValue);
            this.m_nowValue = Tools.strip(this.m_nowValue);
            this.m_durTime = Tools.strip(this.m_durTime);

            if (this.m_nowValue < this.m_finalValue && this.m_durTime > 0) {
              var tickCount = Tools.divide(this.m_durTime, dt);
              var interval = Tools.divide(Tools.strip(this.m_finalValue - this.m_nowValue), tickCount);
              this.m_nowValue = Tools.strip(this.m_nowValue + interval);

              if (this.m_nowValue > this.m_finalValue) {
                this.m_nowValue = this.m_finalValue;
              }

              if (this.m_isRate) {
                var newValue = Tools.strip(Tools.divide(this.m_nowValue, MHBManager.GetInstance().GetRate()));
                Tools.SetLabelString(this.node, MHBManager.GetInstance().GetDisplayValue(newValue), this.m_dotType);
              } else {
                Tools.SetLabelString(this.node, MHBManager.GetInstance().GetDisplayValue(this.m_nowValue), this.m_dotType);
              }

              this.m_durTime = Tools.strip(this.m_durTime - dt);
            }
          }
        };

        _proto.SetCoin = function SetCoin(value, isRoundUp, isRate) {
          if (isRoundUp === void 0) {
            isRoundUp = false;
          }

          if (isRate === void 0) {
            isRate = true;
          }

          this.m_nowValue = Tools.strip(value);

          if (isRate) {
            var newValue = Tools.strip(Tools.divide(this.m_nowValue, MHBManager.GetInstance().GetRate()));

            if (isRoundUp) {
              newValue = this.RoundUp(newValue);
            }

            Tools.SetLabelString(this.node, MHBManager.GetInstance().GetDisplayValue(newValue), this.m_dotType);
          } else {
            Tools.SetLabelString(this.node, MHBManager.GetInstance().GetDisplayValue(value), this.m_dotType);
          }
        };

        _proto.RoundUp = function RoundUp(value) {
          var _int = 0;
          var mod = 0;
          var range = [999999999, 999999, 999, 99];
          var offset = [1000000, 1000, 100, 10];
          value = Math.ceil(value);

          if (value < range[3]) {
            return value;
          }

          for (var i = 0; i < range.length; i++) {
            if (value > range[i]) {
              mod = value % offset[i];

              if (mod > 0) {
                value = Tools.minus(value, mod);
                _int = Tools.strip(Tools.plus(value, offset[i]));
              } else {
                _int = value;
              }

              return _int;
            }
          }
        };

        _createClass(MHBRollingValue, [{
          key: "IsRolling",
          get: function get() {
            return this.m_isRolling;
          },
          set: function set(isRolling) {
            this.m_isRolling = isRolling;
          }
        }, {
          key: "IsRate",
          get: function get() {
            return this.m_isRate;
          },
          set: function set(isRate) {
            this.m_isRate = isRate;
          }
          /**
           * set and get function.
           */

        }, {
          key: "NowValue",
          get: function get() {
            return this.m_nowValue;
          },
          set: function set(value) {
            this.m_nowValue = Tools.strip(value);
          }
        }, {
          key: "FinalValue",
          get: function get() {
            return this.m_finalValue;
          },
          set: function set(value) {
            if (Tools.strip(this.m_finalValue) != Tools.strip(value) && this.m_isChange) {
              this.m_durTime = RollTime;

              if (this.m_finalValue == 0 || Tools.strip(this.m_finalValue) > Tools.strip(value)) {
                this.m_nowValue = Tools.strip(value * JPRate);
              } else {
                this.m_nowValue = this.m_finalValue;
              } // this.m_nowValue = Tools.strip( this.m_finalValue );


              this.SetCoin(this.m_nowValue, this.m_isRate);
            }

            this.m_finalValue = Tools.strip(value);
          }
        }, {
          key: "DurTime",
          get: function get() {
            return this.m_durTime;
          },
          set: function set(time) {
            this.m_durTime = time;
          }
        }]);

        return MHBRollingValue;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_isChange", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_isRolling", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MissionBtn.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Button, Label, Animation, Tween, tween, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      Label = module.Label;
      Animation = module.Animation;
      Tween = module.Tween;
      tween = module.tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "eedfa1bOWhM6JJjidpAaKSQ", "MissionBtn", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AnimName = {
        Complete: "Clip_DailyMission_ChallengeHint_Check",
        Unlock: "Clip_DailyMission_ChallengeHint_Unlock"
      };
      var MissionBtn = exports('default', (_dec = property({
        type: Node,
        tooltip: "NEW"
      }), _dec2 = property({
        type: Button,
        tooltip: "按鈕"
      }), _dec3 = property({
        type: Node,
        tooltip: "動畫節點"
      }), _dec4 = property({
        type: Label,
        tooltip: "時間"
      }), _dec5 = property({
        type: Animation,
        tooltip: "hint root"
      }), _dec6 = property({
        type: Label,
        tooltip: "complete text"
      }), _dec7 = property({
        type: Label,
        tooltip: "unlock text"
      }), _dec8 = property({
        type: Label,
        tooltip: "info text"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MissionBtn, _Component);

        function MissionBtn() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_newNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_btn", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_animNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_timeLabel", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_hint", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_completeTxt", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_unlockTxt", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_infoTxt", _descriptor8, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = MissionBtn.prototype;

        _proto.SetTxt = function SetTxt() {};

        _proto.SetUnlockInfo = function SetUnlockInfo(info) {
          this.m_infoTxt.string = info;
        };

        _proto.ShowComplete = function ShowComplete(unlockString) {
          var _this2 = this;

          if (this.m_hint) {
            Tween.stopAllByTarget(this.node);
            tween(this.node).call(function () {
              _this2.m_hint.node.active = true;

              _this2.m_hint.play(AnimName.Complete);
            }).delay(2).call(function () {
              if (unlockString) {
                _this2.SetUnlockInfo(unlockString);

                _this2.m_hint.play(AnimName.Unlock);
              }
            }).delay(unlockString ? 2 : 0).call(function () {
              _this2.m_hint.node.active = false;
            }).start();
          }
        };

        _createClass(MissionBtn, [{
          key: "NewNode",
          get: function get() {
            return this.m_newNode;
          }
        }, {
          key: "Btn",
          get: function get() {
            return this.m_btn;
          }
        }, {
          key: "AnimNode",
          get: function get() {
            return this.m_animNode;
          }
        }, {
          key: "TimeLabel",
          get: function get() {
            return this.m_timeLabel;
          }
        }]);

        return MissionBtn;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_newNode", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_btn", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_animNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_timeLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_hint", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_completeTxt", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_unlockTxt", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_infoTxt", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MissionListView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './Tools.ts', './DailyMission.ts', './DailyMissionItem.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, ScrollView, Label, Node, Prefab, Animation, instantiate, UITransform, error, Component, Define, LocaleStringManager, Tools, DailyMission, LobbyMallCoinID, GameCoinID, MissionTypeNums, DailyMissionItem, MissionDetailStatus;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ScrollView = module.ScrollView;
      Label = module.Label;
      Node = module.Node;
      Prefab = module.Prefab;
      Animation = module.Animation;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
      error = module.error;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      DailyMission = module.default;
      LobbyMallCoinID = module.LobbyMallCoinID;
      GameCoinID = module.GameCoinID;
      MissionTypeNums = module.MissionTypeNums;
    }, function (module) {
      DailyMissionItem = module.default;
      MissionDetailStatus = module.MissionDetailStatus;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "91fccf7gPZLq5qryM/UwrM4", "MissionListView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MissionListView = exports('default', (_dec = property({
        type: ScrollView,
        tooltip: "ScrollView"
      }), _dec2 = property({
        type: Label,
        tooltip: "更新提示"
      }), _dec3 = property({
        type: Label,
        tooltip: "倒數時間"
      }), _dec4 = property({
        type: Node,
        tooltip: "存放任務項目"
      }), _dec5 = property({
        type: Prefab,
        tooltip: "任務項目prefab"
      }), _dec6 = property({
        type: Prefab,
        tooltip: "新任務項目prefab"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MissionListView, _Component);

        function MissionListView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_scrollView", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_refreshLabel", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_timeLabel", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentNode", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_missionItemPrefab", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_missionItemPrefabNew", _descriptor6, _assertThisInitialized(_this));

          _this.m_controller = null;
          _this.m_dailyMission = null;
          _this.m_showInfoCb = null;
          _this.m_missionListUI = [];
          _this.m_currentGameList = {};
          _this.m_defaultSelectMissionType = void 0;
          _this.m_curCompNum = 0;
          _this.m_curLockNum = 0;
          _this.m_missionAtlas = void 0;
          _this.m_rookieHintSetted = false;
          _this.m_compList = [];
          _this.m_newCompList = [];
          _this.m_lockList = [];
          _this.m_unlockString = null;
          return _this;
        }

        var _proto = MissionListView.prototype;

        _proto.Init = function Init(extraManager, dailyMission, missionAtlas, showInfoCb) {
          this.m_controller = extraManager;
          this.m_dailyMission = dailyMission;
          this.m_missionAtlas = missionAtlas;
          this.m_showInfoCb = showInfoCb;
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          if (isLandscape) {
            this.node.getComponent(Animation).play("Clip_DailyMission_MissionPage_Landscape");
          } else {
            this.node.getComponent(Animation).play("Clip_DailyMission_MissionPage_Portrait");
          }

          this.m_missionListUI.forEach(function (element) {
            var item = element.getComponent(DailyMissionItem);
            item.OnRotation(isLandscape);
          });
        };

        _proto.OnTouchInfo = function OnTouchInfo() {
          this.m_showInfoCb && this.m_showInfoCb();
        };

        _proto.SetRefreshTxt = function SetRefreshTxt() {
          Tools.SetFont(this.m_refreshLabel);
          this.m_refreshLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.DAILY_REFRESH).replace("{time}", this.m_dailyMission.GetRefreshTime());

          if (Tools.IsTada && this.m_timeLabel) {
            this.m_refreshLabel.node.active = false;
            this.m_timeLabel.node.active = true;
          }
        };

        _proto.SetTimeTxt = function SetTimeTxt(time) {
          if (Tools.IsTada && this.m_timeLabel) {
            this.m_timeLabel.string = time;
          }
        } //  檢查完成的任務
        ;

        _proto.CheckCompList = function CheckCompList(info) {
          if (this.m_compList.length > 0) {
            var newComplete = true;

            for (var i = 0; i < this.m_compList.length; i++) {
              // console.error( 'CheckCompList', this.m_compList[ i ].MissionIndex, info.MissionIndex )
              if (this.m_compList[i].MissionIndex == info.MissionIndex) {
                newComplete = false;
                break;
              }
            }

            if (newComplete) {
              // 有新的任務被完成
              this.m_newCompList.push(info);
              this.m_unlockString = this.CheckLockList(info); // console.error( 'set m_newCompList', info )
            }
          } else {
            // 有新的任務被完成
            this.m_newCompList.push(info);
            this.m_unlockString = this.CheckLockList(info); // console.error( 'set m_newCompList', info )
          }
        };

        _proto.CheckLockList = function CheckLockList(info) {
          if (this.m_unlockString) {
            return this.m_unlockString;
          }

          if (this.m_lockList.length > 0) {
            for (var i = 0; i < this.m_lockList.length; i++) {
              // console.error( 'CheckLockList', this.m_lockList[ i ].ChainID, info.ChainID )
              if (this.m_lockList[i].ChainID == info.ChainID) {
                return this.m_lockList[i].ConditionDesc;
              }
            }
          }

          return null;
        };

        _proto.UpdateMissionList = function UpdateMissionList(list, itemInfoList, giftInfoList, isFirst) {
          var _this2 = this;

          if (isFirst === void 0) {
            isFirst = false;
          } // console.error( 'updateMissionList MissionListView', list, itemInfoList, giftInfoList )
          // 把已完成的任務往後排


          var spList = [];
          var compList = [];
          var lockList = [];
          var runList = [];
          list.forEach(function (info) {
            if (info.CurrentCount >= info.TotalCount) {
              if (!isFirst) {
                _this2.CheckCompList(info);
              }

              compList.push(info);
            } else if (info.Lock) {
              lockList.push(info);
            } else if (info.Vip == 100) {
              spList.push(info);
            } else {
              runList.push(info);
            }
          });
          runList.sort(function (a, b) {
            if (a.GameID.toString() == Define.NOW_GAME_ID && b.GameID.toString() != Define.NOW_GAME_ID) {
              return -1;
            } else if (b.GameID.toString() == Define.NOW_GAME_ID && a.GameID.toString() != Define.NOW_GAME_ID) {
              return 1;
            }

            var progressA = a.CurrentCount / a.TotalCount;
            var progressB = b.CurrentCount / b.TotalCount;
            return progressB - progressA;
          });
          list = spList.concat(runList, lockList, compList);
          this.m_compList = [];
          this.m_compList = compList.concat();
          this.m_lockList = [];
          this.m_lockList = lockList.concat(); // console.error( 'updateMissionList checkComplete', this.m_compList, this.m_newCompList, this.m_unlockString )

          if (this.m_newCompList.length > 0) {
            // this.m_dailyMission.MissionBtn.ShowComplete( this.m_unlockString );
            this.m_dailyMission.NeedShowComplete = true; // this.m_newCompList = [];
            // this.m_unlockString = null;
          } // this.missionList = list;


          var missionNums = [];

          for (var i = 0; i < MissionTypeNums; i++) {
            missionNums.push({
              comp: 0,
              lock: 0,
              total: 0
            });
          }

          var compNum = 0; //任務完成次數

          var lockNum = 0; //未開放任務數

          var gameList = {};
          list.forEach(function (value, i) {
            var item;

            if (!_this2.m_missionListUI[i]) {
              //  Tools.IsTada要改Tools.IsTadaCasino
              var prefab = Tools.IsTadaCasino ? _this2.m_missionItemPrefabNew : _this2.m_missionItemPrefab;
              item = instantiate(prefab);
              _this2.m_missionListUI[i] = item; // item.y = -1 * ((i + 0.5) * item.height + spaceY * i)

              var cb = function cb() {
                for (var _i = 0; _i < _this2.m_missionListUI.length; _i++) {
                  _this2.m_missionListUI[_i].getComponent(DailyMissionItem).CloseRewardLayout();
                }
              };

              item.getComponent(DailyMissionItem).setRes(_this2.m_missionAtlas, cb);

              _this2.m_contentNode.addChild(item);

              if (Tools.IsTadaCasino && _this2.m_controller.RookieHintManager && i == 0 && !_this2.m_rookieHintSetted) {
                _this2.m_rookieHintSetted = true;

                _this2.m_controller.RookieHintManager.SetTargetPosNode(_this2.m_missionListUI[i]);
              }
            } else {
              item = _this2.m_missionListUI[i];
            }

            item.getComponent(Animation).play(_this2.m_dailyMission.IsLandscape ? "Clip_DailyMission_MissionCell_Landscape" : "Clip_DailyMission_MissionCell_Portrait");
            Tools.SetZIndex(item, i); // let rewardInfo: ItemInfoData | MissionCoinInfo;

            var rewardInfo;
            var giftPack = []; //  Tools.IsTada要改Tools.IsTadaCasino

            if (Tools.IsTadaCasino) {
              giftPack = DailyMission.toGiftPackData(value, giftInfoList, itemInfoList);
            } else if (value.ItemID == LobbyMallCoinID || value.ItemID == GameCoinID) {
              rewardInfo = value;
            } else {
              rewardInfo = DailyMission.toItemInfoData(itemInfoList[value.ItemID]);
            }

            var missionDetailStatus;

            if (giftPack.length > 0) {
              missionDetailStatus = item.getComponent(DailyMissionItem).updateDataNew(value, giftPack, _this2.m_controller, i);
            } else {
              missionDetailStatus = item.getComponent(DailyMissionItem).updateData(value, rewardInfo, _this2.m_controller, i);
            }

            switch (missionDetailStatus) {
              case MissionDetailStatus.Complete:
                missionNums[value.Show - 1].comp++;
                compNum++;
                break;

              case MissionDetailStatus.Lock:
                missionNums[value.Show - 1].lock++;
                lockNum++;
                break;
            }

            missionNums[value.Show - 1].total++;
            item.getComponent(UITransform).height;

            if (value.GameID.toString() == Define.NOW_GAME_ID) {
              // 有自己的遊戲任務就預設顯示遊戲類
              _this2.m_defaultSelectMissionType = 1;
            }

            if (value.Show == 2 && value.GameID) {
              gameList[value.GameID.toString()] = true;
            }
          });
          this.m_currentGameList = gameList;
          this.m_curLockNum = 0;
          this.m_curCompNum = 0;

          for (var _i2 = 0; _i2 < MissionTypeNums; _i2++) {
            var readInfo = this.m_dailyMission.ReadList.list[_i2];

            if (readInfo == null) {
              readInfo = {
                compNum: 0,
                lockNum: 0,
                total: 0,
                isRead: false
              };
              this.m_dailyMission.ReadList.list[_i2] = readInfo;
            }

            this.m_curCompNum += readInfo.compNum;
            this.m_curLockNum += readInfo.lockNum;
            var missionNum = missionNums[_i2];

            if (readInfo.compNum != missionNum.comp || readInfo.lockNum != missionNum.lock || readInfo.total != missionNum.total) {
              readInfo.isRead = false;

              if (_i2 === 0) // 2024/3/8 移除部分紅點(只剩一顆)
                {
                  this.m_dailyMission.RedPointNodes[_i2].active = true;
                }
            }

            readInfo.compNum = missionNum.comp;
            readInfo.lockNum = missionNum.lock;
            readInfo.total = missionNum.total;
            this.m_dailyMission.TabNodes[_i2].active = missionNum.total != 0;
          }

          error('>>>>> close mission icon.Mode c', lockNum, this.m_curLockNum, this.m_dailyMission.ReadList.list);
          this.m_dailyMission.IconNodes.Mode.active = false;
          var hasPlayNewMission = false;

          if (lockNum != this.m_curLockNum) {
            error('>>>>> check icon.Mode ', this.m_dailyMission.IconNodes.Ani.getComponent(Animation).getState("Clip_DailyMission_IconBtn_Loop"));

            if (this.m_dailyMission.IconNodes.Ani.getComponent(Animation).getState("Clip_DailyMission_IconBtn_Loop") && !this.m_dailyMission.IconNodes.Ani.getComponent(Animation).getState("Clip_DailyMission_IconBtn_Loop").isPlaying) {
              error('>>>>> open mission icon.Mode c');
              this.m_dailyMission.IconNodes.Mode.active = true;
              this.m_dailyMission.IconNodes.Ani.getComponent(Animation).stop();
              this.m_dailyMission.IconNodes.Ani.getComponent(Animation).play("Clip_DailyMission_IconBtn_Loop");
            }

            hasPlayNewMission = true;
          }

          this.m_curLockNum = lockNum;

          if (compNum > this.m_curCompNum && hasPlayNewMission == false) {
            if (this.m_dailyMission.IconNodes.Ani.getComponent(Animation).getState("Clip_DailyMission_IconBtn_Idle") && !this.m_dailyMission.IconNodes.Ani.getComponent(Animation).getState("Clip_DailyMission_IconBtn_Idle").isPlaying) {
              error('>>>>> open mission icon.Mode d');
              this.m_dailyMission.IconNodes.Mode.active = true;
              this.m_dailyMission.IconNodes.Ani.getComponent(Animation).stop();
              this.m_dailyMission.IconNodes.Ani.getComponent(Animation).play("Clip_DailyMission_IconBtn_Idle");
            }
          }

          this.m_curCompNum = compNum; //多餘的prefab清掉

          for (var _i3 = list.length; _i3 < this.m_missionListUI.length; _i3++) {
            if (this.m_missionListUI[_i3]) {
              this.m_missionListUI[_i3].destroy();

              this.m_missionListUI[_i3] = null;
            }
          }

          this.m_scrollView.scrollToTop();
          this.OnRotation(this.m_dailyMission.IsLandscape);
        };

        _proto.SwitchMissionList = function SwitchMissionList(type) {
          this.m_missionListUI.forEach(function (item) {
            if (item == null) return;
            var missionItem = item.getComponent(DailyMissionItem);
            var info = missionItem.m_info;
            item.active = info.Show - 1 == type;

            if (missionItem.status == MissionDetailStatus.Complete) {
              missionItem.playCompAni();
            }
          });
          this.m_scrollView.scrollToTop();
        };

        _proto.ResetCompList = function ResetCompList() {
          this.m_newCompList = [];
          this.m_unlockString = null;
        };

        _createClass(MissionListView, [{
          key: "CurrentGameList",
          get: function get() {
            return this.m_currentGameList;
          }
        }, {
          key: "UnlockString",
          get: function get() {
            return this.m_unlockString;
          }
        }]);

        return MissionListView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_scrollView", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_refreshLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_timeLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_contentNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_missionItemPrefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_missionItemPrefabNew", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MissionProtocal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DataStruct.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, ConnectionDataStruct;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ConnectionDataStruct = module.ConnectionDataStruct;
    }],
    execute: function () {
      exports('MissionReqData', void 0);

      cclegacy._RF.push({}, "73383Ekt2BOGbTojxYEPau3", "MissionProtocal", undefined);

      var MissionReqData;

      (function (_MissionReqData) {
        var MissionInfo = function MissionInfo() {
          this.aid = -1;
          this.token = "";
          this.isNow = true;
          this.lang = "";
          this.currencyNumber = 0;
        };

        _MissionReqData.MissionInfo = MissionInfo;

        var GetDailyMission = /*#__PURE__*/function (_ConnectionDataStruct) {
          _inheritsLoose(GetDailyMission, _ConnectionDataStruct);

          function GetDailyMission() {
            var _this;

            _this = _ConnectionDataStruct.call(this) || this;
            _this.type = ConnectionDataStruct.ErrorHandleType.Ignore;
            _this.method = ConnectionDataStruct.RequestMethod.Post;
            _this.url = "/mission/GetDailyMissionProto2";
            _this.reqData = null;
            return _this;
          }

          return GetDailyMission;
        }(ConnectionDataStruct.ProtocolData);

        _MissionReqData.GetDailyMission = GetDailyMission;
      })(MissionReqData || (MissionReqData = exports('MissionReqData', {})));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MsgBox.ts", ['cc', './MsgBoxView.ts', './LocaleStringManager.ts', './Tools.ts', './Define.ts'], function (exports) {
  'use strict';

  var cclegacy, size, Prefab, error, instantiate, sys, js, screen, Size, MsgBoxView, LocaleStringManager, Tools, Define;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      size = module.size;
      Prefab = module.Prefab;
      error = module.error;
      instantiate = module.instantiate;
      sys = module.sys;
      js = module.js;
      screen = module.screen;
      Size = module.Size;
    }, function (module) {
      MsgBoxView = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      Define = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e25f8GkGL5A3LiG69Os9IMX", "MsgBox", undefined);

      var Path3 = "/Astt/%s/msgBox/Prefab/MsgBox_System";
      var JiliHTMLMsgSize = size(638, 388);
      var TadaHTMLMsgSize = size(638, 383);
      var TadaTxtHeight = 27;

      var MsgBoxModel = /*#__PURE__*/function () {
        function MsgBoxModel() {
          this.m_msgSettingArr = void 0;
          this.m_currMsg = void 0;
          this.m_msgSettingArr = new Array();
        }

        var _proto = MsgBoxModel.prototype;

        _proto.PushMsg = function PushMsg(msgSetting, isFront) {
          if (isFront === void 0) {
            isFront = false;
          }

          if (msgSetting.titleKey == undefined) {
            msgSetting.titleKey = MsgBox.DEFAULT_TITLE_KEY;
          }

          if (msgSetting.showCloseBtn == undefined) {
            msgSetting.showCloseBtn = false;
          }

          if (msgSetting.showConfirmBtn == undefined) {
            msgSetting.showConfirmBtn = true;
          }

          if (msgSetting.showCancelBtn == undefined) {
            if (msgSetting.cancelCB == undefined) {
              msgSetting.showCancelBtn = false;
            } else {
              msgSetting.showCancelBtn = true;
            }
          }

          if (msgSetting.showRealityChheck == undefined) {
            msgSetting.showRealityChheck = false;
          }

          if (isFront) {
            this.m_msgSettingArr.unshift(msgSetting);
          } else {
            this.m_msgSettingArr.push(msgSetting);
          }
        };

        _proto.GetCurrMsg = function GetCurrMsg() {
          return this.m_currMsg;
        };

        _proto.GetNextMsg = function GetNextMsg() {
          this.m_currMsg = this.m_msgSettingArr.shift();
          return this.m_currMsg;
        };

        _proto.NeedShowMsg = function NeedShowMsg() {
          return this.m_msgSettingArr.length > 0;
        };

        return MsgBoxModel;
      }();
      /**
       * 訊息視窗的功能:
       * 
       * 建立一個新的MSG使用，訊息只吃key(為了多語系)
       * PushMessageBoxSetting 或 ShowMessageBox
       * 
       * PushMessageBoxSetting ShowMessageBox 可以直接呼叫，
       * 但是在建立view之前不會顯示，所以要呼叫Init，將view和GetString給msgbox使用，
       * 訊息會先堆在model內，直到view建立後，才會顯示。
       * 
       * Update請記得掛上
       * 
       * EX:
       *  let onGetString = function(str:string):string{
       *      return self.m_app.GetString(str);
       *  }
       *  必要1: MsgBox.getInstance().Init(cc.find("msgBox"), onGetString); //設定view
       *  必要2: MsgBox.getInstance().Update(dt);
       *  要show訊息: MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_CONNECT_FAIL);
       * 
       * Created by HuiRu on 2018/07/23.
       */


      var MsgBox = exports('default', /*#__PURE__*/function () {
        //Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO; 因為不吃Define 所以直接設定
        function MsgBox() {
          this.m_model = new MsgBoxModel();
          this.m_view = void 0;
          this.m_obstacles = {};
          this.m_isLandscape = false;
          this.isOnExit = false;
          this.m_getStringFunc = void 0;

          if (MsgBox._instance) {
            throw new Error("Error: Instantiation failed: Use MsgBox.getInstance() instead of new.");
          }

          MsgBox._instance = this;
          MsgBox._instance.m_model = new MsgBoxModel();
        }

        MsgBox.getInstance = function getInstance() {
          if (!this._instance) {
            this._instance = new MsgBox();
          }

          return MsgBox._instance;
        };

        MsgBox.OnExit = function OnExit() {
          delete this._instance;
          this._instance = null;
        }
        /**
         * 
         * @param parentNode msgbox的parent
         * @param fun 
         */
        ;

        var _proto2 = MsgBox.prototype;

        _proto2.Init = function Init(parentNode, fun) {
          var _this = this;

          this.m_getStringFunc = fun;
          var path = ""; // path = Tools.GetFilePath( Path3 );

          path = Tools.GetFilePathApiId(Path3); // switch ( Tools.Line )
          // {
          //     case Define.LineSetting.americas_str:
          //     case Define.LineSetting.americas:
          //         path = Tools.GetFilePath( Path3 );
          //         break;
          //     default:
          //         path = Tools.GetFilePath( MsgBoxPrefabPath );
          //         break;
          // }

          Define.CommonBundle.load(path, Prefab, function (err, prefab) {
            if (err) {
              error(err.message || err);
              return;
            }

            if (_this.isOnExit) {
              return;
            }

            var node = instantiate(prefab);
            parentNode.addChild(node);

            var onClick = function onClick(evtName) {
              _this.OnClick(evtName);
            };

            _this.m_view = node.getComponent(MsgBoxView) ? node.getComponent(MsgBoxView) : new MsgBoxView();

            _this.m_view.Init(node, onClick);

            _this.OnRotate(_this.m_isLandscape);

            if (LocaleStringManager.GetInstance().IsCommStringLoaded()) {
              _this.m_view.SetBtnString();
            } else {
              LocaleStringManager.GetInstance().RegisterOnLoadedCb(function () {
                _this.m_view.SetBtnString();
              });
            }

            if (_this.m_model.NeedShowMsg()) {
              _this.CheckThenShow();
            }
          });
        };

        _proto2.OnClick = function OnClick(targetName) {
          this.m_view.Hide();
          this.CheckThenShow();

          switch (targetName) {
            case MsgBoxView.UIName.BTN_CLOSE:
              {
                if (this.m_model.GetCurrMsg().closeCB != undefined) {
                  this.m_model.GetCurrMsg().closeCB();
                }

                break;
              }

            case MsgBoxView.UIName.BTN_CONFIRM:
              {
                if (this.m_model.GetCurrMsg().confirmCB != undefined) {
                  this.m_model.GetCurrMsg().confirmCB();
                }

                break;
              }

            case MsgBoxView.UIName.BTN_CANCEL:
              {
                if (this.m_model.GetCurrMsg().cancelCB != undefined) {
                  this.m_model.GetCurrMsg().cancelCB();
                }

                break;
              }

            case MsgBoxView.UIName.BTN_HISTORY:
              {
                if (this.m_model.GetCurrMsg().historyCB != undefined) {
                  this.m_model.GetCurrMsg().historyCB();
                }

                break;
              }
          }
        };

        _proto2.PushMessageBoxSetting = function PushMessageBoxSetting(setting, isFront) {
          if (isFront === void 0) {
            isFront = false;
          }

          this.m_model.PushMsg(setting, isFront);
          this.CheckThenShow();
        } //只有一個關閉按鈕 titile沒填寫預設是"系統訊息"
        ;

        _proto2.ShowMessageBox = function ShowMessageBox(msgKey, titleKey, confirmCB, errorCode) {
          if (titleKey === void 0) {
            titleKey = MsgBox.DEFAULT_TITLE_KEY;
          }

          if (Define.DEPOSIT_URL && msgKey == Define.StringKey.MSGBOX_MONEY_NOT_ENOUGH) {
            // 財產低於最低BET且有儲值網址時SHOW特殊訊息
            this.ShowDepositMsg();
          } else {
            var setting = {};
            setting.contextKey = msgKey;
            setting.titleKey = titleKey;
            setting.errorCode = errorCode;
            setting.showCancelBtn = false;
            setting.showConfirmBtn = true;
            setting.showCloseBtn = false;
            setting.confirmCB = confirmCB;
            this.m_model.PushMsg(setting);
            this.CheckThenShow();
          }
        };

        _proto2.ShowMessageBoxFormat = function ShowMessageBoxFormat(msgKey, titleKey, subst, confirmCB, errorCode) {
          if (titleKey === void 0) {
            titleKey = MsgBox.DEFAULT_TITLE_KEY;
          }

          var setting = {};
          setting.contextKey = msgKey;
          setting.titleKey = titleKey;
          setting.errorCode = errorCode;
          setting.showCancelBtn = false;
          setting.showConfirmBtn = true;
          setting.showCloseBtn = false;
          setting.subFormatString = subst;
          setting.confirmCB = confirmCB;
          this.m_model.PushMsg(setting);
          this.CheckThenShow();
        };

        _proto2.ShowFullMessageBox = function ShowFullMessageBox(msgKey, titleKey, subst, confirmCB, cancelCB, closeCB, errorCode) {
          if (titleKey === void 0) {
            titleKey = MsgBox.DEFAULT_TITLE_KEY;
          }

          var setting = {};
          setting.contextKey = msgKey;
          setting.titleKey = titleKey;
          setting.errorCode = errorCode;
          setting.showCancelBtn = true;
          setting.showConfirmBtn = true;
          setting.showCloseBtn = true;
          setting.subFormatString = subst;
          setting.confirmCB = confirmCB;
          setting.cancelCB = cancelCB;
          setting.closeCB = closeCB;
          this.m_model.PushMsg(setting);
          this.CheckThenShow();
        };

        _proto2.ShowRealityCheckMessageBox = function ShowRealityCheckMessageBox(msgKey, titleKey, subst, confirmCB, historyCB) {
          if (titleKey === void 0) {
            titleKey = MsgBox.DEFAULT_TITLE_KEY;
          }

          var setting = {};
          setting.contextKey = msgKey;
          setting.titleKey = titleKey;
          setting.showCancelBtn = true;
          setting.showConfirmBtn = true;
          setting.subFormatString = subst;
          setting.confirmCB = confirmCB;
          setting.showRealityChheck = true;
          setting.historyCB = historyCB;
          this.m_model.PushMsg(setting);
          this.CheckThenShow();
        };

        _proto2.ShowDepositMsg = function ShowDepositMsg() {
          MsgBox.getInstance().ShowFullMessageBox(Define.StringKey.MSGBOX_DEPOSIT, MsgBox.DEFAULT_TITLE_KEY, [], function () {
            var target = sys.OS.IOS && Tools.IsNativeWebView() ? "_self" : "_blank";
            window.open(Define.DEPOSIT_URL, target);
          });
        };

        _proto2.CheckThenShow = function CheckThenShow() {
          var _this2 = this;

          var localeManager = LocaleStringManager.GetInstance();

          if (this.m_view != undefined && this.m_getStringFunc != undefined && !this.CheckObstacles() && this.m_model.NeedShowMsg()) {
            if (localeManager.IsCommStringLoaded()) {
              if (!this.m_view.IsShow()) {
                this.RealShowMsgBox(this.m_model.GetNextMsg());
              }
            } else {
              localeManager.RegisterOnLoadedCb(function () {
                _this2.RealShowMsgBox(_this2.m_model.GetNextMsg());
              });
            }
          }
        } //金額不足
        ;

        _proto2.ShowRedDiamondNotEnough = function ShowRedDiamondNotEnough(onConfirmCB) {};

        _proto2.RealShowMsgBox = function RealShowMsgBox(setting) {
          //this.m_view.SetContent(this.m_getStringFunc(setting.contextKey));
          this.m_view.SetContent(this.FormatMsgString(this.m_getStringFunc(setting.contextKey), setting.subFormatString), setting.itemSpriteFrame, setting.itemNum);
          this.m_view.SetTitle(this.m_getStringFunc(setting.titleKey));
          this.m_view.SetBtnString(setting.confirmString, setting.showRealityChheck);
          this.m_view.SetErrorCode(setting.errorCode);
          this.m_view.SetAutoClipping(setting.autoClipping);
          this.m_view.SetBtnStyle(setting.showConfirmBtn, setting.showCancelBtn, setting.showCloseBtn, setting.showRealityChheck);
          this.m_view.SetViewStyle(setting.itemSpriteFrame, setting.showRealityChheck);
          this.m_view.Show();
          this.ShowScene(); // this.SetHTMLMsgBox( setting );
        };

        _proto2.ShowScene = function ShowScene() {
          var splash = document.getElementById("splash");
          console.error("ShowScene MSGBOX", splash);

          if (splash) {
            splash.style.display = "none";
          }
        };

        _proto2.SetHTMLMsgBox = function SetHTMLMsgBox(setting) {
          if (Tools.IsTada) {
            var msgBox = document.getElementById("MsgBox_Tada");

            if (msgBox) {
              var title = document.getElementById("MsgTitle_Tada");
              title.innerHTML = this.m_getStringFunc(setting.titleKey);
              var content = document.getElementById("MsgText_Tada");
              var text = this.FormatMsgString(this.m_getStringFunc(setting.contextKey), setting.subFormatString);
              var changeLineCount = 1;

              while (text.search("\n") !== -1) {
                changeLineCount++;
                text = text.replace("\n", "<br>");
              }

              content.innerHTML = text;
              content.style.height = changeLineCount * TadaTxtHeight + 2 + "px";

              var _error = document.getElementById("MsgError_Tada");

              if (setting.errorCode) {
                _error.style.display = "block";
                _error.innerHTML = setting.errorCode;
              } else {
                _error.style.display = "none";
              }

              var confirm = document.getElementById("OkBtn_Tada");

              confirm.onclick = function () {
                setting.confirmCB && setting.confirmCB();
              };

              msgBox.style.display = "block";
            }
          } else {
            var _msgBox = document.getElementById("MsgBox_JILI");

            if (_msgBox) {
              var _title = document.getElementById("MsgTitle_JILI");

              _title.innerHTML = this.m_getStringFunc(setting.titleKey);

              var _content = document.getElementById("MsgText_JILI");

              var _text = this.FormatMsgString(this.m_getStringFunc(setting.contextKey), setting.subFormatString);

              var _changeLineCount = 1;

              while (_text.search("\n") !== -1) {
                _changeLineCount++;
                _text = _text.replace("\n", "<br>");
              }

              _content.innerHTML = _text;
              _content.style.height = _changeLineCount * TadaTxtHeight + 2 + "px";

              var _error2 = document.getElementById("MsgError_JILI");

              if (setting.errorCode) {
                _error2.style.display = "block";
                _error2.innerHTML = setting.errorCode;
              } else {
                _error2.style.display = "none";
              }

              var _confirm = document.getElementById("OkBtn_JILI");

              _confirm.onclick = function () {
                setting.confirmCB && setting.confirmCB();
              };

              _msgBox.style.display = "block";
            }
          }
        };

        _proto2.FormatMsgString = function FormatMsgString(msg, subst) {
          if (subst == null) {
            return msg;
          }

          switch (subst.length) {
            case 1:
              return js.formatStr(msg, subst[0]);

            case 2:
              return js.formatStr(msg, subst[0], subst[1]);

            case 3:
              return js.formatStr(msg, subst[0], subst[1], subst[2]);

            case 4:
              return js.formatStr(msg, subst[0], subst[1], subst[2], subst[3]);

            case 5:
              return js.formatStr(msg, subst[0], subst[1], subst[2], subst[3], subst[4]);

            default:
              return msg;
          }
        };

        _proto2.Update = function Update(dt) {// if ( this.m_view != undefined && !this.m_view.IsShow() && this.m_model.NeedShowMsg() && this.m_getStringFunc != undefined && !this.CheckObstacles() )
          // {
          //     this.RealShowMsgBox( this.m_model.GetNextMsg() )
          // }
        };

        _proto2.OnRotate = function OnRotate(isLandscape) {
          this.m_isLandscape = isLandscape;

          if (this.m_view) {
            this.m_view.OnRotate(isLandscape);
          } //設定HTML訊息框


          var frameWidth = screen.windowSize.width / screen.devicePixelRatio;
          var frameHeight = screen.windowSize.height / screen.devicePixelRatio;
          var size = new Size(frameWidth, frameHeight);
          var scale = 1;

          if (isLandscape) {
            var height = Define.DEFAULT_LANDSCAPE_SIZE.height;

            if (size.height < height) {
              scale = size.height / height;
            }
          } else {
            var width = Define.DEFAULT_LANDSCAPE_SIZE.height;

            if (size.width < width) {
              scale = size.width / width;
            }
          }

          var msgBox = document.getElementById("MsgBoard_JILI");

          if (msgBox) {
            msgBox.style.transform = "scale(" + scale + ")";
          }

          msgBox = document.getElementById("MsgBoard_Tada");

          if (msgBox) {
            msgBox.style.transform = "scale(" + scale + ")";
          }

          var center = document.getElementById("MsgCenter_JILI");

          if (center) {
            center.style.width = JiliHTMLMsgSize.width * scale + "px";
            center.style.height = JiliHTMLMsgSize.height * scale + "px";
          }

          center = document.getElementById("MsgCenter_Tada");

          if (center) {
            center.style.width = TadaHTMLMsgSize.width * scale + "px";
            center.style.height = TadaHTMLMsgSize.height * scale + "px";
          }
        }
        /**
         * 增加障礙物，消除障礙物後記得call DeleteObstacle()
         */
        ;

        _proto2.AddObstacle = function AddObstacle(key) {
          this.m_obstacles[key] = key;
        }
        /**
         * 刪除障礙物
         */
        ;

        _proto2.DeleteObstacle = function DeleteObstacle(key) {
          if (this.m_obstacles[key]) {
            delete this.m_obstacles[key];
          }

          this.CheckThenShow();
        }
        /**
         * 確認有無障礙物
         */
        ;

        _proto2.CheckObstacles = function CheckObstacles() {
          if (this.m_obstacles && Object.keys(this.m_obstacles).length > 0) {
            return true;
          } else {
            return false;
          }
        };

        _proto2.IsShow = function IsShow() {
          if (this.m_view) {
            return this.m_view.IsShow();
          }

          return false;
        }
        /**
         * APP版，離開時需要移除view，不然下次進來會存在
         */
        ;

        _proto2.OnExit = function OnExit() {
          if (this.m_view) {
            this.m_view.OnExit();
            this.m_view = undefined;
          }

          this.isOnExit = true;
        };

        return MsgBox;
      }());
      MsgBox._instance = new MsgBox();
      MsgBox.DEFAULT_TITLE_KEY = "MSGBOX_TITLE_SYSTEM_INFO";

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MsgBoxModel.ts", ['cc', './MsgBox.ts'], function (exports) {
  'use strict';

  var cclegacy, MsgBox;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      MsgBox = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3e428VPbK5Pf6cuYcDyBKEi", "MsgBoxModel", undefined);
      /**
       * 
       * Created by HuiRu on 2018/07/23.
       */


      var MsgBoxModel = exports('default', /*#__PURE__*/function () {
        function MsgBoxModel() {
          this.m_msgSettingArr = void 0;
          this.m_currMsg = void 0;
          this.m_msgSettingArr = new Array();
        }

        var _proto = MsgBoxModel.prototype;

        _proto.PushMsg = function PushMsg(msgSetting, isFront) {
          if (isFront === void 0) {
            isFront = false;
          }

          if (msgSetting.titleKey == undefined) {
            msgSetting.titleKey = MsgBox.DEFAULT_TITLE_KEY;
          }

          if (msgSetting.showCloseBtn == undefined) {
            msgSetting.showCloseBtn = false;
          }

          if (msgSetting.showConfirmBtn == undefined) {
            msgSetting.showConfirmBtn = true;
          }

          if (msgSetting.showCancelBtn == undefined) {
            if (msgSetting.cancelCB == undefined) {
              msgSetting.showCancelBtn = false;
            } else {
              msgSetting.showCancelBtn = true;
            }
          }

          if (isFront) {
            this.m_msgSettingArr.unshift(msgSetting);
          } else {
            this.m_msgSettingArr.push(msgSetting);
          }
        };

        _proto.GetCurrMsg = function GetCurrMsg() {
          return this.m_currMsg;
        };

        _proto.GetNextMsg = function GetNextMsg() {
          this.m_currMsg = this.m_msgSettingArr.shift();
          return this.m_currMsg;
        };

        _proto.NeedShowMsg = function NeedShowMsg() {
          return this.m_msgSettingArr.length > 0;
        };

        return MsgBoxModel;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MsgBoxView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Tools.ts', './SoundManager.ts', './Define.ts', './LocaleStringManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Sprite, Label, Animation, v2, Button, v3, UITransform, Component, Tools, SoundManager, Define, LocaleStringManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Sprite = module.Sprite;
      Label = module.Label;
      Animation = module.Animation;
      v2 = module.v2;
      Button = module.Button;
      v3 = module.v3;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _class3;

      cclegacy._RF.push({}, "6f9d61I1CRESax6kGq0OI/b", "MsgBoxView", undefined);

      var ANIM_NAME = {
        Normal: "Clip_MsgBox_Normal",
        RealityCheck: "Clip_MsgBox_Prevention",
        Item: "Clip_MsgBox_Item"
      };
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MsgBoxView = exports('default', (_dec = property({
        type: Node,
        tooltip: "背景"
      }), _dec2 = property({
        type: Node,
        tooltip: "MsgBox主體"
      }), _dec3 = property({
        type: Node,
        tooltip: "關閉按鈕"
      }), _dec4 = property({
        type: Node,
        tooltip: "標題"
      }), _dec5 = property({
        type: Node,
        tooltip: "內容根結點"
      }), _dec6 = property({
        type: Sprite,
        tooltip: "道具卡"
      }), _dec7 = property({
        type: Label,
        tooltip: "道具卡數量"
      }), _dec8 = property({
        type: Node,
        tooltip: "內容"
      }), _dec9 = property({
        type: Node,
        tooltip: "錯誤碼"
      }), _dec10 = property({
        type: Node,
        tooltip: "確認"
      }), _dec11 = property({
        type: Node,
        tooltip: "確定文字"
      }), _dec12 = property({
        type: Node,
        tooltip: "取消"
      }), _dec13 = property({
        type: Node,
        tooltip: "取消文字"
      }), _dec14 = property({
        type: Animation,
        tooltip: "樣式動畫"
      }), _dec15 = property({
        type: Node,
        tooltip: "歷程"
      }), _dec16 = property({
        type: Node,
        tooltip: "歷程按鈕文字"
      }), ccclass(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MsgBoxView, _Component);

        function MsgBoxView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_mask", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_panel", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_btnClose", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_txtTitle", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentNode", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_itemSprite", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_itemNumLabel", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_txtContent", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_txtErrorCode", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_btnConfirm", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_confirmTxtNode", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_btnCancel", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_cancelTxtNode", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_styleAnim", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_btnHistory", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_historyTxtNode", _descriptor16, _assertThisInitialized(_this));

          _this.m_view = void 0;
          _this.m_ctrlCB = void 0;
          return _this;
        }

        var _proto = MsgBoxView.prototype;

        _proto.Init = function Init(viewNode, ctrlCB) {
          var _this2 = this;

          this.m_view = viewNode;
          this.m_ctrlCB = ctrlCB;

          var onClick = function onClick(evt) {
            evt.propagationImmediateStopped = true;
            evt.propagationStopped = true;

            if (evt.type == Node.EventType.TOUCH_START) {
              var targetName = evt.target.name;
              var evtBtn = evt.target.getComponent(Button);

              if (evtBtn != null && evtBtn.enabled == false) {
                return false;
              }

              _this2.m_ctrlCB(targetName);

              switch (targetName) {
                case MsgBoxView.UIName.BTN_CLOSE:
                  {
                    SoundManager.getInstance().Play(Define.AudioClips.COMMON_CANCEL_BTN, false);
                    break;
                  }

                case MsgBoxView.UIName.BTN_CONFIRM:
                  {
                    SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN, false);
                    break;
                  }

                case MsgBoxView.UIName.BTN_CANCEL:
                  {
                    SoundManager.getInstance().Play(Define.AudioClips.COMMON_CANCEL_BTN, false);
                    break;
                  }

                case MsgBoxView.UIName.BTN_HISTORY:
                  {
                    SoundManager.getInstance().Play(Define.AudioClips.COMMON_CANCEL_BTN, false);
                    break;
                  }
              }
            }

            return false;
          };

          if (!this.m_mask) {
            this.m_mask = this.m_view.getChildByName(MsgBoxView.UIName.LO_MASK);
          }

          if (!this.m_panel) {
            this.m_panel = this.m_view.getChildByName(MsgBoxView.UIName.IMG_BG);
          }

          if (!this.m_btnClose) {
            this.m_btnClose = this.m_panel.getChildByName(MsgBoxView.UIName.BTN_CLOSE);
          } else {
            MsgBoxView.UIName.BTN_CLOSE = this.m_btnClose.name;
          }

          this.m_btnClose.on(Node.EventType.TOUCH_START, function (event) {
            var btnComp = _this2.m_btnClose.getComponent(Button);

            if (btnComp.enabled) {
              onClick(event);
            }
          });

          if (!this.m_btnConfirm) {
            this.m_btnConfirm = this.m_panel.getChildByName(MsgBoxView.UIName.BTN_CONFIRM);
          } else {
            MsgBoxView.UIName.BTN_CONFIRM = this.m_btnConfirm.name;
          }

          this.m_btnConfirm.on(Node.EventType.TOUCH_START, function (event) {
            var btnComp = _this2.m_btnConfirm.getComponent(Button);

            if (btnComp.enabled) {
              onClick(event);
            }
          });

          if (!this.m_btnCancel) {
            this.m_btnCancel = this.m_panel.getChildByName(MsgBoxView.UIName.BTN_CANCEL);
          } else {
            MsgBoxView.UIName.BTN_CANCEL = this.m_btnCancel.name;
          }

          this.m_btnCancel.on(Node.EventType.TOUCH_START, function (event) {
            var btnComp = _this2.m_btnCancel.getComponent(Button);

            if (btnComp.enabled) {
              onClick(event);
            }
          });

          if (this.m_btnHistory) {
            MsgBoxView.UIName.BTN_HISTORY = this.m_btnHistory.name;
            this.m_btnHistory.on(Node.EventType.TOUCH_START, function (event) {
              var btnComp = _this2.m_btnHistory.getComponent(Button);

              if (btnComp.enabled) {
                onClick(event);
              }
            });
          }

          if (!this.m_txtTitle) {
            this.m_txtTitle = this.m_panel.getChildByName(MsgBoxView.UIName.TXT_TITLE);
          }

          if (!this.m_txtErrorCode) {
            this.m_txtErrorCode = this.m_panel.getChildByName(MsgBoxView.UIName.TXT_ERRORCODE);
          }

          if (!this.m_contentNode) {
            this.m_contentNode = this.m_panel.getChildByName(MsgBoxView.UIName.CONTENT);
          }

          if (!this.m_txtContent) {
            this.m_txtContent = this.m_contentNode.getChildByName(MsgBoxView.UIName.TXT_CONTENT);
          }

          if (!this.m_itemSprite) {
            var itemNode = this.m_contentNode.getChildByName(MsgBoxView.UIName.IMG_ITEM);
            this.m_itemSprite = itemNode ? itemNode.getComponent(Sprite) : null;
          }

          this.Hide();
        };

        _proto.SetBtnString = function SetBtnString(confirmStr, showRealityChheck) {
          if (confirmStr === void 0) {
            confirmStr = LocaleStringManager.GetInstance().GetString(Define.StringKey.MSGBOX_CONFIRM);
          }

          if (showRealityChheck === void 0) {
            showRealityChheck = false;
          } // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {


          if (this.m_confirmTxtNode.getComponent(Label)) {
            Tools.SetFont(this.m_confirmTxtNode.getComponent(Label));
          }

          if (this.m_cancelTxtNode.getComponent(Label)) {
            Tools.SetFont(this.m_cancelTxtNode.getComponent(Label));
          } // }


          Tools.SetLabelString(this.m_confirmTxtNode ? this.m_confirmTxtNode : this.m_btnConfirm.getChildByName(MsgBoxView.UIName.LABEL_WORD), confirmStr);
          Tools.SetLabelString(this.m_cancelTxtNode ? this.m_cancelTxtNode : this.m_btnCancel.getChildByName(MsgBoxView.UIName.LABEL_WORD), LocaleStringManager.GetInstance().GetString(Define.StringKey.MSGBOX_CANCEL));

          if (showRealityChheck) {
            Tools.SetLabelString(this.m_confirmTxtNode ? this.m_confirmTxtNode : this.m_btnConfirm.getChildByName(MsgBoxView.UIName.LABEL_WORD), LocaleStringManager.GetInstance().GetString(Define.StringKey.MSGBOX_EXIT));
            Tools.SetLabelString(this.m_cancelTxtNode ? this.m_cancelTxtNode : this.m_btnCancel.getChildByName(MsgBoxView.UIName.LABEL_WORD), LocaleStringManager.GetInstance().GetString(Define.StringKey.MSGBOX_CONTINUE));
            Tools.SetLabelString(this.m_historyTxtNode ? this.m_historyTxtNode : this.m_btnHistory.getChildByName(MsgBoxView.UIName.LABEL_WORD), LocaleStringManager.GetInstance().GetString(Define.StringKey.MSGBOX_HISTORY));
          }
        };

        _proto.SetTitle = function SetTitle(titleStr) {
          Tools.SetFont(this.m_txtTitle.getComponent(Label));
          Tools.SetLabelString(this.m_txtTitle, titleStr);
        };

        _proto.SetContent = function SetContent(contentStr, itemSpriteFrame, itemNum) {
          if (itemNum === void 0) {
            itemNum = 0;
          }

          Tools.SetLabelString(this.m_txtContent, contentStr);

          if (itemSpriteFrame) {
            this.m_itemSprite.spriteFrame = itemSpriteFrame; // this.m_contentNode.getComponent( Animation ).play( "item" );

            this.m_itemNumLabel.node.active = !!itemNum;

            if (itemNum) {
              this.m_itemNumLabel.string = "X" + itemNum.toString();
            }
          }
        };

        _proto.SetErrorCode = function SetErrorCode(errorCodeStr) {
          if (errorCodeStr === void 0) {
            errorCodeStr = null;
          }

          if (this.m_txtErrorCode) {
            if (errorCodeStr) {
              this.m_txtErrorCode.active = true;
              Tools.SetLabelString(this.m_txtErrorCode, errorCodeStr);
            } else {
              this.m_txtErrorCode.active = false;
              Tools.SetLabelString(this.m_txtErrorCode, "");
            }
          }
        };

        _proto.SetBtnStyle = function SetBtnStyle(showConfirm, showCancel, showClose, showRealityChheck) {
          this.m_btnClose.active = showClose;
          this.m_btnConfirm.active = showConfirm;
          this.m_btnCancel.active = showCancel;

          if (showConfirm && showCancel) {
            this.m_btnConfirm.setPosition(v3(MsgBoxView.POS.BTN_2_RIGHT.x, this.m_btnConfirm.position.y));
            this.m_btnCancel.setPosition(v3(MsgBoxView.POS.BTN_2_LEFT.x, this.m_btnCancel.position.y));
          } else {
            this.m_btnConfirm.setPosition(v3(MsgBoxView.POS.BTN_1.x, this.m_btnConfirm.position.y));
            this.m_btnCancel.setPosition(v3(MsgBoxView.POS.BTN_2_LEFT.x, this.m_btnCancel.position.y));
          }
        };

        _proto.SetAutoClipping = function SetAutoClipping(isAutoClipping) {
          if (isAutoClipping === void 0) {
            isAutoClipping = false;
          }

          if (isAutoClipping == true) {
            this.m_txtContent.getComponent(Label).overflow = Label.Overflow.RESIZE_HEIGHT;
            this.m_txtContent.getComponent(UITransform).setContentSize(600, 30);
          } else {
            this.m_txtContent.getComponent(Label).overflow = Label.Overflow.NONE;
            this.m_txtContent.getComponent(UITransform).setContentSize(60, 30);
          }
        };

        _proto.SetViewStyle = function SetViewStyle(itemSpriteFrame, showRealityChheck) {
          if (this.m_styleAnim) {
            if (itemSpriteFrame) {
              this.m_styleAnim.play(ANIM_NAME.Item);
            } else if (showRealityChheck) {
              this.m_styleAnim.play(ANIM_NAME.RealityCheck);
            } else {
              this.m_styleAnim.play(ANIM_NAME.Normal);
            }
          }
        };

        _proto.Show = function Show() {
          this.m_view.active = true;
          this.m_view.setPosition(0, 0);
        };

        _proto.Hide = function Hide() {
          // this.m_btnCancel.getComponent( Sprite ).spriteFrame = this.m_btnCancel.getComponent( Button ).normalSprite;
          // this.m_btnConfirm.getComponent( Sprite ).spriteFrame = this.m_btnConfirm.getComponent( Button ).normalSprite;
          // this.m_btnClose.getComponent( Sprite ).spriteFrame = this.m_btnClose.getComponent( Button ).normalSprite;
          this.m_view.active = false;
          this.m_view.setPosition(500000, 0);
        };

        _proto.IsShow = function IsShow() {
          return this.m_view.position.equals(v3(0, 0)); //this.m_view.active;
        };

        _proto.OnRotate = function OnRotate(isLandscape) {
          if (!this.m_mask || !this.m_panel) {
            return;
          }

          this.m_mask.getComponent(UITransform).setContentSize(1500, 1500);

          if (isLandscape) {
            this.m_panel.setScale(v3(1, 1, 1));
          } else {
            this.m_panel.setScale(v3(0.9, 0.9, 1));
          }
        }
        /**
         * APP���A���}�ɻݭn����view�A���M�U���i�ӷ|�s�b
         */
        ;

        _proto.OnExit = function OnExit() {
          this.m_view.removeFromParent();
          this.m_view.destroy();
          this.m_view = null;
        };

        return MsgBoxView;
      }(Component), _class3.POS = {
        BTN_CLOSE: v2(312, 188),
        BTN_1: v2(0, -150),
        BTN_2_LEFT: v2(-123, -150),
        BTN_2_RIGHT: v2(123, -150)
      }, _class3.UIName = {
        /**/
        LO_MASK: "lo_mask",

        /**/
        IMG_BG: "img_bg",

        /**/
        BTN_CLOSE: "btn_close",

        /**/
        IMG_SUBBG: "img_subBg",

        /**/
        BTN_CONFIRM: "btn_confirm",

        /**/
        LABEL_WORD: "label_word",

        /**/
        BTN_CANCEL: "btn_cancel",

        /**/
        BTN_HISTORY: "Btn_Prevention",

        /**/
        CONTENT: "content",

        /**/
        TXT_TITLE: "txt_title",

        /**/
        IMG_ITEM: "img_item",

        /**/
        TXT_CONTENT: "txt_content",

        /**/
        TXT_ERRORCODE: "txt_errorCode"
      }, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_mask", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_panel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_btnClose", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_txtTitle", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_contentNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_itemSprite", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_itemNumLabel", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_txtContent", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_txtErrorCode", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_btnConfirm", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_confirmTxtNode", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_btnCancel", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_cancelTxtNode", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_styleAnim", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_btnHistory", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_historyTxtNode", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MsgCell.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, RichText, Animation, Component, Define, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      RichText = module.RichText;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "2ce7bbyVrxIOovmXyiOLWF5", "MsgCell", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MsgCell = exports('default', (_dec = property({
        type: RichText,
        tooltip: "文字"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MsgCell, _Component);

        function MsgCell() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_richText", _descriptor, _assertThisInitialized(_this));

          _this.m_strL = null;
          _this.m_strS = null;
          return _this;
        }

        var _proto = MsgCell.prototype;

        _proto.SetStr = function SetStr(strL, strS) {
          this.m_strL = strL;
          this.m_strS = strS;
          this.m_richText.fontFamily = Define.DollarFontFamily;
          Tools.SetFont(this.m_richText);
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          if (isLandscape) {
            this.m_richText.string = this.m_strL;
            this.node.getComponent(Animation).play("Clip_Backpack_MsgCell_Landscape");
          } else {
            this.m_richText.string = this.m_strS;
            this.node.getComponent(Animation).play("Clip_Backpack_MsgCell_Portrait");
          }
        };

        return MsgCell;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_richText", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NearWinEffectComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SpineKit.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, CCBoolean, sp, Component, Tween, Color, tween, SpineKit;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCBoolean = module.CCBoolean;
      sp = module.sp;
      Component = module.Component;
      Tween = module.Tween;
      Color = module.Color;
      tween = module.tween;
    }, function (module) {
      SpineKit = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "93417uqlh9Fm6TH2poz4GO4", "NearWinEffectComponent", undefined);

      var SpineAnimName = {
        In: "FadeIn",
        Out: "FadeOut",
        Loop: "NearWin"
      };
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NearWinEffectComponent = exports('NearWinEffectComponent', (_dec = ccclass("NearWinEffectComponent"), _dec2 = property({
        type: Number,
        tooltip: "淡入時間"
      }), _dec3 = property({
        type: Number,
        tooltip: "淡出時間"
      }), _dec4 = property({
        type: CCBoolean,
        tooltip: "是否使用spine動畫"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NearWinEffectComponent, _Component);

        function NearWinEffectComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_fadeInTime", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_fadeOutTime", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_isPlaySpine", _descriptor3, _assertThisInitialized(_this));

          _this.m_cancelCb = null;
          _this.m_spine = null;
          return _this;
        }

        var _proto = NearWinEffectComponent.prototype;

        _proto.start = function start() {
          if (!this.m_spine) {
            this.node.active = false;
          }
        };

        _proto.FadeIn = /*#__PURE__*/function () {
          var _FadeIn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(showCb) {
            var _this2 = this;

            var interrupted, _this$m_cancelCb;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    this.CheckSpine();

                    if (!this.m_isPlaySpine) {
                      _context.next = 10;
                      break;
                    }

                    this.node.active = true;
                    this.CheckSpine();
                    _context.next = 6;
                    return SpineKit.PlayAnimation(this.m_spine, SpineAnimName.In);

                  case 6:
                    interrupted = _context.sent;

                    if (!interrupted) {
                      SpineKit.PlayAnimation(this.m_spine, SpineAnimName.Loop, true);
                    }

                    _context.next = 17;
                    break;

                  case 10:
                    Tween.stopAllByTarget(this.m_spine.color);
                    (_this$m_cancelCb = this.m_cancelCb) == null ? void 0 : _this$m_cancelCb.call(this);
                    this.node.active = true;
                    this.m_spine.color = new Color(this.m_spine.color.r, this.m_spine.color.g, this.m_spine.color.b, 0);
                    showCb == null ? void 0 : showCb();
                    _context.next = 17;
                    return new Promise(function (resolve) {
                      _this2.m_cancelCb = function () {
                        resolve();
                      };

                      tween(_this2.m_spine.color).to(_this2.m_fadeInTime, {
                        a: 255
                      }).call(function () {
                        resolve();
                        _this2.m_cancelCb = null;
                      }).start();
                    });

                  case 17:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function FadeIn(_x) {
            return _FadeIn.apply(this, arguments);
          }

          return FadeIn;
        }()
        /**
         * 結束時會關閉節點
         */
        ;

        _proto.FadeOut = /*#__PURE__*/function () {
          var _FadeOut = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var _this3 = this;

            var interrupted, _this$m_cancelCb2;

            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    this.CheckSpine();

                    if (!this.m_isPlaySpine) {
                      _context2.next = 11;
                      break;
                    }

                    if (this.node.active) {
                      _context2.next = 4;
                      break;
                    }

                    return _context2.abrupt("return", true);

                  case 4:
                    _context2.next = 6;
                    return SpineKit.PlayAnimation(this.m_spine, SpineAnimName.Out);

                  case 6:
                    interrupted = _context2.sent;

                    if (!interrupted) {
                      this.node.active = false;
                    }

                    return _context2.abrupt("return", !interrupted);

                  case 11:
                    if (!(this.m_spine.color.a <= 0)) {
                      _context2.next = 13;
                      break;
                    }

                    return _context2.abrupt("return", false);

                  case 13:
                    Tween.stopAllByTarget(this.m_spine.color);
                    (_this$m_cancelCb2 = this.m_cancelCb) == null ? void 0 : _this$m_cancelCb2.call(this);
                    _context2.next = 17;
                    return new Promise(function (resolve) {
                      _this3.m_cancelCb = function () {
                        resolve(false);
                      };

                      tween(_this3.m_spine.color).to(_this3.m_fadeOutTime, {
                        a: 0
                      }).call(function () {
                        resolve(true);
                        _this3.m_cancelCb = null;
                        _this3.node.active = false;
                      }).start();
                    });

                  case 17:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function FadeOut() {
            return _FadeOut.apply(this, arguments);
          }

          return FadeOut;
        }();

        _proto.CheckSpine = function CheckSpine() {
          if (!this.m_spine) {
            this.m_spine = this.node.getComponent(sp.Skeleton);

            if (this.m_isPlaySpine) {
              this.m_spine.setMix(SpineAnimName.In, SpineAnimName.Out, 0.05);
              this.m_spine.setMix(SpineAnimName.In, SpineAnimName.Loop, 0.05);
              this.m_spine.setMix(SpineAnimName.Loop, SpineAnimName.Out, 0.05);
            }
          }
        };

        return NearWinEffectComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_fadeInTime", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_fadeOutTime", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_isPlaySpine", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NewBoneFollow.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Enum, sp, director, Director, isValid, v3, UITransform, Component, v2;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      sp = module.sp;
      director = module.director;
      Director = module.Director;
      isValid = module.isValid;
      v3 = module.v3;
      UITransform = module.UITransform;
      Component = module.Component;
      v2 = module.v2;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _class3;

      cclegacy._RF.push({}, "44834DdFVNM2reoglp7HL82", "NewBoneFollow", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var BoneName;

      (function (BoneName) {
        BoneName[BoneName["default"] = 1] = "default";
      })(BoneName || (BoneName = {}));

      var CCBoneName = Enum({});
      var PI = 3.1415927;
      var degRad = PI / 180;
      var radDeg = 180 / PI;

      function cosDeg(degrees) {
        return Math.cos(degrees * degRad);
      }

      function sinDeg(degrees) {
        return Math.sin(degrees * degRad);
      }

      function localToWorldRotation(a, b, c, d, localRotation) {
        var sin = sinDeg(localRotation),
            cos = cosDeg(localRotation);
        return Math.atan2(cos * c + sin * d, cos * a + sin * b) * radDeg;
      }

      var NewBoneFollow = exports('NewBoneFollow', (_dec = ccclass("NewBoneFollow"), _dec2 = property({
        visible: false,
        tooltip: "目標 Spine 骨架"
      }), _dec3 = property({
        visible: false,
        tooltip: "是否快取旋轉及縮放的上層資料，預設開啟。如果父層以上會有動態調整旋轉及縮放則需取消勾選此選項，或是維持啟用狀態但於需要的時刻呼叫 CacheUpdate 方法"
      }), _dec4 = property({
        visible: false,
        tooltip: "是否同步位置"
      }), _dec5 = property({
        visible: false,
        tooltip: "是否同步旋轉"
      }), _dec6 = property({
        visible: false,
        tooltip: "是否將目標旋轉角度轉換成區域旋轉角度"
      }), _dec7 = property({
        visible: false,
        tooltip: "是否同步縮放"
      }), _dec8 = property({
        visible: false,
        tooltip: "是否將目標縮放量轉換成區域縮放量"
      }), _dec9 = property({
        visible: true,
        displayName: "Preview"
      }), _dec10 = property({
        type: sp.Skeleton,
        visible: false
      }), _dec11 = property({
        visible: true,
        type: sp.Skeleton,
        displayName: "Skeleton",
        tooltip: "目標 Spine 骨架"
      }), _dec12 = property({
        visible: false
      }), _dec13 = property({
        visible: true,
        displayName: "BoneName",
        tooltip: "請輸入要跟隨的 Spine 骨頭名稱或從下拉選單選擇"
      }), _dec14 = property({
        type: CCBoneName,
        visible: false
      }), _dec15 = property({
        type: CCBoneName,
        visible: true,
        displayName: "SelectFromList",
        tooltip: "可從此下拉選單選擇骨頭"
      }), _dec16 = property({
        displayName: "Cache Ancestors",
        tooltip: "是否快取旋轉及縮放的上層資料，預設開啟。如果父層以上會有動態調整旋轉及縮放則需取消勾選此選項，或是維持啟用狀態但於需要的時刻呼叫 CacheUpdate 方法"
      }), _dec17 = property({
        displayName: "Position",
        tooltip: "是否同步位置"
      }), _dec18 = property({
        displayName: "Position Offset",
        tooltip: "額外本體位置偏移",
        visible: function visible() {
          return this.m_followPosition;
        }
      }), _dec19 = property({
        displayName: "Rotation",
        tooltip: "是否同步旋轉"
      }), _dec20 = property({
        displayName: "Rotation Localization",
        tooltip: "是否將目標旋轉角度轉換成區域旋轉角度",
        visible: function visible() {
          return this.m_followRotation;
        }
      }), _dec21 = property({
        displayName: "Rotation Factor",
        tooltip: "額外本體旋轉",
        visible: function visible() {
          return this.m_followRotation;
        }
      }), _dec22 = property({
        displayName: "Scale",
        tooltip: "是否同步縮放"
      }), _dec23 = property({
        displayName: "Scale Localization",
        tooltip: "是否將目標縮放量轉換成區域縮放量",
        visible: function visible() {
          return this.m_followScale;
        }
      }), _dec24 = property({
        displayName: "Scale Factor",
        tooltip: "額外本體大小縮放",
        visible: function visible() {
          return this.m_followScale;
        }
      }), _dec(_class = executeInEditMode(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NewBoneFollow, _Component);

        function NewBoneFollow() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._oldAngle = 0;
          _this._oldScaleX = 1;
          _this._oldScaleY = 1;
          _this._isCached = false;
          _this._cachedRotation = 0;
          _this._cachedScaleX = 1;
          _this._cachedScaleY = 1;
          _this._BoneEnumList = [];

          _initializerDefineProperty(_this, "m_preview", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_spineSkeleton", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_boneName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "__boneIndex", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_cacheAncestors", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_followPosition", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_positionOffset", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_followRotation", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rotationLocalization", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rotationFactor", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_followScale", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scaleLocalization", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scaleFactor", _descriptor13, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = NewBoneFollow.prototype;
        /**
         * 要求重新計算快取資料
         */

        _proto.CacheUpdate = function CacheUpdate() {
          this._isCached = false;
        };

        _proto.__preload = function __preload() {};

        _proto.onLoad = function onLoad() {
          this._oldAngle = this.node.angle;
          this._oldScaleX = this.node.scale.x;
          this._oldScaleY = this.node.scale.y;
        };

        _proto.onEnable = function onEnable() {
          this.BoneSync();
          director.on(Director.EVENT_BEFORE_DRAW, this.BoneSync, this);
        };

        _proto.onDisable = function onDisable() {
          director.off(Director.EVENT_BEFORE_DRAW, this.BoneSync, this);
        };

        _proto.onDestroy = function onDestroy() {
          this._oldAngle = null;
          this._oldScaleX = null;
          this._oldScaleY = null;
          this._isCached = null;
          this._cachedRotation = null;
          this._cachedScaleX = null;
          this._cachedScaleY = null;
          this.m_spineSkeleton = null;
          this.m_boneName = null;
          this.m_cacheAncestors = null;
          this.m_followPosition = null;
          this.m_followRotation = null;
          this.m_rotationLocalization = null;
          this.m_followScale = null;
          this.m_scaleLocalization = null;
        }
        /**
         * 骨骼參數同步
         */
        ;

        _proto.BoneSync = function BoneSync() {
          if (this.m_spineSkeleton && this.m_boneName != "" && (this.m_followPosition || this.m_followRotation || this.m_followScale)) {
            var bone = this.m_spineSkeleton.findBone(this.m_boneName);

            if (bone) {
              var angleFactor = 0;
              var scaleXFactor = 1;
              var scaleYFactor = 1; // 檢查是否已經 cache 過資料

              if (!this.m_cacheAncestors || !this._isCached) {
                // [還沒 cache 資料] => 計算旋轉及縮放資料
                var spineAngle = 0;
                var selfAngle = 0;
                var spineScaleX = 1;
                var spineScaleY = 1;
                var selfScaleX = 1;
                var selfScaleY = 1; // 同步目標對象的旋轉及縮放資料

                var parent = this.m_spineSkeleton.node;

                while (parent) {
                  spineScaleX *= parent.scale.x;
                  spineScaleY *= parent.scale.y;
                  if (parent.angle) spineAngle += parent.angle; //有可能parent.angle NAN
                  //console.log("同步目標對象的旋轉及縮放資料","spineScale:X/Y/angle",spineScaleX,spineScaleY,spineAngle,"parent.scale:X/Y/angle",parent.scale.x,parent.scale.y,parent.angle)

                  parent = parent.parent;
                } // 自己的旋轉及縮放資料


                parent = this.node.parent;

                while (parent) {
                  selfScaleX *= parent.scale.x;
                  selfScaleY *= parent.scale.y;
                  if (parent.angle) selfAngle -= parent.angle; //有可能parent.angle NAN
                  //console.log("自己的旋轉及縮放資料","spineScale:X/Y/angle",spineScaleX,spineScaleY,spineAngle,"parent.scale:X/Y/angle",parent.scale.x,parent.scale.y,parent.angle)

                  parent = parent.parent;
                } // 計算轉換成自己的旋轉及縮放


                this._cachedRotation = spineAngle + selfAngle;
                this._cachedScaleX = spineScaleX / selfScaleX;
                this._cachedScaleY = spineScaleY / selfScaleY; //console.log("spineAngle",spineAngle,"selfAngle",selfAngle,"this._cachedRotation",this._cachedRotation);
                // 標註 cache 完成

                this._isCached = true;
              } // 取出旋轉及縮放資料


              angleFactor = this.m_rotationLocalization ? this._cachedRotation : this._oldAngle;
              scaleXFactor = this.m_scaleLocalization ? this._cachedScaleX : this._oldScaleX;
              scaleYFactor = this.m_scaleLocalization ? this._cachedScaleY : this._oldScaleY; //console.log("this.m_rotationLocalization", this.m_rotationLocalization,"_cachedRotation",this._cachedRotation,"this._oldAngle",this._oldAngle,"angleFactor",angleFactor);
              // 檢查是否啟用旋轉同步

              if (this.m_followRotation) {
                // [啟用旋轉同步]
                var parentBone = bone.parent;
                var arotation = bone.arotation; //console.log("this.node.getRotation", this.node.getRotation(),"angleFactor",angleFactor);

                var Rotation = angleFactor + (!isValid(parentBone) ? bone.arotation : localToWorldRotation(parentBone.a, parentBone.b, parentBone.c, parentBone.d, arotation)) + this.m_rotationFactor;
                this.node.setRotationFromEuler(v3(0, 0, Rotation)); //console.log("this.node.angle after",Rotation,this.node.getRotation());
              } // 檢查是否啟用縮放同步


              if (this.m_followScale) {
                // [啟用縮放同步]
                this.node.setScale(scaleXFactor * bone.getWorldScaleX() * this.m_scaleFactor.x, scaleYFactor * bone.getWorldScaleY() * this.m_scaleFactor.y);
              } // 檢查是否啟用位置同步


              if (this.m_followPosition) {
                // [啟用位置同步]
                var worldPos = this.m_spineSkeleton.node.getComponent(UITransform).convertToWorldSpaceAR(v3(bone.worldX + this.m_positionOffset.x, bone.worldY + this.m_positionOffset.y, 0));
                var localPos = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(worldPos);
                this.node.setPosition(v3(localPos.x, localPos.y));
              }
            }
          }
        }
        /**
         * 刷新編輯器屬性面板
         */
        ;

        _proto._refreshInspector = function _refreshInspector() {
          return;
        }
        /**
         * 更新面板骨骼列舉屬性欄位
         */
        ;

        _proto._updateBoneEnum = function _updateBoneEnum() {
          return;
        };

        _createClass(NewBoneFollow, [{
          key: "Skeleton",
          get: function get() {
            return this["m_spineSkeleton"];
          },
          set: function set(value) {
            this["m_spineSkeleton"] = value;
          }
        }, {
          key: "CacheData",
          get: function get() {
            return this["m_cacheData"];
          },
          set: function set(value) {
            this["m_cacheData"] = value;
          }
        }, {
          key: "FollowPosition",
          get: function get() {
            return this["m_followPosition"];
          },
          set: function set(value) {
            this["m_followPosition"] = value;
          }
        }, {
          key: "FollowRotation",
          get: function get() {
            return this["m_followRotation"];
          },
          set: function set(value) {
            this["m_followRotation"] = value;
          }
        }, {
          key: "RotationLocalization",
          get: function get() {
            return this["m_rotationLocalization"];
          },
          set: function set(value) {
            this["m_rotationLocalization"] = value;
          }
        }, {
          key: "FollowScale",
          get: function get() {
            return this["m_followScale"];
          },
          set: function set(value) {
            this["m_followScale"] = value;
          }
        }, {
          key: "ScaleLocalization",
          get: function get() {
            return this["m_scaleLocalization"];
          },
          set: function set(value) {
            this["m_scaleLocalization"] = value;
          }
        }, {
          key: "_spineSkeleton",
          get: function get() {
            return this.m_spineSkeleton;
          },
          set: function set(value) {
            //if (!EDITOR) return;
            console.log("set _spineSkeleton ", this.m_spineSkeleton, "value", value);
            this.m_spineSkeleton = value;

            this._refreshInspector();
          }
        }, {
          key: "BoneName",
          get: function get() {
            return this["m_boneName"];
          },
          set: function set(value) {
            this["m_boneName"] = value;
            var bValite = false;

            this._BoneEnumList.forEach(function (type) {
              if (type.name == value) {
                bValite = true;
                return;
              }
            });

            if (bValite == false) console.log("[spBoneFollow] 輸入的骨頭", value, "並不存在！請檢查名稱是否正確！");else console.log("[spBoneFollow] 輸入的骨頭", value, "已找到！");
          }
        }, {
          key: "_boneIndex",
          get: function get() {
            return this.__boneIndex;
          },
          set: function set(value) {
            var _this2 = this;

            this.__boneIndex = value;

            this._BoneEnumList.forEach(function (type) {
              if (type.value == value) _this2.m_boneName = type.name;
            });

            this.__boneIndex = 0;
            console.log("set __boneIndex ", value, "m_boneName:", this.m_boneName);
          }
        }]);

        return NewBoneFollow;
      }(Component), _class3.NewBoneFollow = "NewBoneFollow", _class3), (_applyDecoratedDescriptor(_class2.prototype, "Skeleton", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "Skeleton"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "CacheData", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "CacheData"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "FollowPosition", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "FollowPosition"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "FollowRotation", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "FollowRotation"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "RotationLocalization", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "RotationLocalization"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "FollowScale", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "FollowScale"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "ScaleLocalization", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "ScaleLocalization"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_preview", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_spineSkeleton", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "_spineSkeleton", [_dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "_spineSkeleton"), _class2.prototype), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_boneName", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "BoneName", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "BoneName"), _class2.prototype), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "__boneIndex", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return BoneName["default"];
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "_boneIndex", [_dec15], Object.getOwnPropertyDescriptor(_class2.prototype, "_boneIndex"), _class2.prototype), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_cacheAncestors", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_followPosition", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_positionOffset", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v2(0, 0);
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_followRotation", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_rotationLocalization", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_rotationFactor", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_followScale", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_scaleLocalization", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_scaleFactor", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v2(1, 1);
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NewSlotColorFollow.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Enum, sp, director, Director, math, Sprite, color, Label, UIOpacity, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      sp = module.sp;
      director = module.director;
      Director = module.Director;
      math = module.math;
      Sprite = module.Sprite;
      color = module.color;
      Label = module.Label;
      UIOpacity = module.UIOpacity;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3;

      cclegacy._RF.push({}, "2da2cEqApNLm7hZxNo+Lfkx", "NewSlotColorFollow", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var SlotName;

      (function (SlotName) {
        SlotName[SlotName["default"] = 1] = "default";
      })(SlotName || (SlotName = {}));

      var CCSlotName = Enum({});
      var NewSlotColorFollow = exports('default', (_dec = ccclass("NewSlotColorFollow"), _dec2 = property({
        visible: false,
        tooltip: "目標 Spine 骨架"
      }), _dec3 = property({
        visible: true,
        displayName: "Preview"
      }), _dec4 = property({
        visible: false //type: math.Color,

      }), _dec5 = property({
        type: sp.Skeleton,
        visible: false
      }), _dec6 = property({
        visible: true,
        type: sp.Skeleton,
        displayName: "Skeleton",
        tooltip: "目標 Spine 骨架"
      }), _dec7 = property({
        visible: false
      }), _dec8 = property({
        visible: true,
        displayName: "SlotName",
        tooltip: "請輸入要跟隨的 Spine 插槽名稱或從下拉選單選擇"
      }), _dec9 = property({
        type: CCSlotName,
        visible: false //displayOrder: 1,

      }), _dec10 = property({
        visible: true,
        displayName: "SelectFromList",
        type: CCSlotName,
        tooltip: "可從此下拉選單選擇插槽"
      }), _dec(_class = executeInEditMode(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NewSlotColorFollow, _Component);

        function NewSlotColorFollow() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_preview", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_colorCache", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_spineSkeleton", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_slotName", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "__slotIndex", _descriptor5, _assertThisInitialized(_this));

          _this._SlotEnumList = [];
          return _this;
        }

        var _proto = NewSlotColorFollow.prototype;

        _proto.__preload = function __preload() {};

        _proto.onLoad = function onLoad() {
          this._colorCache = null;
        };

        _proto.onEnable = function onEnable() {
          this.ColorSync();
          director.on(Director.EVENT_BEFORE_DRAW, this.ColorSync, this);
        };

        _proto.onDisable = function onDisable() {
          director.off(Director.EVENT_BEFORE_DRAW, this.ColorSync, this);
        };

        _proto.onDestroy = function onDestroy() {
          this._colorCache = null;
          this.m_spineSkeleton = null;
          this.m_slotName = null;
        }
        /**
         * 顏色同步
         */
        ;

        _proto.ColorSync = function ColorSync() {
          if (this.m_spineSkeleton && this.m_slotName != "") {
            var slot = this.m_spineSkeleton.findSlot(this.m_slotName);
            var r = slot ? slot.color.r * 255 : this._colorCache.r;
            var g = slot ? slot.color.g * 255 : this._colorCache.g;
            var b = slot ? slot.color.b * 255 : this._colorCache.b;
            var a = slot ? slot.color.a * 255 : this._colorCache.a; //console.log("r",r,"this._colorCache",this._colorCache)

            if (this._colorCache == null || slot.color.r != this._colorCache.r || slot.color.g != this._colorCache.g || slot.color.b != this._colorCache.b || slot.color.a != this._colorCache.a) {
              this._colorCache = this._colorCache || new math.Color(math.Color.WHITE);

              if (this.node.getComponent(Sprite)) {
                this.node.getComponent(Sprite).color = color(r, g, b, a);

                this._colorCache.set(this.node.getComponent(Sprite).color);
              } else if (this.node.getComponent(Label)) {
                this.node.getComponent(Label).color = color(r, g, b, a);

                this._colorCache.set(this.node.getComponent(Label).color);
              } // 部分節點僅有 UIOpacity


              if (this.node.getComponent(UIOpacity)) {
                this.node.getComponent(UIOpacity).opacity = a;
              }

              this._colorCache.a = a;
            }
          }
        }
        /**
         * 刷新編輯器屬性面板
         */
        ;

        _proto._refreshInspector = function _refreshInspector() {
          return;
        }
        /**
         * 更新面板 slot 列舉屬性欄位
         */
        ;

        _proto._updateSlotEnum = function _updateSlotEnum() {
          return;
        };

        _createClass(NewSlotColorFollow, [{
          key: "Skeleton",
          get: function get() {
            return this["m_spineSkeleton"];
          },
          set: function set(value) {
            this["m_spineSkeleton"] = value;
          }
        }, {
          key: "_spineSkeleton",
          get: function get() {
            return this.m_spineSkeleton;
          },
          set: function set(value) {
            return;
          }
        }, {
          key: "SlotName",
          get: function get() {
            return this["m_slotName"];
          },
          set: function set(value) {
            this["m_slotName"] = value;
            var bValite = false;

            this._SlotEnumList.forEach(function (type) {
              if (type.name == value) {
                bValite = true;
                return;
              }
            });

            if (bValite == false) console.log("[spSlotColorFollow] 輸入的插槽", value, "並不存在！請檢查名稱是否正確！");else console.log("[spSlotColorFollow] 輸入的插槽", value, "已找到！");
          }
        }, {
          key: "_slotIndex",
          get: function get() {
            {
              return;
            }
          },
          set: function set(value) {
            {
              return;
            }
          }
        }]);

        return NewSlotColorFollow;
      }(Component), _class3.NewSlotColorFollow = "NewSlotColorFollow", _class3), (_applyDecoratedDescriptor(_class2.prototype, "Skeleton", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "Skeleton"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_preview", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_colorCache", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new math.Color(math.Color.WHITE);
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_spineSkeleton", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "_spineSkeleton", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "_spineSkeleton"), _class2.prototype), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_slotName", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "SlotName", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "SlotName"), _class2.prototype), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "__slotIndex", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotName["default"];
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "_slotIndex", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "_slotIndex"), _class2.prototype)), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Notificationbar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LifeSocket.ts', './Define.ts', './EnvironmentConfig.ts', './Tools.ts', './ExtraManager.ts', './BuyBonusManager.ts', './DailyMissionManager.ts', './DebrisManager.ts', './NotificationManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Label, ScrollView, Animation, Node, UITransform, AnimationClip, Component, LifeSocket, Define, EnvironmentConfig, Tools, ExtraManager, buyBonusManager, missionManager, debrisManager, NotificationRedirect;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      ScrollView = module.ScrollView;
      Animation = module.Animation;
      Node = module.Node;
      UITransform = module.UITransform;
      AnimationClip = module.AnimationClip;
      Component = module.Component;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      ExtraManager = module.default;
    }, function (module) {
      buyBonusManager = module.buyBonusManager;
    }, function (module) {
      missionManager = module.missionManager;
    }, function (module) {
      debrisManager = module.debrisManager;
    }, function (module) {
      NotificationRedirect = module.NotificationRedirect;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "51f97d2mNRPHZxqKgI15WHI", "Notificationbar", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Notificationbar = exports('default', (_dec = property(Sprite), _dec2 = property(Label), _dec3 = property(ScrollView), _dec4 = property(Animation), _dec5 = property(Node), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Notificationbar, _Component);

        function Notificationbar() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "icon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "slideArea", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ani", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fingerTip", _descriptor5, _assertThisInitialized(_this));

          _this.closeCallback = null;
          _this.redirect = void 0;
          _this.bottombar = void 0;
          _this.gameID = void 0;
          return _this;
        }

        var _proto = Notificationbar.prototype; // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          var _this2 = this; // this.text.font = Define.DefaultFont;


          Tools.SetFont(this.text);
          this.slideArea.node.on('scroll-ended', function () {
            // cc.log("scroll-ended");
            // cc.log(this.slideArea.getScrollOffset().x);
            var x = _this2.slideArea.getScrollOffset().x;

            if (x > -_this2.node.getComponent(UITransform).width * 1 / 4) {
              _this2.slideArea.scrollToLeft(0);
            } else {
              var hideTime = 0.2;

              _this2.slideArea.scrollToRight(hideTime);

              _this2.scheduleOnce(function () {
                _this2.manuallyClose();
              }, hideTime);
            }
          });
        } // update (dt) {}
        ;

        _proto.setInfo = function setInfo(data, bottombar, iconPlist) {
          var trueIcon;

          if (typeof data.icon == "string") {
            if (iconPlist) {
              trueIcon = iconPlist.getSpriteFrame(data.icon);
            }
          } else {
            trueIcon = data.icon;
          }

          this.icon.spriteFrame = trueIcon;
          this.text.string = data.msg;
          this.redirect = data.redirect;
          this.gameID = data.gameID;
          this.bottombar = bottombar;

          if (this.redirect != NotificationRedirect.None) {
            this.ani.play();
            var state = this.ani.getState("Clip_Notification_TypeIcon");

            if (state) {
              state.wrapMode = AnimationClip.WrapMode.Loop;
            }
          }
        };

        _proto.click = function click() {
          switch (this.redirect) {
            case NotificationRedirect.Backpack:
              // this.bottombar.ShowBackpack();
              this.bottombar.getComponent(ExtraManager).ShowBackpack();
              break;

            case NotificationRedirect.Game:
              LifeSocket.GetInstance().ReqUrl(this.gameID, Define.BTN_CLICK_EVENT.NOTIFY_OTHER_GAME);
              break;

            case NotificationRedirect.Mission:
              missionManager.OpenUI();
              break;

            case NotificationRedirect.SignIn:
              // let url = EnvironmentConfig.WEB_URL.replace("{target}", "member/vip");
              // this.bottombar.OpenWebView(url, Define.StringKey.BOTTOM_BAR_BACK_GAME_HISTORY);
              this.bottombar.getComponent(ExtraManager).ShowDiscountView();
              break;

            case NotificationRedirect.Jili:
              var url = EnvironmentConfig.WEB_URL.replace("{target}", "member/vip");
              this.bottombar.OpenWebView(url, Define.StringKey.BOTTOM_BAR_BACK_GAME_HISTORY);
              break;

            case NotificationRedirect.BuyBonus:
              this.bottombar.CloseAllMenu();
              buyBonusManager.Show();
              break;

            case NotificationRedirect.Debris:
              debrisManager.Show(this.bottombar.IsLandscape);
              break;

            case NotificationRedirect.Longhu:
              this.bottombar.getComponent(ExtraManager).ShowDiscountView("tigerrank");
              break;
          }

          this.close(true);
        };

        _proto.autoClose = function autoClose(callback, time) {
          var _this3 = this;

          this.closeCallback = callback;

          if (time) {
            this.scheduleOnce(function () {
              _this3.close(false);
            }, time);
          }
        };

        _proto.manuallyClose = function manuallyClose() {
          this.close(true);
        };

        _proto.close = function close(read) {
          this.node.removeFromParent();

          if (this.closeCallback) {
            this.closeCallback(read);
          }
        };

        return Notificationbar;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "text", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "slideArea", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "ani", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "fingerTip", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NotificationManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LifeSocket.ts', './smartNotice.mjs_cjs=&original=.js', './Define.ts', './EnvironmentConfig.ts', './AppManager.ts', './LocaleStringManager.ts', './SoundManager.ts', './Tools.ts', './Notificationbar.ts', './smartNotice.js'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy, log, error, Animation, instantiate, UITransform, v3, Prefab, SpriteAtlas, warn, LifeSocket, Define, EnvironmentConfig, AppManager, LocaleStringManager, SoundManager, Tools, Notificationbar, _cjsExports;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      error = module.error;
      Animation = module.Animation;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
      v3 = module.v3;
      Prefab = module.Prefab;
      SpriteAtlas = module.SpriteAtlas;
      warn = module.warn;
    }, function (module) {
      LifeSocket = module.default;
    }, null, function (module) {
      Define = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      AppManager = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      Notificationbar = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      exports('NotificationRedirect', void 0);

      var _NotifycationOrder;

      cclegacy._RF.push({}, "0a672lWNpREWLku6TeQbb7l", "NotificationManager", undefined);

      var NotificationBarPrefabPath = "Astt/%s/notification/Prefab/Notificaion";
      var NotifycationPlistPath = "Astt/%s/notification/Img/notification";
      var CloseNotifyApiID = [-1];
      var ImgName = {
        Bg: "Notification_BG",
        Close: "Notification_X",
        Close2: "Notification_X",
        Finger: "Notification_Finger",
        Finger2: "Notification_Finger",
        Icon1: "Notification_Icon_01",
        Icon2: "Notification_Icon_02",
        Icon3: "Notification_Icon_03",
        Icon4: "Notification_Icon_04",
        Icon5: "Notification_Icon_05",
        Icon6: "Notification_Icon_06",
        Icon7: "Notification_Icon_07",
        Icon8: "Notification_Icon_08"
      };
      var Brand = {
        JILI: "JILI",
        TADA: "TADA"
      };
      var NotifycationOrder = (_NotifycationOrder = {}, _NotifycationOrder[_cjsExports.snProto.noticeType.SignUp] = 1, _NotifycationOrder[_cjsExports.snProto.noticeType.ItemNotUsed] = 2, _NotifycationOrder[_cjsExports.snProto.noticeType.ItemTomorrow] = 3, _NotifycationOrder[_cjsExports.snProto.noticeType.Message] = 4, _NotifycationOrder[_cjsExports.snProto.noticeType.ToGame] = 5, _NotifycationOrder[_cjsExports.snProto.noticeType.BuyGame] = 6, _NotifycationOrder[_cjsExports.snProto.noticeType.JiliLv] = 7, _NotifycationOrder[_cjsExports.snProto.noticeType.Mission] = 8, _NotifycationOrder[_cjsExports.snProto.noticeType.SignIn] = 9, _NotifycationOrder[_cjsExports.snProto.noticeType.BuyBonus] = 10, _NotifycationOrder[_cjsExports.snProto.noticeType.Debris] = 11, _NotifycationOrder[_cjsExports.snProto.noticeType.Longhu] = 12, _NotifycationOrder);
      var NotificationRedirect;

      (function (NotificationRedirect) {
        NotificationRedirect[NotificationRedirect["None"] = 0] = "None";
        NotificationRedirect[NotificationRedirect["Backpack"] = 1] = "Backpack";
        NotificationRedirect[NotificationRedirect["Game"] = 2] = "Game";
        NotificationRedirect[NotificationRedirect["Jili"] = 3] = "Jili";
        NotificationRedirect[NotificationRedirect["Mission"] = 4] = "Mission";
        NotificationRedirect[NotificationRedirect["SignIn"] = 5] = "SignIn";
        NotificationRedirect[NotificationRedirect["BuyBonus"] = 6] = "BuyBonus";
        NotificationRedirect[NotificationRedirect["Debris"] = 7] = "Debris";
        NotificationRedirect[NotificationRedirect["Longhu"] = 8] = "Longhu";
      })(NotificationRedirect || (NotificationRedirect = exports('NotificationRedirect', {})));

      var NotificationManager = exports('default', /*#__PURE__*/function () {
        function NotificationManager() {
          // window.test = this.PushNotify.bind(this);
          // window.test2 = this.CreateNotify.bind(this);
          this.m_inited = false;
          this.m_bottombar = null;
          this.m_aid = void 0;
          this.m_apiid = void 0;
          this.m_gameid = void 0;
          this.m_showingNotify = false;
          this.m_notificationBarPrefab = null;
          this.m_notifyBar = null;
          this.m_nofityList = [];
          this.m_nofityHistoryList = [];
          this.m_historyNotifyIt = 0;
          this.m_state = false;
          this.m_historyMode = false;
          this.m_iconNode = null;
          this.m_redPointNode = null;
          this.m_isRed = false;
          this.m_animation = null;
          this.m_landscape = void 0;
          this.m_defaultNotifyIcons = [];
          this.m_plist = null;
          this.m_hasSignIn = false;
          this.m_debrisCount = 0;
          this.testIconNum = 1;
        }

        NotificationManager.GetInstance = function GetInstance() {
          if (!this._instance) {
            this._instance = new NotificationManager();
          }

          return this._instance;
        };

        NotificationManager.OnExit = function OnExit() {
          delete this._instance;
          this._instance = null;
        };

        var _proto = NotificationManager.prototype;

        _proto.Init = function Init(bottombar, aid, apiid, gameid) {
          var _this = this;

          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.SmartMessage) || Define.IS_DEMO) {
            return;
          }

          this.m_bottombar = bottombar;
          this.m_aid = parseInt(aid);
          this.m_apiid = parseInt(apiid);
          this.m_gameid = parseInt(gameid); // 特定Api ID不啟用通知

          var canInitNotify = true;

          for (var i = 0; i < CloseNotifyApiID.length; i++) {
            if (this.m_apiid == CloseNotifyApiID[i]) {
              canInitNotify = false;
              break;
            }
          }

          if (!canInitNotify) {
            return;
          }

          this.LoadRes().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return _this.GetNotify();

                  case 2:
                    // 1分後開始通知
                    setTimeout(function () {
                      _this.m_inited = true;

                      if (_this.CanShowNotify()) {
                        _this.Process();
                      }
                    }, 1 * 60 * 1000);

                  case 3:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          })));

          LifeSocket.GetInstance().NotifyCb = function (content) {
            log(content);
            var buf = new Uint8Array(content);

            var data = _cjsExports.snProto.lifeResp.decode(buf);

            log("LifeSocket", data);
            log("LifeSocket", data.allResp);
            var notifyData = data.allResp[Tools.ConvertLanguageToFull(LocaleStringManager.CurrLang).toLowerCase()];

            if (notifyData) {
              notifyData.list.forEach(function (data) {
                _this.CreateNotify(data.type, data.desc, data.game);
              });
            }
          };
        };

        _proto.LoadResSync = function LoadResSync(path, type) {
          return new Promise(function (resolve, reject) {
            Define.CommonBundle.load(path, type, function (err, res) {
              if (err) {
                error(err);
                reject();
                return;
              }

              resolve(res);
            });
          });
        };

        _proto.LoadRes = /*#__PURE__*/function () {
          var _LoadRes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var path, imgPath, res, i;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    path = NotificationBarPrefabPath;
                    imgPath = NotifycationPlistPath; // if ( Tools.Line === Define.LineSetting.americas ||
                    //     Tools.Line === Define.LineSetting.americas_str )
                    // {
                    //     path = NotificationBarPrefabPath_TaDa;
                    //     imgPath = NotifycationPlistPath_TaDa;
                    // }

                    _context2.next = 4;
                    return Promise.all([this.LoadResSync(Tools.GetFilePath(path), Prefab), this.LoadResSync(Tools.GetFilePath(imgPath), SpriteAtlas)]);

                  case 4:
                    res = _context2.sent;
                    this.m_notificationBarPrefab = res[0];
                    this.m_plist = res[1];

                    for (i = 1; i <= 5; i++) {
                      this.m_defaultNotifyIcons.push(this.m_plist.getSpriteFrame("icon_0" + i));
                    }

                  case 8:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function LoadRes() {
            return _LoadRes.apply(this, arguments);
          }

          return LoadRes;
        }()
        /**設定是否能發送通知 */
        ;

        _proto.SetState = function SetState(state) {
          this.m_state = state;

          if (state == true && this.CanShowNotify()) {
            this.Process();
          }
        };

        _proto.SetIconNode = function SetIconNode(node) {
          var _this2 = this;

          this.m_iconNode = node;
          this.m_redPointNode = node.getChildByName("redPoint"); // if ( Tools.Line == Define.LineSetting.americas ||
          //     Tools.Line == Define.LineSetting.americas_str )
          // {

          this.m_animation = node.getComponent(Animation); // }
          // else
          // {
          //     this.m_animation = cc.find( "img_notifyNode/img_notify", node ).getComponent( cc.Animation );
          // }

          if (this.m_animation) {
            this.m_animation.on(Animation.EventType.FINISHED, function () {
              if (_this2.m_isRed) {
                // if ( Tools.Line == Define.LineSetting.americas ||
                //     Tools.Line == Define.LineSetting.americas )
                // {
                _this2.m_animation.play("Clip_BottomBar_BtnNotification_New"); // }
                // else
                // {
                //     this.m_animation.play();
                // }

              }
            });
          }
        };

        _proto.GetNotify = /*#__PURE__*/function () {
          var _GetNotify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var _this3 = this;

            var req, comm, Notifydata;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    {
                      _context3.next = 2;
                      break;
                    }

                  case 2:
                    req = new _cjsExports.snProto.getNoticeReq();
                    req.accountID = this.m_aid;
                    req.apiID = this.m_apiid;
                    req.gameID = this.m_gameid;
                    req.lang = Tools.ConvertLanguageToFull(LocaleStringManager.CurrLang);
                    req.subAgentCode = Define.SUB_AGENT_CODE;
                    comm = _cjsExports.snProto.getNoticeReq.encode(req).finish();
                    warn(req.accountID, req.apiID);
                    _context3.next = 12;
                    return new Promise(function (resolve, reject) {
                      var xhr = new XMLHttpRequest();
                      xhr.responseType = "arraybuffer";
                      xhr.open('post', EnvironmentConfig.NOTIFY_URL);

                      xhr.onload = function () {
                        if (this.status >= 200 && this.status < 300) {
                          var buf = new Uint8Array(xhr.response);

                          var data = _cjsExports.snProto.getNoticeResp.decode(buf);

                          if (data.error == 0) {
                            resolve(data.list);
                          } else {
                            reject(data.error);
                          }
                        } else {
                          reject(-1);
                        }
                      };

                      xhr.send(comm);
                    });

                  case 12:
                    Notifydata = _context3.sent;
                    log("GetNotify", Notifydata);
                    Notifydata.forEach(function (data) {
                      _this3.CreateNotify(data.type, data.desc, data.game);
                    });

                  case 15:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function GetNotify() {
            return _GetNotify.apply(this, arguments);
          }

          return GetNotify;
        }();

        _proto.SetRedPoint = function SetRedPoint(bool) {
          var _this$m_animation;

          this.m_isRed = bool;
          var animName = "Clip_BottomBar_BtnNotification_New"; // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {
          //     animName = "Clip_BottomBar_BtnNotification_New";
          // }

          if (this.m_redPointNode) {
            this.m_redPointNode.active = bool;
          } // if ( bool == true && !this.m_animation.getAnimationState( "backpack_on01" ).isPlaying )


          if (bool == true && (_this$m_animation = this.m_animation) != null && _this$m_animation.getState(animName) && !this.m_animation.getState(animName).isPlaying) {
            this.m_animation.play(animName);
          }
        };

        _proto.CheckRedPoint = function CheckRedPoint() {
          log("check red point");
          log(this.m_nofityHistoryList); //通知顯示完畢,整理紅點是否要顯示

          var red = false;

          for (var i = 0; i < this.m_nofityHistoryList.length; i++) {
            if (this.m_nofityHistoryList[i].read == false) {
              red = true;
              break;
            }
          }

          this.SetRedPoint(red);
        }
        /**
         * 推送已設定到的預設通知
         * @param type 編號
         * @param etc 後續參數,詳情直接看code
         */
        ;

        _proto.CreateNotify = function CreateNotify(type) {
          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.SmartMessage)) {
            return;
          } //有同類型的通知則不再推送


          for (var i = 0; i < this.m_nofityList.length; i++) {
            if (type == this.m_nofityList[i].type) {
              return;
            }
          }

          for (var _i = 0; _i < this.m_nofityHistoryList.length; _i++) {
            if (type == this.m_nofityHistoryList[_i].type) {
              return;
            }
          }

          var order = 0;
          var icon;
          var msg = "";
          var redirct = NotificationRedirect.None;
          var gameID;
          var imgName = ImgName; // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {
          //     imgName = ImgName_TaDa;
          // }

          switch (type) {
            case _cjsExports.snProto.noticeType.SignUp:
              order = NotifycationOrder[_cjsExports.snProto.noticeType.SignUp];
              icon = imgName.Icon5; // "icon_05"

              msg = arguments.length <= 1 ? undefined : arguments[1]; //Tools.StringFormat(LocaleStringManager.GetInstance().GetString(Define.StringKey.NOTIFY_SIGN_UP_1), etc[0]);

              break;

            case _cjsExports.snProto.noticeType.ItemNotUsed:
              order = NotifycationOrder[_cjsExports.snProto.noticeType.ItemNotUsed];
              icon = imgName.Icon4; // "icon_04"

              var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.NOTIFY_ITEM_1);
              str = str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
              msg = str;
              redirct = NotificationRedirect.Backpack;
              break;

            case _cjsExports.snProto.noticeType.ItemTomorrow:
              order = NotifycationOrder[_cjsExports.snProto.noticeType.ItemTomorrow];
              icon = imgName.Icon4; // "icon_04"

              msg = LocaleStringManager.GetInstance().GetString(Define.StringKey.NOTIFY_ITEM_2);
              redirct = NotificationRedirect.Backpack;
              break;

            case _cjsExports.snProto.noticeType.Message:
              order = NotifycationOrder[_cjsExports.snProto.noticeType.Message];
              icon = imgName.Icon1; // "icon_01"

              msg = arguments.length <= 1 ? undefined : arguments[1];
              break;

            case _cjsExports.snProto.noticeType.ToGame:
              order = NotifycationOrder[_cjsExports.snProto.noticeType.ToGame];
              icon = imgName.Icon1; // "icon_01"

              msg = arguments.length <= 1 ? undefined : arguments[1]; //Tools.StringFormat(LocaleStringManager.GetInstance().GetString(Define.StringKey.NOTIFY_PROMOTE_1), etc[0]);

              redirct = NotificationRedirect.Game;
              gameID = arguments.length <= 2 ? undefined : arguments[2];
              break;

            case _cjsExports.snProto.noticeType.BuyGame:
              order = NotifycationOrder[_cjsExports.snProto.noticeType.BuyGame];
              icon = imgName.Icon1; // "icon_01"

              msg = arguments.length <= 1 ? undefined : arguments[1]; //Tools.StringFormat(LocaleStringManager.GetInstance().GetString(Define.StringKey.NOTIFY_PROMOTE_2), etc[0], etc[1]);

              redirct = NotificationRedirect.Game;
              gameID = arguments.length <= 2 ? undefined : arguments[2]; // gameID = etc[2];

              break;

            case _cjsExports.snProto.noticeType.JiliLv:
              order = NotifycationOrder[_cjsExports.snProto.noticeType.JiliLv];
              icon = imgName.Icon1; // "icon_01"

              msg = LocaleStringManager.GetInstance().GetString(Define.StringKey.NOTIFY_JILILV);
              msg = msg.replace('{0}', arguments.length <= 1 ? undefined : arguments[1]);
              msg = msg.replace('{1}', arguments.length <= 2 ? undefined : arguments[2]);

              if (AppManager.LobbyData) {
                // 營運需求 APP特規
                msg = msg.replace('LV', 'VIP');
              }

              redirct = NotificationRedirect.Jili;
              break;

            case _cjsExports.snProto.noticeType.Mission:
              order = NotifycationOrder[_cjsExports.snProto.noticeType.Mission];
              icon = imgName.Icon3; // "icon_03"

              msg = LocaleStringManager.GetInstance().GetString(Define.StringKey.NOTIFY_DAILY);
              redirct = NotificationRedirect.Mission;
              break;

            case _cjsExports.snProto.noticeType.SignIn:
              order = NotifycationOrder[_cjsExports.snProto.noticeType.SignIn];
              icon = imgName.Icon6; // "icon_06"

              msg = LocaleStringManager.GetInstance().GetString(Define.StringKey.NOTIFY_SIGNIN);
              msg = msg.replace('{0}', arguments.length <= 1 ? undefined : arguments[1]);
              redirct = NotificationRedirect.SignIn;
              break;

            case _cjsExports.snProto.noticeType.BuyBonus:
              order = NotifycationOrder[_cjsExports.snProto.noticeType.BuyBonus];
              icon = arguments.length <= 1 ? undefined : arguments[1];
              msg = LocaleStringManager.GetInstance().GetString(Define.StringKey.NOTIFY_BUYBONUS);
              redirct = NotificationRedirect.BuyBonus;
              break;

            case _cjsExports.snProto.noticeType.Debris:
              order = NotifycationOrder[_cjsExports.snProto.noticeType.Debris];
              icon = imgName.Icon7; // "icon_07"

              msg = LocaleStringManager.GetInstance().GetString(Define.StringKey.NOTIFY_DEBRIS);
              redirct = NotificationRedirect.Debris;
              break;

            case _cjsExports.snProto.noticeType.Longhu:
              order = NotifycationOrder[_cjsExports.snProto.noticeType.Longhu];
              icon = imgName.Icon8; // "icon_07"

              msg = LocaleStringManager.GetInstance().GetString(Define.StringKey.NOTIFY_TOP50);
              redirct = NotificationRedirect.Longhu;
              break;
          }

          console.log('PushNotify type:', type);
          this.PushNotify(order, type, icon, msg, redirct, gameID);
        };

        _proto.PushNotify = function PushNotify(order, type, icon, msg, redirect, gameID) {
          //test
          if (!icon) {
            if (this.testIconNum == 4) {
              this.testIconNum = 1;
            }

            icon = "icon_0" + this.testIconNum;
          }

          this.m_nofityList.push({
            order: order,
            type: type,
            icon: icon,
            msg: msg,
            redirect: redirect,
            read: false,
            gameID: gameID
          });

          if (this.CanShowNotify()) {
            this.Process();
          }
        };

        _proto.RemoveNotify = function RemoveNotify() {
          for (var _len = arguments.length, types = new Array(_len), _key = 0; _key < _len; _key++) {
            types[_key] = arguments[_key];
          }

          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.SmartMessage)) {
            return;
          }

          if (this.m_showingNotify) {
            return;
          }

          var hasNo = function hasNo(num) {
            for (var _i2 = 0; _i2 < types.length; _i2++) {
              if (num == types[_i2]) {
                return true;
              }
            }

            return false;
          };

          var i = 0;

          while (i < this.m_nofityList.length) {
            if (hasNo(this.m_nofityList[i].type)) {
              this.m_nofityList.splice(i, 1);
            } else {
              i++;
            }
          }

          while (i < this.m_nofityHistoryList.length) {
            if (hasNo(this.m_nofityHistoryList[i].type)) {
              this.m_nofityHistoryList.splice(i, 1);
            } else {
              i++;
            }
          }

          console.log('RemoveNotify:', types);
        };

        _proto.CanShowNotify = function CanShowNotify() {
          return this.m_inited && this.m_showingNotify == false && this.m_state == true;
        }
        /**
         * 產生下一則通知並顯示.
         - 注意!!必須先使用CanShowNotify判斷為true後才可呼叫
         */
        ;

        _proto.Process = function Process() {
          if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.SmartMessage) || EnvironmentConfig.ENV_TYPE == Define.EVN.TEST) {
            return;
          }

          var notify;
          this.m_iconNode.active = this.m_nofityList.length + this.m_nofityHistoryList.length > 0;
          this.CheckRedPoint();

          if (this.m_historyMode == true) {
            notify = this.m_nofityHistoryList[this.m_historyNotifyIt++];

            if (notify == undefined) {
              this.m_historyMode = false;
              this.Process();
              return;
            }
          } else {
            this.m_nofityList.sort(function (a, b) {
              return a.order - b.order;
            });
            notify = this.m_nofityList.shift();

            if (notify == undefined) {
              return;
            }

            this.m_nofityHistoryList.push(notify);
          }

          this.ShowNotify(notify);
        };

        _proto.ShowNotify = function ShowNotify(notifyData) {
          var _this4 = this;

          this.m_showingNotify = true;
          var node = instantiate(this.m_notificationBarPrefab);
          var notify = node.getComponent(Notificationbar);
          this.m_notifyBar = notify;

          if (this.m_bottombar.NotifyRoot) {
            this.m_bottombar.NotifyRoot.addChild(node);
            Tools.SetZIndex(node, Define.ZOrder.NOTIFY);
          } else {
            this.m_bottombar.node.addChild(node);
            Tools.SetZIndex(node, Define.ZOrder.NOTIFY);
          }

          notify.setInfo(notifyData, this.m_bottombar, this.m_plist);
          notify.fingerTip.active = false;
          notify.scheduleOnce(function () {
            if (_this4.m_historyMode) {
              notify.fingerTip.active = true;
              notify.scheduleOnce(function () {
                notify.fingerTip.active = false;
              }, 3);
            }
          }, 3);

          if (!this.m_historyMode) {
            SoundManager.getInstance().Play(Define.AudioClips.NOTIFY_HINT);
          }

          if (!this.m_bottombar.NotifyRoot) {
            this.OnRotation(this.m_landscape);
          }

          notify.autoClose(function (read) {
            log("closeCallback!!");
            notifyData.read = read;
            _this4.m_notifyBar = null;
            _this4.m_showingNotify = false;

            if (_this4.CanShowNotify()) {
              _this4.Process();
            }
          }, this.m_historyMode ? null : 5);
        };

        _proto.ShowAllHistoryNotify = function ShowAllHistoryNotify() {
          if (this.CanShowNotify() && this.m_historyMode == false) {
            this.m_historyMode = true;
            this.m_historyNotifyIt = 0;
            this.m_nofityHistoryList.sort(function (a, b) {
              return a.order - b.order;
            });
            this.SetRedPoint(false);
            this.Process();
          }
        };

        _proto.UpdateBackpackNotify = function UpdateBackpackNotify(itemList) {
          var now = new Date();
          var useCount = 0;
          var futureUseCount = 0;
          itemList.forEach(function (item) {
            var startTime = new Date(item.start * 1000);
            var expiredtime = new Date(item.expired * 1000);
            log(startTime);
            log(expiredtime);

            if (startTime.getTime() > now.getTime()) {
              futureUseCount++;
            } else if (now.getTime() < expiredtime.getTime()) {
              useCount++;
            }
          });

          if (useCount > 0) {
            this.CreateNotify(_cjsExports.snProto.noticeType.ItemNotUsed);
          } else {
            this.RemoveNotify(_cjsExports.snProto.noticeType.ItemNotUsed);
          }

          if (futureUseCount > 0) {
            this.CreateNotify(_cjsExports.snProto.noticeType.ItemTomorrow);
          } else {
            this.RemoveNotify(_cjsExports.snProto.noticeType.ItemTomorrow);
          }

          if (this.CanShowNotify()) {
            this.Process();
          }
        };

        _proto.CleanBackpackNotify = function CleanBackpackNotify() {
          this.RemoveNotify(_cjsExports.snProto.noticeType.ItemNotUsed);
          this.RemoveNotify(_cjsExports.snProto.noticeType.ItemTomorrow);
        };

        _proto.UpdateMissionNotify = function UpdateMissionNotify(info) {
          var hasMissionNofify = false;

          for (var i = 0; i < info.DailyMissionList.length; i++) {
            var mission = info.DailyMissionList[i];
            var progress = Tools.strip(mission.CurrentCount / mission.TotalCount);

            if (progress >= 0.8 && progress < 1) {
              hasMissionNofify = true;
              break;
            }
          } // to do


          if (hasMissionNofify) {
            this.CreateNotify(_cjsExports.snProto.noticeType.Mission);
          } else {
            this.RemoveNotify(_cjsExports.snProto.noticeType.Mission);
          }
        };

        _proto.UpdateSignInNotify = function UpdateSignInNotify(nowExp, treasure) {
          if (this.m_hasSignIn) {
            this.RemoveNotify(_cjsExports.snProto.noticeType.SignIn);
          }

          var exp = Tools.strip(nowExp);

          for (var i = 0; i < treasure.length; i++) {
            var tExp = Tools.strip(treasure[i].Exp);
            var expRate = Tools.divide(exp, tExp);

            if (!treasure[i].IsOpen) {
              if (expRate >= 0.8 && expRate < 1 && !this.m_hasSignIn) {
                this.CreateNotify(_cjsExports.snProto.noticeType.SignIn, Tools.strip(tExp - exp));
                this.m_hasSignIn = true;
              }
            }
          }

          this.m_hasSignIn = true;
        };

        _proto.UpdateJiliLvNotify = function UpdateJiliLvNotify(vipInfo) {
          var rate = Tools.strip(vipInfo.Exp / vipInfo.NextLevel);
          var bias = Tools.strip(vipInfo.NextLevel - vipInfo.Exp);
          var brand = Brand.JILI;

          if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
            brand = Brand.TADA;
          }

          if (AppManager.LobbyData) {
            // 營運需求 APP特規
            if (vipInfo.Lv >= 1 && rate >= 0.8 && rate < 1) {
              this.CreateNotify(_cjsExports.snProto.noticeType.JiliLv, bias, brand);
            } else if (vipInfo.Lv == 0 && rate >= 0.5 && rate < 1) {
              this.CreateNotify(_cjsExports.snProto.noticeType.JiliLv, bias, brand);
            } else {
              this.RemoveNotify(_cjsExports.snProto.noticeType.JiliLv);
            }
          } else {
            if (vipInfo.Lv >= 0 && rate >= 0.8 && rate < 1) {
              this.CreateNotify(_cjsExports.snProto.noticeType.JiliLv, bias, brand);
            } else {
              this.RemoveNotify(_cjsExports.snProto.noticeType.JiliLv);
            }
          }
        };

        _proto.UpdateBuyBonusNotify = function UpdateBuyBonusNotify(icon) {
          this.CreateNotify(_cjsExports.snProto.noticeType.BuyBonus, icon);
        };

        _proto.UpdateDebrisNotify = function UpdateDebrisNotify(get) {
          if (get) {
            this.RemoveNotify(_cjsExports.snProto.noticeType.Debris); // 三次後不再創建新的Notify

            if (this.m_debrisCount < 3) {
              this.CreateNotify(_cjsExports.snProto.noticeType.Debris);
              this.m_debrisCount++;
            }
          }
        };

        _proto.UpdateLonghuNotify = function UpdateLonghuNotify() {
          this.CreateNotify(_cjsExports.snProto.noticeType.Longhu);
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          this.m_landscape = isLandscape;

          if (this.m_showingNotify == true) {
            var node = this.m_notifyBar.node;
            var y = node.getComponent(UITransform).height / 2; // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {

            y += 30; // }

            node.position = v3(((isLandscape ? -Define.DEFAULT_LANDSCAPE_SIZE.width + 8 : -Define.DEFAULT_LANDSCAPE_SIZE.height + 19) + node.getComponent(UITransform).width) / 2, y);
          }
        };

        return NotificationManager;
      }());
      NotificationManager._instance = new NotificationManager();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/other", ['./Define.ts', './EnvironmentConfig.ts', './EnvironmentConfigTestPath.ts', './BaseState.ts', './StateManager.ts', './GameAppA.ts', './GameAppBase.ts', './GameAppBaseView.ts', './DataStruct.ts', './ConnectManager.ts', './ConnectionManager.ts', './ConnectionSpeed.ts', './LifeSocket.ts', './Request.ts', './lifeService.mjs_cjs=&original=.js', './lotto.mjs_cjs=&original=.js', './pgame.mjs_cjs=&original=.js', './gaiaProto.mjs_cjs=&original=.js', './smartNotice.mjs_cjs=&original=.js', './BuyBonusBtn.ts', './BuyBonusView.ts', './AwardCell.ts', './CellComponent.ts', './Debris.ts', './DebrisBtn.ts', './DebrisCell.ts', './DebrisProtocal.ts', './ExchangeNumComponent.ts', './debrisproto.mjs_cjs=&original=.js', './Features.ts', './FeaturesComponent.ts', './FeaturesDemoComponent.ts', './FeaturesDemoHintComponent.ts', './FeaturesDemoSelectComponent.ts', './SelectBtn.ts', './GiftCode.ts', './BackpackManager.ts', './BuyBonusManager.ts', './DailyMissionManager.ts', './DebrisManager.ts', './GaiaManager.ts', './GiftCodeManager.ts', './IframeCommandManager.ts', './ManagerDataStructure.ts', './StyleChangeManager.ts', './TrialManager.ts', './RankItem.ts', './TiggerRank.ts', './longhu.mjs_cjs=&original=.js', './AutoPlaySetting.ts', './AutoPlaySettingPanel.ts', './AutoPlaySettingPanel_BS.ts', './AutoPlaySettingPanel_DFI.ts', './AutoPlaySettingPanel_DFIII.ts', './AutoPlaySettingPanel_FD.ts', './AutoPlaySettingPanel_MS.ts', './Backpack.ts', './BackpackComponent.ts', './GameCell.ts', './ItemCell.ts', './MsgCell.ts', './GameItems.ts', './ItemBall.ts', './ItemDetail.ts', './ItemEnd.ts', './ItemGet.ts', './ItemList.ts', './ItemSystemMsgs.ts', './ItemUse.ts', './OtherGames.ts', './Protocol.ts', './SpinEft.ts', './itemproto.mjs_cjs=&original=.js', './BarBodyComponent.ts', './BottombarManager.ts', './BottombarView.ts', './BottombarView2.ts', './BottombarViewbc.ts', './Discount.ts', './EffectWin.ts', './ExtraManager.ts', './IconBox.ts', './IconSorter.ts', './ItemInfo.ts', './MayLike.ts', './BuffManager.ts', './buffproto.mjs_cjs=&original=.js', './CommonTextManager.ts', './CommonWebPage.ts', './DailyMission.ts', './DailyMissionItem.ts', './DailyMissionRewardCell.ts', './GameLsitView.ts', './GetRedLetter.ts', './MissionBtn.ts', './MissionListView.ts', './MissionProtocal.ts', './RedDiamondGet.ts', './missionCProto.mjs_cjs=&original=.js', './BigFavorHint.ts', './BigWinReplay.ts', './Favor.ts', './IconTemplate.ts', './PlayerInfo.ts', './Recommend.ts', './SignIn.ts', './SignInItem.ts', './SignInProtocol.ts', './ViewTemplate.ts', './promotion.mjs_cjs=&original=.js', './FloatView.ts', './EffectView.ts', './JPAwardView.ts', './JPBanner.ts', './JPBar.ts', './JPBtn.ts', './JPDesc.ts', './JPInfoView.ts', './JPItem.ts', './JPManager.ts', './JPMarquee.ts', './JPOtherGamesView.ts', './JPResult.ts', './JPRollingValue.ts', './ILoadingView.ts', './MsgBox.ts', './MsgBoxModel.ts', './MsgBoxView.ts', './CurrcncyItem.ts', './CurrencyChange.ts', './Wallet.ts', './MHBBtn.ts', './MHBDataStructure.ts', './MHBDesc.ts', './MHBIconTemplate.ts', './MHBInfo.ts', './MHBItem.ts', './MHBManager.ts', './MHBMarquee.ts', './MHBOtherGameView.ts', './MHBResult.ts', './MHBRollingValue.ts', './NotificationManager.ts', './Notificationbar.ts', './RankTestAck.ts', './Rankboard.ts', './RankboardItem.ts', './RankboardPage.ts', './RankboardReward.ts', './WebPage.ts', './SloganManager.ts', './LevelManager.ts', './levelservice.mjs_cjs=&original=.js', './RecordView.ts', './TrialReward.ts', './TrialSetting.ts', './TrialView.ts', './VipManager.ts', './VolatilityBar.ts', './VolatilityIcon.ts', './VolatilityManager.ts', './VolatilityMsg.ts', './Mechanism.ts', './AppManager.ts', './AudioSourceExtension.ts', './AutoShowManager.ts', './CommonEffect.ts', './ErrorMsgManager.ts', './FiniteState.ts', './GFX.ts', './LoadPrefabManager.ts', './LoadRemotePlist.ts', './LocalStorageManager.ts', './LocaleStringManager.ts', './ParticleControl.ts', './RetryManager.ts', './RookieHintManager.ts', './RoundController.ts', './SoundManager.ts', './BoneFollow.ts', './BasicSpineController.ts', './SkeletonController.ts', './SpineController.ts', './SlotActivatorExample.ts', './SpineExampleMenu.ts', './SpineExampleMenuBack.ts', './NewBoneFollow.ts', './NewSlotColorFollow.ts', './SkeletonSync.ts', './SlotActivator.ts', './SlotColorFollow.ts', './SlotCulling.ts', './SpineKit.ts', './SwipeManager.ts', './TimeBool.ts', './ToJsonObject.ts', './Tools.ts', './GaussBlurManager.ts', './GaussBlursFrag.ts', './iOSDevice.ts', './BigWinComponent.ts', './EvtReceiver.ts', './FeaturePageComponent.ts', './FeatureViewComponent.ts', './GameIconComponent.ts', './GroupNode.ts', './LinesGeneraterComponent.ts', './ManualComponent.ts', './MarqueeComponent.ts', './NearWinEffectComponent.ts', './PlayReadyComponent.ts', './RookieHintComponent.ts', './ShakeComponent.ts'], function () {
  'use strict';

  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

System.register("chunks:///_virtual/OtherGames.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './GameCell.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, Prefab, ScrollView, Animation, instantiate, Component, Define, LocaleStringManager, GameCell, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Prefab = module.Prefab;
      ScrollView = module.ScrollView;
      Animation = module.Animation;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      GameCell = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "85aa7RlMXlBs5xjI973nQck", "OtherGames", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var OtherGames = exports('default', (_dec = property({
        type: Label,
        tooltip: "提示"
      }), _dec2 = property({
        type: Node,
        tooltip: "內容"
      }), _dec3 = property({
        type: Prefab,
        tooltip: "欄位"
      }), _dec4 = property({
        type: ScrollView,
        tooltip: "scroll view"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(OtherGames, _Component);

        function OtherGames() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_hintLabel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_cellPrefab", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_scrollView", _descriptor4, _assertThisInitialized(_this));

          _this.m_cells = [];
          _this.m_isLandscape = true;
          return _this;
        }

        var _proto = OtherGames.prototype;

        _proto.SetTxt = function SetTxt() {
          Tools.SetFont(this.m_hintLabel);

          if (this.m_isLandscape) {
            var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_WARNING3 + "1");
            str = str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
            this.m_hintLabel.string = LocaleStringManager.GetInstance().GetString(str);
          } else {
            var _str = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_WARNING3 + "0");

            _str = _str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
            this.m_hintLabel.string = LocaleStringManager.GetInstance().GetString(_str);
          }

          for (var i = 0; i < this.m_cells.length; i++) {
            this.m_cells[i].SetTxt();
          }
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          this.m_isLandscape = isLandscape;

          if (isLandscape) {
            this.node.getComponent(Animation).play("Clip_Backpack_OtherGame_Landscape");
            var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_WARNING3 + "1");
            str = str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
            this.m_hintLabel.string = LocaleStringManager.GetInstance().GetString(str);
          } else {
            this.node.getComponent(Animation).play("Clip_Backpack_OtherGame_Portrait");

            var _str2 = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_WARNING3 + "0");

            _str2 = _str2.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
            this.m_hintLabel.string = LocaleStringManager.GetInstance().GetString(_str2);
          }
        }
        /**@ch 設定背包第二個頁籤(Other Game) */
        ;

        _proto.SetInfo = function SetInfo(list) {
          // 先移除實體卡
          for (var i = 0; i < list.length; i++) {
            if (list[i].gameid === Define.GAME_ID.ENTITY) {
              list.splice(i, 1);
              break;
            }
          }

          for (var _i = 0; _i < list.length; _i++) {
            var cell = this.m_cells[_i];

            if (!cell) {
              var node = instantiate(this.m_cellPrefab);
              this.m_contentNode.addChild(node);
              cell = node.getComponent(GameCell);
              this.m_cells.push(cell);
            }

            cell.node.active = true;
            cell.SetInfo(list[_i]);
            cell.SetArrowNode(_i === 0);
            cell.SetTxt();
          }

          if (this.m_cells.length > list.length) {
            for (var _i2 = list.length; _i2 < this.m_cells.length; _i2++) {
              this.m_cells[_i2].node.active = true;
            }
          }
        };

        _proto.ScrollToTop = function ScrollToTop() {
          this.m_scrollView.scrollToTop();
        };

        return OtherGames;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_hintLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_contentNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_cellPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_scrollView", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ParticleControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, ParticleSystem2D, Mat4, Vec3, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ParticleSystem2D = module.ParticleSystem2D;
      Mat4 = module.Mat4;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "bff80rOKv1GOrOwer8GKzUK", "ParticleControl", undefined);

      var ccclass = _decorator.ccclass,
          requireComponent = _decorator.requireComponent,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var ParticleControl = exports('default', (_dec = requireComponent(ParticleSystem2D), ccclass(_class = _dec(_class = executeInEditMode(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ParticleControl, _Component);

        function ParticleControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.m_particlePositionType = null;
          _this.m_particleEmitterType = null;
          _this.m_startSize = null;
          _this.m_startSizeVar = null;
          _this.m_endSize = null;
          _this.m_endSizeVar = null;
          _this.m_posVar = null;
          _this.m_gravity = null;
          _this.m_tangentialAccel = null;
          _this.m_tangentialAccelVar = null;
          _this.m_radialAccel = null;
          _this.m_radialAccelVar = null;
          _this.m_speed = null;
          _this.m_speedVar = null;
          _this.m_startRadius = null;
          _this.m_startRadiusVar = null;
          _this.m_endRadius = null;
          _this.m_endRadiusVar = null;
          _this.m_particleSys = null;
          _this.m_nodeTransformMat = new Mat4(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          _this.m_nodeScaleVec = new Vec3(0, 0, 0);
          _this.m_toScale = 1;
          _this.m_positionTypeIsFree = false;
          _this.m_gate = false;
          return _this;
        }

        var _proto = ParticleControl.prototype;

        _proto.onLoad = function onLoad() {
          this.m_particleSys = this.node.getComponent(ParticleSystem2D);
          this.m_particlePositionType = this.m_particleSys.positionType;

          if (this.m_particlePositionType == ParticleSystem2D.PositionType.FREE) {
            this.m_positionTypeIsFree = true;
            this.m_gate = true;
          } // Storage original particle parameters.
          // Do not run in editor, otherwise component values will be modified.


          if (this.m_positionTypeIsFree) {
            this.m_particleEmitterType = this.m_particleSys.emitterMode;
            this.m_startSize = this.m_particleSys.startSize;
            this.m_startSizeVar = this.m_particleSys.startSizeVar;
            this.m_endSize = this.m_particleSys.endSize;
            this.m_endSizeVar = this.m_particleSys.endSizeVar;
            this.m_posVar = this.m_particleSys.posVar;

            if (this.m_particleEmitterType == ParticleSystem2D.EmitterMode.GRAVITY) {
              this.m_gravity = this.m_particleSys.gravity;
              this.m_tangentialAccel = this.m_particleSys.tangentialAccel;
              this.m_tangentialAccelVar = this.m_particleSys.tangentialAccelVar;
              this.m_radialAccel = this.m_particleSys.radialAccel;
              this.m_radialAccelVar = this.m_particleSys.radialAccelVar;
              this.m_speed = this.m_particleSys.speed;
              this.m_speedVar = this.m_particleSys.speedVar;
            } else if (this.m_particleEmitterType == ParticleSystem2D.EmitterMode.RADIUS) {
              this.m_startRadius = this.m_particleSys.startRadius;
              this.m_startRadiusVar = this.m_particleSys.startRadiusVar;
              this.m_endRadius = this.m_particleSys.endRadius;
              this.m_endRadiusVar = this.m_particleSys.endRadiusVar;
            } // Get initial scale.


            this.node.getWorldMatrix(this.m_nodeTransformMat);
            this.m_nodeTransformMat.getScale(this.m_nodeScaleVec);
            this.m_toScale = this.m_nodeScaleVec.x;
          }
        };

        _proto.update = function update(dt) {
          if (this.m_positionTypeIsFree) {
            // Refresh current scale.
            this.node.getWorldMatrix(this.m_nodeTransformMat);
            this.m_nodeTransformMat.getScale(this.m_nodeScaleVec); // Set flag if current scale not equal last tick or start size of particle is incorrect.

            if (this.m_nodeScaleVec.x != this.m_toScale || this.m_particleSys.startSize != this.m_nodeScaleVec.x * this.m_startSize) {
              this.m_gate = true;
            }

            if (this.m_gate) {
              this.m_gate = false;
              this.m_toScale = this.m_nodeScaleVec.x;
              this.m_particleSys.startSize = this.m_toScale * this.m_startSize;
              this.m_particleSys.startSizeVar = this.m_toScale * this.m_startSizeVar;
              this.m_particleSys.endSize = this.m_toScale * this.m_endSize;
              this.m_particleSys.endSizeVar = this.m_toScale * this.m_endSizeVar;
              this.m_particleSys.posVar.x = this.m_toScale * this.m_posVar.x;
              this.m_particleSys.posVar.y = this.m_toScale * this.m_posVar.y;

              if (this.m_particleEmitterType == ParticleSystem2D.EmitterMode.GRAVITY) {
                this.m_particleSys.gravity.x = this.m_toScale * this.m_gravity.x;
                this.m_particleSys.gravity.y = this.m_toScale * this.m_gravity.y;
                this.m_particleSys.tangentialAccel = this.m_toScale * this.m_tangentialAccel;
                this.m_particleSys.tangentialAccelVar = this.m_toScale * this.m_tangentialAccelVar;
                this.m_particleSys.radialAccel = this.m_toScale * this.m_radialAccel;
                this.m_particleSys.radialAccelVar = this.m_toScale * this.m_radialAccelVar;
                this.m_particleSys.speed = this.m_toScale * this.m_speed;
                this.m_particleSys.speedVar = this.m_toScale * this.m_speedVar;
              } else if (this.m_particleEmitterType == ParticleSystem2D.EmitterMode.RADIUS) {
                this.m_particleSys.startRadius = this.m_toScale * this.m_startRadius;
                this.m_particleSys.startRadiusVar = this.m_toScale * this.m_startRadiusVar;
                this.m_particleSys.endRadius = this.m_toScale * this.m_endRadius;
                this.m_particleSys.endRadiusVar = this.m_toScale * this.m_endRadiusVar;
              }
            }
          }
        };

        return ParticleControl;
      }(Component)) || _class) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayerInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Sprite, SpriteFrame, Label, Button, Animation, Component, Define;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      Button = module.Button;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;

      cclegacy._RF.push({}, "c09dcf7sIhGLp5e6Ke0RLDF", "PlayerInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PlayerInfo = exports('default', (_dec = property({
        type: Node,
        tooltip: "1bar"
      }), _dec2 = property({
        type: Sprite,
        tooltip: "右邊底版"
      }), _dec3 = property({
        type: SpriteFrame,
        tooltip: "底版圖片"
      }), _dec4 = property({
        type: Label,
        tooltip: "排名"
      }), _dec5 = property({
        type: Label,
        tooltip: "會員名稱12345(暱稱)"
      }), _dec6 = property({
        type: Label,
        tooltip: "會員名稱12345(account)"
      }), _dec7 = property({
        type: Label,
        tooltip: "倍率贏分12345"
      }), _dec8 = property({
        type: Label,
        tooltip: "倍率贏分12345(調整值)"
      }), _dec9 = property({
        type: Button,
        tooltip: "精彩回顧按紐12345"
      }), _dec10 = property({
        type: Label,
        tooltip: "(自己)倍率贏分12345"
      }), _dec11 = property({
        type: Button,
        tooltip: "(自己)精彩回顧按紐12345"
      }), _dec12 = property({
        type: Animation,
        tooltip: "贏分榜動畫"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PlayerInfo, _Component);

        function PlayerInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_barNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_boardSprite", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_boardSpriteFrames", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rankLabel", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_allMemberNickName", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_allMemberAccount", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_allRate", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_allRateAdjust", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_allReplayBtn", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_myRate", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_myReplayBtn", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_playerAni", _descriptor12, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = PlayerInfo.prototype;

        _proto.OnRotation = function OnRotation(isLandscape) {
          if (isLandscape) {
            this.node.getComponent(Animation).play("playerL");
          } else {
            this.node.getComponent(Animation).play("playerS");
          }
        };

        _proto.PlayAnim = function PlayAnim(anim) {
          this.m_playerAni.play(anim);
        };

        _proto.SetRank = function SetRank(rank) {
          this.m_rankLabel.string = rank.toString();

          if (!this.m_rankLabel.font) {
            this.m_rankLabel.font = Define.DefaultFont;
          }

          var idx = rank % 2;
          this.m_barNode.active = !Boolean(idx);
          this.m_boardSprite.spriteFrame = this.m_boardSpriteFrames[idx];
        };

        _createClass(PlayerInfo, [{
          key: "AllMemberNickName",
          set: function set(v) {
            this.m_allMemberNickName.string = v;
          }
        }, {
          key: "AllMemberAccount",
          set: function set(v) {
            this.m_allMemberAccount.string = v;
          }
        }, {
          key: "AllRate",
          set: function set(v) {
            this.m_allRate.string = v;
            this.m_allRate.fontFamily = Define.DollarFontFamily;
          }
        }, {
          key: "AllRateAdjust",
          set: function set(v) {
            this.m_allRateAdjust.string = v;
            this.m_allRateAdjust.fontFamily = Define.DollarFontFamily;
          }
        }, {
          key: "MyRate",
          set: function set(v) {
            this.m_myRate.string = v;
            this.m_myRate.fontFamily = Define.DollarFontFamily;
          }
        }, {
          key: "AllReplayBtn",
          get: function get() {
            return this.m_allReplayBtn;
          }
        }, {
          key: "MyReplayBtn",
          get: function get() {
            return this.m_myReplayBtn;
          }
        }]);

        return PlayerInfo;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_barNode", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_boardSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_boardSpriteFrames", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_rankLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_allMemberNickName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_allMemberAccount", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_allRate", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_allRateAdjust", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_allReplayBtn", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_myRate", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_myReplayBtn", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_playerAni", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayReadyComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConnectionManager.ts', './Define.ts', './Wallet.ts', './LocaleStringManager.ts', './AppManager.ts', './SoundManager.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Component, ConnectionManager, Define, walletManger, LocaleStringManager, AppManager, SoundManager, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      ConnectionManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      walletManger = module.walletManger;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      AppManager = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "166d49I/xxFyq+fE3NaHuZo", "PlayReadyComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PlayReadyComponent = exports('default', (_dec = property({
        type: Sprite,
        tooltip: "遊戲標題"
      }), _dec2 = property({
        type: Sprite,
        tooltip: "開始按鈕文字圖"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PlayReadyComponent, _Component);

        function PlayReadyComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_gameTitleSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_playBtnTxt", _descriptor2, _assertThisInitialized(_this));

          _this.m_visiableCb = null;
          _this.m_featuresCb = null;
          return _this;
        }

        var _proto = PlayReadyComponent.prototype;

        _proto.Init = function Init(titleSpriteFrame, visiableCb, featuresCb) {
          this.m_gameTitleSprite.spriteFrame = titleSpriteFrame;
          this.m_visiableCb = visiableCb;
          this.m_featuresCb = featuresCb; //SetTxt

          var atlas = LocaleStringManager.GetInstance().GetCommonAtlas();

          if (atlas && this.m_playBtnTxt) {
            this.m_playBtnTxt.spriteFrame = atlas.getSpriteFrame("PlayReady_Text");
          }
        };

        _proto.OnClose = function OnClose() {
          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);

          if (this.m_visiableCb) {
            var visiable = this.m_visiableCb();
            this.node.active = visiable;
            AppManager.ShowSkyBar(this.node.parent);

            if (!visiable) {
              ConnectionManager.getInstance().SendPhaseEnteringEvent(this.FormPhaseEventParams(Define.PHASE_ENTERING_EVENT.PLAY_LEADING, Define.PHASE_RESULT.SUCCESS)); //檢查是否可以押注

              var balance = Tools.strip(walletManger.RawCoin);
              var bet = Tools.strip(walletManger.RawBetList[0]);

              if (balance >= bet) {
                ConnectionManager.getInstance().SendPhaseEnteringEvent(ConnectionManager.FormPhaseEventParams(Number(Define.AID), Number(Define.NOW_GAME_ID), Define.VERSION, Define.PHASE_ENTERING_EVENT.BALANCE_ENOUGH, Define.PHASE_RESULT.SUCCESS, Tools.GetLinkParameterByName("ssoKey"), Define.API_ID));
              }
            }
          }
        };

        _proto.Hide = function Hide(isFromUnshow) {
          if (isFromUnshow === void 0) {
            isFromUnshow = false;
          }

          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
          this.node.active = false;

          if (!isFromUnshow) {
            this.m_featuresCb && this.m_featuresCb();
          }
        };

        _proto.Show = function Show() {
          this.node.active = true;
        };

        _proto.FormPhaseEventParams = function FormPhaseEventParams(eventID, eventStatus) {
          var aid = -1;
          var apiId = 0;
          var ssoKeyString = Tools.GetLinkParameterByName("ssoKey");

          if (Define.APP && Define.APP.userInfo) {
            aid = Define.APP.userInfo.aid;
            apiId = Define.APP.userInfo.apiid;
          }

          return ConnectionManager.FormPhaseEventParams(aid, Number(Define.NOW_GAME_ID), Define.VERSION, eventID, eventStatus, ssoKeyString, apiId.toString());
        };

        return PlayReadyComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_gameTitleSprite", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_playBtnTxt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Protocol.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DataStruct.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _wrapNativeSuper, cclegacy, ConnectionDataStruct;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _wrapNativeSuper = module.wrapNativeSuper;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ConnectionDataStruct = module.ConnectionDataStruct;
    }],
    execute: function () {
      exports('ItemReqData', void 0);

      cclegacy._RF.push({}, "db7b2IzZCBKWrdYdZvLrInD", "Protocol", undefined);

      var ItemReqData;

      (function (_ItemReqData) {
        var aid = function aid() {
          this.token = "";
          this.aid = -1;
          this.lang = 0;
          this.currencynumber = 0;
        };

        _ItemReqData.aid = aid;

        var ItemUse = function ItemUse() {
          this.aid = -1;
          this.token = "";
          this.itemindex = 0;
          this.itemid = 0;
          this.amount = 0;
          this.currencynumber = 0;
        };

        _ItemReqData.ItemUse = ItemUse;

        var ItemDataReq = /*#__PURE__*/function (_ConnectionDataStruct) {
          _inheritsLoose(ItemDataReq, _ConnectionDataStruct);

          function ItemDataReq() {
            var _this6;

            _this6 = _ConnectionDataStruct.call(this) || this;
            _this6.type = ConnectionDataStruct.ErrorHandleType.Ignore;
            _this6.method = ConnectionDataStruct.RequestMethod.Post;
            _this6.url = "/item/ItemListProto";
            _this6.reqData = null;
            return _this6;
          }

          return ItemDataReq;
        }(ConnectionDataStruct.ProtocolData);

        _ItemReqData.ItemDataReq = ItemDataReq;

        var ItemUseReq = /*#__PURE__*/function (_ConnectionDataStruct2) {
          _inheritsLoose(ItemUseReq, _ConnectionDataStruct2);

          function ItemUseReq() {
            var _this7;

            _this7 = _ConnectionDataStruct2.call(this) || this;
            _this7.type = ConnectionDataStruct.ErrorHandleType.Ignore;
            _this7.method = ConnectionDataStruct.RequestMethod.Post;
            _this7.url = "/item/UseCardProto";
            _this7.reqData = null;
            return _this7;
          }

          return ItemUseReq;
        }(ConnectionDataStruct.ProtocolData);

        _ItemReqData.ItemUseReq = ItemUseReq;

        var ItemUpdate = /*#__PURE__*/function (_ConnectionDataStruct3) {
          _inheritsLoose(ItemUpdate, _ConnectionDataStruct3);

          function ItemUpdate() {
            var _this8;

            _this8 = _ConnectionDataStruct3.call(this) || this;
            _this8.method = ConnectionDataStruct.RequestMethod.Get;
            _this8.url = "/item/checknew";
            _this8.type = ConnectionDataStruct.ErrorHandleType.Ignore;
            _this8.info = new aid();
            return _this8;
          }

          return ItemUpdate;
        }(ConnectionDataStruct.ProtocolData);

        _ItemReqData.ItemUpdate = ItemUpdate;

        var GetItemMail = /*#__PURE__*/function (_ConnectionDataStruct4) {
          _inheritsLoose(GetItemMail, _ConnectionDataStruct4);

          function GetItemMail() {
            var _this9;

            _this9 = _ConnectionDataStruct4.call(this) || this;
            _this9.type = ConnectionDataStruct.ErrorHandleType.Ignore;
            _this9.method = ConnectionDataStruct.RequestMethod.Post;
            _this9.url = "/item/GetMailProto";
            _this9.reqData = null;
            return _this9;
          }

          return GetItemMail;
        }(ConnectionDataStruct.ProtocolData);

        _ItemReqData.GetItemMail = GetItemMail;

        var GetItemMailRead = /*#__PURE__*/function (_ConnectionDataStruct5) {
          _inheritsLoose(GetItemMailRead, _ConnectionDataStruct5);

          function GetItemMailRead() {
            var _this10;

            _this10 = _ConnectionDataStruct5.call(this) || this;
            _this10.method = ConnectionDataStruct.RequestMethod.Get;
            _this10.url = "/item/setread";
            _this10.type = ConnectionDataStruct.ErrorHandleType.Ignore;
            _this10.info = new aid();
            return _this10;
          }

          return GetItemMailRead;
        }(ConnectionDataStruct.ProtocolData);

        _ItemReqData.GetItemMailRead = GetItemMailRead;

        var ItemAllGameDateReq = /*#__PURE__*/function (_ConnectionDataStruct6) {
          _inheritsLoose(ItemAllGameDateReq, _ConnectionDataStruct6);

          function ItemAllGameDateReq() {
            var _this11;

            _this11 = _ConnectionDataStruct6.call(this) || this;
            _this11.type = ConnectionDataStruct.ErrorHandleType.Ignore;
            _this11.method = ConnectionDataStruct.RequestMethod.Post;
            _this11.url = "/item/AllGameItemListProto";
            _this11.reqData = null;
            return _this11;
          }

          return ItemAllGameDateReq;
        }(ConnectionDataStruct.ProtocolData);

        _ItemReqData.ItemAllGameDateReq = ItemAllGameDateReq;
      })(ItemReqData || (ItemReqData = exports('ItemReqData', {})));

      var Ack = exports('Ack', function Ack() {
        this.info = void 0;
        this.ret = -1;
      });
      var ItemAck = exports('ItemAck', /*#__PURE__*/function (_Array) {
        _inheritsLoose(ItemAck, _Array);

        function ItemAck() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Array.call.apply(_Array, [this].concat(args)) || this;
          _this.result = -1;
          _this.playeritemdata = void 0;
          return _this;
        }

        return ItemAck;
      }( /*#__PURE__*/_wrapNativeSuper(Array)));
      var MsgAck = exports('MsgAck', /*#__PURE__*/function (_Array2) {
        _inheritsLoose(MsgAck, _Array2);

        function MsgAck() {
          var _this2;

          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          _this2 = _Array2.call.apply(_Array2, [this].concat(args)) || this;
          _this2.result = -1;
          _this2.usermailackdata = void 0;
          _this2.isread = -1;
          return _this2;
        }

        return MsgAck;
      }( /*#__PURE__*/_wrapNativeSuper(Array)));
      var UseAck = exports('UseAck', function UseAck() {
        this.result = -1;
        this.itemid = 0;
        this.amount = 0;
        this.bet = 0;
        this.betlevel = 0;
        this.spinpaytype = 0;
        this.wintype = 0;
        this.winmultiplier = 0;
        this.star = 0;
        this.icon = 0;
      });
      var AllTabAck = exports('AllTabAck', function AllTabAck() {
        this.result = -1;
        this.canuseitem = void 0;
      });
      var ItemData = exports('ItemData', /*#__PURE__*/function (_Array3) {
        _inheritsLoose(ItemData, _Array3);

        function ItemData() {
          var _this3;

          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }

          _this3 = _Array3.call.apply(_Array3, [this].concat(args)) || this;
          _this3.itemindex = 0;
          _this3.itemid = 0;
          _this3.amount = 0;
          _this3.gameid = 0;
          _this3.lvmin = 0;
          _this3.lvmax = 0;
          _this3.coinlimit = 0;
          _this3.dailyremaintimes = 0;
          _this3.start = 0;
          _this3.expired = 0;
          _this3.bet = 0;
          _this3.betlevel = 0;
          _this3.spinpaytype = 0;
          _this3.givetype = 0;
          _this3.wintype = 0;
          _this3.winmultiplier = 0;
          _this3.winmaxmag = 0;
          _this3.winmagset = 0;
          _this3.itemvalue = 0;
          _this3.itemname = "";
          _this3.icon = 0;
          _this3.banreason = 0;
          _this3.itemdesc = "";
          _this3.star = 0;
          _this3.source = 0;
          _this3.gamename = "";
          return _this3;
        }

        return ItemData;
      }( /*#__PURE__*/_wrapNativeSuper(Array)));
      var MsgData = exports('MsgData', /*#__PURE__*/function (_Array4) {
        _inheritsLoose(MsgData, _Array4);

        function MsgData() {
          var _this4;

          for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
            args[_key7] = arguments[_key7];
          }

          _this4 = _Array4.call.apply(_Array4, [this].concat(args)) || this;
          _this4.idx = 0;
          _this4.accountid = 0;
          _this4.amount = 0;
          _this4.source = 0;
          _this4.content = void 0;
          _this4.created = 0;
          _this4.isread = 0;
          _this4.createtime = "";
          return _this4;
        }

        return MsgData;
      }( /*#__PURE__*/_wrapNativeSuper(Array)));
      var AllTabData = exports('AllTabData', /*#__PURE__*/function (_Array5) {
        _inheritsLoose(AllTabData, _Array5);

        function AllTabData() {
          var _this5;

          for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
            args[_key9] = arguments[_key9];
          }

          _this5 = _Array5.call.apply(_Array5, [this].concat(args)) || this;
          _this5.gameid = 0;
          _this5.ownamount = 0;
          _this5.canamount = 0;
          _this5.minitemindex = 0;
          return _this5;
        }

        return AllTabData;
      }( /*#__PURE__*/_wrapNativeSuper(Array)));
      var MsgContent = exports('MsgContent', function MsgContent() {
        this.action = 0;
        this.itemid = 0;
        this.gameid = 0;
        this.amount = 0;
        this.createtime = "";
        this.missionType = 0;
        this.msg = "";
        this.star = 0;
        this.title = "";
      });
      var MissionMsg = exports('MissionMsg', function MissionMsg() {
        this.Kind = 0;
        this.Count = 0;
        this.Bet = 0;
      });
      var RankMsg = exports('RankMsg', function RankMsg() {
        this.Desc = "";
        this.Number = "";
      });
      var BackpackProtocol = exports('default', function BackpackProtocol() {});
      BackpackProtocol.UIName = {
        /**/
        MASK: "mask",

        /**/
        BTN_CLOSE: "btn_close",

        /**/
        TABS: "tabs",

        /**/
        TAB_GAME: "tab_game",

        /**/
        TAB_ALL: "tab_all",

        /**/
        TAB_WIKI: "tab_wiki",

        /**/
        LABEL_GAME: "label_game",

        /**/
        LABEL_ALL: "label_all",

        /**/
        LABEL_WIKI: "label_wiki",

        /**/
        ITEMS: "items",

        /**/
        INFO: "info",

        /**/
        MASK2: "mask2",

        /**/
        BTN_CLOSE2: "btn_close2",

        /**/
        TITTLE: "tittle",

        /**/
        IMG: "img",

        /**/
        BET: "bet",

        /**/
        VALUE: "value",

        /**/
        VIP: "vip",

        /**/
        PROPERTY: "property",

        /**/
        CONTENT: "content",

        /**/
        BTN_USE: "btn_use"
      };
      BackpackProtocol.Language = {
        cn: 0,
        tw: 1,
        en: 2,
        th: 3,
        vn: 4,
        id: 5,
        mm: 6,
        jp: 7,
        hi: 8,
        //使用英文
        ta: 2,
        //使用英文
        ms: 10,
        ko: 11,
        bn: 12,
        //使用英文
        es: 13,
        pt: 14,
        it: 15,
        se: 16,
        de: 17,
        da: 18,
        ro: 19,
        nl: 20,
        trTR: 21,
        ruRU: 22,
        grGR: 23,
        frFR: 24
      };
      BackpackProtocol.MsgType = [[], // 無
      [// 一般獲得 1
      "", "PRIVATE_MSG_ITEM_GET_", "PRIVATE_MSG_ITEM_USE_", "PRIVATE_MSG_ITEM_TIMEOUT_"], [// 棄用 2
      "", "PRIVATE_MSG_ITEM_GET_"], [// 任務 3
      "", "PRIVATE_MSG_MISSION_GET_", "PRIVATE_MSG_MISSION_GET_"], [// 簽到 4
      "", "PRIVATE_MSG_ITEM_GET_", "PRIVATE_MSG_SIGN_GET_"], [// 排行榜 5
      "", "PRIVATE_MSG_RANK_GET_", "PRIVATE_MSG_RANK_GET_"], [// 洗碼 6
      "", "PRIVATE_MSG_ITEM_GET_", "PRIVATE_MSG_TRIAL_GET_"], [// 工具送獎 7
      "", "PRIVATE_MSG_ITEM_GET_", "PRIVATE_MSG_ITEM_GET_"], [// 一般獲得 8
      "", "PRIVATE_MSG_ITEM_GET_", "PRIVATE_MSG_ITEM_USE_", "PRIVATE_MSG_ITEM_TIMEOUT_"], [// 一般獲得 9
      "", "PRIVATE_MSG_ITEM_GET_", "PRIVATE_MSG_ITEM_USE_", "PRIVATE_MSG_ITEM_TIMEOUT_"], [// 一般獲得 10
      "", "PRIVATE_MSG_ITEM_GET_", "PRIVATE_MSG_ITEM_USE_", "PRIVATE_MSG_ITEM_TIMEOUT_"], [// 一般獲得 11
      "", "PRIVATE_MSG_ITEM_GET_", "PRIVATE_MSG_ITEM_USE_", "PRIVATE_MSG_ITEM_TIMEOUT_"], [// 一般獲得 12
      "", "PRIVATE_MSG_ITEM_GET_", "PRIVATE_MSG_ITEM_USE_", "PRIVATE_MSG_ITEM_TIMEOUT_"], [// 一般獲得 13
      "", "PRIVATE_MSG_ITEM_GET_", "PRIVATE_MSG_ITEM_USE_", "PRIVATE_MSG_ITEM_TIMEOUT_"], [// 廠商給卡 14
      "", "PRIVATE_MSG_ITEM_GET_", "PRIVATE_MSG_ITEM_USE_", "PRIVATE_MSG_ITEM_TIMEOUT_"], [// 廠商給卡 15
      "", "PRIVATE_MSG_ITEM_GET_", "PRIVATE_MSG_ITEM_USE_", "PRIVATE_MSG_ITEM_TIMEOUT_"], [// 廠商給卡 16
      "", "PRIVATE_MSG_ITEM_GET_", "PRIVATE_MSG_ITEM_USE_", "PRIVATE_MSG_ITEM_TIMEOUT_"], [// 廠商給卡 17
      "", "PRIVATE_MSG_Collect_GET_", "PRIVATE_MSG_ITEM_USE_", "PRIVATE_MSG_ITEM_TIMEOUT_"], [// 禮包 18
      "", "PRIVATE_MSG_ITEM_GET_", "PRIVATE_MSG_ITEM_USE_", "PRIVATE_MSG_ITEM_TIMEOUT_"], [// APP扭蛋 19
      "", "PRIVATE_MSG_ITEM_GET_", "PRIVATE_MSG_ITEM_USE_", "PRIVATE_MSG_ITEM_TIMEOUT_"], [// APP升級 20
      "", "PRIVATE_MSG_ITEM_GET_", "PRIVATE_MSG_ITEM_USE_", "PRIVATE_MSG_ITEM_TIMEOUT_"]];
      BackpackProtocol.MissionKind = "PRIVATE_MSG_MISSION_KIND_";
      BackpackProtocol.Color = [[], // 無
      [// 一般獲得 1
      "FFFFFF", // 白
      "FEFFA3", // 淡黃
      "FFA3DD", // 粉紫
      "939393" // 灰
      ], [// 棄用 2
      "FFFFFF", // 白
      "FEFFA3", // 淡黃
      "FFFFFF" // 白
      ], [// 任務 3
      "FFFFFF", // 白
      "FFFFFF", // 淡黃
      "FFFFFF" // 白
      ], [// 簽到 4
      "FFFFFF", // 白
      "FFFFFF", // 淡黃
      "FFFFFF" // 白
      ], [// 排行榜 5
      "FFFFFF", // 白
      "FFFFFF", // 淡黃
      "FFFFFF" // 白
      ], [// 排行榜 6
      "FFFFFF", // 白
      "FFFFFF", // 淡黃
      "FFFFFF" // 白
      ], [// 一般獲得 7
      "FFFFFF", // 白
      "FEFFA3", // 淡黃
      "FFA3DD", // 粉紫
      "939393" // 灰
      ], [// 一般獲得 8
      "FFFFFF", // 白
      "FEFFA3", // 淡黃
      "FFA3DD", // 粉紫
      "939393" // 灰
      ], [// 一般獲得 9
      "FFFFFF", // 白
      "FEFFA3", // 淡黃
      "FFA3DD", // 粉紫
      "939393" // 灰
      ], [// 一般獲得 10
      "FFFFFF", // 白
      "FEFFA3", // 淡黃
      "FFA3DD", // 粉紫
      "939393" // 灰
      ], [// 一般獲得 11
      "FFFFFF", // 白
      "FEFFA3", // 淡黃
      "FFA3DD", // 粉紫
      "939393" // 灰
      ], [// 一般獲得 12
      "FFFFFF", // 白
      "FEFFA3", // 淡黃
      "FFA3DD", // 粉紫
      "939393" // 灰
      ], [// 一般獲得 13
      "FFFFFF", // 白
      "FEFFA3", // 淡黃
      "FFA3DD", // 粉紫
      "939393" // 灰
      ], [// 一般獲得 14
      "FFFFFF", // 白
      "FEFFA3", // 淡黃
      "FFA3DD", // 粉紫
      "939393" // 灰
      ], [// 一般獲得 15
      "FFFFFF", // 白
      "FEFFA3", // 淡黃
      "FFA3DD", // 粉紫
      "939393" // 灰
      ], [// 一般獲得 16
      "FFFFFF", // 白
      "FEFFA3", // 淡黃
      "FFA3DD", // 粉紫
      "939393" // 灰
      ], [// 一般獲得 17
      "FFFFFF", // 白
      "FEFFA3", // 淡黃
      "FFA3DD", // 粉紫
      "939393" // 灰
      ], [// 禮包 18
      "FFFFFF", // 白
      "FEFFA3", // 淡黃
      "FFA3DD", // 粉紫
      "939393" // 灰
      ]];
      BackpackProtocol.Ret = {
        SERVER_SUCCESS: 0,
        // 正常
        SERVER_ERROR_SEATE: 799,
        // 錯誤用
        SERVER_NOUSE: 899,
        // 無用
        SERVER_MAINTAIN: 998,
        // 維護中
        SERVER_SHUTDOWN: 999,
        // 關機中
        SERVER_NEED_AID: 1001,
        // 需要AID
        SERVER_NEED_LOGIN: 1002,
        // 沒有玩家
        SERVER_TOKEN_ERROR: 1003 // TOKEN 錯誤

      };
      BackpackProtocol.ItemAck = {
        ITEM_USESUCCESS: 0,
        ITEM_NOTONLINE: 500,
        // 此時未開放
        ITEM_VIPTOOLOW: 501,
        // VIP太低
        ITEM_VIPTOOHIGH: 502,
        // VIP太高
        ITEM_MONEYNOTENOUGH: 503,
        // 金錢不足
        ITEM_BADEFFECTIVETIME: 504,
        // 時候未到
        ITEM_BADEXPIREDTIME: 505,
        // 時辰已過
        ITEM_BADVENDOR: 506,
        // 發行商無權限
        ITEM_OVERTIMES: 507,
        // 超過次數
        ITEM_GETITEMSDBFAIL: 508,
        // DB寫入失敗
        ITEM_USEITEMSDBFAIL: 509,
        // DB寫入失敗
        ITEM_RTPFAIL: 520 // DB寫入失敗

      };
      BackpackProtocol.Source = {
        COMMON: 1,
        UNKNOW: 2,
        MISSION: 3,
        SIGN: 4,
        RANKING: 5,
        TRIAL: 6,
        COLLECT: 17,
        LEVEL: 20
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Rankboard.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './EnvironmentConfig.ts', './LocaleStringManager.ts', './SoundManager.ts', './Tools.ts', './RankboardItem.ts', './MsgBox.ts', './BottombarManager.ts', './RankboardPage.ts', './RankboardReward.ts', './Wallet.ts', './RankTestAck.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Label, Sprite, Prefab, error, input, Input, KeyCode, log, Layout, UITransform, tween, UIOpacity, ScrollView, Animation, instantiate, Component, Define, EnvironmentConfig, LocaleStringManager, SoundManager, Tools, RankboardItem, MsgBox, BottombarManager, RankboardPage, RankboardReward, walletManger, RankTestAck;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Sprite = module.Sprite;
      Prefab = module.Prefab;
      error = module.error;
      input = module.input;
      Input = module.Input;
      KeyCode = module.KeyCode;
      log = module.log;
      Layout = module.Layout;
      UITransform = module.UITransform;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      ScrollView = module.ScrollView;
      Animation = module.Animation;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      RankboardItem = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      BottombarManager = module.default;
    }, function (module) {
      RankboardPage = module.default;
    }, function (module) {
      RankboardReward = module.default;
    }, function (module) {
      walletManger = module.walletManger;
    }, function (module) {
      RankTestAck = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _class3;

      cclegacy._RF.push({}, "8196bzY0KVOEqmRgGB+J5d5", "Rankboard", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; // America (TADA用)---------------------------
      //顯示順序

      var Order;

      (function (Order) {
        Order[Order["blank"] = 0] = "blank";
        Order[Order["rank"] = 1] = "rank";
        Order[Order["award"] = 2] = "award";
        Order[Order["activity"] = 3] = "activity";
      })(Order || (Order = {}));

      var Rankboard = exports('default', (_dec = property(Node), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property({
        type: Node,
        tooltip: "各頁籤上顯示check亮起的部分"
      }), _dec8 = property({
        type: Node,
        tooltip: "各頁籤對應打開的頁面"
      }), _dec9 = property(Node), _dec10 = property(Label), _dec11 = property(Label), _dec12 = property(Label), _dec13 = property(Sprite), _dec14 = property(Sprite), _dec15 = property(Sprite), _dec16 = property(Node), _dec17 = property(Node), _dec18 = property(Node), _dec19 = property(Node), _dec20 = property([Prefab]), _dec21 = property([Node]), _dec22 = property(Node), _dec23 = property([Label]), _dec24 = property(Node), _dec25 = property(Label), _dec26 = property(Node), _dec27 = property(Node), _dec28 = property({
        type: Node,
        tooltip: "rank內頁按鈕"
      }), _dec29 = property({
        type: Node,
        tooltip: "reward內頁按鈕"
      }), _dec30 = property({
        type: Label,
        tooltip: "rank內頁按鈕文字"
      }), _dec31 = property({
        type: Label,
        tooltip: "reward內頁按鈕文字"
      }), _dec32 = property({
        type: Prefab,
        tooltip: "共用活動"
      }), ccclass(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Rankboard, _Component);

        function Rankboard() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listNode_TADA_Rank", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listNode_TADA_Reward", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tagNode1", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tagNode2", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tagNode3", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pageNodesCheckBg", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rankingPages", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "myRankNode", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "myRankNode_TADA_Rank", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "myRankNode_TADA_Name", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "myRankNode_TADA_Points", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_img_tittle", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_img_Tags", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_img_Tags_On", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollBar", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollBar_Rank", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollBar_Reward", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollView", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rankItemPrefab", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "webViewPos", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mask", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gameDesc", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scoreBonusNode", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scoreBonusText", _descriptor25, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "CloseNode", _descriptor26, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maskNode", _descriptor27, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rankInPageBtns", _descriptor28, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rewardInPageBtns", _descriptor29, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rankInPageBtnsTxt", _descriptor30, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rewardInPageBtnsTxt", _descriptor31, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_common_WebPage", _descriptor32, _assertThisInitialized(_this));

          _this.show = false;
          _this.myRank = null;
          _this.myRank_old = null;
          _this.rankScore = [];
          _this.pageData = [];
          _this.page = Order.rank;
          _this.inPage = 0;
          _this.scrollShowMax = 5;
          _this.updateTime = 0;
          _this.bActionStart = false;
          _this.accountName = '';
          _this.nickName = '';
          _this.myRankitemNode = null;
          _this.actionType = 1;
          _this.iconNodes = void 0;
          _this.iconTime = void 0;
          _this.m_isLandscape = void 0;
          _this.webPage = void 0;
          _this.inited = false;
          _this.isRankChange = false;
          _this.isRankStartMode = false;
          _this.rewardList = [];
          _this.rewardRankStr = [];
          _this.rankList = [];
          _this.canAutoShowUI = false;
          _this.m_bottombar = void 0;
          _this.m_nickNameCount = 0;
          _this.scoreBonus = void 0;
          _this.rankRawData = void 0;
          _this._eventCb = void 0;
          _this.eventType = {
            Open: 1,
            Close: 2
          };
          _this.m_isInitEnd = false;
          _this.m_urlParam = "";
          _this.m_changeNameTime = 0;
          _this.m_currentTouchName = 0;
          _this.firstOpen = true;
          _this.autoShowed = true;
          return _this;
        }

        var _proto = Rankboard.prototype;

        _proto.callEventCb = function callEventCb(event) {
          if (this._eventCb) {
            this._eventCb(event);
          }
        }
        /** 事件type*/
        ;

        Rankboard.OnExit = function OnExit() {
          this.actionStartTime = null; // 活動開始時間(UTC)

          this.actionEndTime = null; // 活動結束時間(UTC)

          this.m_gameid = null;
          this.m_aid = null;
          this.m_apiid = null;
          this.m_siteid = null;
          /**排行榜未初始化完畢就預約顯示活動頁用 */

          this.readyShowWebPage = false;
          this.ReqMail = null;
        };

        _proto.onLoad = function onLoad() {};

        _proto.start = function start() {
          var _this2 = this;

          Tools.SetFont(this.gameDesc[0]);
          Tools.SetFont(this.gameDesc[1]);

          if (this.scoreBonusText) {
            Tools.SetFont(this.scoreBonusText);
          } // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {


          this.CloseNode.on(Node.EventType.TOUCH_END, function (event) {
            _this2.toolEvent(null, "2");
          });
          this.maskNode.on(Node.EventType.TOUCH_END, function (event) {
            _this2.toolEvent(null, "2");
          });
          this.tagNode1.on(Node.EventType.TOUCH_END, function (event) {
            if (_this2.m_currentTouchName == Order.rank) {
              return;
            }

            _this2.BtnSelect(Order.rank);

            _this2.toolEvent(null, "1");
          });
          this.tagNode2.on(Node.EventType.TOUCH_END, function (event) {
            if (_this2.m_currentTouchName == Order.award) {
              return;
            }

            _this2.BtnSelect(Order.award);

            _this2.toolEvent(null, "4");
          });
          this.tagNode3.on(Node.EventType.TOUCH_END, function (event) {
            if (_this2.m_currentTouchName == Order.activity) {
              return;
            } // this.BtnSelect( Order.activity )


            _this2.toolEvent(null, "5");
          }); // }

          if (this.m_rankInPageBtns[0]) {
            this.m_rankInPageBtns[0].on(Node.EventType.TOUCH_END, function (event) {
              error('rankInPageBtns 0');

              _this2.SetInPageBtnOn(0);

              _this2.getRankInfo(0);
            });
            this.m_rankInPageBtns[1].on(Node.EventType.TOUCH_END, function (event) {
              error('rankInPageBtns 1');

              _this2.SetInPageBtnOn(1);

              _this2.getRankInfo(1);
            });
            this.m_rewardInPageBtns[0].on(Node.EventType.TOUCH_END, function (event) {
              error('rewardInPageBtns 0');

              _this2.SetInPageBtnOn(0);

              _this2.getRankInfo(0);

              _this2.updateReward();
            });
            this.m_rewardInPageBtns[1].on(Node.EventType.TOUCH_END, function (event) {
              error('rewardInPageBtns 1');

              _this2.SetInPageBtnOn(1);

              _this2.getRankInfo(1);

              _this2.updateReward();
            });
          }

          if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
            // 測試專用
            input.on(Input.EventType.KEY_DOWN, function (event) {
              switch (event.keyCode) {
                case KeyCode.KEY_Q:
                  Define.TestRankType = 1;
                  break;

                case KeyCode.KEY_W:
                  Define.TestRankType = 2;
                  break;

                case KeyCode.KEY_E:
                  Define.TestRankType = 3;
                  break;

                case KeyCode.KEY_R:
                  Define.TestRankType = 4;
                  break;
              }

              log("input Define.TestRankType:", Define.TestRankType);
            });
          }
        };

        _proto.update = function update(dt) {
          var _this3 = this;

          this.updateTime -= dt;

          if (this.updateTime <= 0) {
            var now = new Date();

            if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
              this.updateTime = 10;
            } else {
              this.updateTime = Rankboard.actionStartTime && Rankboard.actionStartTime <= now ? 120 : 300;
            }

            Rankboard.getRankData(Rankboard.m_gameid, Rankboard.m_apiid, Rankboard.m_aid, Rankboard.m_siteid, function (obj) {
              if (obj && obj.Error == "" && obj.Data) {
                var earliestTime = obj.Data[0].StartTimestamp;
                var latestTime = obj.Data[0].EndedTimestamp;

                for (var i = 0; i < obj.Data.length; i++) {
                  if (earliestTime > obj.Data[i].StartTimestamp) {
                    earliestTime = obj.Data[i].StartTimestamp;
                  }

                  if (latestTime < obj.Data[i].EndedTimestamp) {
                    latestTime = obj.Data[i].EndedTimestamp;
                  }
                } // Rankboard.actionStartTime = new Date( obj.StartTimestamp * 1000 );
                // Rankboard.actionEndTime = new Date( obj.EndedTimestamp * 1000 );


                Rankboard.actionStartTime = new Date(earliestTime * 1000);
                Rankboard.actionEndTime = new Date(latestTime * 1000);
                _this3.rankRawData = obj;
                log(" this.rankRawData:", _this3.rankRawData);
              }
            });
          } // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     this.updateActionTime();
          // }


          if (this.show && this.page == Order.rank) {
            this.updateRankContent(dt);
          } else {
            // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     this.autoShowBanner();
            // }
            this.updateRankContent(dt);
          }

          if (MsgBox.getInstance().IsShow()) {
            this.closeUI();
          } // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     if ( Rankboard.readyShowWebPage == true && this.webPage.isShow() == false )
          //     {
          //         this.showWebPage();
          //     }
          //     else
          //     {
          //         Rankboard.readyShowWebPage = false;
          //     }
          // }


          if (this.show && this.page == Order.rank) {
            if (this.scoreBonus) {
              var expire = new Date(this.scoreBonus.Expire);

              var _now = new Date();

              var diff = expire.getTime() - _now.getTime();

              if (diff > 0) {
                if (this.scoreBonusNode) {
                  this.scoreBonusNode.active = true;
                }

                if (this.scoreBonusText) {
                  var hour = Math.floor(diff / (1000 * 60 * 60));
                  var min = Math.floor(diff / 1000 / 60) % 60;
                  var str = "";
                  str = hour > 0 ? hour + "H" : "";
                  str = str + (min >= 0 ? min + "m" : "");
                  this.scoreBonusText.string = Tools.StringFormat(LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_BONUS_REMAIN_TIME), this.scoreBonus.Ratio, str);
                  Tools.SetFont(this.scoreBonusText);
                }
              } else {
                if (this.scoreBonusNode) {
                  this.scoreBonusNode.active = false;
                }
              }
            } else {
              if (this.scoreBonusNode) {
                this.scoreBonusNode.active = false;
              }
            }
          }
        };

        Rankboard.init = function init(aid, apiid, gameid, siteid, callback) {
          var _this4 = this;

          this.m_aid = aid;
          this.m_apiid = apiid; // this.m_apiid = "6"

          this.m_gameid = gameid;
          this.m_siteid = siteid;
          this.getRankData(this.m_gameid, this.m_apiid, this.m_aid, this.m_siteid, function (obj) {
            if (obj && obj.Error == "" && obj.Data) {
              var earliestTime = obj.Data[0].StartTimestamp;
              var latestTime = obj.Data[0].EndedTimestamp;

              for (var i = 0; i < obj.Data.length; i++) {
                if (earliestTime > obj.Data[i].StartTimestamp) {
                  earliestTime = obj.Data[i].StartTimestamp;
                }

                if (latestTime < obj.Data[i].EndedTimestamp) {
                  latestTime = obj.Data[i].EndedTimestamp;
                }
              } // let start = new Date( obj.StartTimestamp * 1000 );
              // let endTime = new Date( obj.EndedTimestamp * 1000 )


              var start = new Date(earliestTime * 1000);
              var endTime = new Date(latestTime * 1000);
              _this4.actionStartTime = start;
              _this4.actionEndTime = endTime;
              var now = new Date();

              if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
                // 測試用：排行榜icon 開
                callback(true); // 測試用：排行榜icon 關
                // callback( false );
              } else {
                if (now < start) {
                  var diff = start.getTime() - now.getTime();
                  var day = Math.floor(diff / (1000 * 60 * 60 * 24)); // 活動超過7天後才開始不顯示

                  callback(day < 7);
                } else if (now > endTime) {
                  var _diff = now.getTime() - endTime.getTime(); // 活動結束超過1天後不顯示


                  callback(_diff <= 86400000);
                } else {
                  callback(true);
                }
              }
            } else {
              callback(false);
            }
          });
        };

        _proto.initUI = function initUI(bottombar, token, lang, nickName, btnNodes, timeLabel, isLandscape, callback) {
          var _this5 = this;

          this.setNickname(nickName[0], nickName[1]);
          this.iconNodes = btnNodes;
          this.iconTime = timeLabel;
          Tools.SetFont(this.iconTime);
          this.m_urlParam = "&game=" + Rankboard.m_gameid + "&token=" + token + "&ratio=" + walletManger.Ratio; // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     this.webPage = this.getComponent( WebPage )
          //     this.webPage.setUrl( EnvironmentConfig.ACTION_URL + this.m_urlParam )
          // }

          if (this.m_rankInPageBtns[0]) {
            this.SetInPageBtnOn(0);
          }

          this.OnRotation(isLandscape);

          var checkItemInfo = function checkItemInfo() {
            if (bottombar.IsBackpackStringLoaded()) {
              _this5.unschedule(checkItemInfo);

              _this5.m_bottombar = bottombar;

              _this5.getRankInfo();

              _this5.SetTxt();

              if (callback) {
                callback();
              }

              _this5.m_isInitEnd = true;
            }
          };

          this.schedule(checkItemInfo, 1);
        };

        _proto.SetInPageBtnTxt = function SetInPageBtnTxt() {
          for (var i = 0; i < this.m_rankInPageBtns.length; i++) {
            if (this.pageData[i]) {
              var str = Define.StringKey.RANK_TYPE + this.pageData[i].RankingType.toString();
              this.m_rankInPageBtnsTxt[i].string = LocaleStringManager.GetInstance().GetString(str);
              this.m_rankInPageBtnsTxt[i + 2].string = LocaleStringManager.GetInstance().GetString(str);
              this.m_rewardInPageBtnsTxt[i].string = LocaleStringManager.GetInstance().GetString(str);
              this.m_rewardInPageBtnsTxt[i + 2].string = LocaleStringManager.GetInstance().GetString(str);
            }
          }
        };

        _proto.SetInPageBtnOn = function SetInPageBtnOn(page) {
          switch (page) {
            case 0:
              this.m_rankInPageBtns[0].getChildByName("On").active = true;
              this.m_rankInPageBtns[1].getChildByName("On").active = false;
              this.m_rewardInPageBtns[0].getChildByName("On").active = true;
              this.m_rewardInPageBtns[1].getChildByName("On").active = false;
              break;

            case 1:
              this.m_rankInPageBtns[0].getChildByName("On").active = false;
              this.m_rankInPageBtns[1].getChildByName("On").active = true;
              this.m_rewardInPageBtns[0].getChildByName("On").active = false;
              this.m_rewardInPageBtns[1].getChildByName("On").active = true;
              break;

            default:
              this.m_rankInPageBtns[0].getChildByName("On").active = true;
              this.m_rankInPageBtns[1].getChildByName("On").active = false;
              this.m_rewardInPageBtns[0].getChildByName("On").active = true;
              this.m_rewardInPageBtns[1].getChildByName("On").active = false;
              break;
          }
        };

        _proto.SetTxt = function SetTxt() {
          var stringAtlas = LocaleStringManager.GetInstance().GetCommonAtlas();

          if (stringAtlas == null) {
            return;
          } // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     if ( this.m_img_tittle )
          //     {
          //         this.m_img_tittle.spriteFrame = stringAtlas.getSpriteFrame( "Event_" + LocaleStringManager.CurrLang );
          //     }
          // } else
          // {


          if (this.m_img_tittle) {
            this.m_img_tittle.spriteFrame = stringAtlas.getSpriteFrame("Ranking_Title");
          }

          if (this.m_img_Tags[0] && this.m_img_Tags_On[0]) {
            this.m_img_Tags[0].spriteFrame = stringAtlas.getSpriteFrame("Ranking_Rank");
            this.m_img_Tags[1].spriteFrame = stringAtlas.getSpriteFrame("Ranking_Reward");
            this.m_img_Tags[2].spriteFrame = stringAtlas.getSpriteFrame("Ranking_Info");
            this.m_img_Tags_On[0].spriteFrame = stringAtlas.getSpriteFrame("Ranking_Rank_On");
            this.m_img_Tags_On[1].spriteFrame = stringAtlas.getSpriteFrame("Ranking_Reward_On");
            this.m_img_Tags_On[2].spriteFrame = stringAtlas.getSpriteFrame("Ranking_Info_On");
          }

          this.rankingPages[Order.rank].getComponent(RankboardPage).SetTxt();
          this.rankingPages[Order.award].getComponent(RankboardReward).SetTxt(); // }
        };

        _proto.CloseIcon = function CloseIcon() {
          // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     this.closeWebPage();
          // }
          if (this.iconNodes) {
            this.iconNodes[0].active = false;
            this.iconNodes[1].active = false;
          }
        };

        _proto.ReloadData = function ReloadData() {
          if (this.m_isInitEnd) {
            this.getRankInfo();
          }
        };

        _proto.openUI = function openUI() {
          if (this.iconNodes[0].active) {
            // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     this.toolEvent( null, "1" );
            // } else
            // {
            if (this.bActionStart) {
              this.BtnSelect();
              this.toolEvent(null, "1");
            } else {
              if (this.m_bottombar) {
                var bottomBar = this.m_bottombar.node.getComponent(BottombarManager);
                var baseUrl = EnvironmentConfig.ACTION_URL;

                switch (Define.WebviewType) {
                  case Define.EventWebviewType.Promote:
                    baseUrl = EnvironmentConfig.PROMOTE_URL;
                    break;
                }

                bottomBar.OpenCommonWebPage(baseUrl + this.m_urlParam, "", true);
              }
            } // }


            this.getRankInfo();
            this.OnRotation(this.m_isLandscape);
          }
        };

        _proto.closeUI = function closeUI() {
          if (this.show) {
            this.toolEvent(null, "2");
          } else {
            this.toolEvent(null, "6");
          }
        };

        _proto.isOpen = function isOpen() {
          return this.show;
        };

        _proto.firstGetRankInfo = function firstGetRankInfo() {
          var _this6 = this;

          Rankboard.getRankData(Rankboard.m_gameid, Rankboard.m_apiid, Rankboard.m_aid, Rankboard.m_siteid, function (obj) {
            if (obj && obj.Error == "") {
              // Rankboard.actionStartTime = new Date( obj.StartTimestamp * 1000 );
              // Rankboard.actionEndTime = new Date( obj.EndedTimestamp * 1000 );
              _this6.rankRawData = obj;

              _this6.getRankInfo();
            }
          });
        };
        /**
         * 按鈕事件
         * @param event 
         * @param data 1: 打開排行榜 2: 關閉排行榜 3: 排行榜分頁 4: 獎勵分頁 5: 活動分頁 6: 關閉活動分頁
         */


        _proto.toolEvent = function toolEvent(event, data) {
          switch (data) {
            case '1':
              // 1: 打開排行榜 
              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN); // if ( Tools.Line !== Define.LineSetting.americas &&
              //     Tools.Line !== Define.LineSetting.americas_str )
              // {
              //     if ( !this.show )
              //     {
              //         // 活動開始才能打開排行榜 否則只能看 banner
              //         if ( this.bActionStart )
              //         {
              //             this.show = true;
              //             let anim = this.getComponent( cc.Animation );
              //             if ( anim.getAnimationState( anim.getClips()[ 1 ].name ).isPlaying )
              //             {
              //                 anim.play( anim.getClips()[ 0 ].name );
              //             }
              //             else
              //             {
              //                 anim.playAdditive( anim.getClips()[ 0 ].name );
              //             }
              //             this.webPage.setPos( this.webViewPos[ 1 ] );
              //             this.callEventCb( this.eventType.Open );
              //             if ( this.page == 1 )
              //             {
              //                 this.getRankInfo();
              //                 this.myRankNode.active = true;
              //             }
              //             else
              //             {
              //                 this.toolEvent( null, '3' );
              //             }
              //             this.firstOpen = false;
              //         }
              //         else
              //         {
              //             this.webPage.setPos( this.webViewPos[ 0 ] );
              //             this.toolEvent( null, '5' );
              //         }
              //     }
              //     else
              //     {
              //         this.toolEvent( null, '2' );
              //     }
              // } else
              // {

              this.node.active = true;

              if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
                // 測試用：排行榜顯示rank內容 開
                this.bActionStart = true; // 測試用：排行榜顯示rank內容 關
                // this.bActionStart = false
              } // 活動開始才能打開排行榜 否則只能看 banner


              if (this.bActionStart) {
                this.show = true;
                this.callEventCb(this.eventType.Open);

                if (this.page == Order.rank) {
                  this.firstGetRankInfo();
                } else {
                  this.toolEvent(null, '3');
                }

                this.firstOpen = false;
              } else {
                // this.webPage.setPos( this.webViewPos[ 0 ] );
                this.BtnSelect(Order.activity);
                this.toolEvent(null, '5');
              } // }


              break;

            case '2':
              // 2: 關閉排行榜 
              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN); // if ( Tools.Line !== Define.LineSetting.americas &&
              //     Tools.Line !== Define.LineSetting.americas_str )
              // {
              //     if ( this.show )
              //     {
              //         // SoundManager.getInstance().Play( Define.AudioClips.COMMON_BTN );
              //         this.show = false;
              //         let anim = this.getComponent( cc.Animation );
              //         if ( anim.getAnimationState( anim.getClips()[ 0 ].name ).isPlaying )
              //         {
              //             anim.play( anim.getClips()[ 1 ].name );
              //         }
              //         else
              //         {
              //             anim.playAdditive( anim.getClips()[ 1 ].name );
              //         }
              //         anim.once( 'finished', () =>
              //         {
              //             this.myRankNode.active = false;
              //         } );
              //         this.webPage.setPos( this.webViewPos[ 0 ] );
              //         this.callEventCb( this.eventType.Close );
              //         // let anim2 = this.iconNode.getComponent(cc.Animation);
              //         // anim2.play(anim2.getClips()[1].name);
              //         // Tracking.ButtonLog(336);
              //     }
              //     else
              //     {
              //         this.mask.active = false;
              //     }
              //     this.webPage.close();
              // } else
              // {

              this.show = false;
              this.node.active = false;
              this.callEventCb(this.eventType.Close);

              if (this.m_bottombar) {
                var bottomBar = this.m_bottombar.node.getComponent(BottombarManager);
                bottomBar.CloseCommonText();
              } // }


              break;

            case '3':
              // 3: 排行榜分頁 
              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN); // if ( Tools.Line !== Define.LineSetting.americas &&
              //     Tools.Line !== Define.LineSetting.americas_str )
              // {
              //     if ( this.page != 1 )
              //     {
              //         // SoundManager.getInstance().Play( Define.AudioClips.COMMON_BTN );
              //         let anim1 = this.tagNode1.getComponent( cc.Animation );
              //         let anim2 = this.tagNode2.getComponent( cc.Animation );
              //         this.tagNode1.getComponent( cc.Animation ).play( anim1.getClips()[ 0 ].name );
              //         this.tagNode2.getComponent( cc.Animation ).play( anim2.getClips()[ 1 ].name );
              //         this.updateRank();
              //         // Tracking.ButtonLog(331);
              //     }
              // } else
              // {

              this.updateRank(); // }

              break;

            case '4':
              //  4: 獎勵分頁 
              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN); // if ( Tools.Line !== Define.LineSetting.americas &&
              //     Tools.Line !== Define.LineSetting.americas_str )
              // {
              //     if ( this.page != 2 )
              //     {
              //         // SoundManager.getInstance().Play( Define.AudioClips.COMMON_BTN );
              //         let anim1 = this.tagNode1.getComponent( cc.Animation );
              //         let anim2 = this.tagNode2.getComponent( cc.Animation );
              //         this.tagNode1.getComponent( cc.Animation ).play( anim1.getClips()[ 1 ].name );
              //         this.tagNode2.getComponent( cc.Animation ).play( anim2.getClips()[ 0 ].name );
              //         this.updateReward();
              //         // Tracking.ButtonLog(332);
              //     }
              // } else
              // {

              if (!this.isRankStartMode) {
                this.updateReward();
              } // }


              break;

            case '5':
              // 5: 活動分頁 
              SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN); // if ( Tools.Line !== Define.LineSetting.americas &&
              //     Tools.Line !== Define.LineSetting.americas_str )
              // {
              //     this.tagNode3.getComponent( cc.Animation ).play();
              //     if ( this.webPage.isShow() )
              //     {
              //         this.closeWebPage();
              //     }
              //     else
              //     {
              //         this.showWebPage()
              //     }
              //     // Tracking.ButtonLog(333);
              // } else
              // {

              if (this.m_bottombar) {
                var _bottomBar = this.m_bottombar.node.getComponent(BottombarManager);

                var baseUrl = EnvironmentConfig.ACTION_URL;

                switch (Define.WebviewType) {
                  case Define.EventWebviewType.Promote:
                    baseUrl = EnvironmentConfig.PROMOTE_URL;
                    break;
                }

                _bottomBar.OpenCommonWebPage(baseUrl + this.m_urlParam, "", true);
              } // }


              break;
          }
        } // TADA 開關頁面
        // this.page   1: 排行榜 2: 獎勵 3: 活動頁
        ;

        _proto.BtnSelect = function BtnSelect(num) {
          if (num === void 0) {
            num = Order.rank;
          }

          this.m_currentTouchName = num; // 被選中的頁籤

          for (var i = 0; i < this.pageNodesCheckBg.length; i++) {
            if (this.pageNodesCheckBg[i]) {
              this.pageNodesCheckBg[i].active = false;
            }
          }

          if (this.pageNodesCheckBg[num]) {
            this.pageNodesCheckBg[num].active = true;
          } // 打開主畫面


          for (var _i = 0; _i < this.rankingPages.length; _i++) {
            if (this.rankingPages[_i]) {
              this.rankingPages[_i].active = false;
            }
          }

          if (this.rankingPages[num]) {
            this.rankingPages[num].active = true;
            this.getRankInfo();
            this.OnRotation(this.m_isLandscape);
          }
        };

        Rankboard.getRankData = function getRankData(gameid, apiid, aid, siteid, callback) {
          var _this7 = this;

          error("getRankData gameid:", gameid);
          var http = new XMLHttpRequest(); // http.open( 'GET', EnvironmentConfig.RANKING_URL + `?GameId=${gameid}&Games=${gameid}&ApiId=${apiid}&Type=${1}&AccountId=${aid}&siteId=${siteid}&Lang=${Tools.ConvertLanguageToFull( LocaleStringManager.CurrLang )}` );

          http.open('GET', EnvironmentConfig.RANKING_URL2 + ("?GameId=" + gameid + "&Games=" + gameid + "&ApiId=" + apiid + "&Type=" + 1 + "&AccountId=" + aid + "&siteId=" + siteid + "&SubAgentCode=" + Define.SUB_AGENT_CODE + "&Lang=" + Tools.ConvertLanguageToFull(LocaleStringManager.CurrLang)));
          http.send();

          http.onload = function () {
            if (http.readyState == 4 && http.status == 200) {
              // let obj = JSON.parse( http.responseText );
              var obj;

              if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
                // obj = { "Error": "", "Sn": 14308, "Start": "2022-03-29T12:30:00+07:00", "Ended": "2022-03-29T13:00:00+07:00", "Updated": "0001-01-01T00:00:00Z", "StartTimestamp": 1648531800, "EndedTimestamp": 1648533600, "UpdatedTimestamp": -62135596800, "Desc": "測試", "Number": 0, "Score": 0, "Users": null, "Prizes": [ { "BeginRanking": 1, "EndRanking": 2, "PrizeType": 1, "PrizeSubType": 0, "Amount": 100, "Value": 100, "Union": 0, "Extra": null }, { "BeginRanking": 2, "EndRanking": 3, "PrizeType": 2, "PrizeSubType": 1085101, "Amount": 1, "Value": 4.9, "Union": 0, "Extra": { "CardName": "免費遊戲卡(一星)", "GameID": 85, "Bet": 0.1, "Star": 1, "WinType": 1, "Icon": 11085 } }, { "BeginRanking": 3, "EndRanking": 11, "PrizeType": 4, "PrizeSubType": 3, "Amount": 1, "Value": 40, "Union": 0, "Extra": { "star": 1, "itemValue": 5, "effectiveTime": 0 } } ], "UnionNumber": 0, "UnionScore": 0, "UnionUsers": null, "UnionPrizes": [], "AwardNotice": false, "VipLv": 0, "NeedWebView": true }
                //  這邊測試完要註解起來 ---------------------------- 註解後測試應該要不能發布到正式上面
                switch (Define.TestRankType) {
                  case 1:
                    // 看排行榜排名和獎勵
                    // obj = RankTestAck.RANK1;
                    break;

                  case 2:
                    // 看排行榜排名和獎勵
                    // obj = RankTestAck.RANK2;
                    break;

                  case 3:
                    // 看排行榜排名和獎勵
                    // obj = RankTestAck.RANK3;
                    break;

                  case 4:
                    // 看排行榜排名和獎勵
                    // obj = RankTestAck.RANK4;
                    break;

                  default:
                    // 看排行榜排名和獎勵
                    obj = RankTestAck.RANK0;
                    break;
                } //  這邊測試完要註解起來 ---------------------------- 
                // log( "getRankData Define.TestRankType:", Define.TestRankType );
                // log( "getRankData obj:", obj );

              } else {
                obj = JSON.parse(http.responseText);
              } // if ( obj.AwardNotice == true && this.ReqMail )


              if (_this7.CheckAwardNotice(obj.Data) && _this7.ReqMail) {
                _this7.ReqMail();
              }

              if (obj.NeedWebView) {
                Define.AddEventWebview && Define.AddEventWebview();
              } else {
                Define.RemoveEventWebview && Define.RemoveEventWebview();
              }

              Define.WebviewType = obj.ExtraWebView ? obj.ExtraWebView : Define.EventWebviewType.None;
              var tag = obj.Tag;

              if (tag) {
                if (tag.Ratio > 1) {
                  var setting = {
                    contextKey: ""
                  };
                  setting.showCancelBtn = false;
                  setting.showConfirmBtn = true;
                  setting.showCloseBtn = false;
                  setting.confirmString = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_CHECK);

                  setting.confirmCB = function () {
                    _this7.readyShowWebPage = true;
                  };

                  if (tag.Notice == true) {
                    var hour = tag.Lasting / 60;
                    setting.contextKey = Tools.StringFormat(LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_BONUS_MSG), tag.Ratio, Tools.strip(hour, 2));
                    MsgBox.getInstance().PushMessageBoxSetting(setting, true);
                  } // else
                  // {
                  //     log("沒通知");
                  // }

                }
              }

              callback(obj);
            }
          };

          http.onerror = function () {
            callback();
          };

          http.timeout = 10000;

          http.ontimeout = function () {
            callback();
          };
        };

        Rankboard.CheckAwardNotice = function CheckAwardNotice(data) {
          if (data) {
            for (var i = 0; i < data.length; i++) {
              if (data[i].AwardNotice) {
                return true;
              }
            }
          }

          return false;
        }
        /**
         * 取得排行榜資料
         */
        ;

        _proto.getRankInfo = function getRankInfo(inPage) {
          if (inPage === void 0) {
            inPage = this.inPage;
          }

          if (!this.rankRawData) {
            return;
          }

          var obj = this.rankRawData;

          if (obj.Error == "") {
            this.pageData = obj.Data; // log( "getRankInfo   this.pageData:", this.pageData )

            if (this.pageData.length == 1 && inPage >= 1) {
              inPage = 0; // 只有一頁,沒有分頁資料
            }

            if (this.pageData.length > 1) {
              if (this.m_rankInPageBtns[0]) {
                this.SetInPageBtnTxt();
              }

              this.iconTime.node.active = true;
            }

            this.inPage = inPage;
            this.rankScore.length = 0;

            if (this.pageData[inPage].Sn == 0) {
              this.pageData[inPage].Users = [];
            }

            for (var i in this.pageData[inPage].Users) {
              var info = new rankInfo();
              info.rank = (parseInt(i) + 1).toString();
              info.score = this.pageData[inPage].Users[i].Score;
              var name = this.pageData[inPage].Users[i].Nickname;
              name = name.split("@")[0]; // 名字擋成*號, 除了自己

              info.name = name;
              info.nickName = this.pageData[inPage].Users[i].NewNickname;

              if (this.accountName != name) {
                var passName = "****" + name.substring(4);
                info.name = passName;
              }

              this.rankScore.push(info);
            } // 紀錄舊的資訊 來判斷是否自己有長進


            if (this.myRank) {
              this.myRank_old = new rankInfo();
              this.myRank_old.rank = this.myRank.rank;
              this.myRank_old.score = this.myRank.score;
              this.myRank_old.name = this.accountName;
              this.myRank_old.nickName = this.nickName;
            } // 第0個是自己


            this.myRank = new rankInfo();
            this.myRank.rank = this.pageData[inPage].Score == '0' ? '500+' : parseInt(this.pageData[inPage].Number) > 500 ? '500+' : this.pageData[inPage].Number;
            this.myRank.score = this.pageData[inPage].Score;
            this.myRank.name = this.accountName;
            this.myRank.nickName = this.nickName; // 判斷 排名是否異動  -----------------------------------

            this.setIsRankChange(); // 排行獎勵設定

            this.rewardList = matrixTorewardInfo(this.pageData[inPage].Prizes); // 加倍設定

            var tag = this.pageData[inPage].Tag;

            if (tag && tag.Ratio > 1) {
              this.scoreBonus = tag;
            } else {
              this.scoreBonus = null;
            } // 字串設定


            this.gameDesc[0].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_TOTAL_WIN_LIST);
            Tools.SetFont(this.gameDesc[0]);

            if (this.pageData[inPage].VipGroup) {
              this.gameDesc[1].string = "LV " + this.pageData[inPage].VipGroup[0] + " ~ LV " + this.pageData[inPage].VipGroup[this.pageData[inPage].VipGroup.length - 1];
            } else {
              this.gameDesc[1].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_REFRESH);
            }

            Tools.SetFont(this.gameDesc[1]);
            this.setRewardListStr(); // if ( this.page == 1 )
            // {

            this.updateRank();
            this.updateRankContent(0); // }

            this.inited = true;
            this.OnRotation(this.m_isLandscape);
          }
        } // [排行榜] 取自己的string排名 轉成number
        ;

        _proto.GetRank = function GetRank(rankData) {
          var rankNew = 0; // 若沒有排名 就當自己是 0

          if (rankData && rankData.rank != '500+') {
            rankNew = Number(rankData.rank);
          }

          return rankNew;
        } // [排行榜] 排名是否有異動
        ;

        _proto.setIsRankChange = function setIsRankChange() {
          this.isRankChange = false;

          if (this.GetRank(this.myRank_old) != this.GetRank(this.myRank)) {
            // log( "setIsRankChange 1 :", this.GetRank( this.myRank_old ) );
            // log( "setIsRankChange 2 :", this.GetRank( this.myRank ) );
            this.isRankChange = true;
          }
        }
        /**
         * 更新排行榜節點上資訊
         */
        ;

        _proto.updateRank = function updateRank() {
          var _this8 = this;

          this.page = Order.rank; // let handleNode = this.listNode;
          // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {
          // 清空資訊

          var handleNode = this.listNode_TADA_Rank; // }

          handleNode.removeAllChildren();
          this.rankList.length = 0;
          if (this.show) ; // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     if ( this.myRankitemNode )
          //     {
          //         this.myRankitemNode.removeFromParent();
          //         this.myRankitemNode = null;
          //     }
          // }
          // log( "updateRank this.updateTime:", this.updateTime );

          if (this.updateTime <= 0) {
            // log( "updateRank getRankInfo this.rankList.length:", this.rankList.length );
            this.getRankInfo();
          } else {
            // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     this.myRankitemNode = this.getRankNode( this.myRank.rank );
            //     this.myRankitemNode.getComponent( RankboardItem ).init( this.myRank.rank, this.myRank.score, this.myRank.name, this.myRank.nickName );
            //     this.myRankitemNode.parent = this.myRankNode;
            // } else
            // {
            this.myRankNode_TADA_Rank.string = this.myRank.rank;
            this.myRankNode_TADA_Points.string = this.myRank.score > 0 ? this.myRank.score.toString() : LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_OUT_OF_RANK);
            this.myRankNode_TADA_Name.string = this.myRank.name;
            Tools.SetFont(this.myRankNode_TADA_Rank);
            Tools.SetFont(this.myRankNode_TADA_Points);
            Tools.SetFont(this.myRankNode_TADA_Name); // }

            var height = 0;
            var spaceY = handleNode.getComponent(Layout).spacingY;
            var size = this.getRankNode('3').getComponent(UITransform).contentSize; // log( "updateRank this.rankScore:", this.rankScore )

            for (var i = 0; i < this.rankScore.length; ++i) {
              // 先建空的佔位置
              var rankNode = new Node();
              rankNode.name = i.toString();
              rankNode.addComponent(UITransform);
              rankNode.getComponent(UITransform).width = size.width;
              rankNode.getComponent(UITransform).height = size.height;
              rankNode.parent = handleNode;
              Tools.SetZIndex(rankNode, i * 10); // 必要資訊加入列表

              var data = new itemData();
              data.localNode = rankNode;
              data.info = this.rankScore[i];
              data.height = size.height + spaceY;
              this.rankList.push(data); // 每個 item 的高度

              height += data.height;
            }

            handleNode.getComponent(UITransform).height = height; // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     if ( this.scrollView )
            //     {
            //         this.scrollView.height = 335;
            //     }
            //     if ( this.scrollBar )
            //     {
            //         this.scrollBar.height = 340;
            //     }
            // }

            if (this.isRankChange) {
              if (!this.isRankStartMode) {
                this.isRankStartMode = true; // 取得在 rankList 裡面的idx

                var listIdx = -1;

                for (var _i2 = 0; _i2 < this.rankList.length; ++_i2) {
                  Tools.SetZIndex(this.rankList[_i2].localNode, _i2 * 10);

                  if (this.myRank && this.rankScore[_i2].rank == this.myRank.rank) {
                    listIdx = _i2;
                  }
                } // log( "**this.myRank : ", this.myRank );
                // log( "**this.rankScore : ", this.rankScore );
                // log( "**listIdx : ", listIdx );


                if (listIdx == -1) // 這邊預防找不到  旗標要設回來
                  {
                    this.isRankStartMode = false;
                    this.isRankChange = false;
                    this.myRank_old = null;
                  } else {
                  // 滑行時間：如果新的有名次  就要自動滑到該名次
                  var scrollToNewTime = 0; // 滑行比例

                  var percentNew = 0;

                  if (0 <= listIdx && listIdx < this.rankList.length) {
                    percentNew = (this.rankList.length - listIdx) / this.rankList.length;

                    if (percentNew == 0) {
                      percentNew = 1;
                    }

                    scrollToNewTime = 0.5;
                  }

                  tween(this.node).call(function () {
                    // log( "rankList 1:", this.rankList )
                    if (!_this8.rankList[listIdx].localNode.getComponent(UIOpacity)) {
                      _this8.rankList[listIdx].localNode.addComponent(UIOpacity);
                    } // 方法2  用透明度取代


                    _this8.rankList[listIdx].localNode.getComponent(UIOpacity).opacity = 1;
                    _this8.rankList[listIdx].localNode.getComponent(UITransform).height = 0; // log( "Animation  ", this.rankList[ listIdx ].dataNode.getComponent( Animation ).clips );
                    // log( "Animation  ", this.rankList[ listIdx ].dataNode.getComponent( Animation ) );
                  }).call(function () {
                    if (scrollToNewTime > 0) {
                      if (_this8.scrollBar) {
                        _this8.scrollBar.getComponent(ScrollView).scrollToPercentVertical(percentNew, scrollToNewTime, false);
                      }

                      if (_this8.scrollBar_Rank) {
                        _this8.scrollBar_Rank.getComponent(ScrollView).scrollToPercentVertical(percentNew, scrollToNewTime, false);
                      }
                    }
                  }).delay(scrollToNewTime).delay(0.5) //  畫面停下來後 給個緩衝
                  .call(function () {
                    // 先撐開 scroll view
                    if (scrollToNewTime > 0) {
                      tween(_this8.rankList[listIdx].localNode.getComponent(UITransform)).to(0.3, {
                        height: 82
                      }).call(function () {
                        _this8.rankList[listIdx].localNode.getComponent(UITransform).height = 82;
                      }).start();
                    }
                  }).delay(0.3) //  先撐開 scroll view
                  .call(function () {
                    // 滑下來之後表示 需要有動畫需求
                    if (scrollToNewTime > 0) {
                      if (_this8.rankList[listIdx].localNode.getComponent(UIOpacity)) {
                        _this8.rankList[listIdx].localNode.getComponent(UIOpacity).opacity = 255;
                      }
                    }
                  }).delay(0.1) // 這邊測試 是不是animation 還沒好 要差可能1 tick才能撥放
                  .call(function () {
                    // 滑下來之後表示 需要有動畫需求
                    if (scrollToNewTime > 0) {
                      // if ( this.rankList[ listIdx ].localNode.getComponent( UIOpacity ) )
                      // {
                      //     this.rankList[ listIdx ].localNode.getComponent( UIOpacity ).opacity = 255;
                      // }
                      if (_this8.m_isLandscape) {
                        _this8.rankList[listIdx].dataNode.getComponent(Animation).play('Clip_Ranking_Rank_Cell_L_Show');
                      } else {
                        _this8.rankList[listIdx].dataNode.getComponent(Animation).play('Clip_Ranking_Rank_Cell_P_Show');
                      }
                    }
                  }).delay(0.57).call(function () {
                    _this8.isRankStartMode = false;
                    _this8.isRankChange = false;
                    _this8.myRank_old = null;
                  }).start();
                }
              }
            } else {
              if (this.scrollBar) {
                this.scrollBar.getComponent(ScrollView).scrollToTop();
              }

              if (this.scrollBar_Rank) {
                this.scrollBar_Rank.getComponent(ScrollView).scrollToTop();
              }
            }
          }
        };

        _proto.UpdateActionTime_TADA = function UpdateActionTime_TADA() {
          if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
            // 做假資料
            this.bActionStart = true;
            this.actionType = 2;
            this.iconTime.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_LESS_X_MIN);

            if (this.pageData[0]) {
              if (this.pageData.length == 1) {
                this.iconTime.node.active = true;
              } else {
                this.iconTime.node.active = false;
              }
            }

            return;
          }

          this.updateActionTime();
        }
        /**
         * 更新活動時間
         */
        ;

        _proto.updateActionTime = function updateActionTime() {
          if (Rankboard.actionStartTime && this.iconTime) {
            if (this.pageData[0]) //沒資料就先不處理
              {
                if (this.pageData.length == 1) {
                  this.iconTime.node.active = true;
                } else {
                  this.iconTime.node.active = false;
                }
              }

            if (this.m_bottombar && !this.m_bottombar.IsInTrial) {
              this.iconNodes[0].active = true;
              this.iconNodes[1].active = true;
            } // this.iconTime.node.scaleX = 1;


            var y = this.iconTime.node.getScale().y;
            this.iconTime.node.setScale(1, y, 1);
            Tools.SetFont(this.iconTime);
            var now = new Date();

            if (now < Rankboard.actionStartTime) // 活動尚未開始
              {
                var diff = Rankboard.actionStartTime.getTime() - now.getTime();
                var day = Math.floor(diff / (1000 * 60 * 60 * 24));
                var hour = Math.floor(diff / (1000 * 60 * 60)) - day * 24;
                var min = Math.floor(diff / (1000 * 60)) - (day * 24 + hour) * 60;

                if (!LocaleStringManager.IsChinese()) {
                  // this.iconTime.node.scaleX = 0.55;
                  var _y = this.iconTime.node.getScale().y;
                  this.iconTime.node.setScale(0.55, _y, 1);
                }

                if (day >= 1) {
                  this.iconTime.string = Tools.StringFormat(LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_LAST_ORDER), day, 'D');
                } else if (hour >= 1) {
                  this.iconTime.string = Tools.StringFormat(LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_LAST_ORDER), hour, 'H');
                } else if (min >= 1) {
                  this.iconTime.string = Tools.StringFormat(LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_LAST_ORDER), min, 'm');
                } else {
                  this.iconTime.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_READY);
                }

                this.bActionStart = false;
                this.actionType = 1; // if ( Tools.Line === Define.LineSetting.americas ||
                //     Tools.Line === Define.LineSetting.americas_str )
                // {

                this.tagNode1.active = false;
                this.tagNode2.active = false;
                this.BtnSelect(Order.activity); // }
              } else if (now >= Rankboard.actionEndTime) // 活動結束
              {
                this.iconTime.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_END);
                this.bActionStart = false;
                this.actionType = 3; // if ( Tools.Line === Define.LineSetting.americas ||
                //     Tools.Line === Define.LineSetting.americas_str )
                // {

                this.tagNode1.active = false;
                this.tagNode2.active = false;
                this.BtnSelect(Order.activity); // }

                var _diff2 = now.getTime() - Rankboard.actionEndTime.getTime();

                var _day = Math.floor(_diff2 / (1000 * 60 * 60 * 24));

                if (_day >= 1) {
                  this.iconNodes[0].active = false;
                  this.iconNodes[1].active = false;
                } // 活動結束後每120秒刷新有無下局比賽


                if (this.updateTime <= 0) ;
              } else // 活動進行中
              {
                var _diff3 = Rankboard.actionEndTime.getTime() - now.getTime();

                var _day2 = Math.floor(_diff3 / (1000 * 60 * 60 * 24));

                var _hour = Math.floor(_diff3 / (1000 * 60 * 60)) - _day2 * 24;

                var _min = Math.floor(_diff3 / (1000 * 60)) - (_day2 * 24 + _hour) * 60;

                if (_day2 >= 1) {
                  this.iconTime.string = _day2 + "D " + _hour + "H";
                } else if (_hour >= 1 || _min >= 1) {
                  this.iconTime.string = _hour + "H " + _min + "m";
                } else {
                  this.iconTime.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_LESS_X_MIN);

                  if (!LocaleStringManager.IsChinese()) {
                    // this.iconTime.node.scaleX = 0.7;
                    var _y2 = this.iconTime.node.getScale().y;
                    this.iconTime.node.setScale(0.7, _y2, 1);
                  }
                }

                this.bActionStart = true;
                this.actionType = 2; // if ( Tools.Line === Define.LineSetting.americas ||
                //     Tools.Line === Define.LineSetting.americas_str )
                // {

                this.tagNode1.active = true;
                this.tagNode2.active = true; // }
              }
          }
        } //   進榜 出榜 榜間移動 太短

        /**
         * 更新排行榜內容
         */
        ;

        _proto.updateRankContent = function updateRankContent(dt) {
          var _this9 = this;

          var scroll = null;

          if (this.scrollBar) {
            scroll = this.scrollBar.getComponent(ScrollView);
          }

          if (this.scrollBar_Rank) {
            scroll = this.scrollBar_Rank.getComponent(ScrollView);
          }

          if (this.page == Order.rank && scroll) {
            // let view = scroll.getContentPosition();
            if (this.rankList.length > 0) {
              // 範圍內有就顯示，沒有就創建
              // for ( let i = start; i <= end; ++i )
              for (var i = 0; i < this.rankList.length; ++i) {
                if (this.rankList[i] && this.rankList[i].dataNode) {
                  this.rankList[i].dataNode.active = true;

                  if (Number(this.rankList[i].info.rank) <= 3) {
                    this.rankList[i].dataNode.getComponent(RankboardItem).PlayTopAnim();
                  }
                } else {
                  this.rankList[i].dataNode = this.getRankNode(this.rankList[i].info.rank);
                  this.rankList[i].dataNode.getComponent(RankboardItem).init(this.rankScore[i].rank, this.rankScore[i].score, this.rankScore[i].name, this.rankScore[i].nickName); // this.rankList[ i ].dataNode.getComponent( RankboardItem ).PlayTopAnim();

                  this.rankList[i].dataNode.parent = this.rankList[i].localNode;
                }

                if (this.m_isLandscape) {
                  this.rankList[i].dataNode.getComponent(Animation).play("Clip_Ranking_Rank_Cell_Landscape");
                } else {
                  this.rankList[i].dataNode.getComponent(Animation).play("Clip_Ranking_Rank_Cell_Portrait");
                } // }

              } // 超過顯示範圍的就隱藏
              // let before = start - 1;
              // let next = end + 1;
              // if ( before > 0 && this.rankList[ before ] && this.rankList[ before ].dataNode )
              // {
              //     this.rankList[ before ].dataNode.active = false;
              // }
              // if ( next < this.rankList.length && this.rankList[ next ] && this.rankList[ next ].dataNode )
              // {
              //     this.rankList[ next ].dataNode.active = false;
              // }

            }
          }

          if (this.show && this.page == Order.rank) {
            this.m_changeNameTime += dt;

            if (this.m_changeNameTime >= 4) {
              this.m_nickNameCount = (this.m_nickNameCount + 1) % 2;
              this.m_changeNameTime = 0;
              this.rankList.forEach(function (rank) {
                if (rank.dataNode) {
                  rank.dataNode.getComponent(RankboardItem).playChangeName(_this9.m_nickNameCount);
                }
              });

              if (this.myRankitemNode) {
                this.myRankitemNode.getComponent(RankboardItem).playChangeName(this.m_nickNameCount);
              }
            }
          } else {
            this.m_changeNameTime = 0;
          }
        };

        _proto.updateRankData = function updateRankData() {
          // 範圍內有就顯示，沒有就創建
          // for ( let i = start; i <= end; ++i )
          for (var i = 0; i < this.rankList.length; ++i) {
            if (this.rankList[i] && this.rankList[i].dataNode) {
              this.rankList[i].dataNode.active = true;

              if (Number(this.rankList[i].info.rank) <= 3) {
                this.rankList[i].dataNode.getComponent(RankboardItem).PlayTopAnim();
              }

              this.rankList[i].dataNode.getComponent(RankboardItem).init(this.rankScore[i].rank, this.rankScore[i].score, this.rankScore[i].name, this.rankScore[i].nickName);
            } else {
              this.rankList[i].dataNode = this.getRankNode(this.rankList[i].info.rank);
              this.rankList[i].dataNode.getComponent(RankboardItem).init(this.rankScore[i].rank, this.rankScore[i].score, this.rankScore[i].name, this.rankScore[i].nickName); // this.rankList[ i ].dataNode.getComponent( RankboardItem ).PlayTopAnim();

              this.rankList[i].dataNode.parent = this.rankList[i].localNode;
            } // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {


            if (this.m_isLandscape) {
              // if ( this.rankScore[ i ].rank == this.myRank.rank )
              // {
              //     this.rankList[ i ].dataNode.getComponent( Animation ).play( "Clip_Ranking_Rank_Cell_Landscape" );
              // } else
              // {
              this.rankList[i].dataNode.getComponent(Animation).play("Clip_Ranking_Rank_Cell_Landscape"); // }
            } else {
              this.rankList[i].dataNode.getComponent(Animation).play("Clip_Ranking_Rank_Cell_Portrait");
            } // }

          }
        }
        /**
         * 更新獎勵列表
         */
        ;

        _proto.updateReward = function updateReward() {
          this.page = Order.award;

          if (this.scoreBonusNode) {
            this.scoreBonusNode.active = false;
          } // let handleNode = this.listNode;
          // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {


          var handleNode = this.listNode_TADA_Reward; // } else
          // {
          //     this.myRankNode.active = false;
          // }

          handleNode.destroyAllChildren();
          var height = 0;
          var spaceY = handleNode.getComponent(Layout).spacingY;
          var myRank = Number(this.myRank.rank) ? Number(this.myRank.rank) : 9999;

          for (var i = 0; i < this.rewardList.length; ++i) {
            var node = instantiate(this.rankItemPrefab[4]);
            node.getComponent(RankboardItem).initReward(this.rewardList[i].up, this.rewardRankStr[i], this.rewardList[i].rewardType, this.rewardList[i].rewardNum, this.rewardList[i].rewardDetail, this.m_bottombar, this.webPage, this.rewardList[i].amount, myRank); // 每個 item 的高度

            height += node.getComponent(UITransform).height + spaceY;
            node.parent = handleNode; // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {

            if (this.m_isLandscape) {
              if (this.IsInAwardRange(this.rewardList[i])) {
                node.getComponent(Animation).play("Clip_Ranking_Reward_Cell_L_Player");
              } else {
                node.getComponent(Animation).play("Clip_Ranking_Reward_Cell_Landscape");
              }
            } else {
              if (this.IsInAwardRange(this.rewardList[i])) {
                node.getComponent(Animation).play("Clip_Ranking_Reward_Cell_P_Player");
              } else {
                node.getComponent(Animation).play("Clip_Ranking_Reward_Cell_Portrait");
              }
            } // }

          }

          handleNode.getComponent(UITransform).height = height; // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     if ( this.scrollView )
          //     {
          //         this.scrollView.height = 420;
          //     }
          //     if ( this.scrollBar )
          //     {
          //         this.scrollBar.height = 420;
          //     }
          // }

          if (this.scrollBar) {
            this.scrollBar.getComponent(ScrollView).scrollToTop();
          }

          if (this.scrollBar_Reward) {
            this.scrollBar_Reward.getComponent(ScrollView).scrollToTop();
          }
        } // 判斷目前排名是不是在 獎勵範圍
        ;

        _proto.IsInAwardRange = function IsInAwardRange(rwi) {
          var isInRange = false;
          var myRank = Number(this.myRank.rank) ? Number(this.myRank.rank) : 0;
          var upRange = Number(rwi.up) ? Number(rwi.up) : -1; // up 是名次少

          var downRange = Number(rwi.down) ? Number(rwi.down) : 9999; // down 是名次多

          if (myRank <= downRange && myRank >= upRange) {
            isInRange = true;
          }

          return isInRange;
        };

        _proto.setRewardListStr = function setRewardListStr() {
          var _this10 = this;

          this.rewardRankStr = [];
          this.rewardList.forEach(function (value) {
            if (value.up == value.down) {
              _this10.rewardRankStr.push(Tools.StringFormat(LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_ORDER), value.up.toString()));
            } else {
              _this10.rewardRankStr.push(Tools.StringFormat(Tools.StringFormat(LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_A_TO_B_RANK), value.up.toString(), value.down.toString())));
            }
          });
        }
        /**
         * 取得 排行榜 prefab item
         * @param rank 
         */
        ;

        _proto.getRankNode = function getRankNode(rank) {
          var idx = rank == '3' ? 2 : rank == '2' ? 1 : rank == '1' ? 0 : 3;
          return instantiate(this.rankItemPrefab[idx]);
        }
        /**
         * 設定玩家姓名
         * @param accountName
         * @param nickName
         */
        ;

        _proto.setNickname = function setNickname(accountName, nickName) {
          this.accountName = accountName.split("@")[0];
          this.nickName = nickName && nickName != "" ? nickName : this.accountName;

          if (this.myRankitemNode) {
            this.myRankitemNode.getComponent(RankboardItem).setName(this.accountName);
          }
        };
        /**
         * 每天登入時要自動跳出活動說明頁
         */


        _proto.autoShowBanner = function autoShowBanner() {
          if (this.autoShowed || !this.inited || !this.canAutoShowUI || this.m_bottombar && this.m_bottombar.IsInTrial) {
            return;
          }

          this.autoShowed = true; // 先更新一次判斷時間

          this.updateActionTime();
          var ep = localStorage.getItem('eventPage' + Rankboard.m_gameid);
          var epCount = localStorage.getItem('eventPageCount' + Rankboard.m_gameid);
          var now = new Date();

          if (!ep) {
            if (this.actionType < 3) {
              var year = now.getFullYear();
              var mon = now.getMonth() + 1;
              var day = now.getDate();
              localStorage.setItem('eventPage' + Rankboard.m_gameid, year + '/' + mon + '/' + day);
              localStorage.setItem('eventPageCount' + Rankboard.m_gameid, '1'); // 有可能已經玩到一半，活動才到時間，所以要阻檔打開的時後被關起來

              if (!this.show) {
                this.toolEvent(null, '1');
              } // if ( Tools.Line !== Define.LineSetting.americas &&
              //     Tools.Line !== Define.LineSetting.americas_str )
              // {
              //     if ( !this.webPage.isShow() )
              //     {
              //         this.showWebPage();
              //     }
              // }

            }
          } else {
            var before = new Date(ep);
            var year1 = now.getFullYear();
            var mon1 = now.getMonth() + 1;
            var day1 = now.getDate();
            var year2 = before.getFullYear();
            var mon2 = before.getMonth() + 1;
            var day2 = before.getDate();
            var epCountNum = !epCount ? 0 : parseInt(epCount); // 時間不一樣要跳 banner

            if (year1 != year2 || mon1 != mon2 || day1 != day2) {
              if (this.actionType < 3) {
                localStorage.setItem('eventPage' + Rankboard.m_gameid, year1 + '/' + mon1 + '/' + day1);
                localStorage.setItem('eventPageCount' + Rankboard.m_gameid, '1'); // 有可能已經玩到一半，活動才到時間，所以要阻檔打開的時後被關起來

                if (!this.show) {
                  this.toolEvent(null, '1');
                } // if ( Tools.Line !== Define.LineSetting.americas &&
                //     Tools.Line !== Define.LineSetting.americas_str )
                // {
                //     if ( !this.webPage.isShow() )
                //     {
                //         this.showWebPage();
                //     }
                // }
                // Tracking.ButtonLog(334);

              }
            } else if (epCountNum < 2) {
              if (this.actionType < 3) {
                localStorage.setItem('eventPageCount' + Rankboard.m_gameid, (epCountNum + 1).toString()); // 有可能已經玩到一半，活動才到時間，所以要阻檔打開的時後被關起來

                if (!this.show) {
                  this.toolEvent(null, '1');
                } // if ( Tools.Line !== Define.LineSetting.americas &&
                //     Tools.Line !== Define.LineSetting.americas_str )
                // {
                //     if ( !this.webPage.isShow() )
                //     {
                //         this.showWebPage();
                //     }
                // }
                // Tracking.ButtonLog(334);

              }
            }
          }
        };

        _proto.OnRotation = function OnRotation(isLandscape, isSmall) {
          // if ( this.m_isLandscape == isLandscape )
          // {
          //     return;
          // }
          this.m_isLandscape = isLandscape;
          var anim = this.getComponent(Animation); // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     if ( isLandscape )
          //     {
          //         anim.playAdditive( "RankBoard_L" );
          //     }
          //     else
          //     {
          //         anim.playAdditive( "RankBoard_S" );
          //     }
          //     this.webPage.onRotation( isLandscape );
          // } else
          // {
          // log( "Order.activity isLandscape:", isLandscape );

          if (isLandscape) {
            // anim.playAdditive( "Clip_Common_TagFrame_Landscape" );
            anim.play("Clip_Common_TagFrame_Landscape");

            if (this.pageData.length > 1) {
              this.rankingPages[Order.rank].getComponent(Animation).play("Clip_Ranking_Rank_Page_Landscape_Longhu");
              this.rankingPages[Order.award].getComponent(Animation).play("Clip_Ranking_Reward_Page_Landscape_Longhu");
            } else {
              this.rankingPages[Order.rank].getComponent(Animation).play("Clip_Ranking_Rank_Page_Landscape");
              this.rankingPages[Order.award].getComponent(Animation).play("Clip_Ranking_Reward_Page_Landscape");
            }

            for (var i = 0; i < this.rankList.length; i++) {
              this.rankList[i].dataNode.getComponent(Animation).play("Clip_Ranking_Rank_Cell_Landscape");

              if (Number(this.rankList[i].info.rank) <= 3) {
                this.rankList[i].dataNode.getComponent(RankboardItem).PlayTopAnim(true);
              }
            }

            this.listNode_TADA_Reward.children.forEach(function (node, idx) {
              node.getComponent(Animation).play("Clip_Ranking_Reward_Cell_Landscape");
            }); // this.rankingPages[ Order.activity ].setContentSize( 706, 490 );
          } else {
            // anim.playAdditive( "Clip_Common_TagFrame_Portrait" );
            anim.play("Clip_Common_TagFrame_Portrait");

            if (this.pageData.length > 1) {
              this.rankingPages[Order.rank].getComponent(Animation).play("Clip_Ranking_Rank_Page_Portrait_Longhu");
              this.rankingPages[Order.award].getComponent(Animation).play("Clip_Ranking_Reward_Page_Portrait_Longhu");
            } else {
              this.rankingPages[Order.rank].getComponent(Animation).play("Clip_Ranking_Rank_Page_Portrait");
              this.rankingPages[Order.award].getComponent(Animation).play("Clip_Ranking_Reward_Page_Portrait");
            }

            for (var _i3 = 0; _i3 < this.rankList.length; _i3++) {
              this.rankList[_i3].dataNode.getComponent(Animation).play("Clip_Ranking_Rank_Cell_Portrait");

              if (Number(this.rankList[_i3].info.rank) <= 3) {
                this.rankList[_i3].dataNode.getComponent(RankboardItem).PlayTopAnim(true);
              }
            }

            this.listNode_TADA_Reward.children.forEach(function (node, idx) {
              node.getComponent(Animation).play("Clip_Ranking_Reward_Cell_Portrait");
            }); // this.rankingPages[ Order.activity ].setContentSize( 465, 860 );
          } // if ( this.m_commonWebPage )
          // {
          //     this.m_commonWebPage.OnRotation( isLandscape );
          // }
          // }

        };

        _createClass(Rankboard, [{
          key: "eventCb",
          set:
          /**
           * 各類事件callback
           * open,close
           */
          function set(cb) {
            this._eventCb = cb;
          }
        }]);

        return Rankboard;
      }(Component), _class3.actionStartTime = null, _class3.actionEndTime = null, _class3.m_gameid = void 0, _class3.m_aid = void 0, _class3.m_apiid = void 0, _class3.m_siteid = void 0, _class3.readyShowWebPage = false, _class3.ReqMail = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listNode", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listNode_TADA_Rank", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listNode_TADA_Reward", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "tagNode1", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "tagNode2", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "tagNode3", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "pageNodesCheckBg", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "rankingPages", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "myRankNode", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "myRankNode_TADA_Rank", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "myRankNode_TADA_Name", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "myRankNode_TADA_Points", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_img_tittle", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_img_Tags", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_img_Tags_On", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "scrollBar", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "scrollBar_Rank", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "scrollBar_Reward", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "scrollView", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "rankItemPrefab", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "webViewPos", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "mask", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "gameDesc", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "scoreBonusNode", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "scoreBonusText", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "CloseNode", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "maskNode", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "m_rankInPageBtns", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "m_rewardInPageBtns", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "m_rankInPageBtnsTxt", [_dec30], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor31 = _applyDecoratedDescriptor(_class2.prototype, "m_rewardInPageBtnsTxt", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor32 = _applyDecoratedDescriptor(_class2.prototype, "m_common_WebPage", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      var rankInfo = exports('rankInfo', function rankInfo() {
        this.rank = '';
        this.name = '';
        this.nickName = '';
        this.score = 0;
      });
      var itemData = exports('itemData', function itemData() {
        this.localNode = null;
        this.dataNode = null;
        this.info = void 0;
        this.height = 0;
      });

      function matrixTorewardInfo(data) {
        if (data) {
          var ret = [];
          data.forEach(function (value) {
            ret.push({
              up: value.BeginRanking,
              down: value.EndRanking - 1,
              rewardNum: value.Amount,
              rewardType: value.PrizeType,
              rewardSubInfo: value.PrizeSubType,
              rewardDetail: value.Extra,
              amount: value.Amount
            });
          });
          return ret;
        } else {
          return [];
        }
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RankboardItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './Tools.ts', './ItemInfo.ts', './SoundManager.ts', './ItemList.ts', './BottombarManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, Sprite, SpriteFrame, Animation, Component, Define, LocaleStringManager, Tools, ItemInfo, SoundManager, ItemList, BottombarManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      ItemInfo = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      ItemList = module.default;
    }, function (module) {
      BottombarManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17;

      cclegacy._RF.push({}, "3210bLKBx1IupE7xcG08jV2", "RankboardItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var RankboardItem = exports('default', (_dec = property(Label), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property([Node]), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property([Node]), _dec9 = property(Sprite), _dec10 = property(Sprite), _dec11 = property(Sprite), _dec12 = property([SpriteFrame]), _dec13 = property(Node), _dec14 = property([Node]), _dec15 = property(Animation), _dec16 = property(Node), _dec17 = property(Label), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RankboardItem, _Component);

        function RankboardItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "level", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "score", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "score_TADA", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "userName", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rewards", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "gameName", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemName", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "levelPos", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rewardCoinPicture", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rewardMallCoinPicture", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rewardItemPicture", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rewardResources", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemDetailButton", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rankSymbol", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rankTopAni", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "darkNode", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text_PlayerRank", _descriptor17, _assertThisInitialized(_this));

          _this.itemID = void 0;
          _this.m_bottombar = void 0;
          _this.m_nameList = ['', ''];
          _this.m_count = 0;
          _this.m_webPage = void 0;
          _this.m_isPlayed = false;
          return _this;
        }

        var _proto = RankboardItem.prototype; // LIFE-CYCLE CALLBACKS:

        _proto.onLoad = function onLoad() {};

        _proto.start = function start() {
          // if ( this.score )
          // {
          // this.score.font = Define.DefaultFont;
          // }
          if (this.level) {
            Tools.SetFont(this.level);
          }

          if (this.userName) {
            Tools.SetFont(this.userName);
          }

          if (this.gameName) {
            Tools.SetFont(this.gameName);
          }

          if (this.itemName) {
            Tools.SetFont(this.itemName);
          }

          if (this.score) {
            Tools.SetFont(this.score);
          }

          if (this.score_TADA) {
            Tools.SetFont(this.score_TADA);
          }
        } // update (dt){}
        // 成績排行榜
        ;

        _proto.init = function init(level, score, name1, name2) {
          this.level.string = level;
          Tools.SetFont(this.level);
          this.score.string = score > 0 ? Tools.FormatNumberThousands(score, Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO) : LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_OUT_OF_RANK);
          Tools.SetFont(this.score);

          if (name1 && name2) {
            this.m_nameList[0] = name1;
            this.m_nameList[1] = name2; // if (name2.length > 0 && name1 != name2)
            // {
            //     let anim = this.node.getComponent(Animation);
            //     if (anim)
            //     {
            //         anim.play();
            //     }
            // }

            this.userName.string = this.m_nameList[this.m_count];
            Tools.SetFont(this.userName);
          } // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {


          this.rankTopAni.stop();
          this.rankTopAni.node.active = false; // this.rankSymbol.length 長度有4 (位置0空的), 前3明才有特效所以-1

          if (Number(level) <= this.rankSymbol.length - 1) {
            this.level.string = "";

            for (var i = 0; i < this.rankSymbol.length; i++) {
              if (this.rankSymbol[i]) {
                this.rankSymbol[i].active = false;
              }
            }

            this.rankSymbol[level].active = true;
            this.rankTopAni.onLoad();
            this.rankTopAni.node.active = true;
            this.rankTopAni.play("Clip_Ranking_TopEffect");
          }

          if (Number(level) % 2 == 0) {
            this.darkNode.active = true;
          } else {
            this.darkNode.active = false;
          } // }

        };

        _proto.PlayTopAnim = function PlayTopAnim(isRotation) {
          if (isRotation === void 0) {
            isRotation = false;
          }

          if (!this.m_isPlayed || isRotation) {
            this.rankTopAni.node.active = true;
            this.rankTopAni.play("Clip_Ranking_TopEffect");
            var state = this.rankTopAni.getState("Clip_Ranking_TopEffect"); // error( 'PlayTopAnim R', state, this.rankTopAni.clips )

            this.m_isPlayed = true;
          }
        }
        /**@ch 排行榜獎勵 */
        ;

        _proto.initReward = function initReward(firstLevel, level, rewardType, score, subInfo, m_bottombar, webPage, amount, myRank) {
          var _this2 = this;

          Tools.SetFont(this.level);
          this.m_bottombar = m_bottombar;
          this.m_webPage = webPage;
          this.rewards.forEach(function (node) {
            node.active = false;
          });
          this.itemDetailButton.active = false;
          this.score.string = "";
          Tools.SetFont(this.score);
          this.gameName.string = "";
          Tools.SetFont(this.gameName);
          this.itemName.string = "";
          Tools.SetFont(this.itemName);
          this.score_TADA.string = "";
          Tools.SetFont(this.score_TADA);
          this.text_PlayerRank.string = "Rank:" + myRank.toString();

          switch (rewardType) {
            case 1:
              // 現金獎勵
              this.rewards[0].active = true; // if ( Tools.Line !== Define.LineSetting.americas &&
              //     Tools.Line !== Define.LineSetting.americas_str )
              // {
              //     this.score.string = ( score > 0 ) ? Tools.FormatNumberThousands( Tools.strip( score ), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO ) : LocaleStringManager.GetInstance().GetString( Define.StringKey.RANK_OUT_OF_RANK );
              // } else
              // {

              this.score_TADA.string = score > 0 ? Tools.FormatNumberThousands(Tools.strip(score), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO) : LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_OUT_OF_RANK); // }

              this.rewardCoinPicture.node.active = true;
              this.rewardMallCoinPicture.node.active = false;
              break;

            case 6:
              // 商城幣獎勵
              this.rewards[0].active = true; // if ( Tools.Line !== Define.LineSetting.americas &&
              //     Tools.Line !== Define.LineSetting.americas_str )
              // {
              //     this.score.string = ( score > 0 ) ? Tools.FormatNumberThousands( Tools.strip( score ), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO ) : LocaleStringManager.GetInstance().GetString( Define.StringKey.RANK_OUT_OF_RANK );
              // } else
              // {

              this.score_TADA.string = score > 0 ? Tools.FormatNumberThousands(Tools.strip(score), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO) : LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_OUT_OF_RANK); // }

              this.rewardCoinPicture.node.active = false;
              this.rewardMallCoinPicture.node.active = true;
              break;

            case 2:
            case 4:
              // 道具卡獎勵
              this.rewards[1].active = true;

              if (typeof subInfo == "number") {
                this.itemID = subInfo;
                var itemText = ItemInfo.GetItemTextInfo(this.itemID, 2);
                this.gameName.string = itemText.game;
                this.itemName.string = itemText.name + "x" + Tools.strip(score).toString();
              } else {
                if (rewardType == 2) {
                  this.itemDetailButton.active = true;
                  this.itemID = this.parseToItemInfoData(subInfo.GameID, subInfo);

                  if (this.itemID.gameID === Define.GAME_ID.ENTITY) // 實體道具卡
                    {
                      this.gameName.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.GF_GIFTCARD) + "x" + amount;
                      this.itemName.string = LocaleStringManager.GetInstance().GetString(Define.RealItemsMap[this.itemID.icon]);
                    } else {
                    this.gameName.string = this.itemID.gameName;
                    var itemName = this.itemID.title;

                    if (this.itemID.star != 8) {
                      // itemName = LocaleStringManager.GetInstance().GetString( Define.StringKey.DAILY_COMMON_ITEM );
                      var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.DAILY_COMMON_ITEM);
                      itemName = str.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
                      itemName = Tools.CustomStringFormat(itemName, {
                        Star: this.itemID.star
                      });
                    }

                    this.itemName.string = itemName + "x" + Tools.strip(score).toString();
                  } // if ( Tools.Line === Define.LineSetting.americas ||
                  //     Tools.Line === Define.LineSetting.americas_str )
                  // {


                  this.itemDetailButton.on(Node.EventType.TOUCH_END, function (event) {
                    var itemData = _this2.itemID;
                    var iconID = itemData.icon;
                    var icon = itemData.gameID === Define.GAME_ID.ENTITY ? ItemList.GetInstance().GetRealItemIcon(iconID) : ItemList.GetInstance().GetItemIcon(iconID); // let itemTitle = LocaleStringManager.GetInstance().GetString( Define.StringKey.BACKPACK_TXT_GAME ) + this.gameName.string;

                    var itemTitle = _this2.gameName.string;
                    var itemDataCopy = Tools.shallowCopy(itemData);
                    var infoText = ItemList.GetInstance().GetItemInfoText(itemDataCopy, 2);
                    var desc = LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_TXT_INFO) + "\n" + infoText.gameDesc;

                    var bottomBar = _this2.m_bottombar.node.getComponent(BottombarManager);

                    if (bottomBar) {
                      if (itemData.gameID === Define.GAME_ID.ENTITY) {
                        icon = ItemList.GetInstance().GetRealItemIcon(iconID);

                        var _str = LocaleStringManager.GetInstance().GetString(Define.StringKey.ITEM_DESC + "9_2");

                        _str = _str.replace("{PH}", LocaleStringManager.GetInstance().GetString(Define.RealItemsMap[iconID]));
                        var title = LocaleStringManager.GetInstance().GetString(Define.StringKey.GF_GIFTCARD);

                        var _itemTitle = LocaleStringManager.GetInstance().GetString(Define.RealItemsMap[iconID]);

                        bottomBar.OpenCommonText(title, LocaleStringManager.GetInstance().GetString(Define.StringKey.BACKPACK_TXT_INFO) + "\n" + _str, _itemTitle, icon, amount);
                      } else {
                        bottomBar.OpenCommonText(itemData.title, desc, itemTitle, icon, Tools.strip(score));
                      }
                    }
                  }); // }
                } else if (rewardType == 4) {
                  // this.itemDetailButton.active = false;
                  this.gameName.string = ""; //全遊戲卡不顯示
                  //讓道具卡名稱靠上

                  this.gameName.fontSize = 0;
                  this.itemName.verticalAlign = Label.VerticalAlign.TOP; // 特色遊戲卡

                  var star = subInfo.star;

                  var _itemName;

                  switch (star) {
                    case 8:
                      _itemName = LocaleStringManager.GetInstance().GetString(Define.StringKey.ITEM_TITLE + "GOLD");
                      break;

                    default:
                      var _str2 = LocaleStringManager.GetInstance().GetString(Define.StringKey.DAILY_COMMON_ITEM);

                      _itemName = _str2.replace("{ITEM_NAME}", Tools.IsTada ? LocaleStringManager.GetInstance().GetString(Define.StringKey.TADA_ITEM_NAME) : LocaleStringManager.GetInstance().GetString(Define.StringKey.JILI_ITEM_NAME));
                      _itemName = Tools.CustomStringFormat(_itemName, {
                        Star: star
                      });
                      break;
                  } // if ( Tools.Line !== Define.LineSetting.americas &&
                  //     Tools.Line !== Define.LineSetting.americas_str )
                  // {
                  //     this.itemName.string = itemName + "x" + Tools.strip( score ).toString();
                  // } else
                  // {


                  this.score_TADA.string = _itemName + "x" + Tools.strip(score).toString(); // }
                }
              }

              switch (firstLevel) {
                case 1:
                  if (this.rewardResources[0]) {
                    this.rewardItemPicture.spriteFrame = this.rewardResources[0];
                  }

                  break;

                case 2:
                  if (this.rewardResources[1]) {
                    this.rewardItemPicture.spriteFrame = this.rewardResources[1];
                  }

                  break;

                case 3:
                  if (this.rewardResources[2]) {
                    this.rewardItemPicture.spriteFrame = this.rewardResources[2];
                  }

                  break;

                default:
                  if (this.rewardResources[3]) {
                    this.rewardItemPicture.spriteFrame = this.rewardResources[3];
                  }

                  break;
              }

              break;
          }

          this.level.string = level;
        };

        _proto.playChangeName = function playChangeName(nameType) {
          this.m_count = nameType;

          if (this.m_nameList[1].length > 0 && this.m_nameList[0] != this.m_nameList[1]) {
            if (this.node.active) {
              var anim = this.node.getComponent(Animation);

              if (anim) {
                anim.play();
              }
            } else {
              this.change();
            }
          }
        };

        _proto.setName = function setName(name) {
          this.userName.string = name;
        };

        _proto.showInfo = function showInfo() {
          if (this.m_webPage && this.m_webPage.isShow()) {
            this.m_webPage.close();
          }

          this.m_bottombar.ShowItemInfo(this.itemID);
          SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
        } //名字變化
        ;

        _proto.change = function change() {
          // this.m_count = (this.m_count + 1) % 2;
          this.userName.string = this.m_nameList[this.m_count];
        };

        _proto.parseToItemInfoData = function parseToItemInfoData(gameID, data) {
          var gameName = LocaleStringManager.GetInstance().GetGameName(gameID);
          var ret = {};
          ret.icon = data.Icon;
          ret.type = data.WinType;
          ret.star = data.Star;
          ret.bet = data.Bet;
          ret.title = data.CardName;
          ret.gameName = gameName;
          ret.gameDesc = data.GameName;
          ret.gameID = data.GameID;
          ret.amount = data.amount;
          return ret;
        };

        return RankboardItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "level", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "score", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "score_TADA", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "userName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "rewards", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "gameName", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "itemName", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "levelPos", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "rewardCoinPicture", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "rewardMallCoinPicture", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "rewardItemPicture", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "rewardResources", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "itemDetailButton", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "rankSymbol", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "rankTopAni", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "darkNode", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "text_PlayerRank", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RankboardPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Component, Define, LocaleStringManager, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "f1f35gMFfNOgKk3ZSO83VEK", "RankboardPage", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var RankboardPage = exports('default', (_dec = property({
        type: Label,
        tooltip: "RankText"
      }), _dec2 = property({
        type: Label,
        tooltip: "NameText"
      }), _dec3 = property({
        type: Label,
        tooltip: "PointsText"
      }), _dec4 = property({
        type: Label,
        tooltip: "Num_PlayerRank"
      }), _dec5 = property({
        type: Label,
        tooltip: "Num_PlayerName"
      }), _dec6 = property({
        type: Label,
        tooltip: "Num_PlayerPoints"
      }), _dec7 = property({
        type: Label,
        tooltip: "RefreshText"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RankboardPage, _Component);

        function RankboardPage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_RankText", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_NameText", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_PointsText", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_Num_PlayerRank", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_Num_PlayerName", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_Num_PlayerPoints", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_RefreshText", _descriptor7, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = RankboardPage.prototype;

        _proto.onLoad = function onLoad() {
          if (this.m_RankText) {
            Tools.SetFont(this.m_RankText);
          }

          if (this.m_NameText) {
            Tools.SetFont(this.m_NameText);
          }

          if (this.m_PointsText) {
            Tools.SetFont(this.m_PointsText);
          }

          if (this.m_Num_PlayerRank) {
            Tools.SetFont(this.m_Num_PlayerRank);
          }

          if (this.m_Num_PlayerName) {
            Tools.SetFont(this.m_Num_PlayerName);
          }

          if (this.m_Num_PlayerPoints) {
            Tools.SetFont(this.m_Num_PlayerPoints);
          }

          if (this.m_RefreshText) {
            Tools.SetFont(this.m_RefreshText);
          }
        };

        _proto.SetTxt = function SetTxt() {
          this.m_RankText.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_RANK);
          this.m_NameText.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_NAME);
          this.m_PointsText.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_POINT);
          this.m_RefreshText.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_REFRESH);
        };

        _proto.start = function start() {};

        _createClass(RankboardPage, [{
          key: "RankText",
          get: function get() {
            return this.m_RankText;
          }
        }, {
          key: "NameText",
          get: function get() {
            return this.m_NameText;
          }
        }, {
          key: "PointsText",
          get: function get() {
            return this.m_PointsText;
          }
        }, {
          key: "Num_PlayerRank",
          get: function get() {
            return this.m_Num_PlayerRank;
          }
        }, {
          key: "Num_PlayerName",
          get: function get() {
            return this.m_Num_PlayerName;
          }
        }, {
          key: "Num_PlayerPoints",
          get: function get() {
            return this.m_Num_PlayerPoints;
          }
        }, {
          key: "RefreshText",
          get: function get() {
            return this.m_RefreshText;
          }
        }]);

        return RankboardPage;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_RankText", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_NameText", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_PointsText", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_Num_PlayerRank", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_Num_PlayerName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_Num_PlayerPoints", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_RefreshText", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RankboardReward.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Component, Define, LocaleStringManager, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "795e3tsI29PKY6hSMfAD1L0", "RankboardReward", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var RankboardReward = exports('default', (_dec = property({
        type: Label,
        tooltip: "RefreshText"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RankboardReward, _Component);

        function RankboardReward() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_RefreshText", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = RankboardReward.prototype;

        _proto.onLoad = function onLoad() {
          if (this.m_RefreshText) {
            Tools.SetFont(this.m_RefreshText);
          }
        };

        _proto.SetTxt = function SetTxt() {
          this.m_RefreshText.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_REFRESH);
        };

        _proto.start = function start() {};

        _createClass(RankboardReward, [{
          key: "RefreshText",
          get: function get() {
            return this.m_RefreshText;
          }
        }]);

        return RankboardReward;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_RefreshText", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RankItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LifeSocket.ts', './Define.ts', './LocaleStringManager.ts', './GameIconComponent.ts', './MsgBox.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Sprite, Animation, Node, Component, LifeSocket, Define, LocaleStringManager, GameIconComponent, MsgBox;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      Animation = module.Animation;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      GameIconComponent = module.default;
    }, function (module) {
      MsgBox = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "58035IPOT9OqJu6S3KIkJ/n", "RankItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var RankItem = exports('default', (_dec = property({
        type: Label,
        tooltip: "排行"
      }), _dec2 = property({
        type: Label,
        tooltip: "名稱"
      }), _dec3 = property({
        type: GameIconComponent,
        tooltip: "遊戲icon"
      }), _dec4 = property({
        type: Label,
        tooltip: "倍率"
      }), _dec5 = property({
        type: Label,
        tooltip: "時間"
      }), _dec6 = property({
        type: Sprite,
        tooltip: "倍率背景"
      }), _dec7 = property({
        type: Animation,
        tooltip: "animate"
      }), _dec8 = property({
        type: Node,
        tooltip: "倍率背景(掛在葉面裡的玩家自己的才要)"
      }), _dec9 = property({
        type: Node,
        tooltip: "倍率背景(掛在葉面裡的玩家自己的才要)"
      }), _dec10 = property({
        type: Node,
        tooltip: "遊戲跳轉按鈕(掛在葉面裡的玩家自己的才要)"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RankItem, _Component);

        function RankItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_rankLabel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_nameLabel", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_gameIcon", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_oddsLabel", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_timeLabel", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_oddsBgSprite", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_playerAnimate", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_inRankNode", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_outRankNode", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_goToBtn", _descriptor10, _assertThisInitialized(_this));

          _this.m_gameId = 0;
          return _this;
        }

        var _proto = RankItem.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          if (this.m_goToBtn) {
            this.m_goToBtn.on(Node.EventType.TOUCH_END, function (event) {
              var gameName = LocaleStringManager.GetInstance().GetGameName(_this2.m_gameId);
              console.error('top50 change game', _this2.m_gameId, gameName);
              MsgBox.getInstance().ShowFullMessageBox(Define.StringKey.CHANGE_GAME_HINT, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, [gameName], function () {
                LifeSocket.GetInstance().ReqUrl(_this2.m_gameId, Define.BTN_CLICK_EVENT.TOP50_CHANGE_GAME);
              }, function () {}, function () {});
            }, this);
          }
        };

        _createClass(RankItem, [{
          key: "RankLabel",
          get: function get() {
            return this.m_rankLabel;
          }
        }, {
          key: "NameLabel",
          get: function get() {
            return this.m_nameLabel;
          } // @property( {
          //     type: Sprite,
          //     tooltip: "遊戲icon"
          // } )
          // private m_iconSprite: Sprite = null;
          // public get IconSprite(): Sprite
          // {
          //     return this.m_iconSprite;
          // }

        }, {
          key: "GameIcon",
          get: function get() {
            return this.m_gameIcon;
          }
        }, {
          key: "OddsLabel",
          get: function get() {
            return this.m_oddsLabel;
          }
        }, {
          key: "TimeLabel",
          get: function get() {
            return this.m_timeLabel;
          }
        }, {
          key: "OddsBgSprite",
          get: function get() {
            return this.m_oddsBgSprite;
          } // America

        }, {
          key: "PlayerAnimate",
          get: function get() {
            return this.m_playerAnimate;
          }
        }, {
          key: "InRankNode",
          get: function get() {
            return this.m_inRankNode;
          }
        }, {
          key: "OutRankNode",
          get: function get() {
            return this.m_outRankNode;
          }
        }, {
          key: "GoToBtn",
          get: function get() {
            return this.m_goToBtn;
          }
        }, {
          key: "GameId",
          get: function get() {
            return this.m_gameId;
          },
          set: function set(n) {
            this.m_gameId = n;
          }
        }]);

        return RankItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_rankLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_nameLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_gameIcon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_oddsLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_timeLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_oddsBgSprite", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_playerAnimate", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_inRankNode", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_outRankNode", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_goToBtn", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RankTestAck.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7f5922oV7BOOq5tBn/Yd1lU", "RankTestAck", undefined);

      var RankTestAck = exports('default', function RankTestAck() {});
      RankTestAck.RANK0 = {
        "Data": null,
        "Error": "",
        "NeedWebView": true
      };
      RankTestAck.RANK1 = {
        // "Error": "",
        // "Sn": 15176,
        // "Start": "2022-06-01T14:30:00+07:00",
        // "Ended": "2022-07-08T15:00:00+07:00",
        // "Updated": "2022-04-08T14:55:25.494623068+07:00",
        // "StartTimestamp": 1656648670,
        // "EndedTimestamp": 1656658670,
        // "UpdatedTimestamp": 1656648670,
        // "Desc": "法老爺爺_test",
        // "Number": 2, "Score": 13000,
        // "Users": [ {
        //     "AccountId": 0,
        //     "Nickname": "****3_su",
        //     "NewNickname": "****3_su",
        //     "Number": 1,
        //     "Score": 28000,
        //     "Games": [ 85 ],
        //     "Updated": "2022-07-01T10:41:00+07:00",
        //     "APIID": 6,
        //     "ExtraInfo": { "GameId": 0, "Win": 0, "WagersId": "0" },
        //     "VipLv": 0,
        //     "VipGroupID": 0
        // },
        // {
        //     "AccountId": 69203,
        //     "Nickname": "c3434_su", "NewNickname": "c3434_su", "Number": 2, "Score": 13000,
        //     "Games": [ 85 ], "Updated": "2022-04-08T14:50:00+07:00", "APIID": 6,
        //     "ExtraInfo": { "GameId": 0, "Win": 0, "WagersId": "0" }, "VipLv": 0, "VipGroupID": 0
        // }
        // ],
        // "Prizes": [ { "BeginRanking": 1, "EndRanking": 2, "PrizeType": 1, "PrizeSubType": 0, "Amount": 100, "Value": 100, "Union": 0, "Extra": null }, { "BeginRanking": 2, "EndRanking": 3, "PrizeType": 2, "PrizeSubType": 1077101, "Amount": 0, "Value": 0, "Union": 0, "Extra": { "CardName": "免費遊戲卡(一星)", "GameID": 77, "Bet": 0.1, "Star": 1, "WinType": 1, "Icon": 11077 } }, { "BeginRanking": 3, "EndRanking": 4, "PrizeType": 2, "PrizeSubType": 1085110, "Amount": 0, "Value": 0, "Union": 0, "Extra": { "CardName": "免費遊戲卡(二星)", "GameID": 85, "Bet": 0.5, "Star": 2, "WinType": 1, "Icon": 12085 } }, { "BeginRanking": 4, "EndRanking": 5, "PrizeType": 2, "PrizeSubType": 1085115, "Amount": 0, "Value": 0, "Union": 0, "Extra": { "CardName": "免費遊戲卡(三星)", "GameID": 85, "Bet": 1, "Star": 3, "WinType": 1, "Icon": 13085 } }, { "BeginRanking": 5, "EndRanking": 6, "PrizeType": 2, "PrizeSubType": 1085120, "Amount": 0, "Value": 0, "Union": 0, "Extra": { "CardName": "免費遊戲卡(四星)", "GameID": 85, "Bet": 1, "Star": 4, "WinType": 1, "Icon": 14085 } }, { "BeginRanking": 6, "EndRanking": 7, "PrizeType": 2, "PrizeSubType": 1085135, "Amount": 0, "Value": 0, "Union": 0, "Extra": { "CardName": "免費遊戲卡(五星)", "GameID": 85, "Bet": 5, "Star": 5, "WinType": 1, "Icon": 15085 } }, { "BeginRanking": 7, "EndRanking": 8, "PrizeType": 4, "PrizeSubType": 1, "Amount": 1, "Value": 0, "Union": 0, "Extra": { "star": 2, "itemValue": 0, "effectiveTime": 0 } }, { "BeginRanking": 8, "EndRanking": 9, "PrizeType": 4, "PrizeSubType": 1, "Amount": 1, "Value": 0, "Union": 0, "Extra": { "star": 5, "itemValue": 0, "effectiveTime": 0 } }, { "BeginRanking": 9, "EndRanking": 10, "PrizeType": 6, "PrizeSubType": 10, "Amount": 10, "Value": 0.1, "Union": 0, "Extra": null }, { "BeginRanking": 10, "EndRanking": 11, "PrizeType": 1, "PrizeSubType": 0, "Amount": 40, "Value": 40, "Union": 0, "Extra": null } ],
        //  "UnionNumber": 0, "UnionScore": 0, "UnionUsers": null, "UnionPrizes": [], "AwardNotice": true, "VipLv": 0, "NeedWebView": true
        "Data": [{
          "Error": "",
          "Sn": 18705,
          "Start": "2023-02-13T00:00:00+07:00",
          "Ended": "2023-02-13T21:00:00+07:00",
          "Updated": "2023-02-13T11:22:45.775456602+07:00",
          "StartTimestamp": 1676221200,
          "EndedTimestamp": 1676296800,
          "UpdatedTimestamp": 1676262165,
          "Desc": "kennyTestRanking",
          "Number": 1,
          "Score": 8400,
          "Users": [{
            "Nickname": "kailihuang_su",
            "NewNickname": "kailihuang_su",
            "Number": 1,
            "Score": 8400,
            "Games": [5],
            "Updated": "2023-02-13T10:11:00+07:00",
            "APIID": 6,
            "ExtraInfo": {
              "GameId": 0,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "****y001",
            "NewNickname": "****y001",
            "Number": 2,
            "Score": 65,
            "Games": [5],
            "Updated": "2023-02-13T10:18:30.164655832+07:00",
            "APIID": 0,
            "ExtraInfo": {
              "GameId": 5,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "****y002",
            "NewNickname": "****y002",
            "Number": 3,
            "Score": 64,
            "Games": [5],
            "Updated": "2023-02-13T10:18:30.1646561+07:00",
            "APIID": 0,
            "ExtraInfo": {
              "GameId": 5,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          } // {
          //     "Nickname": "****3283",
          //     "NewNickname": "****3283",
          //     "Number": 5,
          //     "Score": 63,
          //     "Games": [
          //         5
          //     ],
          //     "Updated": "2023-02-13T10:18:30.164656618+07:00",
          //     "APIID": 0,
          //     "ExtraInfo": {
          //         "GameId": 5,
          //         "Win": 0,
          //         "WagersId": "0"
          //     },
          //     "VipLv": 0,
          //     "VipGroupID": 0
          // }
          ],
          "Prizes": [{
            "BeginRanking": 1,
            "EndRanking": 2,
            "PrizeType": 1,
            "PrizeSubType": 0,
            "Amount": 10,
            "Value": 10,
            "Union": 0,
            "Extra": null
          }, {
            "BeginRanking": 2,
            "EndRanking": 6,
            "PrizeType": 1,
            "PrizeSubType": 0,
            "Amount": 10,
            "Value": 40,
            "Union": 0,
            "Extra": null
          }, {
            "BeginRanking": 6,
            "EndRanking": 11,
            "PrizeType": 1,
            "PrizeSubType": 0,
            "Amount": 10,
            "Value": 50,
            "Union": 0,
            "Extra": null
          }],
          "UnionNumber": 0,
          "UnionScore": 0,
          "UnionUsers": null,
          "UnionPrizes": [],
          "AwardNotice": true,
          "VipLv": 0,
          "RankingType": 1,
          "NeedWebView": false
        }
        /*{
            "Error": "",
            "Sn": 18705,
            "Start": "2023-02-13T00:00:00+07:00",
            "Ended": "2023-02-13T21:00:00+07:00",
            "Updated": "2023-02-13T11:22:45.775456602+07:00",
            "StartTimestamp": 1676221200,
            "EndedTimestamp": 1676296800,
            "UpdatedTimestamp": 1676262165,
            "Desc": "kennyTestRanking",
            "Number": 0,
            "Score": 0,
            "Users": [
                {
                    "Nickname": "kailihuang_su",
                    "NewNickname": "kailihuang_su",
                    "Number": 1,
                    "Score": 8500,
                    "Games": [
                        5
                    ],
                    "Updated": "2023-02-13T10:11:00+07:00",
                    "APIID": 6,
                    "ExtraInfo": {
                        "GameId": 0,
                        "Win": 0,
                        "WagersId": "0"
                    },
                    "VipLv": 0,
                    "VipGroupID": 0
                },
                {
                    "Nickname": "****y004",
                    "NewNickname": "****y004",
                    "Number": 2,
                    "Score": 62,
                    "Games": [
                        5
                    ],
                    "Updated": "2023-02-13T10:18:30.164655832+07:00",
                    "APIID": 0,
                    "ExtraInfo": {
                        "GameId": 5,
                        "Win": 0,
                        "WagersId": "0"
                    },
                    "VipLv": 0,
                    "VipGroupID": 0
                },
                {
                    "Nickname": "****y005",
                    "NewNickname": "****y005",
                    "Number": 3,
                    "Score": 61,
                    "Games": [
                        5
                    ],
                    "Updated": "2023-02-13T10:18:30.1646561+07:00",
                    "APIID": 0,
                    "ExtraInfo": {
                        "GameId": 5,
                        "Win": 0,
                        "WagersId": "0"
                    },
                    "VipLv": 0,
                    "VipGroupID": 0
                }
            ],
            "Prizes": [
                {
                    "BeginRanking": 1,
                    "EndRanking": 2,
                    "PrizeType": 1,
                    "PrizeSubType": 0,
                    "Amount": 10,
                    "Value": 10,
                    "Union": 0,
                    "Extra": null
                },
                {
                    "BeginRanking": 2,
                    "EndRanking": 6,
                    "PrizeType": 1,
                    "PrizeSubType": 0,
                    "Amount": 10,
                    "Value": 40,
                    "Union": 0,
                    "Extra": null
                }
            ],
            "UnionNumber": 0,
            "UnionScore": 0,
            "UnionUsers": null,
            "UnionPrizes": [],
              "AwardNotice": true,
            "VipLv": 0,
            "RankingType": 1,
            "NeedWebView": false
        }*/
        ],
        "Error": "",
        "NeedWebView": true
      };
      RankTestAck.RANK2 = {
        // "Error": "",
        // "Sn": 15176,
        // "Start": "2022-06-01T14:30:00+07:00",
        // "Ended": "2022-07-08T15:00:00+07:00",
        // "Updated": "2022-04-08T14:55:25.494623068+07:00",
        // "StartTimestamp": 1656648670,
        // "EndedTimestamp": 1656658670,
        // "UpdatedTimestamp": 1656648670,
        // "Desc": "法老爺爺_test",
        // "Number": 2, "Score": 13000,
        // "Users": [ {
        //     "AccountId": 0,
        //     "Nickname": "****3_su",
        //     "NewNickname": "****3_su",
        //     "Number": 1,
        //     "Score": 28000,
        //     "Games": [ 85 ],
        //     "Updated": "2022-07-01T10:41:00+07:00",
        //     "APIID": 6,
        //     "ExtraInfo": { "GameId": 0, "Win": 0, "WagersId": "0" },
        //     "VipLv": 0,
        //     "VipGroupID": 0
        // },
        // {
        //     "AccountId": 69203,
        //     "Nickname": "c3434_su", "NewNickname": "c3434_su", "Number": 2, "Score": 13000,
        //     "Games": [ 85 ], "Updated": "2022-04-08T14:50:00+07:00", "APIID": 6,
        //     "ExtraInfo": { "GameId": 0, "Win": 0, "WagersId": "0" }, "VipLv": 0, "VipGroupID": 0
        // }
        // ],
        // "Prizes": [ { "BeginRanking": 1, "EndRanking": 2, "PrizeType": 1, "PrizeSubType": 0, "Amount": 100, "Value": 100, "Union": 0, "Extra": null }, { "BeginRanking": 2, "EndRanking": 3, "PrizeType": 2, "PrizeSubType": 1077101, "Amount": 0, "Value": 0, "Union": 0, "Extra": { "CardName": "免費遊戲卡(一星)", "GameID": 77, "Bet": 0.1, "Star": 1, "WinType": 1, "Icon": 11077 } }, { "BeginRanking": 3, "EndRanking": 4, "PrizeType": 2, "PrizeSubType": 1085110, "Amount": 0, "Value": 0, "Union": 0, "Extra": { "CardName": "免費遊戲卡(二星)", "GameID": 85, "Bet": 0.5, "Star": 2, "WinType": 1, "Icon": 12085 } }, { "BeginRanking": 4, "EndRanking": 5, "PrizeType": 2, "PrizeSubType": 1085115, "Amount": 0, "Value": 0, "Union": 0, "Extra": { "CardName": "免費遊戲卡(三星)", "GameID": 85, "Bet": 1, "Star": 3, "WinType": 1, "Icon": 13085 } }, { "BeginRanking": 5, "EndRanking": 6, "PrizeType": 2, "PrizeSubType": 1085120, "Amount": 0, "Value": 0, "Union": 0, "Extra": { "CardName": "免費遊戲卡(四星)", "GameID": 85, "Bet": 1, "Star": 4, "WinType": 1, "Icon": 14085 } }, { "BeginRanking": 6, "EndRanking": 7, "PrizeType": 2, "PrizeSubType": 1085135, "Amount": 0, "Value": 0, "Union": 0, "Extra": { "CardName": "免費遊戲卡(五星)", "GameID": 85, "Bet": 5, "Star": 5, "WinType": 1, "Icon": 15085 } }, { "BeginRanking": 7, "EndRanking": 8, "PrizeType": 4, "PrizeSubType": 1, "Amount": 1, "Value": 0, "Union": 0, "Extra": { "star": 2, "itemValue": 0, "effectiveTime": 0 } }, { "BeginRanking": 8, "EndRanking": 9, "PrizeType": 4, "PrizeSubType": 1, "Amount": 1, "Value": 0, "Union": 0, "Extra": { "star": 5, "itemValue": 0, "effectiveTime": 0 } }, { "BeginRanking": 9, "EndRanking": 10, "PrizeType": 6, "PrizeSubType": 10, "Amount": 10, "Value": 0.1, "Union": 0, "Extra": null }, { "BeginRanking": 10, "EndRanking": 11, "PrizeType": 1, "PrizeSubType": 0, "Amount": 40, "Value": 40, "Union": 0, "Extra": null } ],
        //  "UnionNumber": 0, "UnionScore": 0, "UnionUsers": null, "UnionPrizes": [], "AwardNotice": true, "VipLv": 0, "NeedWebView": true
        "Data": [{
          "Error": "",
          "Sn": 18705,
          "Start": "2023-02-13T00:00:00+07:00",
          "Ended": "2023-02-13T21:00:00+07:00",
          "Updated": "2023-02-13T11:22:45.775456602+07:00",
          "StartTimestamp": 1676221200,
          "EndedTimestamp": 1676296800,
          "UpdatedTimestamp": 1676262165,
          "Desc": "kennyTestRanking",
          "Number": 3,
          "Score": 8400,
          "Users": [{
            "Nickname": "****y001",
            "NewNickname": "****y001",
            "Number": 1,
            "Score": 16500,
            "Games": [5],
            "Updated": "2023-02-13T10:18:30.164655832+07:00",
            "APIID": 0,
            "ExtraInfo": {
              "GameId": 5,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "****y002",
            "NewNickname": "****y002",
            "Number": 2,
            "Score": 13200,
            "Games": [5],
            "Updated": "2023-02-13T10:18:30.1646561+07:00",
            "APIID": 0,
            "ExtraInfo": {
              "GameId": 5,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "kailihuang_su",
            "NewNickname": "kailihuang_su",
            "Number": 3,
            "Score": 8400,
            "Games": [5],
            "Updated": "2023-02-13T10:11:00+07:00",
            "APIID": 6,
            "ExtraInfo": {
              "GameId": 0,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "1kailihuang_su",
            "NewNickname": "1kailihuang_su",
            "Number": 4,
            "Score": 8000,
            "Games": [5],
            "Updated": "2023-02-13T10:11:00+07:00",
            "APIID": 6,
            "ExtraInfo": {
              "GameId": 0,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "2kailihuang_su",
            "NewNickname": "2kailihuang_su",
            "Number": 5,
            "Score": 7000,
            "Games": [5],
            "Updated": "2023-02-13T10:11:00+07:00",
            "APIID": 6,
            "ExtraInfo": {
              "GameId": 0,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "3kailihuang_su",
            "NewNickname": "3kailihuang_su",
            "Number": 6,
            "Score": 6000,
            "Games": [5],
            "Updated": "2023-02-13T10:11:00+07:00",
            "APIID": 6,
            "ExtraInfo": {
              "GameId": 0,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          } // {
          //     "Nickname": "****3283",
          //     "NewNickname": "****3283",
          //     "Number": 5,
          //     "Score": 63,
          //     "Games": [
          //         5
          //     ],
          //     "Updated": "2023-02-13T10:18:30.164656618+07:00",
          //     "APIID": 0,
          //     "ExtraInfo": {
          //         "GameId": 5,
          //         "Win": 0,
          //         "WagersId": "0"
          //     },
          //     "VipLv": 0,
          //     "VipGroupID": 0
          // }
          ],
          "Prizes": [{
            "BeginRanking": 1,
            "EndRanking": 2,
            "PrizeType": 1,
            "PrizeSubType": 0,
            "Amount": 10,
            "Value": 10,
            "Union": 0,
            "Extra": null
          }, {
            "BeginRanking": 2,
            "EndRanking": 6,
            "PrizeType": 1,
            "PrizeSubType": 0,
            "Amount": 10,
            "Value": 40,
            "Union": 0,
            "Extra": null
          }, {
            "BeginRanking": 6,
            "EndRanking": 11,
            "PrizeType": 1,
            "PrizeSubType": 0,
            "Amount": 10,
            "Value": 50,
            "Union": 0,
            "Extra": null
          }],
          "UnionNumber": 0,
          "UnionScore": 0,
          "UnionUsers": null,
          "UnionPrizes": [],
          "AwardNotice": true,
          "VipLv": 0,
          "RankingType": 1,
          "NeedWebView": false
        }
        /*{
            "Error": "",
            "Sn": 18705,
            "Start": "2023-02-13T00:00:00+07:00",
            "Ended": "2023-02-13T21:00:00+07:00",
            "Updated": "2023-02-13T11:22:45.775456602+07:00",
            "StartTimestamp": 1676221200,
            "EndedTimestamp": 1676296800,
            "UpdatedTimestamp": 1676262165,
            "Desc": "kennyTestRanking",
            "Number": 0,
            "Score": 0,
            "Users": [
                {
                    "Nickname": "kailihuang_su",
                    "NewNickname": "kailihuang_su",
                    "Number": 1,
                    "Score": 8500,
                    "Games": [
                        5
                    ],
                    "Updated": "2023-02-13T10:11:00+07:00",
                    "APIID": 6,
                    "ExtraInfo": {
                        "GameId": 0,
                        "Win": 0,
                        "WagersId": "0"
                    },
                    "VipLv": 0,
                    "VipGroupID": 0
                },
                {
                    "Nickname": "****y004",
                    "NewNickname": "****y004",
                    "Number": 2,
                    "Score": 62,
                    "Games": [
                        5
                    ],
                    "Updated": "2023-02-13T10:18:30.164655832+07:00",
                    "APIID": 0,
                    "ExtraInfo": {
                        "GameId": 5,
                        "Win": 0,
                        "WagersId": "0"
                    },
                    "VipLv": 0,
                    "VipGroupID": 0
                },
                {
                    "Nickname": "****y005",
                    "NewNickname": "****y005",
                    "Number": 3,
                    "Score": 61,
                    "Games": [
                        5
                    ],
                    "Updated": "2023-02-13T10:18:30.1646561+07:00",
                    "APIID": 0,
                    "ExtraInfo": {
                        "GameId": 5,
                        "Win": 0,
                        "WagersId": "0"
                    },
                    "VipLv": 0,
                    "VipGroupID": 0
                }
            ],
            "Prizes": [
                {
                    "BeginRanking": 1,
                    "EndRanking": 2,
                    "PrizeType": 1,
                    "PrizeSubType": 0,
                    "Amount": 10,
                    "Value": 10,
                    "Union": 0,
                    "Extra": null
                },
                {
                    "BeginRanking": 2,
                    "EndRanking": 6,
                    "PrizeType": 1,
                    "PrizeSubType": 0,
                    "Amount": 10,
                    "Value": 40,
                    "Union": 0,
                    "Extra": null
                }
            ],
            "UnionNumber": 0,
            "UnionScore": 0,
            "UnionUsers": null,
            "UnionPrizes": [],
              "AwardNotice": true,
            "VipLv": 0,
            "RankingType": 1,
            "NeedWebView": false
        }*/
        ],
        "Error": "",
        "NeedWebView": true
      };
      RankTestAck.RANK3 = {
        // "Error": "",
        // "Sn": 15176,
        // "Start": "2022-06-01T14:30:00+07:00",
        // "Ended": "2022-07-08T15:00:00+07:00",
        // "Updated": "2022-04-08T14:55:25.494623068+07:00",
        // "StartTimestamp": 1656648670,
        // "EndedTimestamp": 1656658670,
        // "UpdatedTimestamp": 1656648670,
        // "Desc": "法老爺爺_test",
        // "Number": 2, "Score": 13000,
        // "Users": [ {
        //     "AccountId": 0,
        //     "Nickname": "****3_su",
        //     "NewNickname": "****3_su",
        //     "Number": 1,
        //     "Score": 28000,
        //     "Games": [ 85 ],
        //     "Updated": "2022-07-01T10:41:00+07:00",
        //     "APIID": 6,
        //     "ExtraInfo": { "GameId": 0, "Win": 0, "WagersId": "0" },
        //     "VipLv": 0,
        //     "VipGroupID": 0
        // },
        // {
        //     "AccountId": 69203,
        //     "Nickname": "c3434_su", "NewNickname": "c3434_su", "Number": 2, "Score": 13000,
        //     "Games": [ 85 ], "Updated": "2022-04-08T14:50:00+07:00", "APIID": 6,
        //     "ExtraInfo": { "GameId": 0, "Win": 0, "WagersId": "0" }, "VipLv": 0, "VipGroupID": 0
        // }
        // ],
        // "Prizes": [ { "BeginRanking": 1, "EndRanking": 2, "PrizeType": 1, "PrizeSubType": 0, "Amount": 100, "Value": 100, "Union": 0, "Extra": null }, { "BeginRanking": 2, "EndRanking": 3, "PrizeType": 2, "PrizeSubType": 1077101, "Amount": 0, "Value": 0, "Union": 0, "Extra": { "CardName": "免費遊戲卡(一星)", "GameID": 77, "Bet": 0.1, "Star": 1, "WinType": 1, "Icon": 11077 } }, { "BeginRanking": 3, "EndRanking": 4, "PrizeType": 2, "PrizeSubType": 1085110, "Amount": 0, "Value": 0, "Union": 0, "Extra": { "CardName": "免費遊戲卡(二星)", "GameID": 85, "Bet": 0.5, "Star": 2, "WinType": 1, "Icon": 12085 } }, { "BeginRanking": 4, "EndRanking": 5, "PrizeType": 2, "PrizeSubType": 1085115, "Amount": 0, "Value": 0, "Union": 0, "Extra": { "CardName": "免費遊戲卡(三星)", "GameID": 85, "Bet": 1, "Star": 3, "WinType": 1, "Icon": 13085 } }, { "BeginRanking": 5, "EndRanking": 6, "PrizeType": 2, "PrizeSubType": 1085120, "Amount": 0, "Value": 0, "Union": 0, "Extra": { "CardName": "免費遊戲卡(四星)", "GameID": 85, "Bet": 1, "Star": 4, "WinType": 1, "Icon": 14085 } }, { "BeginRanking": 6, "EndRanking": 7, "PrizeType": 2, "PrizeSubType": 1085135, "Amount": 0, "Value": 0, "Union": 0, "Extra": { "CardName": "免費遊戲卡(五星)", "GameID": 85, "Bet": 5, "Star": 5, "WinType": 1, "Icon": 15085 } }, { "BeginRanking": 7, "EndRanking": 8, "PrizeType": 4, "PrizeSubType": 1, "Amount": 1, "Value": 0, "Union": 0, "Extra": { "star": 2, "itemValue": 0, "effectiveTime": 0 } }, { "BeginRanking": 8, "EndRanking": 9, "PrizeType": 4, "PrizeSubType": 1, "Amount": 1, "Value": 0, "Union": 0, "Extra": { "star": 5, "itemValue": 0, "effectiveTime": 0 } }, { "BeginRanking": 9, "EndRanking": 10, "PrizeType": 6, "PrizeSubType": 10, "Amount": 10, "Value": 0.1, "Union": 0, "Extra": null }, { "BeginRanking": 10, "EndRanking": 11, "PrizeType": 1, "PrizeSubType": 0, "Amount": 40, "Value": 40, "Union": 0, "Extra": null } ],
        //  "UnionNumber": 0, "UnionScore": 0, "UnionUsers": null, "UnionPrizes": [], "AwardNotice": true, "VipLv": 0, "NeedWebView": true
        "Data": [{
          "Error": "",
          "Sn": 18705,
          "Start": "2023-02-13T00:00:00+07:00",
          "Ended": "2023-02-13T21:00:00+07:00",
          "Updated": "2023-02-13T11:22:45.775456602+07:00",
          "StartTimestamp": 1676221200,
          "EndedTimestamp": 1676296800,
          "UpdatedTimestamp": 1676262165,
          "Desc": "kennyTestRanking",
          "Number": 1,
          "Score": 8400,
          "Users": [{
            "Nickname": "****y001",
            "NewNickname": "****y001",
            "Number": 1,
            "Score": 16500,
            "Games": [5],
            "Updated": "2023-02-13T10:18:30.164655832+07:00",
            "APIID": 0,
            "ExtraInfo": {
              "GameId": 5,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "****y002",
            "NewNickname": "****y002",
            "Number": 2,
            "Score": 13200,
            "Games": [5],
            "Updated": "2023-02-13T10:18:30.1646561+07:00",
            "APIID": 0,
            "ExtraInfo": {
              "GameId": 5,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "kailihuang_su",
            "NewNickname": "kailihuang_su",
            "Number": 3,
            "Score": 8400,
            "Games": [5],
            "Updated": "2023-02-13T10:11:00+07:00",
            "APIID": 6,
            "ExtraInfo": {
              "GameId": 0,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "1kailihuang_su",
            "NewNickname": "1kailihuang_su",
            "Number": 4,
            "Score": 8000,
            "Games": [5],
            "Updated": "2023-02-13T10:11:00+07:00",
            "APIID": 6,
            "ExtraInfo": {
              "GameId": 0,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "2kailihuang_su",
            "NewNickname": "2kailihuang_su",
            "Number": 5,
            "Score": 7000,
            "Games": [5],
            "Updated": "2023-02-13T10:11:00+07:00",
            "APIID": 6,
            "ExtraInfo": {
              "GameId": 0,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "3kailihuang_su",
            "NewNickname": "3kailihuang_su",
            "Number": 6,
            "Score": 6000,
            "Games": [5],
            "Updated": "2023-02-13T10:11:00+07:00",
            "APIID": 6,
            "ExtraInfo": {
              "GameId": 0,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "7kailihuang_su",
            "NewNickname": "7kailihuang_su",
            "Number": 7,
            "Score": 8400,
            "Games": [5],
            "Updated": "2023-02-13T10:11:00+07:00",
            "APIID": 6,
            "ExtraInfo": {
              "GameId": 0,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "7kailihuang_su",
            "NewNickname": "7kailihuang_su",
            "Number": 8,
            "Score": 8400,
            "Games": [5],
            "Updated": "2023-02-13T10:11:00+07:00",
            "APIID": 6,
            "ExtraInfo": {
              "GameId": 0,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "7kailihuang_su",
            "NewNickname": "7kailihuang_su",
            "Number": 9,
            "Score": 8400,
            "Games": [5],
            "Updated": "2023-02-13T10:11:00+07:00",
            "APIID": 6,
            "ExtraInfo": {
              "GameId": 0,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "7kailihuang_su",
            "NewNickname": "7kailihuang_su",
            "Number": 10,
            "Score": 8400,
            "Games": [5],
            "Updated": "2023-02-13T10:11:00+07:00",
            "APIID": 6,
            "ExtraInfo": {
              "GameId": 0,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "7kailihuang_su",
            "NewNickname": "7kailihuang_su",
            "Number": 11,
            "Score": 8400,
            "Games": [5],
            "Updated": "2023-02-13T10:11:00+07:00",
            "APIID": 6,
            "ExtraInfo": {
              "GameId": 0,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          }, {
            "Nickname": "7kailihuang_su",
            "NewNickname": "7kailihuang_su",
            "Number": 12,
            "Score": 8400,
            "Games": [5],
            "Updated": "2023-02-13T10:11:00+07:00",
            "APIID": 6,
            "ExtraInfo": {
              "GameId": 0,
              "Win": 0,
              "WagersId": "0"
            },
            "VipLv": 0,
            "VipGroupID": 0
          } // {
          //     "Nickname": "****3283",
          //     "NewNickname": "****3283",
          //     "Number": 5,
          //     "Score": 63,
          //     "Games": [
          //         5
          //     ],
          //     "Updated": "2023-02-13T10:18:30.164656618+07:00",
          //     "APIID": 0,
          //     "ExtraInfo": {
          //         "GameId": 5,
          //         "Win": 0,
          //         "WagersId": "0"
          //     },
          //     "VipLv": 0,
          //     "VipGroupID": 0
          // }
          ],
          "Prizes": [{
            "BeginRanking": 1,
            "EndRanking": 2,
            "PrizeType": 1,
            "PrizeSubType": 0,
            "Amount": 10,
            "Value": 10,
            "Union": 0,
            "Extra": null
          }, {
            "BeginRanking": 2,
            "EndRanking": 6,
            "PrizeType": 1,
            "PrizeSubType": 0,
            "Amount": 10,
            "Value": 40,
            "Union": 0,
            "Extra": null
          }, {
            "BeginRanking": 6,
            "EndRanking": 11,
            "PrizeType": 1,
            "PrizeSubType": 0,
            "Amount": 10,
            "Value": 50,
            "Union": 0,
            "Extra": null
          }],
          "UnionNumber": 0,
          "UnionScore": 0,
          "UnionUsers": null,
          "UnionPrizes": [],
          "AwardNotice": true,
          "VipLv": 0,
          "RankingType": 1,
          "NeedWebView": false
        }
        /*{
            "Error": "",
            "Sn": 18705,
            "Start": "2023-02-13T00:00:00+07:00",
            "Ended": "2023-02-13T21:00:00+07:00",
            "Updated": "2023-02-13T11:22:45.775456602+07:00",
            "StartTimestamp": 1676221200,
            "EndedTimestamp": 1676296800,
            "UpdatedTimestamp": 1676262165,
            "Desc": "kennyTestRanking",
            "Number": 0,
            "Score": 0,
            "Users": [
                {
                    "Nickname": "kailihuang_su",
                    "NewNickname": "kailihuang_su",
                    "Number": 1,
                    "Score": 8500,
                    "Games": [
                        5
                    ],
                    "Updated": "2023-02-13T10:11:00+07:00",
                    "APIID": 6,
                    "ExtraInfo": {
                        "GameId": 0,
                        "Win": 0,
                        "WagersId": "0"
                    },
                    "VipLv": 0,
                    "VipGroupID": 0
                },
                {
                    "Nickname": "****y004",
                    "NewNickname": "****y004",
                    "Number": 2,
                    "Score": 62,
                    "Games": [
                        5
                    ],
                    "Updated": "2023-02-13T10:18:30.164655832+07:00",
                    "APIID": 0,
                    "ExtraInfo": {
                        "GameId": 5,
                        "Win": 0,
                        "WagersId": "0"
                    },
                    "VipLv": 0,
                    "VipGroupID": 0
                },
                {
                    "Nickname": "****y005",
                    "NewNickname": "****y005",
                    "Number": 3,
                    "Score": 61,
                    "Games": [
                        5
                    ],
                    "Updated": "2023-02-13T10:18:30.1646561+07:00",
                    "APIID": 0,
                    "ExtraInfo": {
                        "GameId": 5,
                        "Win": 0,
                        "WagersId": "0"
                    },
                    "VipLv": 0,
                    "VipGroupID": 0
                }
            ],
            "Prizes": [
                {
                    "BeginRanking": 1,
                    "EndRanking": 2,
                    "PrizeType": 1,
                    "PrizeSubType": 0,
                    "Amount": 10,
                    "Value": 10,
                    "Union": 0,
                    "Extra": null
                },
                {
                    "BeginRanking": 2,
                    "EndRanking": 6,
                    "PrizeType": 1,
                    "PrizeSubType": 0,
                    "Amount": 10,
                    "Value": 40,
                    "Union": 0,
                    "Extra": null
                }
            ],
            "UnionNumber": 0,
            "UnionScore": 0,
            "UnionUsers": null,
            "UnionPrizes": [],
              "AwardNotice": true,
            "VipLv": 0,
            "RankingType": 1,
            "NeedWebView": false
        }*/
        ],
        "Error": "",
        "NeedWebView": true
      };
      RankTestAck.RANK4 = {
        "Error": "",
        "Sn": 15485,
        "Start": "2022-04-15T10:15:00+07:00",
        "Ended": "2022-04-15T11:00:00+07:00",
        "Updated": "0001-01-01T00:00:00Z",
        "StartTimestamp": 1649992500,
        "EndedTimestamp": 1649995200,
        "UpdatedTimestamp": -62135596800,
        "Desc": "拳拳到肉_TADA",
        "Number": 0,
        "Score": 0,
        "Users": null,
        "Prizes": [{
          "BeginRanking": 1,
          "EndRanking": 2,
          "PrizeType": 4,
          "PrizeSubType": 1,
          "Amount": 1,
          "Value": 0,
          "Union": 0,
          "Extra": {
            "star": 1,
            "itemValue": 0,
            "effectiveTime": 0
          }
        }, {
          "BeginRanking": 2,
          "EndRanking": 3,
          "PrizeType": 2,
          "PrizeSubType": 1077101,
          "Amount": 0,
          "Value": 0,
          "Union": 0,
          "Extra": {
            "CardName": "Free Game(1 ★)",
            "GameID": 77,
            "Bet": 0.1,
            "Star": 1,
            "WinType": 1,
            "Icon": 11077
          }
        }],
        "UnionNumber": 0,
        "UnionScore": 0,
        "UnionUsers": null,
        "UnionPrizes": [],
        "AwardNotice": false,
        "VipLv": 0,
        "NeedWebView": true
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Recommend.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './Discount.ts', './IconTemplate.ts', './ViewTemplate.ts', './Tools.ts', './AutoShowManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Prefab, Animation, Layout, instantiate, Define, LocaleStringManager, IconTemplate, ViewTemplate, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Prefab = module.Prefab;
      Animation = module.Animation;
      Layout = module.Layout;
      instantiate = module.instantiate;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, null, function (module) {
      IconTemplate = module.default;
    }, function (module) {
      ViewTemplate = module.default;
    }, function (module) {
      Tools = module.default;
    }, null],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "0b375BnCIBNdYb1DMxo1A8h", "Recommend", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Recommend = exports('default', (_dec = property({
        type: Node,
        tooltip: "橫版建議遊戲顯示"
      }), _dec2 = property({
        type: Node,
        tooltip: "值版版建議遊戲顯示"
      }), _dec3 = property({
        type: Label,
        tooltip: "提示文字"
      }), _dec4 = property({
        type: Prefab,
        tooltip: "icon樣版"
      }), _dec5 = property({
        type: Node,
        tooltip: "橫版節點"
      }), _dec6 = property({
        type: Node,
        tooltip: "值版節點"
      }), _dec7 = property({
        type: Node,
        tooltip: "無ITEM提示"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_ViewTemplate) {
        _inheritsLoose(Recommend, _ViewTemplate);

        function Recommend() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _ViewTemplate.call.apply(_ViewTemplate, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_recommendNodeL", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_recommendNodeS", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_recommendHintLabels", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_iconPrefab", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_nodeL", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_nodeS", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_noItemHint", _descriptor7, _assertThisInitialized(_this));

          _this.m_recommendIconNodes = new Array();
          _this.m_gameIdList = null;
          _this.m_tagList = null;
          _this.m_dauList = null;
          _this.m_mallList = null;
          _this.m_top = null;
          _this.m_initEndCb = null;
          _this.m_discount = null;
          _this.m_favorList = null;
          _this.m_isLandscape = false;
          _this.m_isRegistered = false;
          _this.m_isFirst = true;
          return _this;
        }

        var _proto = Recommend.prototype;

        _proto.start = function start() {};

        _proto.SetTxt = function SetTxt(spriteAtlas) {
          if (this.m_recommendHintLabels) {
            this.m_recommendHintLabels.forEach(function (element) {
              element.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RECOMMEND_HINT);

              if (!element.font) {
                element.font = Define.DefaultFont;
              }
            });
          }
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          this.m_isLandscape = isLandscape; // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     if ( isLandscape )
          //     {
          //         this.m_nodeL.active = true;
          //         this.m_nodeS.active = false;
          //         this.m_recommendIconNodes.forEach( element =>
          //         {
          //             element.removeFromParent( false );
          //             this.m_recommendNodeL.addChild( element );
          //         } );
          //     }
          //     else
          //     {
          //         this.m_nodeL.active = false;
          //         this.m_nodeS.active = true;
          //         this.m_recommendIconNodes.forEach( element =>
          //         {
          //             element.removeFromParent( false );
          //             this.m_recommendNodeS.addChild( element );
          //         } );
          //     }
          // }
          // else
          // {

          if (this.m_isLandscape) {
            this.node.getComponent(Animation).play("Clip_WinMore_Popular_Landscape");
          } else {
            this.node.getComponent(Animation).play("Clip_WinMore_Popular_Portrait");
          } // }

        };

        _proto.InitRecommendGameIcon = function InitRecommendGameIcon(discount, isLandscape, gameIds, tagList, mall, dau, finishCb, top) {
          var _this2 = this;

          if (top === void 0) {
            top = null;
          }

          this.m_discount = discount;
          this.m_isLandscape = isLandscape;
          this.m_initEndCb = finishCb;
          this.m_gameIdList = gameIds;
          this.m_tagList = tagList;
          this.m_mallList = mall;
          this.m_dauList = dau;
          this.m_top = top;

          for (var i = 1; i < Object.keys(Define.TagType).length; i++) {
            // if ( Tools.Tags[ i ] !== Define.TagType.None && !Tools.Tags[ i ] )
            if (!Tools.Tags[i]) {
              var name = Define.TagName[i];
              Tools.LoadTag(LocaleStringManager.CurrLang, name, i, function () {
                if (_this2.CheckRes()) {
                  _this2.CreateIconBtn();
                }
              });
            }
          }

          for (var _i = 0; _i < gameIds.length; _i++) {
            if (!Tools.Icons[gameIds[_i]]) {
              Tools.LoadIcon(LocaleStringManager.CurrLang, gameIds[_i], function () {
                if (_this2.CheckRes()) {
                  _this2.CreateIconBtn();
                }
              });
            }
          }

          if (this.CheckRes()) {
            this.CreateIconBtn();
          }
        };

        _proto.SetContentPadding = function SetContentPadding() {
          var layout = this.m_recommendNodeL.getComponent(Layout);
          layout.paddingTop = 75;
        };

        _proto.UpdateFavorState = function UpdateFavorState(favorList, isFavorClose) {
          if (isFavorClose === void 0) {
            isFavorClose = false;
          }

          this.m_favorList = favorList;

          if (!isFavorClose) {
            if (favorList === null) {
              for (var i = 0; i < this.m_recommendIconNodes.length; i++) {
                var icon = this.m_recommendIconNodes[i].getComponent(IconTemplate);
                icon.SetIsFavor(false);
              }
            } else {
              for (var _i2 = 0; _i2 < this.m_recommendIconNodes.length; _i2++) {
                var _icon = this.m_recommendIconNodes[_i2].getComponent(IconTemplate);

                var isInList = this.FindElement(_icon.GameId, favorList);

                _icon.SetIsFavor(isInList);
              }
            }
          } else {
            for (var _i3 = 0; _i3 < this.m_recommendIconNodes.length; _i3++) {
              var _icon2 = this.m_recommendIconNodes[_i3].getComponent(IconTemplate);

              _icon2.SetIsFavor(false, false);
            }
          }

          if (this.m_recommendIconNodes.length <= 0) {
            this.m_noItemHint.active = true;
          } else {
            this.m_noItemHint.active = false;
          }
        };

        _proto.FindElement = function FindElement(target, list) {
          if (list.length === 1) {
            return list[0] === target;
          } else if (list.length === 0) {
            return false;
          }

          var left = list.slice(0, Math.floor(list.length / 2));
          var leftResult = this.FindElement(target, left);

          if (leftResult) {
            return leftResult;
          }

          var right = list.slice(Math.floor(list.length / 2), list.length);
          var rightResult = this.FindElement(target, right);

          if (rightResult) {
            return rightResult;
          }

          return false;
        }
        /**
         * 檢查icon和tag資源是否載入完畢
         */
        ;

        _proto.CheckRes = function CheckRes() {
          //所有tag都有
          for (var i = 1; i < Object.keys(Define.TagType).length; i++) {
            if (!Tools.Tags[i]) {
              return false;
            }
          } //所有遊戲都有


          for (var _i4 = 0; _i4 < this.m_gameIdList.length; _i4++) {
            if (!Tools.Icons[this.m_gameIdList[_i4]]) {
              return false;
            }
          }

          return true;
        };

        _proto.CreateIconBtn = function CreateIconBtn() {
          var _this3 = this; //排版只能放6個
          // let x = this.m_gameIdList.length >= 3 ? 3 : this.m_gameIdList.length;
          // let y = this.m_gameIdList.length >= 3 ? Math.ceil( this.m_gameIdList.length / 3 ) : 1;
          // if ( this.m_recommendIconNodes )
          // {
          //調整node數量


          if (this.m_recommendIconNodes.length > this.m_gameIdList.length) {
            for (var i = 0; i < this.m_recommendIconNodes.length; i++) {
              if (i < this.m_gameIdList.length) {
                this.m_recommendIconNodes[i].active = true;
              } else {
                this.m_recommendIconNodes[i].active = false;
              }
            }
          } else if (this.m_recommendIconNodes.length < this.m_gameIdList.length) {
            var dif = this.m_gameIdList.length - this.m_recommendIconNodes.length;

            for (var _i5 = 0; _i5 < dif; _i5++) {
              var node = instantiate(this.m_iconPrefab);
              this.m_recommendNodeL.addChild(node);
              this.m_recommendIconNodes.push(node);
            }
          }

          var CloseAllPrompt = function CloseAllPrompt() {
            for (var _i6 = 0; _i6 < _this3.m_recommendIconNodes.length; _i6++) {
              var icon = _this3.m_recommendIconNodes[_i6].getComponent(IconTemplate);

              icon.ShowPrompt(false);
            }
          };

          for (var _i7 = 0; _i7 < this.m_recommendIconNodes.length; _i7++) {
            var _node = this.m_recommendIconNodes[_i7];

            var icon = _node.getComponent(IconTemplate);

            var tags = this.m_tagList[_i7];
            icon.Init(this, this.m_discount.GameId);
            icon.SetIsFavor(false, false);
            icon.SetIconTouchShowPrompt();
            icon.SetCb(Define.BTN_CLICK_EVENT.RECOM_CHANGE_GAME, function (gameId) {
              _this3.m_discount.AddFavor(gameId, Define.BTN_CLICK_EVENT.RECOM_FAVOR_ADD);
            }, function (gameId) {
              _this3.m_discount.RemoveFavor(gameId, Define.BTN_CLICK_EVENT.RECOM_FAVOR_REMOVE);
            });
            icon.SetIconSpriteFrame(Tools.Icons[this.m_gameIdList[_i7]], this.m_gameIdList[_i7], CloseAllPrompt);

            if (tags[0] === Define.TagType.None) {
              icon.SetTagSpriteFrame(null);
            } else {
              (function () {
                var tagSpirteFrames = [];
                tags.forEach(function (element) {
                  tagSpirteFrames.push(Tools.Tags[element]);
                });
                icon.SetTagSpriteFrame(tagSpirteFrames);
              })();
            }

            icon.SetMall(Boolean(this.m_mallList[_i7]));
            icon.SetDau(this.m_dauList[_i7]);

            if (this.m_top) {
              icon.SetTop(this.m_top[_i7].Odd, this.m_top[_i7].win);
            } // if ( i === 0 )
            // {
            //     icon.ShowIconHint();
            // }


            if (_i7 === 1) {
              icon.ShowPrompt(true);
            }
          }

          this.OnRotation(this.m_isLandscape);
          this.UpdateFavorState(this.m_favorList);

          if (this.m_initEndCb) {
            this.m_initEndCb();
          }

          if (!this.m_isRegistered) {
            this.m_isRegistered = true;
          }
        };

        _proto.UpdateArrowState = function UpdateArrowState() {
          if (this.m_recommendIconNodes.length > 0) {
            this.m_recommendIconNodes[0].getComponent(IconTemplate).ShowIconHint();
          }
        };

        return Recommend;
      }(ViewTemplate), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_recommendNodeL", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_recommendNodeS", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_recommendHintLabels", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_iconPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_nodeL", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_nodeS", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_noItemHint", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RecordView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LocaleStringManager.ts', './Define.ts', './LifeSocket.ts', './EnvironmentConfig.ts', './MsgBox.ts', './ItemList.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Button, Sprite, Label, SpriteFrame, Node, UIOpacity, Component, LocaleStringManager, Define, LifeSocket, EnvironmentConfig, MsgBox, ItemList;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Sprite = module.Sprite;
      Label = module.Label;
      SpriteFrame = module.SpriteFrame;
      Node = module.Node;
      UIOpacity = module.UIOpacity;
      Component = module.Component;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      ItemList = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15;

      cclegacy._RF.push({}, "b90b9Abe9BKUZzeDwXeGxaX", "RecordView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BtnIndex = {
        Record: 0,
        Info: 1
      };
      var RecordView = exports('default', (_dec = property({
        type: Button,
        tooltip: "頁簽按鈕"
      }), _dec2 = property({
        type: Sprite,
        tooltip: "頁簽上層圖"
      }), _dec3 = property({
        type: Label,
        tooltip: "頁簽名稱"
      }), _dec4 = property({
        type: Label,
        tooltip: "收藏提示"
      }), _dec5 = property({
        type: Sprite,
        tooltip: "收藏圖示"
      }), _dec6 = property({
        type: SpriteFrame,
        tooltip: "已收藏圖示"
      }), _dec7 = property({
        type: SpriteFrame,
        tooltip: "未收藏圖示"
      }), _dec8 = property({
        type: Node,
        tooltip: "記錄主節點"
      }), _dec9 = property({
        type: Node,
        tooltip: "說明主節點"
      }), _dec10 = property({
        type: Sprite,
        tooltip: "道具卡圖示"
      }), _dec11 = property({
        type: Label,
        tooltip: "獎勵提示"
      }), _dec12 = property({
        type: Button,
        tooltip: "背包按鈕"
      }), _dec13 = property({
        type: Button,
        tooltip: "獎盃按鈕"
      }), _dec14 = property({
        type: Label,
        tooltip: "沒獎勵提示"
      }), _dec15 = property({
        type: Label,
        tooltip: "活動說明"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RecordView, _Component);

        function RecordView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_pageBtns", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_pageSprites", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_pageLabels", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_favorLabel", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_favorSprite", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_favorSpriteFrame", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_unfavorSpriteFrame", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_recordNode", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_infoNode", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_cardSprite", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_awardLabel", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_backpackBtn", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rankBtn", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_hintLabel", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_descLabel", _descriptor15, _assertThisInitialized(_this));

          _this.m_currentTouchName = null;
          _this.m_gameId = null;
          _this.m_extraManager = null;
          _this.m_trialView = null;
          _this.m_isFavor = false;
          _this.m_webUrl = null;
          return _this;
        }

        var _proto = RecordView.prototype;

        _proto.start = function start() {
          var _this2 = this;

          LifeSocket.GetInstance().SetFavorInfoCb(function (info) {
            if (info.Favorites) {
              for (var i = 0; i < info.Favorites.length; i++) {
                if (info.Favorites[i] === _this2.m_gameId) {
                  MsgBox.getInstance().ShowMessageBoxFormat(Define.StringKey.FAVOR_ADD_HINT, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, [LocaleStringManager.GetInstance().GetGameName(_this2.m_gameId)]);
                  _this2.m_isFavor = true;
                  break;
                } else {
                  _this2.m_isFavor = false;
                }
              }
            } else {
              _this2.m_isFavor = false;
            }

            if (_this2.m_isFavor) {
              _this2.m_favorSprite.spriteFrame = _this2.m_favorSpriteFrame;
            } else {
              _this2.m_favorSprite.spriteFrame = _this2.m_unfavorSpriteFrame;
            }
          });

          var _loop = function _loop(i) {
            _this2.m_pageBtns[i].node.on(Node.EventType.TOUCH_START, function (event) {
              // event.stopPropagationImmediate();
              // event.stopPropagation();
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this2.m_currentTouchName == null && _this2.m_pageBtns[i].node.active) {
                _this2.m_currentTouchName = event.target.name;
              } else {
                if (event.target && event.target.active == false) {
                  _this2.m_currentTouchName = event.target.name;
                }
              }
            });

            _this2.m_pageBtns[i].node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              if (_this2.m_currentTouchName == event.target.name) {
                _this2.m_currentTouchName = null;
              }
            });

            _this2.m_pageBtns[i].node.on(Node.EventType.TOUCH_END, function (event) {
              if (_this2.m_currentTouchName != event.target.name) {
                return;
              }

              _this2.m_currentTouchName = null;

              if (_this2.m_pageBtns[i].node.active) {
                for (var j = 0; j < _this2.m_pageSprites.length; j++) {
                  _this2.m_pageSprites[j].node.getComponent(UIOpacity).opacity = 0;
                }

                _this2.m_pageSprites[i].node.getComponent(UIOpacity).opacity = 255;

                if (i === BtnIndex.Record) {
                  _this2.m_recordNode.active = true;
                  _this2.m_infoNode.active = false;
                } else {
                  _this2.m_recordNode.active = false;
                  _this2.m_infoNode.active = true;
                }
              }
            });
          };

          for (var i = 0; i < this.m_pageBtns.length; i++) {
            _loop(i);
          }

          this.m_backpackBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            event.stopPropagationImmediate();
            event.stopPropagation();

            if (_this2.m_currentTouchName == null && _this2.m_backpackBtn.node.active) {
              _this2.m_currentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this2.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_backpackBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this2.m_currentTouchName == event.target.name) {
              _this2.m_currentTouchName = null;
            }
          });
          this.m_backpackBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            if (_this2.m_currentTouchName != event.target.name) {
              return;
            }

            _this2.m_currentTouchName = null;

            if (_this2.m_backpackBtn.node.active) {
              //Note:開啟被包
              _this2.m_trialView.CloseTrialView();

              _this2.m_extraManager.CloseAllMenu();

              _this2.m_extraManager.ShowBackpack();
            }
          });
          this.m_rankBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            // event.stopPropagationImmediate();
            // event.stopPropagation();
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this2.m_currentTouchName == null && _this2.m_rankBtn.node.active) {
              _this2.m_currentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this2.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_rankBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this2.m_currentTouchName == event.target.name) {
              _this2.m_currentTouchName = null;
            }
          });
          this.m_rankBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            if (_this2.m_currentTouchName != event.target.name) {
              return;
            }

            _this2.m_currentTouchName = null;

            if (_this2.m_rankBtn.node.active) {
              //Note:開啟活動官網
              if (_this2.m_webUrl === null) {
                _this2.m_webUrl = EnvironmentConfig.WEB_URL.replace("{target}", "Action");
              }

              if (_this2.m_extraManager) {
                _this2.m_extraManager.OpenWebView(_this2.m_webUrl, Define.StringKey.BOTTOM_BAR_BACK_TO_GAME);
              }
            }
          });
          this.m_favorSprite.node.on(Node.EventType.TOUCH_START, function (event) {
            // event.stopPropagationImmediate();
            // event.stopPropagation();
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this2.m_currentTouchName == null && _this2.m_favorSprite.node.active) {
              _this2.m_currentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this2.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_favorSprite.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this2.m_currentTouchName == event.target.name) {
              _this2.m_currentTouchName = null;
            }
          });
          this.m_favorSprite.node.on(Node.EventType.TOUCH_END, function (event) {
            if (_this2.m_currentTouchName != event.target.name) {
              return;
            }

            _this2.m_currentTouchName = null;

            if (_this2.m_favorSprite.node.active && !_this2.m_isFavor) {
              LifeSocket.GetInstance().ReqAddFavor(_this2.m_gameId, Define.BTN_CLICK_EVENT.TRIAL_FAVOR_ADD);
            }
          });
        };

        _proto.Init = function Init(awardInfo, desc) {
          this.m_descLabel.string = LocaleStringManager.GetInstance().GetString(desc);

          if (!this.m_descLabel.font) {
            this.m_descLabel.font = Define.DefaultFont;
          }

          this.SetAward(awardInfo);
          this.InitViewState();
        };

        _proto.SetTxt = function SetTxt() {
          this.m_awardLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.TRIAL_AWARD_RECORD_DESC);

          if (!this.m_awardLabel.font) {
            this.m_awardLabel.font = Define.DefaultFont;
          }

          this.m_hintLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.TRIAL_END_RECORD_DESC);

          if (!this.m_hintLabel.font) {
            this.m_hintLabel.font = Define.DefaultFont;
          }

          this.m_pageLabels[BtnIndex.Record].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.TRIAL_RECORD);

          if (!this.m_pageLabels[BtnIndex.Record].font) {
            this.m_pageLabels[BtnIndex.Record].font = Define.DefaultFont;
          }

          this.m_pageLabels[BtnIndex.Info].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.TRIAL_INFO);

          if (!this.m_pageLabels[BtnIndex.Info].font) {
            this.m_pageLabels[BtnIndex.Info].font = Define.DefaultFont;
          }

          this.m_favorLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.TRIAL_FAVOR);

          if (!this.m_favorLabel.font) {
            this.m_favorLabel.font = Define.DefaultFont;
          }
        };

        _proto.InitViewState = function InitViewState() {
          this.m_recordNode.active = true;
          this.m_infoNode.active = false;
          this.m_pageSprites[BtnIndex.Record].node.getComponent(UIOpacity).opacity = 255;
          this.m_pageSprites[BtnIndex.Info].node.getComponent(UIOpacity).opacity = 0;
        };

        _proto.SetAward = function SetAward(awardInfo) {
          var _this3 = this;

          if (awardInfo.amount > 0) {
            var gamePlist = ItemList.GetInstance().GetGameSpriteAtlas();

            if (gamePlist) {
              var icon = ItemList.GetInstance().GetItemIcon(awardInfo.data.icon);
              this.m_cardSprite.spriteFrame = icon;
            } else {
              ItemList.GetInstance().AddListener("trialRecord", function () {
                var icon = ItemList.GetInstance().GetItemIcon(awardInfo.data.icon);
                _this3.m_cardSprite.spriteFrame = icon;
              });
            }

            this.SetElementActive(true);
          } else {
            this.SetElementActive(false);
          }
        };

        _proto.SetElementActive = function SetElementActive(hasAward) {
          this.m_backpackBtn.node.active = hasAward;
          this.m_awardLabel.node.active = hasAward;
          this.m_cardSprite.node.active = hasAward;
          this.m_hintLabel.node.active = !hasAward;
          this.m_rankBtn.node.active = !hasAward;
        };

        _createClass(RecordView, [{
          key: "GameId",
          set: function set(v) {
            this.m_gameId = v;
          }
        }, {
          key: "ExtraManager",
          set: function set(v) {
            this.m_extraManager = v;
          }
        }, {
          key: "TrialView",
          set: function set(v) {
            this.m_trialView = v;
          }
        }]);

        return RecordView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_pageBtns", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_pageSprites", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_pageLabels", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_favorLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_favorSprite", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_favorSpriteFrame", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_unfavorSpriteFrame", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_recordNode", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_infoNode", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_cardSprite", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_awardLabel", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_backpackBtn", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_rankBtn", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_hintLabel", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_descLabel", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RedDiamondGet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, Define, LocaleStringManager, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "7177cMVXrFFyY8YwZWulHaS", "RedDiamondGet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var RedDiamondGet = exports('default', (_dec = property({
        type: Label,
        tooltip: "恭喜"
      }), _dec2 = property({
        type: Label,
        tooltip: "信件"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RedDiamondGet, _Component);

        function RedDiamondGet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_congrateLabel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_mallLabel", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = RedDiamondGet.prototype;

        _proto.SetTxt = function SetTxt() {
          this.m_congrateLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.REWARD_RUBY);
          this.m_mallLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.REWARD_CLICK_MALL);
          Tools.SetFont(this.m_congrateLabel);
          Tools.SetFont(this.m_mallLabel);
        };

        return RedDiamondGet;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_congrateLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_mallLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Request.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports({
        Request: Request,
        withQuery: withQuery
      });

      cclegacy._RF.push({}, "b8112hWTZBJto2AFlOxwXND", "Request", undefined);

      var DEFAULT_REQUEST_OPTIONS = exports('DEFAULT_REQUEST_OPTIONS', {
        ignoreCache: false,
        headers: {
          Accept: 'application/json, text/javascript, text/plain'
        },
        // default max duration for a request
        timeout: 10000
      });

      function queryParams(params) {
        if (params === void 0) {
          params = {};
        }

        return Object.keys(params).map(function (k) {
          return encodeURIComponent(k) + '=' + encodeURIComponent(params[k]);
        }).join('&');
      }

      function withQuery(url, params) {
        if (params === void 0) {
          params = {};
        }

        var queryString = queryParams(params);
        return queryString ? url + (url.indexOf('?') === -1 ? '?' : '&') + queryString : url;
      }

      function parseXHRResult(xhr, isProto) {
        if (isProto === void 0) {
          isProto = false;
        }

        return {
          ok: xhr.status >= 200 && xhr.status < 300 || xhr.status == 304,
          status: xhr.status,
          statusText: xhr.statusText,
          headers: xhr.getAllResponseHeaders(),
          data: isProto ? "" : xhr.responseText,
          protoData: isProto ? xhr.response : null,
          isTimeout: false,
          json: isProto ? null : function () {
            return JSON.parse(xhr.responseText);
          }
        };
      }

      function errorResponse(xhr, message) {
        if (message === void 0) {
          message = null;
        }

        return {
          ok: false,
          status: xhr.status,
          statusText: xhr.statusText,
          headers: xhr.getAllResponseHeaders(),
          data: message || xhr.statusText,
          protoData: null,
          isTimeout: true,
          json: function json() {
            return JSON.parse(message || xhr.statusText);
          }
        };
      }

      function Request(method, url, queryParams, body, options, isProto) {
        if (queryParams === void 0) {
          queryParams = {};
        }

        if (body === void 0) {
          body = null;
        }

        if (options === void 0) {
          options = DEFAULT_REQUEST_OPTIONS;
        }

        if (isProto === void 0) {
          isProto = false;
        }

        var ignoreCache = options.ignoreCache || DEFAULT_REQUEST_OPTIONS.ignoreCache;
        var headers = options.headers || DEFAULT_REQUEST_OPTIONS.headers;
        var timeout = options.timeout || DEFAULT_REQUEST_OPTIONS.timeout;
        return new Promise(function (resolve, reject) {
          var xhr = new XMLHttpRequest();

          if (isProto) {
            xhr.responseType = "arraybuffer";
          }

          xhr.open(method, withQuery(url, queryParams));

          if (headers && !isProto) {
            Object.keys(headers).forEach(function (key) {
              return xhr.setRequestHeader(key, headers[key]);
            });
          }

          if (ignoreCache) {
            xhr.setRequestHeader('Cache-Control', 'no-cache');
          }

          xhr.timeout = timeout;

          xhr.onload = function (evt) {
            resolve(parseXHRResult(xhr, isProto));
          };

          xhr.onerror = function (evt) {
            resolve(errorResponse(xhr, 'Failed to make request.'));
          };

          xhr.ontimeout = function (evt) {
            resolve(errorResponse(xhr, 'Request took longer than expected.'));
          };

          if (method === 'post' && body) {
            xhr.setRequestHeader('Content-Type', isProto ? "application/x-protobuf" : "application/json");
            xhr.send(isProto ? body : JSON.stringify(body));
          } else {
            xhr.send();
          }
        });
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RetryManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LifeSocket.ts', './FiniteState.ts', './MsgBox.ts', './Define.ts', './Tools.ts', './LocaleStringManager.ts', './DataStruct.ts'], function (exports) {
  'use strict';

  var _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, log, LifeSocket, FiniteState, MsgBox, Define, Tools, LocaleStringManager, ConnectionDataStruct;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      FiniteState = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      ConnectionDataStruct = module.ConnectionDataStruct;
    }],
    execute: function () {
      cclegacy._RF.push({}, "73e31x40zxMu6aUSKg+j53L", "RetryManager", undefined);

      var State = {
        IDLE: 0,
        CHECK_SOCKET: 1,
        RESYNC: 2
      };
      var RESYNC_MSG_INTERVAL_TIME = 5;
      var RetryManager = exports('default', /*#__PURE__*/function () {
        function RetryManager() {
          this.m_state = new FiniteState(State.IDLE);
          this.m_processTick = null;
          this.m_isLogin = false;
          this.m_isReqSpin = false;
          this.m_isFirstAutoShowResync = true;
          this.m_cbSetting = null;
          this.m_resyncCount = 0;
          this.m_showResyncMsgTime = RESYNC_MSG_INTERVAL_TIME;
          this.m_isResyncMsgClose = false;
          this.m_isTriggerRetry = false;

          if (RetryManager._instance) {
            throw new Error("Error: Instantiation failed: Use RetryManager.getInstance() instead of new.");
          }

          RetryManager._instance = this;
        }

        RetryManager.GetInstance = function GetInstance() {
          if (!this._instance) {
            this._instance = new RetryManager();
          }

          return RetryManager._instance;
        };

        RetryManager.OnExit = function OnExit() {
          delete this._instance;
          this._instance = null;
        };

        var _proto = RetryManager.prototype;

        _proto.SetCb = function SetCb(setting) {
          this.m_cbSetting = setting;
        };

        _proto.CheckTrigger = function CheckTrigger() {
          if (this.m_isTriggerRetry) {
            this.m_isTriggerRetry = false;
            return true;
          }

          return false;
        };

        _proto.Reset = function Reset() {
          this.m_resyncCount = 0;
          this.m_isResyncMsgClose = false;
          this.m_isFirstAutoShowResync = true;
          this.m_showResyncMsgTime = RESYNC_MSG_INTERVAL_TIME;
          this.m_isTriggerRetry = false;
          this.m_cbSetting.restartSpeedCb && this.m_cbSetting.restartSpeedCb();
        };

        _proto.Process = /*#__PURE__*/function () {
          var _Process = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(dt) {
            var _this = this;

            var currentState;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (this.m_isResyncMsgClose) {
                      this.m_showResyncMsgTime = Tools.strip(this.m_showResyncMsgTime - dt);

                      if (this.m_showResyncMsgTime <= 0) {
                        this.m_isResyncMsgClose = false;
                        this.m_isFirstAutoShowResync = true;
                      }
                    }

                    currentState = this.m_state.Tick();
                    _context.t0 = currentState;
                    _context.next = _context.t0 === State.IDLE ? 5 : _context.t0 === State.CHECK_SOCKET ? 6 : _context.t0 === State.RESYNC ? 9 : 11;
                    break;

                  case 5:
                    return _context.abrupt("break", 11);

                  case 6:
                    if (this.m_state.IsEntering()) {
                      log("RETRYMANAGER.CHECK_SOCKET", LifeSocket.GetInstance().IsClose);
                      this.m_processTick = null;

                      if (LifeSocket.GetInstance().IsClose) {
                        this.m_processTick = LifeSocket.GetInstance().ReconnectTime;
                      } else {
                        if (!this.m_isLogin) {
                          this.m_cbSetting && this.m_cbSetting.loginCb && this.m_cbSetting.loginCb();
                        } else if (!this.m_isReqSpin && this.m_cbSetting && this.m_cbSetting.extraCb) {
                          this.m_cbSetting.extraCb();
                        } else {
                          this.m_state.NextState(State.RESYNC);
                        }
                      }
                    }

                    if (this.m_processTick != null) {
                      this.m_processTick = Tools.strip(this.m_processTick - dt * 1000);

                      if (this.m_processTick <= 0) {
                        if (!this.m_isLogin) {
                          this.m_state.NextState(State.CHECK_SOCKET);
                        } else {
                          this.Resync();
                        }
                      }
                    }

                    return _context.abrupt("break", 11);

                  case 9:
                    if (this.m_state.IsEntering()) {
                      log("RETRYMANAGER.RESYNC");
                      this.m_cbSetting && this.m_cbSetting.lastReqCb && this.m_cbSetting.lastReqCb(function () {
                        _this.m_state.NextState(State.RESYNC);
                      });
                    }

                    return _context.abrupt("break", 11);

                  case 11:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function Process(_x) {
            return _Process.apply(this, arguments);
          }

          return Process;
        }();

        _proto.TimeoutHandle = function TimeoutHandle(timeoutType, stopAutoCb) {
          if (timeoutType == ConnectionDataStruct.ErrorHandleType.Ignore) {
            return;
          }

          this.m_isTriggerRetry = true;

          if (!this.m_isLogin) {
            this.m_state.NextState(State.CHECK_SOCKET);
          } else if (this.m_isReqSpin) {
            stopAutoCb && stopAutoCb();
            this.Resync();
          } else if (this.m_cbSetting && this.m_cbSetting.extraCb) {
            this.m_state.NextState(State.CHECK_SOCKET);
          } else {
            MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_TIME_OUT, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, Tools.CloseGameTab, Tools.GetErrorCode(Define.ErrorStatus.Game, Define.ErrorStatus.Unknow));
          }
        }
        /**
         * 重新同步
         */
        ;

        _proto.Resync = function Resync() {
          //timeout的提示以觸發的話，阻擋的功能利用msgbox cb來處理，避免多重的提示
          this.m_state.NextState(State.CHECK_SOCKET);

          if (!this.m_isFirstAutoShowResync) {
            return;
          }

          this.m_isFirstAutoShowResync = false;
          this.m_resyncCount++;

          if (this.m_resyncCount < 4) {
            this.m_isResyncMsgClose = true;
            this.m_showResyncMsgTime = RESYNC_MSG_INTERVAL_TIME;
            this.m_cbSetting && this.m_cbSetting.hintCb && this.m_cbSetting.hintCb(LocaleStringManager.GetInstance().GetString(Define.StringKey.MSGBOX_RESYNC), true);
          } else {
            MsgBox.getInstance().ShowMessageBox(Define.StringKey.MSGBOX_CONNECT_FAIL, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, Tools.CloseGameTab, Tools.GetErrorCode(Define.ErrorStatus.Game, Define.ClientErrorCode.ClientTimeOut));
          }
        };

        _createClass(RetryManager, [{
          key: "IsLogin",
          set: function set(v) {
            this.m_isLogin = v;
          }
        }, {
          key: "IsReqSpin",
          get: function get() {
            return this.m_isReqSpin;
          },
          set: function set(v) {
            this.m_isReqSpin = v;
          }
        }]);

        return RetryManager;
      }());
      RetryManager._instance = new RetryManager();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RookieHintComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, size, Animation, Node, Sprite, SpriteFrame, Label, UIOpacity, UITransform, view, v3, Component, Define;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      size = module.size;
      Animation = module.Animation;
      Node = module.Node;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      UIOpacity = module.UIOpacity;
      UITransform = module.UITransform;
      view = module.view;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "73774PldK1EaqdgxNnakZMI", "RookieHintComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ArrowAnim = {
        UP: "Clip_Hint_ArrowUp",
        DOWN: "Clip_Hint_ArrowDown"
      };
      var Shape = {
        Circle: 0,
        Rect: 1
      };
      var ShapeSize = {
        Circle: size(166, 166),
        Rect: size(240, 100),
        Rect_L: size(702, 135),
        // 任務介面用
        Rect_S: size(464, 162),
        // 任務介面用
        Rect_Mask_L: size(900, 180),
        // 任務介面用
        Rect_Mask_S: size(600, 210) // 任務介面用

      };
      var moveOdd = 15;
      var RookieHintComponent = exports('RookieHintComponent', (_dec = ccclass("RookieHintComponent"), _dec2 = property({
        type: Animation,
        tooltip: "箭頭方向控制動畫"
      }), _dec3 = property({
        type: Node,
        tooltip: "提示遮罩形狀 0:圓 1:方"
      }), _dec4 = property({
        type: Node,
        tooltip: "提示遮罩黑色部分 0:圓 1:方"
      }), _dec5 = property({
        type: Sprite,
        tooltip: "提示框"
      }), _dec6 = property({
        type: SpriteFrame,
        tooltip: "提示框圖資源 0:圓 1:方"
      }), _dec7 = property({
        type: Node,
        tooltip: "提示文字底板"
      }), _dec8 = property({
        type: Label,
        tooltip: "提示文字"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RookieHintComponent, _Component);

        function RookieHintComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_arrowAnim", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_hintMaskShape", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_hintMaskBg", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_hintShape", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_hintShapeSprites", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_hintTextFrame", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_hintText", _descriptor7, _assertThisInitialized(_this));

          _this.m_type = null;
          return _this;
        }

        var _proto = RookieHintComponent.prototype;

        _proto.start = function start() {};

        _proto.SetHintState = function SetHintState(type, isLandscape) {
          var _this2 = this;

          var animName = ArrowAnim.DOWN;
          var shapeSize = ShapeSize.Circle;
          var shapeSprite = this.m_hintShapeSprites[Shape.Circle];
          var maskShapeSize = null;
          var text = "";
          var isSetTouch = true;
          this.m_type = type; // 多語系設定

          switch (type) {
            case Define.RookieHintType.SPIN_BTN:
              animName = ArrowAnim.DOWN;
              shapeSize = ShapeSize.Circle;
              shapeSprite = this.m_hintShapeSprites[Shape.Circle];
              this.m_hintMaskShape[Shape.Circle].active = true;
              this.m_hintMaskShape[Shape.Rect].active = false; // text = LocaleStringManager.GetInstance().GetString( Define.StringKey.ROOKIE_CLICK_SPIN );

              text = "Press the SPIN Button to PLAY";
              isSetTouch = false;
              break;

            case Define.RookieHintType.BET_BTN:
              animName = ArrowAnim.DOWN;
              shapeSize = ShapeSize.Rect;
              shapeSprite = this.m_hintShapeSprites[Shape.Rect];
              this.m_hintMaskShape[Shape.Circle].active = false;
              this.m_hintMaskShape[Shape.Rect].active = true;
              this.m_hintMaskBg[Shape.Rect].getComponent(UIOpacity).opacity = 1; // text = LocaleStringManager.GetInstance().GetString( Define.StringKey.ROOKIE_CLICK_BET );

              text = "Increase Your Bet to Level UP Faster";
              break;

            case Define.RookieHintType.MISSION_BTN:
              animName = ArrowAnim.UP;
              shapeSize = ShapeSize.Circle;
              shapeSprite = this.m_hintShapeSprites[Shape.Circle];
              this.m_hintMaskShape[Shape.Circle].active = true;
              this.m_hintMaskShape[Shape.Rect].active = false; // text = LocaleStringManager.GetInstance().GetString( Define.StringKey.ROOKIE_CLICK_MISSION );

              text = "Mission Challenge!!\nComplete the Mission to Get Reward";
              break;

            case Define.RookieHintType.MISSION_MENU:
              animName = ArrowAnim.UP;
              shapeSize = isLandscape ? ShapeSize.Rect_L : ShapeSize.Rect_S;
              maskShapeSize = isLandscape ? ShapeSize.Rect_Mask_L : ShapeSize.Rect_Mask_S;
              shapeSprite = this.m_hintShapeSprites[Shape.Rect];
              this.m_hintMaskShape[Shape.Circle].active = false;
              this.m_hintMaskShape[Shape.Rect].active = true; // text = LocaleStringManager.GetInstance().GetString( Define.StringKey.ROOKIE_TRY_MISSION );

              text = "Try This!!";
              break;
          }

          if (isSetTouch) {
            for (var i = 0; i < this.m_hintMaskBg.length; i++) {
              this.m_hintMaskBg[i].on(Node.EventType.TOUCH_END, function () {
                _this2.node.parent.active = false;
              });
            }
          }

          this.m_arrowAnim.play(animName); // this.m_hintTextFrame.setPosition( v3( posX, this.m_hintTextFrame.position.y ) )

          this.m_hintShape.spriteFrame = shapeSprite;
          this.m_hintShape.node.getComponent(UITransform).setContentSize(shapeSize);

          if (maskShapeSize) {
            this.m_hintMaskShape[Shape.Rect].getComponent(UITransform).setContentSize(maskShapeSize);
          }

          this.m_hintText.string = text;
          this.CheckSizeAndPos();
        };

        _proto.OnRotate = function OnRotate(isLandscape) {
          this.CheckSizeAndPos();

          if (this.m_type == Define.RookieHintType.MISSION_MENU) {
            var shapeSize = isLandscape ? ShapeSize.Rect_L : ShapeSize.Rect_S;
            var maskShapeSize = isLandscape ? ShapeSize.Rect_Mask_L : ShapeSize.Rect_Mask_S;
            this.m_hintShape.node.getComponent(UITransform).setContentSize(shapeSize);
            this.m_hintMaskShape[Shape.Rect].getComponent(UITransform).setContentSize(maskShapeSize);
          } // let posX = this.m_hintTextFrame.position.x;
          // switch ( this.m_type )
          // {
          //     case Define.RookieHintType.SPIN_BTN:
          //         posX = isLandscape ? TextFrameX.SpinText_L : TextFrameX.SpinText_S;
          //         break;
          //     case Define.RookieHintType.BET_BTN:
          //         posX = isLandscape ? TextFrameX.BetText_L : TextFrameX.BetText_S;
          //         break;
          //     default:
          //         break;
          // }
          // this.m_hintTextFrame.setPosition( v3( posX, this.m_hintTextFrame.position.y ) )

        };

        _proto.CheckSizeAndPos = function CheckSizeAndPos() {
          // let screenSize = view.getFrameSize();
          var screenSize = view.getVisibleSize();
          var x = 0;
          var y = this.m_hintTextFrame.getPosition().y;
          var pos = this.m_hintTextFrame.parent.getComponent(UITransform).convertToWorldSpaceAR(v3(x, y)); // error( "CheckSizeAndPos", screenSize.width, pos )

          var halfWidth = this.m_hintTextFrame.getComponent(UITransform).contentSize.width / 2;
          var move = 0;

          if (pos.x + halfWidth > screenSize.width) {
            // error( "overscreen +", pos.x, halfWidth, screenSize.width )
            move = pos.x + halfWidth - screenSize.width;
            x = 0 - move - moveOdd;
          } else if (pos.x - halfWidth < 0) {
            // error( "overscreen -", pos.x, halfWidth, )
            move = halfWidth - pos.x;
            x = 0 + move + moveOdd;
          }

          this.m_hintTextFrame.setPosition(v3(x, y));
        };

        return RookieHintComponent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_arrowAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_hintMaskShape", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_hintMaskBg", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_hintShape", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_hintShapeSprites", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_hintTextFrame", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_hintText", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RookieHintManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './RookieHintComponent.ts', './Define.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, instantiate, UITransform, Component, tween, RookieHintComponent, Define, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
      Component = module.Component;
      tween = module.tween;
    }, function (module) {
      RookieHintComponent = module.RookieHintComponent;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "88c73QSkjFKCJc+I7jIH9sP", "RookieHintManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HintLevel = exports('HintLevel', {
        Spin: 0,
        Bet: 2,
        Mission: 3,
        MissionMenu: 3.5
      });
      var RookieHintManager = exports('RookieHintManager', (_dec = ccclass("RookieHintManager"), _dec2 = property({
        type: Prefab,
        tooltip: "提示箭頭prefab"
      }), _dec3 = property({
        type: Node,
        tooltip: "需要被提示的提示目標"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RookieHintManager, _Component);

        function RookieHintManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_arrowHintPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_hintTargets", _descriptor2, _assertThisInitialized(_this));

          _this.m_posNodes = [];
          _this.m_arrowHints = [];
          return _this;
        }

        var _proto = RookieHintManager.prototype;

        _proto.start = function start() {};

        _proto.SetTargetPosNode = function SetTargetPosNode(targetPosNode) {
          this.m_posNodes.push(targetPosNode);
        };

        _proto.CheckLevelHint = function CheckLevelHint(lv, isLandscape) {
          switch (lv) {
            case HintLevel.Spin:
              this.m_hintTargets[Define.RookieHintType.SPIN_BTN].active = true;
              this.SetHint(Define.RookieHintType.SPIN_BTN, this.m_posNodes[Define.RookieHintType.SPIN_BTN], isLandscape);
              return HintLevel.Spin;

            case HintLevel.Bet:
              this.m_hintTargets[Define.RookieHintType.BET_BTN].active = true;
              this.SetHint(Define.RookieHintType.BET_BTN, this.m_posNodes[Define.RookieHintType.BET_BTN], isLandscape);
              return HintLevel.Bet;

            case HintLevel.Mission:
              this.m_hintTargets[Define.RookieHintType.MISSION_BTN].active = true;
              this.SetHint(Define.RookieHintType.MISSION_BTN, this.m_posNodes[Define.RookieHintType.MISSION_BTN], isLandscape);
              return HintLevel.Mission;

            case HintLevel.MissionMenu:
              this.m_hintTargets[Define.RookieHintType.MISSION_MENU].active = true;
              this.SetHint(Define.RookieHintType.MISSION_MENU, this.m_posNodes[Define.RookieHintType.MISSION_MENU], isLandscape);
              return HintLevel.MissionMenu;

            default:
              return -1;
          }
        };

        _proto.SetHint = function SetHint(target, posNode, isLandscape) {
          if (!posNode) {
            console.error("SetHint: Cant find pos");
            return;
          }

          Tools.SetZIndex(this.node, Define.ZOrder.ROOKIE);
          var node = instantiate(this.m_arrowHintPrefab);
          this.m_hintTargets[target].addChild(node);
          var targetPos = posNode.parent.getComponent(UITransform).convertToWorldSpaceAR(posNode.getPosition());
          var localPoint = this.m_hintTargets[target].parent.getComponent(UITransform).convertToNodeSpaceAR(targetPos);
          console.error("SetHint", targetPos, localPoint, posNode.getPosition());
          this.m_hintTargets[target].setPosition(localPoint);
          var arrowHint = node.getComponent(RookieHintComponent);
          arrowHint.SetHintState(target, true);
          this.OnRotation(isLandscape);
        };

        _proto.CloseHint = function CloseHint(target) {
          if (this.m_hintTargets[target].getComponentInChildren(RookieHintComponent) && this.m_hintTargets[target].getComponentInChildren(RookieHintComponent).node.active) {
            // this.m_hintTargets[ target ].getComponentInChildren( RookieHintComponent ).node.active = false;
            this.m_hintTargets[target].active = false;
          }
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          var _this2 = this;

          var _loop = function _loop(i) {
            if (_this2.m_posNodes[i] && _this2.m_hintTargets[i].active) {
              tween(_this2.node).delay(0.1).call(function () {
                var targetPos = _this2.m_posNodes[i].parent.getComponent(UITransform).convertToWorldSpaceAR(_this2.m_posNodes[i].getPosition());

                var localPoint = _this2.m_hintTargets[i].parent.getComponent(UITransform).convertToNodeSpaceAR(targetPos);

                console.error("OnRotation", i, targetPos, localPoint, _this2.m_posNodes[i].getPosition());

                _this2.m_hintTargets[i].setPosition(localPoint);

                var arrowHint = _this2.m_hintTargets[i].getComponentInChildren(RookieHintComponent);

                if (arrowHint) {
                  arrowHint.OnRotate(isLandscape);
                }
              }).start();
            }
          };

          for (var i = 0; i < this.m_hintTargets.length; i++) {
            _loop(i);
          }
        };

        return RookieHintManager;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_arrowHintPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_hintTargets", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RoundController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, Define, Tools;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "55b4amMObRPIZjftOQak3C2", "RoundController", undefined);

      var RoundController = exports('default', /*#__PURE__*/function () {
        function RoundController() {
          this.m_spinStartTime = null;
          this.m_isPlayingBuyBonus = false;

          if (RoundController._instance) {
            throw new Error("Error: Instantiation failed: Use RoundController.getInstance() instead of new.");
          }

          RoundController._instance = this;
        }

        RoundController.GetInstance = function GetInstance() {
          if (!this._instance) {
            this._instance = new RoundController();
          }

          return RoundController._instance;
        };

        RoundController.OnExit = function OnExit() {
          delete this._instance;
          this._instance = null;
        };

        var _proto = RoundController.prototype;

        _proto.StartSpin = function StartSpin() {
          this.m_spinStartTime = Date.now();
        };

        _proto.CanToNextRound = function CanToNextRound() {
          return Tools.minus(Date.now(), this.m_spinStartTime) > Define.DEALY_TIME && !this.IsPlayingBuyBonus;
        };

        _createClass(RoundController, [{
          key: "IsPlayingBuyBonus",
          get: function get() {
            return this.m_isPlayingBuyBonus;
          },
          set: function set(v) {
            this.m_isPlayingBuyBonus = v;
          }
        }]);

        return RoundController;
      }());
      RoundController._instance = new RoundController();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SelectBtn.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Node, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "fe461YjwP1Ac4jACqvPLUcE", "SelectBtn", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SelectBtn = exports('default', (_dec = property({
        type: Label,
        tooltip: "選項名稱"
      }), _dec2 = property({
        type: Node,
        tooltip: "亮節點"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SelectBtn, _Component);

        function SelectBtn() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_txtLabel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lightNode", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(SelectBtn, [{
          key: "TxtLabel",
          get: function get() {
            return this.m_txtLabel;
          }
        }, {
          key: "LightNode",
          get: function get() {
            return this.m_lightNode;
          }
        }]);

        return SelectBtn;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_txtLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_lightNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ShakeComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _createClass, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Enum, JsonAsset, Vec3, math, tween, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _createClass = module.createClass;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      JsonAsset = module.JsonAsset;
      Vec3 = module.Vec3;
      math = module.math;
      tween = module.tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _class4, _class5, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

      cclegacy._RF.push({}, "02e880GcB9Jw7QDr8UUWxEV", "ShakeComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode,
          help = _decorator.help; //你可以通過調用`shake()`方法來觸發這個振動效果。你也可以通過修改`duration`，`magnitude`，`frequency`，`easeInTime`和`easeOutTime`屬性來調整振動效果的參數。
      //内置缓动函数 https://docs.cocos.com/creator/3.6/manual/zh/tween/tween-function.html

      /*
      let tweenEasing:string[] =[
      "linear","smooth","fade","constant",
      "quadIn","quadOut","quadInOut","quadOutIn",
      "cubicIn","cubicOut","cubicInOut","cubicOutIn",
      "quartIn","quartOut","quartInOut","quartOutIn",
      "quintIn","quintOut","quintInOut","quintOutIn",
      "sineIn","sineOut","sineInOut","sineOutIn",
      "expoIn","expoOut","expoInOut","expoOutIn",
      "circIn","circOut","circInOut","circOutIn",
      "elasticIn","elasticOut","elasticInOut","elasticOutIn",
      "backIn","backOut","backInOut","backOutIn",
      "bounceIn","bounceOut","bounceInOut","bounceOutIn"];
      */

      var tweenEasing = [{
        "name": "backIn",
        "desc": "回退:緩入"
      }, {
        "name": "backInOut",
        "desc": "回退:緩入緩出"
      }, {
        "name": "backOut",
        "desc": "回退:緩出"
      }, {
        "name": "backOutIn",
        "desc": "回退:緩出緩入"
      }, {
        "name": "bounceIn",
        "desc": "彈跳:緩入"
      }, {
        "name": "bounceInOut",
        "desc": "彈跳:緩入緩出"
      }, {
        "name": "bounceOut",
        "desc": "彈跳:緩出"
      }, {
        "name": "bounceOutIn",
        "desc": "彈跳:緩出緩入"
      }, {
        "name": "circIn",
        "desc": "迴圈:緩入 由慢到快"
      }, {
        "name": "circInOut",
        "desc": "迴圈:緩入緩出 由慢到很快再到慢"
      }, {
        "name": "circOut",
        "desc": "迴圈:緩出 由快到慢"
      }, {
        "name": "circOutIn",
        "desc": "迴圈:緩出緩入 由慢到很快再到慢"
      }, {
        "name": "constant",
        "desc": "constant"
      }, {
        "name": "cubicIn",
        "desc": "立方曲線緩入 由慢到快"
      }, {
        "name": "cubicInOut",
        "desc": "立方曲線緩入緩出 由慢到快再到慢"
      }, {
        "name": "cubicOut",
        "desc": "立方曲線緩出 由快到慢"
      }, {
        "name": "cubicOutIn",
        "desc": "立方曲線緩出緩入 由慢到快再到慢"
      }, {
        "name": "elasticIn",
        "desc": "彈簧回震:緩入"
      }, {
        "name": "elasticInOut",
        "desc": "彈簧回震:緩入緩出"
      }, {
        "name": "elasticOut",
        "desc": "彈簧回震:緩出"
      }, {
        "name": "elasticOutIn",
        "desc": "彈簧回震:緩出緩入"
      }, {
        "name": "expoIn",
        "desc": "指數曲線緩入 由慢到快"
      }, {
        "name": "expoInOut",
        "desc": "指數曲線緩入和緩出 由慢到很快再到慢"
      }, {
        "name": "expoOut",
        "desc": "指數曲線緩出 由快到慢"
      }, {
        "name": "expoOutIn",
        "desc": "指數曲線緩出緩入和 由慢到很快再到慢"
      }, {
        "name": "fade",
        "desc": "漸褪效果"
      }, {
        "name": "linear",
        "desc": "線性"
      }, {
        "name": "quadIn",
        "desc": "平方曲線緩入 由慢到快"
      }, {
        "name": "quadInOut",
        "desc": "平方曲線緩入緩出 由慢到快再到慢"
      }, {
        "name": "quadOut",
        "desc": "平方曲線緩出 由快到慢"
      }, {
        "name": "quadOutIn",
        "desc": "平方曲線緩出緩入 由慢到快再到慢"
      }, {
        "name": "quartIn",
        "desc": "四次方曲線緩入 由慢到快"
      }, {
        "name": "quartInOut",
        "desc": "四次方曲線緩入緩出 由慢到快再到慢"
      }, {
        "name": "quartOut",
        "desc": "四次方曲線緩出 由快到慢"
      }, {
        "name": "quartOutIn",
        "desc": "四次方曲線緩出緩入 由慢到快再到慢"
      }, {
        "name": "quintIn",
        "desc": "五次方曲線緩入 由慢到快"
      }, {
        "name": "quintInOut",
        "desc": "五次方曲線緩入緩出 由慢到快再到慢"
      }, {
        "name": "quintOut",
        "desc": "五次方曲線緩出 由慢到快"
      }, {
        "name": "quintOutIn",
        "desc": "五次方曲線緩出緩入 由慢到快再到慢"
      }, {
        "name": "sineIn",
        "desc": "正弦曲線緩入 由慢到快"
      }, {
        "name": "sineInOut",
        "desc": "正弦曲線緩入緩出 由慢到快再到慢"
      }, {
        "name": "sineOut",
        "desc": "正弦曲線緩出 由快到慢"
      }, {
        "name": "sineOutIn",
        "desc": "正弦曲線緩出緩入 由慢到快再到慢"
      }, {
        "name": "smooth",
        "desc": "平滑效果"
      }];
      var CCEasingName = Enum({});
      var CCShakeName = Enum({});
      var FadeEnum;

      (function (FadeEnum) {
        FadeEnum[FadeEnum["None"] = 0] = "None";
        FadeEnum[FadeEnum["FadeIn"] = 1] = "FadeIn";
        FadeEnum[FadeEnum["FadeOut"] = 2] = "FadeOut";
      })(FadeEnum || (FadeEnum = {}));

      var CCFadeName = Enum({
        "None": FadeEnum.None,
        "FadeIn": FadeEnum.FadeIn,
        "FadeOut": FadeEnum.FadeOut
      });

      var hash = function hash(str) {
        var hash = 0,
            i,
            chr;
        if (str.length === 0) return hash;

        for (i = 0; i < str.length; i++) {
          chr = str.charCodeAt(i);
          hash = (hash << 5) - hash + chr;
          hash |= 0;
        }

        return hash;
      };

      var _TweenInfo = exports('_TweenInfo', (_dec = ccclass("_TweenInfo"), _dec2 = property({
        visible: false,
        tooltip: "Easing"
      }), _dec3 = property({
        type: CCEasingName,
        visible: false
      }), _dec4 = property({
        visible: true,
        displayName: "緩動效果",
        type: CCEasingName
      }), _dec5 = property({
        type: CCFadeName,
        visible: false
      }), _dec6 = property({
        visible: true,
        displayName: "fade type",
        type: CCFadeName
      }), _dec7 = property({
        min: 0,
        visible: true,
        displayName: "時間"
      }), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function _TweenInfo() {
          _initializerDefineProperty(this, "m_EasingName", _descriptor, this);

          _initializerDefineProperty(this, "__easingIdx", _descriptor2, this);

          _initializerDefineProperty(this, "__fadeType", _descriptor3, this);

          this._EasingEnumList = [];

          _initializerDefineProperty(this, "duration", _descriptor4, this);
        }

        _createClass(_TweenInfo, [{
          key: "_easingIdx",
          get: function get() {
            {
              return;
            }
          },
          set: function set(value) {
            {
              return;
            }
          }
        }, {
          key: "_fadeType",
          get: function get() {
            return this.__fadeType;
          },
          set: function set(value) {
            {
              return;
            }
          } // 總時間

        }]);

        return _TweenInfo;
      }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_EasingName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "__easingIdx", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "_easingIdx", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "_easingIdx"), _class2.prototype), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "__fadeType", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "_fadeType", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "_fadeType"), _class2.prototype), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "duration", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class));

      var Shake = exports('Shake', (_dec8 = ccclass("Shake"), _dec9 = help("https://docs.cocos.com/creator/3.6/manual/zh/tween/tween-function.html#%E5%86%85%E7%BD%AE%E7%BC%93%E5%8A%A8%E5%87%BD%E6%95%B0"), _dec10 = property({
        visible: false,
        displayName: "正負交替",
        tooltip: "重複次數>1時, 正負交替"
      }), _dec11 = property({
        type: JsonAsset,
        displayName: "預先定義shake.json",
        visible: function visible() {
          // console.log( "shakeJson visible", this );
          if (this.shakeJson) this._updateShakeEnum(this.shakeJson.json["shakelist"]);
          return true;
        }
      }), _dec12 = property({
        visible: true,
        tooltip: "自定義的shake name"
      }), _dec13 = property({
        type: CCShakeName,
        visible: false
      }), _dec14 = property({
        visible: true,
        displayName: "儲存到預先定義.json",
        tooltip: "若Shakename不為:custom,才會儲存"
      }), _dec15 = property({
        visible: true,
        displayName: "預先定義",
        tooltip: "切換後會以預先定義的數值直接覆蓋所有設定值",
        type: CCShakeName
      }), _dec16 = property({
        readonly: true,
        displayName: "總震動時間"
      }), _dec17 = property({
        visible: true,
        displayName: "振幅"
      }), _dec18 = property({
        min: 1,
        step: 1,
        visible: true,
        displayName: "震動頻率/秒"
      }), _dec19 = property({
        step: 1,
        visible: true,
        displayName: "振幅x/y/z權重:%"
      }), _dec20 = property({
        visible: false,
        type: [_TweenInfo]
      }), _dec21 = property({
        type: [_TweenInfo],
        tooltip: "輸入更改 緩動效果 數量",
        displayName: "緩動效果"
      }), _dec8(_class4 = executeInEditMode(_class4 = _dec9(_class4 = (_class5 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Shake, _Component);

        function Shake() {
          var _this2;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this2 = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this2, "alternately", _descriptor5, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "shakeJson", _descriptor6, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "shakename", _descriptor7, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "__ShakeIdx", _descriptor8, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "Duration", _descriptor9, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "magnitude", _descriptor10, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "frequency", _descriptor11, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "weight", _descriptor12, _assertThisInitialized(_this2));

          _initializerDefineProperty(_this2, "_TweenList", _descriptor13, _assertThisInitialized(_this2));

          _this2._EasingEnumList = [];
          _this2._ShakeEnumList = [];
          _this2.originPos = new Vec3();
          _this2._TestShakeCnt = 0;
          return _this2;
        }

        var _proto = Shake.prototype;

        _proto.updateDuration = function updateDuration() {
          var Duration = 0.0;

          for (var i = 0; i < this._TweenList.length; i++) {
            Duration += this._TweenList[i].duration;
          }

          this.Duration = Duration; // console.log( "updateDuration", Duration );
        };

        _proto.setTweenJson = function setTweenJson(shakename) {
          var shakelist = this.shakeJson.json["shakelist"];

          if (shakename != "custom") {
            // console.log( "setTweenJson", shakename, JSON.stringify( shakelist, null, 2 ) );
            var shake = shakelist[shakename]; // console.log( "read from json ", this.shakename, JSON.stringify( shake, null, 2 ) );
          } else {
            console.warn("custom 不會儲存到預先定義.json");
          }
        };

        _proto.getTweenJson = function getTweenJson() {
          var jsonData = {
            "magnitude": this.magnitude,
            "frequency": this.frequency,
            "weight": {
              "x": this.weight.x,
              "y": this.weight.y,
              "z": this.weight.z
            }
          };
          var tweenList = [];

          for (var i = 0; i < this._TweenList.length; i++) {
            var twInfo = this._TweenList[i];
            tweenList.push({
              "m_EasingName": twInfo.m_EasingName,
              "_easingIdx": twInfo._easingIdx,
              "_fadeType": twInfo._fadeType,
              "duration": twInfo.duration
            });
          }

          jsonData["_TweenList"] = tweenList;
          return jsonData;
        };

        _proto.getJsonData = /*#__PURE__*/function () {
          var _getJsonData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var outJson, shakelist, fs, path;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    outJson = {}; // console.log( "getJsonData shakename", this.shakename );

                    if (this.shakeJson && this.shakeJson.json) {
                      outJson = this.shakeJson.json;
                    }

                    if (!(this.shakename != "custom")) {
                      _context.next = 19;
                      break;
                    }

                    shakelist = outJson["shakelist"];
                    shakelist[this.shakename] = this.getTweenJson();
                    outJson["shakelist"] = shakelist; //console.log("EDITOR",EDITOR,"update ",this.shakename,JSON.stringify(shakelist,null,2))

                    {
                      _context.next = 17;
                      break;
                    }

                  case 11:
                    path = _context.sent;
                    console.log("path", path, "outJson", JSON.stringify(outJson, null, 2));
                    fs.writeFileSync(path, JSON.stringify(outJson, null, 2), "utf-8"); //this._updateShakeEnum(shakelist); 存檔後會再觸發shakeJson:visble()更新

                    _context.next = 17;
                    break;

                  case 16:
                    console.log("請先指定 '預先定義shake.json'");

                  case 17:
                    _context.next = 20;
                    break;

                  case 19:
                    console.warn("custom 不會儲存到預先定義.json");

                  case 20:
                    return _context.abrupt("return", outJson);

                  case 21:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function getJsonData() {
            return _getJsonData.apply(this, arguments);
          }

          return getJsonData;
        }();

        _proto.onLoad = function onLoad() {
          if (this.shakeJson && this.shakeJson.json) {
            // console.log( "onLoad", this.shakeJson.json );
            this._updateShakeEnum(this.shakeJson.json["shakelist"]);

            this.shakeJson.json; // console.log( "this.shakeJson _uuid", this.shakeJson._uuid );
          } else {
            this.getJsonData();
          } // console.log( "jsonData", JSON.stringify( jsonData ) );


          var enumList = [];

          for (var i = 0; i < tweenEasing.length; ++i) {
            var easingName = tweenEasing[i];
            enumList.push({
              name: easingName.desc,
              easingName: easingName.name,
              value: hash(easingName.name)
            }); //使用hash儲存以避免因為spine skin順序異動而對應錯誤
          }

          enumList.sort(function (a, b) {
            if (a.name < b.name) return -1;else if (a.name > b.name) return 1;else return 0;
          });
          this._EasingEnumList = enumList; //console.log(this.node.uuid,"_refreshInspector this._EasingEnumList",this._EasingEnumList);

          this._updateEasingEnum();

          this.updateDuration();
        };

        _proto._updateShakeEnum = function _updateShakeEnum(shakelist) {
          // console.log( this.node.uuid, "shakelist", shakelist );
          var shakeEnumList = [];

          if (shakelist) {
            Object.keys(shakelist).forEach(function (key) {
              shakeEnumList.push({
                name: key,
                value: hash(key)
              }); //使用hash儲存以避免因為ShakeName順序異動而對應錯誤
            });
            shakeEnumList.sort(function (a, b) {
              if (a.name < b.name) return -1;else if (a.name > b.name) return 1;else return 0;
            });
          }

          this._ShakeEnumList = shakeEnumList;
        };

        _proto._updateEasingEnum = function _updateEasingEnum() {
          for (var i = 0; i < this._TweenList.length; i++) {
            this._TweenList[i]._EasingEnumList = this._EasingEnumList;
          } // console.log( this.node.uuid, "_updateEasingEnum", this._EasingEnumList, "CCFadeName", CCFadeName );

        };

        _proto.start = function start() {
          // 在開始時保存原始位置
          this.originPos = this.node.getPosition(); // console.log( "originPos", this.originPos.x, this.originPos.y, this.originPos.z );
          //this.DampedOscillation();

          this.shake();
        };

        _proto.fade = function fade(tweenObj, duration, frequency, shakeMagnitude, fadeType, weight, easingName) {
          var dt = 1.0 / frequency;
          var tFadein = duration / dt;

          for (var i = 1; i <= tFadein; i++) {
            var fadeFactor = shakeMagnitude;
            if (fadeType == FadeEnum.FadeIn) fadeFactor *= i / tFadein;else if (fadeType == FadeEnum.FadeOut) fadeFactor *= (tFadein - i) / tFadein;
            var toPos = this.originPos.clone(); //let randPos=new Vec3((math.random() - 0.5)>0 ? 0.5 : -0.5,(math.random() - 0.5)>0 ? 0.5 : -0.5,(math.random() - 0.5)>0 ? 0.5 : -0.5);

            var randPos = new Vec3(math.random() - 0.5, math.random() - 0.5, math.random() - 0.5);
            var pos = new Vec3(2 * fadeFactor * weight.x / 100, 2 * fadeFactor * weight.y / 100, 2 * fadeFactor * weight.z / 100);
            pos = pos.multiply(randPos);
            toPos = toPos.add(pos); //console.log(`fadeType:${fadeType} easingNam:${easingName} i=${i} fadeFactor:${fadeFactor} toPos: ${toPos.x}/${toPos.y}/${toPos.z}`)

            tweenObj = tweenObj.to(dt, {
              position: toPos
            }, {
              easing: easingName,
              onStart: function onStart(target) {// 回调，当缓动动作启动时触发。
                //console.log(`onStart ${easingName} fadeType:${fadeType} i=${i} target: ${target._pos.x}/${target._pos.y}`)
              },
              onUpdate: function onUpdate(target, ratio) {// onUpdate 接受当前缓动的进度
                //this.node.position = target;                    // 将缓动系统计算出的结果赋予 node 的位置
                //console.log(`onUpdate ratio:${ratio} x/y: ${target._pos.x}/${target._pos.y}`)
              },
              onComplete: function onComplete(target) {// 回调，当缓动动作更新时触发。
                //console.log(`onComplete ${easingName} target:${target._pos.x}/${target._pos.y}`)
              }
              /*
              progress: (start: number, end: number, current: number, ratio: number): number => {
                  // 返回自定义插值进度
                  let prog=math.lerp(start, end, ratio);
                  console.log(`progress start:${start} end:${end} current:${current} ratio:${ratio} prog:${prog}`)
                  return prog;
              }*/

            });
          }

          return tweenObj;
        } // shake with custom,使用組件設定自定義數值播放
        ;

        _proto.shake = function shake() {
          // console.log( "shake custom", this._TweenList );
          this._shake(this._TweenList, this.frequency, this.magnitude, this.weight);
        };

        _proto.testShake = function testShake() {
          if (this.shakeJson && this.shakeJson.json["shakelist"]) {
            var shakelist = this.shakeJson.json["shakelist"];

            if (shakelist) {
              var keys = Object.keys(shakelist);
              keys.push("ErrorTest"); //const shakename = keys[Math.floor(Math.random() * keys.length)];

              var shakename = keys[this._TestShakeCnt++ % keys.length];
              this.ShakeWithName(shakename);
            }
          } else {
            console.log("ShakeWithName shakeJson not assign!");
          }
        } // shake with shakename,使用預先定義.json效果,供程式指定播放
        ;

        _proto.ShakeWithName = function ShakeWithName(shakename) {
          if (this.shakeJson && this.shakeJson.json["shakelist"]) {
            var shakelist = this.shakeJson.json["shakelist"];

            if (!shakelist[shakename]) {
              console.log("ShakeWithName shakename:" + shakename + " not found!");
              return;
            }

            var shake = shakelist[shakename];
            var _TweenList = shake["_TweenList"];
            var weight = shake["weight"]; // console.log( `ShakeWithName shakename:${shakename} frequency:${shake[ "frequency" ]},magnitude:${shake[ "magnitude" ]},weight:(${weight[ "x" ]},${weight[ "y" ]},${weight[ "z" ]})`, JSON.stringify( _TweenList ) );

            this._shake(_TweenList, shake["frequency"], shake["magnitude"], new Vec3(weight["x"], weight["y"], weight["z"]));
          } else {
            console.log("ShakeWithName shakeJson not assign!");
          }
        };

        _proto._shake = function _shake(_TweenList, frequency, magnitude, weight) {
          var tweenObj = tween(this.node);

          for (var i = 0; i < _TweenList.length; i++) {
            var twInfo = _TweenList[i];
            tweenObj = this.fade(tweenObj, twInfo.duration, frequency, magnitude, twInfo._fadeType, weight, twInfo.m_EasingName);
          }

          tweenObj = tweenObj.to(0, {
            position: this.originPos
          }); //最後拉回原點

          tweenObj.start();
        };

        _createClass(Shake, [{
          key: "saveshake",
          get: function get() {
            return false;
          },
          set: function set(value) {
            this.getJsonData();
          }
        }, {
          key: "_ShakeIdx",
          get: function get() {
            return this.__ShakeIdx;
          },
          set: function set(value) {
            {
              return;
            }
          }
        }, {
          key: "TweenList",
          get: function get() {
            return this._TweenList;
          },
          set: function set(value) {
            this._TweenList = value;
            this.updateDuration();

            this._updateEasingEnum();
          }
        }]);

        return Shake;
      }(Component), (_descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "alternately", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "shakeJson", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "shakename", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "custom";
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class5.prototype, "__ShakeIdx", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _applyDecoratedDescriptor(_class5.prototype, "saveshake", [_dec14], Object.getOwnPropertyDescriptor(_class5.prototype, "saveshake"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "_ShakeIdx", [_dec15], Object.getOwnPropertyDescriptor(_class5.prototype, "_ShakeIdx"), _class5.prototype), _descriptor9 = _applyDecoratedDescriptor(_class5.prototype, "Duration", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.0;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class5.prototype, "magnitude", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 20;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class5.prototype, "frequency", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class5.prototype, "weight", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3(0, 0, 0);
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class5.prototype, "_TweenList", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _applyDecoratedDescriptor(_class5.prototype, "TweenList", [_dec21], Object.getOwnPropertyDescriptor(_class5.prototype, "TweenList"), _class5.prototype)), _class5)) || _class4) || _class4) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SignIn.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LocaleStringManager.ts', './Define.ts', './Discount.ts', './TimeBool.ts', './Tools.ts', './ItemList.ts', './MsgBox.ts', './ConnectionManager.ts', './VipManager.ts', './SignInItem.ts', './EnvironmentConfig.ts', './NotificationManager.ts', './AutoShowManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, _createClass, cclegacy, _decorator, Node, Prefab, Label, SpriteFrame, Button, Animation, instantiate, Component, error, LocaleStringManager, Define, PageName, TimeBool, Tools, ItemList, MsgBox, ConnectionManager, VipManager, SignInItem, EnvironmentConfig, NotificationManager, AutoShowManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      Label = module.Label;
      SpriteFrame = module.SpriteFrame;
      Button = module.Button;
      Animation = module.Animation;
      instantiate = module.instantiate;
      Component = module.Component;
      error = module.error;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      PageName = module.PageName;
    }, function (module) {
      TimeBool = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      ItemList = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      ConnectionManager = module.default;
    }, function (module) {
      VipManager = module.default;
    }, function (module) {
      SignInItem = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      NotificationManager = module.default;
    }, function (module) {
      AutoShowManager = module.default;
    }],
    execute: function () {
      exports('SignInSpace', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

      cclegacy._RF.push({}, "21fecFL9VpJqakXZy5bgxki", "SignIn", undefined);

      var SignInSpace;

      (function (_SignInSpace) {})(SignInSpace || (SignInSpace = exports('SignInSpace', {})));

      var SignInResultType;

      (function (SignInResultType) {
        SignInResultType[SignInResultType["SIGN_UP_SUCCESS"] = 0] = "SIGN_UP_SUCCESS";
        SignInResultType[SignInResultType["SIGN_UPED"] = 1] = "SIGN_UPED";
        SignInResultType[SignInResultType["SIGN_UP_END"] = 2] = "SIGN_UP_END";
        SignInResultType[SignInResultType["SIGN_UP_BAN"] = 3] = "SIGN_UP_BAN";
      })(SignInResultType || (SignInResultType = {}));

      var ServerState = {
        Unknow: -1,
        Success: 0
      };
      var InfoTouchEvent = exports('InfoTouchEvent', function InfoTouchEvent() {
        this.event = void 0;
        this.apiId = void 0;
        this.aId = void 0;
        this.gameID = void 0;
      });
      var ShowMemberApiId = [20000, 20001];
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SignIn = exports('default', (_dec = property({
        type: Node,
        tooltip: "橫版節點"
      }), _dec2 = property({
        type: Node,
        tooltip: "橫版內容存放位置"
      }), _dec3 = property({
        type: Prefab,
        tooltip: "橫版內容prefab"
      }), _dec4 = property({
        type: Node,
        tooltip: "直版節點"
      }), _dec5 = property({
        type: Node,
        tooltip: "直版內容存放位置"
      }), _dec6 = property({
        type: Prefab,
        tooltip: "直版內容prefab"
      }), _dec7 = property({
        type: Label,
        tooltip: "簽到描述"
      }), _dec8 = property({
        type: SpriteFrame,
        tooltip: "可點擊圖示"
      }), _dec9 = property({
        type: SpriteFrame,
        tooltip: "已領取"
      }), _dec10 = property({
        type: SpriteFrame,
        tooltip: "不可點擊圖示"
      }), _dec11 = property({
        type: Button,
        tooltip: "網頁資訊按鈕"
      }), _dec12 = property({
        type: SpriteFrame,
        tooltip: "vip寶箱圖(可領取狀態)"
      }), _dec13 = property({
        type: SpriteFrame,
        tooltip: "寶箱開啟圖示"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SignIn, _Component);

        function SignIn() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_nodeL", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentNodeL", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_itemPrefabL", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_nodeS", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentNodeS", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_itemPrefabS", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_vipHintLabels", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_ableSpriteFrame", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_gotSpriteFrame", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_unableSpriteFrame", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_signInInfoBtns", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_vipBoxSpriteFrames", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_boxOpenSpriteFrames", _descriptor13, _assertThisInitialized(_this));

          _this.m_currentTouchName = null;
          _this.m_discount = null;
          _this.m_timer = null;
          _this.m_signStateReqFunc = null;
          _this.m_signInReqFunc = null;
          _this.m_isReqSignState = false;
          _this.m_isReqSignIn = false;
          _this.m_addViewCb = null;
          _this.m_removeViewCb = null;
          _this.m_state = null;
          _this.m_txtSpriteAtlas = null;
          _this.m_isFirst = true;
          _this.m_isLandscape = false;
          _this.m_nowExp = 0;
          _this.m_vipSpriteFrames = [];
          _this.m_appVipSpriteFrames = [];
          _this.m_isRegistered = false;
          _this.m_extraManager = null;
          _this.m_itemsL = [];
          _this.m_itemsS = [];
          return _this;
        }

        var _proto = SignIn.prototype; // onLoad () {}

        _proto.start = function start() {};

        _proto.OnRotation = function OnRotation(isLandscape) {
          this.m_isLandscape = isLandscape; // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     if ( isLandscape )
          //     {
          //         this.m_nodeL.active = true;
          //         this.m_nodeS.active = false;
          //     }
          //     else
          //     {
          //         this.m_nodeL.active = false;
          //         this.m_nodeS.active = true;
          //     }
          // } else
          // {

          if (this.m_isLandscape) {
            this.node.getComponent(Animation).play("Cllip_WinMore_FreeGiftPage_Landscape");
          } else {
            this.node.getComponent(Animation).play("Cllip_WinMore_FreeGiftPage_Portrait");
          } // }

        };

        _proto.Init = function Init(isLandscape, extraManager, discount, vipSpriteFrames, appVipSpriteFrames, stateReqFunc, signInReqFunc, addViewCb, removeViewCb) {
          var _this2 = this;

          this.m_timer = new TimeBool();
          this.m_timer.UseDT(true);
          this.m_discount = discount;
          this.m_signStateReqFunc = stateReqFunc;
          this.m_signInReqFunc = signInReqFunc;
          this.m_addViewCb = addViewCb;
          this.m_removeViewCb = removeViewCb;
          this.m_vipSpriteFrames = vipSpriteFrames;
          this.m_appVipSpriteFrames = appVipSpriteFrames;
          this.m_extraManager = extraManager;
          ItemList.GetInstance().LoadItemList();
          var param = new InfoTouchEvent();
          param.aId = Number(Define.AID);
          param.apiId = Number(Define.API_ID);
          param.gameID = Number(Define.NOW_GAME_ID); //資訊按鈕

          this.m_signInInfoBtns.forEach(function (element) {
            element.node.on(Node.EventType.TOUCH_START, function (event) {
              _this2.TouchStartEvent(event);
            });
            element.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
              _this2.TouchCancelEvent(event);
            });
            element.node.on(Node.EventType.TOUCH_END, function (event) {
              param.event = event;

              _this2.InfoTouchEndEvent(param);
            });
          });
          this.ReqSignInState();
          this.OnRotation(isLandscape); // 監聽vip資訊

          VipManager.GetInstance().AddUpdateCb(Define.CbKey.SignIn, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(info) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _this2.UpdateVip(info);

                  case 1:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          })));
        };

        _proto.UpdateVip = function UpdateVip(info) {
          var _this3 = this;

          this.m_nowExp = info.TreasureExp;

          if (this.m_state) {
            this.m_itemsL.forEach(function (element) {
              element.UpdateVip(_this3.m_nowExp, _this3.m_state, info);
            });
            this.m_itemsS.forEach(function (element) {
              element.UpdateVip(_this3.m_nowExp, _this3.m_state, info);
            });
          }
        };

        _proto.TouchStartEvent = function TouchStartEvent(event) {
          event.propagationImmediateStopped = true;
          event.propagationStopped = true;

          if (this.m_currentTouchName == null) {
            this.m_currentTouchName = event.target.name;
          } else {
            if (event.target && event.target.active == false) {
              this.m_currentTouchName = event.target.name;
            }
          }
        };

        _proto.TouchCancelEvent = function TouchCancelEvent(event) {
          if (this.m_currentTouchName == event.target.name) {
            this.m_currentTouchName = null;
          }
        };

        _proto.DoSignIn = function DoSignIn(signInBtn, index, event) {
          if (this.m_currentTouchName != event.target.name) {
            return;
          }

          this.m_currentTouchName = null;

          if (signInBtn.interactable) {
            this.m_discount.ShowMask();
            this.ReqSignIn(index);
          }
        };

        _proto.InfoTouchEndEvent = function InfoTouchEndEvent(param) {
          if (this.m_currentTouchName != param.event.target.name) {
            return;
          }

          this.m_currentTouchName = null;
          var isShowMember = false;

          if (!isNaN(Number(Define.API_ID))) {
            isShowMember = ShowMemberApiId.indexOf(Number(Define.API_ID)) >= 0;
          }

          var url = EnvironmentConfig.WEB_URL.replace("{target}", isShowMember ? "member" : "member/vip");

          if (isShowMember) {
            url += "&layout=headeronly";
          }

          this.m_extraManager.OpenWebView(url, Define.StringKey.BOTTOM_BAR_BACK_GAME_HISTORY);
          ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(param.aId, param.apiId, param.gameID, Define.GAME_VERSION, Define.BTN_CLICK_EVENT.SIGN_IN_INFO_CLICK, 1));
        };

        _proto.Process = function Process(dt) {
          if (this.m_timer) {
            this.m_timer.Update(dt * 1000);

            if (this.m_timer.ToBool()) {
              this.m_timer.Clear();
              this.ReqSignInState();
            }
          }
        };

        _proto.SetTxt = function SetTxt(spriteAtlas) {
          this.m_txtSpriteAtlas = spriteAtlas;
          this.m_itemsL.forEach(function (element) {
            element.SetText();
          });
          this.m_itemsS.forEach(function (element) {
            element.SetText();
          });
        };

        _proto.TimeOutHandle = function TimeOutHandle() {
          if (this.m_isReqSignState) {
            this.m_vipHintLabels.forEach(function (element) {
              element.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.SIGN_IN_VIP0);

              if (!element.font) {
                element.font = Define.DefaultFont;
              }
            });

            if (this.m_discount.SignInHintAnim) {
              // this.m_discount.SignInHintAnim.setCurrentTime( 0 );
              this.m_discount.SignInHintAnim.play();
              this.m_discount.SignInHintAnim.stop();
            }
          }

          this.m_isReqSignIn = false;
          this.m_isReqSignState = false;
        };

        _proto.ReqSignIn = function ReqSignIn(index) {
          if (!this.m_isReqSignIn) {
            this.m_signInReqFunc(index);
            this.m_isReqSignIn = true;
          }
        };

        _proto.ReqSignInState = function ReqSignInState() {
          if (!this.m_isReqSignState) {
            this.m_signStateReqFunc();
            this.m_isReqSignState = true;
            VipManager.GetInstance().ReqVipInfo();
          }
        };

        _proto.OnRecvSignInState = function OnRecvSignInState(ack) {
          var _this4 = this;

          var ret = ack.ret;
          this.m_isReqSignState = false;

          if (ret === ServerState.Success && ack.ack.Result === ServerState.Success && ack.ack.Info.Error === ServerState.Success && ack.ack.Info.TreasureList) {
            this.m_state = ack.ack.Info; //先把頁面加好

            if (this.m_addViewCb) {
              this.m_addViewCb();
            } else if (this.m_removeViewCb) {
              this.m_removeViewCb();
            } //不主動跳出
            // let isLeft = false;


            var vip = VipManager.GetInstance().VipInfo.Lv; // let itemIdx: string = window.location.search.split( "itemIdx=" )[ 1 ];
            // for ( let i = 0; i < this.m_state.TreasureList.length; i++ )
            // {
            //     let treasure: SignInSpace.Treasure = this.m_state.TreasureList[ i ];
            //     //if ( vip >= treasure.MinVip && !treasure.IsOpen )
            //     if ( vip >= treasure.MinVip && this.m_nowExp >= treasure.Exp )
            //     {
            //         if ( !treasure.IsOpen )
            //         {
            //             isLeft = true;
            //             break;
            //         }
            //     }
            // }
            // if ( this.m_isFirst && isLeft && vip > 0 && !itemIdx )
            // {
            //     this.m_discount.ShowDiscountView( PageName.SignIn );
            // }
            // 註冊auto show

            if (!this.m_isRegistered) {
              this.m_isRegistered = true;

              var FirstAutoShowSignIn = function FirstAutoShowSignIn() {
                if (_this4.m_isFirst) {
                  var _isLeft = false;
                  var _vip = VipManager.GetInstance().VipInfo.Lv;
                  var _itemIdx = window.location.search.split("itemIdx=")[1];

                  for (var i = 0; i < _this4.m_state.TreasureList.length; i++) {
                    var treasure = _this4.m_state.TreasureList[i]; //if ( vip >= treasure.MinVip && !treasure.IsOpen )

                    if (_vip >= treasure.MinVip && _this4.m_nowExp >= treasure.Exp) {
                      if (!treasure.IsOpen) {
                        _isLeft = true;
                        break;
                      }
                    }
                  }

                  if (_this4.m_isFirst && _isLeft && _vip > 0 && !_itemIdx) {
                    // 自動彈出頁面
                    error('AutoShow SignIn');

                    _this4.m_discount.ShowDiscountView(PageName.SignIn);
                  } else {
                    // 不用開此頁,依序秀下一頁面
                    error('no need AutoShow SignIn');
                    AutoShowManager.GetInstance().AutoShowNext();
                  }

                  _this4.m_isFirst = false;
                }
              };

              AutoShowManager.GetInstance().AddAutoShowCb(FirstAutoShowSignIn, Define.AutoShowOrder.SIGN_IN);
            } //版面設定


            var string = LocaleStringManager.GetInstance().GetString(Define.StringKey.SIGN_IN_BOX); // let vipString = "VIP" + vip.toString();
            // string = js.formatStr( string, vipString );

            this.m_vipHintLabels.forEach(function (element) {
              element.string = string;

              if (!element.font) {
                element.font = Define.DefaultFont;
              }
            }); //重新排序Treasure

            var getList = []; //可領

            var waitList = []; //等待完成

            var gotList = []; //已領

            for (var i = 0; i < this.m_state.TreasureList.length; i++) {
              var treasure = this.m_state.TreasureList[i];

              if (treasure.IsOpen) {
                gotList.push(treasure);
              } else if (vip > treasure.MinVip && this.m_nowExp >= treasure.Exp) {
                getList.push(treasure);
              } else {
                waitList.push(treasure);
              }
            }

            this.m_state.TreasureList = new Array();
            this.m_state.TreasureList.push.apply(this.m_state.TreasureList, getList);
            this.m_state.TreasureList.push.apply(this.m_state.TreasureList, waitList);
            this.m_state.TreasureList.push.apply(this.m_state.TreasureList, gotList); // 開關提示

            var itemIdx = window.location.search.split("itemIdx=")[1];
            var isLeft = false;

            for (var _i = 0; _i < this.m_state.TreasureList.length; _i++) {
              var _treasure = this.m_state.TreasureList[_i]; //if ( vip >= treasure.MinVip && !treasure.IsOpen )

              if (vip >= _treasure.MinVip && this.m_nowExp >= _treasure.Exp) {
                if (!_treasure.IsOpen) {
                  isLeft = true;
                  break;
                }
              }
            }

            if (isLeft && vip > 0 && !itemIdx) {
              this.m_discount.ShowSignInHint(true);
            } else {
              this.m_discount.ShowSignInHint(false);
            } //====================橫版====================


            this.SetItems(this.m_itemsL, this.m_contentNodeL, this.m_itemPrefabL); //====================直版====================

            this.SetItems(this.m_itemsS, this.m_contentNodeS, this.m_itemPrefabS);
            NotificationManager.GetInstance().UpdateSignInNotify(this.m_nowExp, this.m_state.TreasureList);
          } else {
            // this.m_vipHintLabels.forEach( element =>
            // {
            //     element.string = LocaleStringManager.GetInstance().GetString( Define.StringKey.SIGN_IN_VIP0 );
            // } );
            // this.m_boxSprites.forEach( element =>
            // {
            //     element.spriteFrame = this.m_vipBoxSpriteFrames[ 0 ];
            // } );
            if (this.m_removeViewCb) {
              this.m_removeViewCb();
            }
          }

          this.m_discount.HideMask();
        };

        _proto.SetItems = function SetItems(items, contentNode, itemPrefab) {
          if (this.m_state) {
            var treasureLength = this.m_state.TreasureList.length; //有少

            while (items.length < treasureLength) {
              var node = instantiate(itemPrefab);
              var signInItem = node.getComponent(SignInItem);
              signInItem.Init(this);
              items.push(signInItem);
              contentNode.addChild(node);
            }

            for (var i = 0; i < items.length; i++) {
              if (i >= treasureLength) {
                //多的
                items[i].node.active = false;
              } else {
                items[i].node.active = true;
                items[i].SetInfo(this.m_nowExp, this.m_state.TreasureList[i]);
              }
            }
          }
        };

        _proto.OnRecvSignIn = function OnRecvSignIn(ack) {
          var award = ack.ack.Info;
          var ret = ack.ret;
          this.m_isReqSignIn = false;

          if (ret === ServerState.Success && ack.ack.Info.Error === ServerState.Success) {
            if (ack.ack.Result === SignInResultType.SIGN_UP_SUCCESS && award.ItemID && award.Count > 0) {
              var showMsg = function showMsg(icon) {
                var setting = {};
                setting.contextKey = Define.StringKey.SIGN_IN_CONGRATS;
                setting.itemSpriteFrame = icon;
                setting.titleKey = MsgBox.DEFAULT_TITLE_KEY;
                setting.showCancelBtn = false;
                setting.showConfirmBtn = true;
                setting.showCloseBtn = false;
                MsgBox.getInstance().PushMessageBoxSetting(setting);
              };

              var gamePlist = ItemList.GetInstance().GetGameSpriteAtlas();

              if (gamePlist) {
                var icon = ItemList.GetInstance().GetItemIcon(award.Icon);
                showMsg(icon);
              } else {
                ItemList.GetInstance().AddListener("trialRecord", function () {
                  var icon = ItemList.GetInstance().GetItemIcon(award.Icon);
                  showMsg(icon);
                });
              }
            }
          } //跟server確認狀態


          this.ReqSignInState();
          this.m_discount.ShowMask();
        };

        _createClass(SignIn, [{
          key: "AbleSpriteFrame",
          get: function get() {
            return this.m_ableSpriteFrame;
          }
        }, {
          key: "GotSpriteFrame",
          get: function get() {
            return this.m_gotSpriteFrame;
          }
        }, {
          key: "UnableSpriteFrame",
          get: function get() {
            return this.m_unableSpriteFrame;
          } // ------------------------------------------------------

        }, {
          key: "VipBoxSpriteFrames",
          get: function get() {
            return this.m_vipBoxSpriteFrames;
          }
        }, {
          key: "BoxOpenSpriteFrames",
          get: function get() {
            return this.m_boxOpenSpriteFrames;
          }
        }, {
          key: "VipSpriteFrames",
          get: function get() {
            var apiId = Number(Define.API_ID);

            if (apiId == 0) {
              apiId = Number(Tools.GetLinkParameterByName("apiId"));
            }

            if (!isNaN(apiId) && apiId >= 100 && apiId < 500) {
              return this.m_appVipSpriteFrames;
            } else {
              return this.m_vipSpriteFrames;
            }
          }
        }]);

        return SignIn;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_nodeL", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_contentNodeL", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_itemPrefabL", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_nodeS", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_contentNodeS", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_itemPrefabS", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_vipHintLabels", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_ableSpriteFrame", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_gotSpriteFrame", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_unableSpriteFrame", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_signInInfoBtns", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_vipBoxSpriteFrames", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_boxOpenSpriteFrames", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SignInItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './LocaleStringManager.ts', './Tools.ts', './VipManager.ts', './SignIn.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Button, Sprite, ProgressBar, Node, Animation, SpriteFrame, Component, Define, LocaleStringManager, Tools, VipManager, InfoTouchEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Button = module.Button;
      Sprite = module.Sprite;
      ProgressBar = module.ProgressBar;
      Node = module.Node;
      Animation = module.Animation;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      VipManager = module.default;
    }, function (module) {
      InfoTouchEvent = module.InfoTouchEvent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14;

      cclegacy._RF.push({}, "98441En3GFG57Pulcv2OhEs", "SignInItem", undefined);

      var LVL = ["", "K", "M"];
      var ChestAnimate = {
        IDLE: "Clip_WinMore_Treasure_Idle",
        // 不能打開
        READY: "Clip_WinMore_Treasure_Ready",
        // 可以打開
        CLAIM: "Clip_WinMore_Treasure_Claim",
        // 領取動畫
        EMPTY: "Clip_WinMore_Treasure_Empty" // 已領取

      };
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SignInItem = exports('default', (_dec = property({
        type: Label,
        tooltip: "領取文字"
      }), _dec2 = property({
        type: Button,
        tooltip: "簽到按鈕"
      }), _dec3 = property({
        type: Sprite,
        tooltip: "按鈕背景"
      }), _dec4 = property({
        type: Sprite,
        tooltip: "vip提示"
      }), _dec5 = property({
        type: Sprite,
        tooltip: "vip寶箱提示"
      }), _dec6 = property({
        type: Label,
        tooltip: "經驗提示"
      }), _dec7 = property({
        type: ProgressBar,
        tooltip: "經驗條"
      }), _dec8 = property({
        type: Node,
        tooltip: "鎖住遮罩"
      }), _dec9 = property({
        type: Label,
        tooltip: "鎖住提示"
      }), _dec10 = property({
        type: Animation,
        tooltip: "寶箱動畫"
      }), _dec11 = property({
        type: Sprite,
        tooltip: "vip寶箱圖示(TADA):動畫分三個sprite做"
      }), _dec12 = property({
        type: Node,
        tooltip: "禁用上鎖的node"
      }), _dec13 = property({
        type: Label,
        tooltip: "領取文字(TADA有額外按鈕)"
      }), _dec14 = property({
        type: SpriteFrame,
        tooltip: "level 圖示 (JILI用)"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SignInItem, _Component);

        function SignInItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_btnLabel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_signInBtn", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_btnBgSprite", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_vipSprite", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_boxSprite", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_expLabel", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_expProgressBars", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lockMaskNode", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lockHintLabel", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_chestAni", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_boxSprite_TADA", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_lockBtnDisableNode", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_btnLabel_TADA", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_levelSprite", _descriptor14, _assertThisInitialized(_this));

          _this.m_treasure = null;
          _this.m_signIn = null;
          return _this;
        }

        var _proto = SignInItem.prototype; // onLoad () {}

        _proto.start = function start() {};

        _proto.Init = function Init(signIn) {
          var _this2 = this;

          this.m_signIn = signIn; //簽到

          this.m_signInBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            signIn.TouchStartEvent(event);
          });
          this.m_signInBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            signIn.TouchCancelEvent(event);
          });
          this.m_signInBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            signIn.DoSignIn(_this2.m_signInBtn, _this2.m_treasure.Index, event);
          }); //寶箱

          this.m_boxSprite.node.on(Node.EventType.TOUCH_START, function (event) {
            signIn.TouchStartEvent(event);
          });
          this.m_boxSprite.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            signIn.TouchCancelEvent(event);
          });
          this.m_boxSprite.node.on(Node.EventType.TOUCH_END, function (event) {
            var param = new InfoTouchEvent();
            param.aId = Number(Define.AID);
            param.apiId = Number(Define.API_ID);
            param.gameID = Number(Define.NOW_GAME_ID);
            param.event = event;
            signIn.InfoTouchEndEvent(param);
          });
        };

        _proto.SetText = function SetText() {
          if (this.m_treasure.IsOpen) {
            //已領取
            this.m_btnLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.SIGN_IN_GOT);
            Tools.SetFont(this.m_btnLabel); // if ( !this.m_btnLabel.font )
            // {
            //     this.m_btnLabel.font = Define.DefaultFont;
            // }

            if (this.m_btnLabel_TADA) {
              this.m_btnLabel_TADA.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.SIGN_IN_GOT);
              Tools.SetFont(this.m_btnLabel_TADA); // if ( !this.m_btnLabel_TADA.font )
              // {
              //     this.m_btnLabel_TADA.font = Define.DefaultFont;
              // }
            }
          } else {
            //未領取
            this.m_btnLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.SIGN_IN_GET);
            Tools.SetFont(this.m_btnLabel); // if ( !this.m_btnLabel.font )
            // {
            //     this.m_btnLabel.font = Define.DefaultFont;
            // }

            if (this.m_btnLabel_TADA) {
              this.m_btnLabel_TADA.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.SIGN_IN_GET);
              Tools.SetFont(this.m_btnLabel_TADA); // if ( !this.m_btnLabel_TADA.font )
              // {
              //     this.m_btnLabel_TADA.font = Define.DefaultFont;
              // }
            }

            var lockString_1 = LocaleStringManager.GetInstance().GetString(Define.StringKey.SIGN_IN_VIP_LOCK_1);
            var lockString_2 = LocaleStringManager.GetInstance().GetString(Define.StringKey.SIGN_IN_VIP_LOCK_2);
            this.m_lockHintLabel.string = lockString_1 + this.m_treasure.MinVip + lockString_2;
            Tools.SetFont(this.m_lockHintLabel); // if ( !this.m_lockHintLabel.font )
            // {
            //     this.m_lockHintLabel.font = Define.DefaultFont;
            // }
          }
        };

        _proto.UpdateVip = function UpdateVip(nowExp, state, info) {
          if (state) {
            var rate = Tools.divide(nowExp, this.m_treasure.Exp);
            rate = rate > 1 ? 1 : rate;
            this.m_expProgressBars.forEach(function (element) {
              element.progress = rate;
            });
          }
        };

        _proto.ChangeBase = function ChangeBase(number) {
          var lvl = 0;

          while (number >= 1000) {
            number = Tools.divide(number, 1000);
            lvl++;
          }

          return Tools.FormatNumberThousands(number, Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO) + LVL[lvl];
        };

        _proto.SetInfo = function SetInfo(nowExp, treasure) {
          this.m_treasure = treasure;
          var exp = Tools.strip(nowExp);
          var tExp = Tools.strip(treasure.Exp); //最高到100%

          if (exp > tExp) {
            exp = tExp;
          } //文字           


          this.m_expLabel.string = this.ChangeBase(exp) + "/" + this.ChangeBase(tExp);
          Tools.SetFont(this.m_expLabel);
          var vip = VipManager.GetInstance().VipInfo.Lv;

          if (treasure.IsOpen) {
            //已領取
            this.m_btnLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.SIGN_IN_GOT);
            Tools.SetFont(this.m_btnLabel); // if ( !this.m_btnLabel.font )
            // {
            //     this.m_btnLabel.font = Define.DefaultFont;
            // }

            if (this.m_btnLabel_TADA) {
              this.m_btnLabel_TADA.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.SIGN_IN_GOT);
              Tools.SetFont(this.m_btnLabel_TADA); // if ( !this.m_btnLabel_TADA.font )
              // {
              //     this.m_btnLabel_TADA.font = Define.DefaultFont;
              // }
            } // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     this.m_boxSprite.spriteFrame = this.m_signIn.BoxOpenSpriteFrames[ treasure.MinVip ];
            //     this.m_btnLabel.node.y = 0;
            // } else
            // {


            for (var i = 0; i < this.m_boxSprite_TADA.length; i++) {
              this.m_boxSprite_TADA[i].spriteFrame = this.m_signIn.BoxOpenSpriteFrames[treasure.MinVip];
            } // this.m_boxSprite.spriteFrame = this.m_signIn.BoxOpenSpriteFrames[ treasure.MinVip ];


            this.m_chestAni.play(ChestAnimate.EMPTY); // }

            this.m_signInBtn.interactable = false; // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     if ( this.m_signIn.GotSpriteFrame )
            //     {
            //         this.m_btnBgSprite.spriteFrame = this.m_signIn.GotSpriteFrame;
            //     }
            // } else
            // {

            this.m_signInBtn.enabled = false;
            this.m_lockBtnDisableNode.active = true; // }

            this.m_lockMaskNode.active = false;
            var lockString_1 = LocaleStringManager.GetInstance().GetString(Define.StringKey.SIGN_IN_VIP_LOCK_1);
            var lockString_2 = LocaleStringManager.GetInstance().GetString(Define.StringKey.SIGN_IN_VIP_LOCK_2);
            this.m_lockHintLabel.string = lockString_1 + this.m_treasure.MinVip + lockString_2;
            Tools.SetFont(this.m_lockHintLabel); // if ( !this.m_lockHintLabel.font )
            // {
            //     this.m_lockHintLabel.font = Define.DefaultFont;
            // }
          } else {
            //未領取
            this.m_btnLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.SIGN_IN_GET);
            Tools.SetFont(this.m_btnLabel); // if ( !this.m_btnLabel.font )
            // {
            //     this.m_btnLabel.font = Define.DefaultFont;
            // }

            if (this.m_btnLabel_TADA) {
              this.m_btnLabel_TADA.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.SIGN_IN_GET);
              Tools.SetFont(this.m_btnLabel_TADA); // if ( !this.m_btnLabel_TADA.font )
              // {
              //     this.m_btnLabel_TADA.font = Define.DefaultFont;
              // }
            } // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     this.m_boxSprite.spriteFrame = this.m_signIn.VipBoxSpriteFrames[ treasure.MinVip ];
            //     this.m_btnLabel.node.y = 5;
            // } else
            // {


            for (var _i = 0; _i < this.m_boxSprite_TADA.length; _i++) {
              this.m_boxSprite_TADA[_i].spriteFrame = this.m_signIn.VipBoxSpriteFrames[treasure.MinVip];
            } // this.m_boxSprite.spriteFrame = this.m_signIn.VipBoxSpriteFrames[ treasure.MinVip ];


            this.m_chestAni.play(ChestAnimate.IDLE); // }

            var _lockString_ = LocaleStringManager.GetInstance().GetString(Define.StringKey.SIGN_IN_VIP_LOCK_1);

            var _lockString_2 = LocaleStringManager.GetInstance().GetString(Define.StringKey.SIGN_IN_VIP_LOCK_2);

            this.m_lockHintLabel.string = _lockString_ + this.m_treasure.MinVip + _lockString_2;
            Tools.SetFont(this.m_lockHintLabel); // if ( !this.m_lockHintLabel.font )
            // {
            //     this.m_lockHintLabel.font = Define.DefaultFont;
            // }

            this.m_signInBtn.interactable = exp >= tExp;
            /**等級達標*/

            if (vip >= treasure.MinVip) {
              this.m_lockMaskNode.active = false;
              /**經驗達標*/

              if (exp >= tExp) {
                // if ( Tools.Line !== Define.LineSetting.americas &&
                //     Tools.Line !== Define.LineSetting.americas_str )
                // {
                //     if ( this.m_signIn.AbleSpriteFrame )
                //     {
                //         this.m_btnBgSprite.spriteFrame = this.m_signIn.AbleSpriteFrame;
                //     }
                // } else
                // {
                this.m_signInBtn.enabled = true;
                this.m_chestAni.play(ChestAnimate.READY);
                this.m_lockBtnDisableNode.active = false; // }
              } else {
                // if ( Tools.Line !== Define.LineSetting.americas &&
                //     Tools.Line !== Define.LineSetting.americas_str )
                // {
                //     if ( this.m_signIn.UnableSpriteFrame )
                //     {
                //         this.m_btnBgSprite.spriteFrame = this.m_signIn.UnableSpriteFrame;
                //     }
                // } else
                // {
                this.m_signInBtn.enabled = false;
                this.m_lockBtnDisableNode.active = true; // }
              }
            } else {
              // if ( Tools.Line !== Define.LineSetting.americas &&
              //     Tools.Line !== Define.LineSetting.americas_str )
              // {
              //     if ( this.m_signIn.UnableSpriteFrame )
              //     {
              //         this.m_btnBgSprite.spriteFrame = this.m_signIn.UnableSpriteFrame;
              //     }
              // } else
              // {
              this.m_signInBtn.enabled = false;
              this.m_lockBtnDisableNode.active = true; // }

              this.m_lockMaskNode.active = true;
            }
          } //vip圖示


          if (this.m_levelSprite[0]) {
            this.m_vipSprite.spriteFrame = this.m_levelSprite[treasure.MinVip];
          } else {
            this.m_vipSprite.spriteFrame = this.m_signIn.VipSpriteFrames[treasure.MinVip];
          } //經驗條


          var expRate = Tools.divide(exp, tExp);
          this.m_expProgressBars.forEach(function (element) {
            element.progress = expRate;
          });
        } // update (dt) {}
        ;

        return SignInItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_btnLabel", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_signInBtn", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_btnBgSprite", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_vipSprite", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_boxSprite", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_expLabel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_expProgressBars", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_lockMaskNode", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_lockHintLabel", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_chestAni", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_boxSprite_TADA", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_lockBtnDisableNode", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_btnLabel_TADA", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_levelSprite", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SignInProtocol.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DataStruct.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, ConnectionDataStruct;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ConnectionDataStruct = module.ConnectionDataStruct;
    }],
    execute: function () {
      exports('SignInReqData', void 0);

      cclegacy._RF.push({}, "5db98auQ0RIMJQ2Bb/Ixdv0", "SignInProtocol", undefined);

      var SignInReqData;

      (function (_SignInReqData) {
        var SignInInfoReq = /*#__PURE__*/function (_ConnectionDataStruct) {
          _inheritsLoose(SignInInfoReq, _ConnectionDataStruct);

          function SignInInfoReq() {
            var _this;

            _this = _ConnectionDataStruct.call(this) || this;
            _this.type = ConnectionDataStruct.ErrorHandleType.Ignore;
            _this.method = ConnectionDataStruct.RequestMethod.Post;
            _this.url = "/vipsignup/SignInfoProto";
            _this.reqData = null;
            return _this;
          }

          return SignInInfoReq;
        }(ConnectionDataStruct.ProtocolData);

        _SignInReqData.SignInInfoReq = SignInInfoReq;

        var SignInReq = /*#__PURE__*/function (_ConnectionDataStruct2) {
          _inheritsLoose(SignInReq, _ConnectionDataStruct2);

          function SignInReq() {
            var _this2;

            _this2 = _ConnectionDataStruct2.call(this) || this;
            _this2.type = ConnectionDataStruct.ErrorHandleType.Ignore;
            _this2.method = ConnectionDataStruct.RequestMethod.Post;
            _this2.url = "/vipsignup/RewardInfoProto";
            _this2.reqData = null;
            return _this2;
          }

          return SignInReq;
        }(ConnectionDataStruct.ProtocolData);

        _SignInReqData.SignInReq = SignInReq;
      })(SignInReqData || (SignInReqData = exports('SignInReqData', {})));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkeletonController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "84cacB24TBECKlCt9RcjaKP", "SkeletonController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      function AnimationMixing(skeleton, mixAnim, mixTime) {
        if (skeleton && mixAnim && mixAnim.length > 1) {
          for (var i = 0; i < mixAnim.length - 1; i++) {
            var anim1 = mixAnim[i];

            for (var j = i + 1; j < mixAnim.length; j++) {
              var anim2 = mixAnim[j];
              skeleton.setMix(anim1, anim2, mixTime);
              skeleton.setMix(anim2, anim1, mixTime);
            }
          }
        }
      }

      var mixAnim = ["walk", "run", "jump"];
      var SkeletonController = exports('default', (_dec = ccclass('SkeletonController'), _dec2 = property({
        type: sp.Skeleton,
        displayName: "Skeleton"
      }), _dec3 = property({
        displayName: "Mixing Time",
        tooltip: "動畫1轉換至動畫2的動作漸變時間"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SkeletonController, _Component);

        function SkeletonController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.m_hasStop = false;

          _initializerDefineProperty(_this, "m_skeleton", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_mixTime", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SkeletonController.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          AnimationMixing(this.m_skeleton, mixAnim, this.m_mixTime);
          this.m_skeleton.setCompleteListener(function (trackEntry) {
            var animationName = trackEntry.animation ? trackEntry.animation.name : "";

            if (animationName === 'shoot') {
              _this2.Action("clearTrack", 1);
            }
          });
        };

        _proto.Stop = function Stop() {
          this.Action("clearTrack", 0);
          this.m_hasStop = true;
        };

        _proto.Walk = function Walk() {
          this.Action("setAnimation", 0, 'walk', true);
          this.m_hasStop = false;
        };

        _proto.Run = function Run() {
          this.Action("setAnimation", 0, 'run', true);
          this.m_hasStop = false;
        };

        _proto.Jump = function Jump() {
          var oldAnim = this.m_skeleton.animation;
          this.Action("setAnimation", 0, 'jump', false);

          if (oldAnim && !this.m_hasStop) {
            this.Action("addAnimation", 0, oldAnim === 'run' ? 'run' : 'walk', true, 0);
          }
        };

        _proto.Shoot = function Shoot() {
          this.Action("setAnimation", 1, 'shoot', false);
        };

        _proto.Action = function Action(funcName) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          this.m_skeleton[funcName].apply(this.m_skeleton, args);
        };

        return SkeletonController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_skeleton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_mixTime", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      })), _class2)) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import SkeletonSync from "../../../SkeletonSync"
      // 
      // function AnimationMixing(skeleton:sp.Skeleton, mixAnim:string[], mixTime:number) {
      //     if (skeleton && mixAnim && mixAnim.length > 1) {
      //         for (let i = 0; i < mixAnim.length-1; i++) {
      //             let anim1:string = mixAnim[i];
      //             for (let j = i+1; j < mixAnim.length; j++) {
      //                 let anim2:string = mixAnim[j];
      //                 skeleton.setMix(anim1, anim2, mixTime);
      //                 skeleton.setMix(anim2, anim1, mixTime);        
      //             }
      //         }
      //     }
      // }
      // 
      // const {ccclass, property} = _decorator;
      // const mixAnim:string[] = ["walk", "run", "jump"];
      // 
      // @ccclass
      // export default class SkeletonController extends Component {
      //     private m_hasStop:boolean = false;
      // 
      //     @property({
      //         type:sp.Skeleton,
      //         displayName: "Skeleton"
      //     })
      //     private m_skeleton:sp.Skeleton = null;
      // 
      //     @property({
      //         displayName: "Mixing Time",
      //         tooltip: "動畫1轉換至動畫2的動作漸變時間"
      //     })
      //     private m_mixTime: number = 0.2;
      // 
      //     public onLoad() {
      //         AnimationMixing(this.m_skeleton, mixAnim, this.m_mixTime);
      // 
      //         this.m_skeleton.setCompleteListener((trackEntry) => {
      //             var animationName = trackEntry.animation ? trackEntry.animation.name : "";
      //             if (animationName === 'shoot') {
      //                 this.Action("clearTrack", 1);
      //             }
      //         });
      //     }
      // 
      //     public Stop () {
      //         this.Action("clearTrack", 0)
      //         this.m_hasStop = true;
      //     }
      // 
      //     public Walk () {
      //         this.Action("setAnimation", 0, 'walk', true)
      //         this.m_hasStop = false;
      //     }
      //     
      //     public Run () {
      //         this.Action("setAnimation", 0, 'run', true)
      //         this.m_hasStop = false;
      //     }
      //     
      //     public Jump () {
      //         var oldAnim = this.m_skeleton.animation;
      //         this.Action("setAnimation", 0, 'jump', false)
      //         if (oldAnim && !this.m_hasStop) {
      //             this.Action("addAnimation", 0, oldAnim === 'run' ? 'run' : 'walk', true, 0)
      //         }
      //     }
      //     
      //     public Shoot () {
      //         this.Action("setAnimation", 1, 'shoot', false)
      //     }
      // 
      //     private Action(funcName:string, ...args) {
      //         this.m_skeleton[funcName].apply(this.m_skeleton, args);
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkeletonSync.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, sp, v3, UITransform, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      v3 = module.v3;
      UITransform = module.UITransform;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "866f1RjwMhFfapt6JLtipxM", "SkeletonSync", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu;
      var SkeletonSync = exports('default', (_dec = ccclass('SkeletonSync'), _dec2 = menu("Chiron/Spine/SkeletonSync"), _dec3 = property({
        displayName: "Overlap",
        tooltip: "是否交疊並同步座標、旋轉及縮放"
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SkeletonSync, _Component);

        function SkeletonSync() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.m_skeleton = null;

          _initializerDefineProperty(_this, "m_overlap", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SkeletonSync.prototype;

        _proto.__preload = function __preload() {
          this.m_skeleton = this.getComponent(sp.Skeleton);
        } // /**
        // * 設定同步資料
        // */
        ;

        _proto.Sync = function Sync(host) {
          var ANGLE = "angle";

          if (host && this.m_overlap) {
            var angleFactor = 0;
            var scaleXFactor = 1;
            var scaleYFactor = 1; // // 同步目標對象的旋轉及縮放資料

            var parent = host;

            while (parent) {
              scaleXFactor *= parent.scale.x;
              scaleYFactor *= parent.scale.y;
              angleFactor += parent[ANGLE];
              parent = parent.parent;
            } // // 旋轉同步


            this.node[ANGLE] = angleFactor; // // 縮放同步

            this.node.scale = v3(scaleXFactor, scaleYFactor, 0); // // 位置同步

            var worldPos = host.parent.getComponent(UITransform).convertToWorldSpaceAR(host.position);
            var localPos = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(worldPos);
            this.node.setPosition(localPos);
          }
        };

        _createClass(SkeletonSync, [{
          key: "Skeleton",
          get: function get() {
            return this.m_skeleton;
          }
        }]);

        return SkeletonSync;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_overlap", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _class2)) || _class) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // const {ccclass, property, menu} = _decorator;
      // 
      // @ccclass
      // @menu("Chiron/Spine/SkeletonSync")
      // export default class SkeletonSync extends Component {
      //     private m_skeleton:sp.Skeleton = null;
      //     get Skeleton(): sp.Skeleton {
      //         return this.m_skeleton;
      //     }
      // 
      //     @property({
      //         displayName: "Overlap",
      //         tooltip: "是否交疊並同步座標、旋轉及縮放"
      //     })
      //     private m_overlap: boolean = true;
      // 
      //     __preload() {
      //         this.m_skeleton = this.getComponent(sp.Skeleton);
      //     }
      // 
      //     /**
      //      * 設定同步資料
      //      */
      //     public Sync(host:Node) {
      //         const ANGLE = "angle";
      // 
      //         if (host && this.m_overlap) {
      //             let angleFactor = 0;
      //             let scaleXFactor = 1;
      //             let scaleYFactor = 1;
      //             
      //             // 同步目標對象的旋轉及縮放資料
      //             let parent = host;
      //             while(parent) {
      //                 scaleXFactor *= parent.scaleX;
      //                 scaleYFactor *= parent.scaleY;
      //                 angleFactor += parent[ANGLE];
      //                 parent = parent.parent;
      //             }
      // 
      //             // 旋轉同步
      //             this.node[ANGLE] = angleFactor
      // 
      //             // 縮放同步
      //             this.node.scaleX = scaleXFactor;
      //             this.node.scaleY = scaleYFactor;
      // 
      //             // 位置同步
      //             let worldPos = host.parent.convertToWorldSpaceAR(host.position);
      //             let localPos = this.node.parent.convertToNodeSpaceAR(worldPos);
      //             this.node.x = localPos.x;
      //             this.node.y = localPos.y;
      //         }
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SloganManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, _decorator, log, Animation, SpriteFrame, Component, Define;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      Animation = module.Animation;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }],
    execute: function () {
      var _class;

      cclegacy._RF.push({}, "b57cahiKlxMZL7TyWc1iHaf", "SloganManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var adIndex = {
        horizontal: 0,
        vertical: 1
      };
      var SloganManager = exports('default', ccclass(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SloganManager, _Component);

        function SloganManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.m_promotePictures = [[], []];
          _this.m_promoteAni = null;
          _this.m_promotePic = void 0;
          _this.m_promoteLock = false;
          _this.m_promoteIdx = -1;
          _this.m_adNums = 0;
          _this.m_isLandscape = void 0;
          _this.m_curAniName = "";
          _this.m_changePictureCallback = void 0;
          _this.m_revertPictureCallback = void 0;
          _this.m_animationName = {
            start: "AdSlogan_Start",
            loop: "AdSlogan_Loop",
            end: "AdSlogan_End"
          };
          _this.m_cycle = [[8, 12], [8, 8]];
          _this.m_promoting = false;

          _this.ChangePic = function () {
            if (_this.m_promoteLock) {
              return;
            }

            _this.m_promoting = true;

            if (_this.m_changePictureCallback) {
              _this.m_changePictureCallback();
            }

            _this.m_promoteIdx++;
            _this.m_promotePic.spriteFrame = _this.m_promotePictures[_this.m_isLandscape ? adIndex.horizontal : adIndex.vertical][_this.m_promoteIdx >= _this.m_adNums ? _this.m_promoteIdx = 0 : _this.m_promoteIdx];

            _this.PlayAni(_this.m_animationName.start);

            _this.m_promoteAni.once(Animation.EventType.FINISHED, function () {
              if (_this.m_promoteLock) {
                return;
              }

              _this.PlayAni(_this.m_animationName.loop);
            });

            _this.scheduleOnce(_this.RevertPic, _this.m_cycle[1][0] == _this.m_cycle[1][1] ? _this.m_cycle[1][0] : SloganManager.GetRandomInt(_this.m_cycle[1][0], _this.m_cycle[1][1] + 1));
          };

          _this.RevertPic = function () {
            if (_this.m_revertPictureCallback) {
              _this.m_revertPictureCallback();
            }

            _this.PlayAni(_this.m_animationName.end);

            _this.m_promoteAni.once(Animation.EventType.FINISHED, function () {
              _this.m_curAniName = "";
            });

            _this.m_promoting = false;

            _this.scheduleOnce(_this.ChangePic, _this.m_cycle[0][0] == _this.m_cycle[0][1] ? _this.m_cycle[0][0] : SloganManager.GetRandomInt(_this.m_cycle[0][0], _this.m_cycle[0][1] + 1));
          };

          return _this;
        }

        SloganManager.GetRandomInt = function GetRandomInt(min, max) {
          return Math.floor(Math.random() * (max - min) + min);
        }
        /**
         * 宣傳圖初始化
         * @param resourcePath 要讀取的圖的路徑,index 0:橫版/1直版
         * @param promoteAnimation 播動畫的node
         * @param promoteSprite 負責替換圖的sprite(不能跟SloganManager同一個node)
         * @param resBundle 放置宣傳圖的bundle(預設為common)
         */
        ;

        var _proto = SloganManager.prototype;

        _proto.Init = function Init(resourcePath, promoteAnimation, promoteSprite, resBundle) {
          if (resBundle === void 0) {
            resBundle = Define.CommonBundle;
          }

          var promise = this.LoadSlogans(resourcePath[0], resourcePath[1], resBundle);
          this.m_promoteAni = promoteAnimation;
          this.m_promotePic = promoteSprite;
          return promise;
        };

        _proto.LoadSlogans = function LoadSlogans(pathLandscape, pathvertical, resBundle) {
          var _this2 = this;

          var adNums = pathLandscape.length;
          this.m_adNums = adNums;
          var downloadList = [];

          var _loop = function _loop(i) {
            downloadList.push(new Promise(function (resolve) {
              resBundle.load(pathLandscape[i], SpriteFrame, function (err, res) {
                if (err) {
                  resolve();
                  return;
                }

                _this2.m_promotePictures[adIndex.horizontal][i] = res;
                resolve();
              });
            }));

            if (pathvertical && pathvertical[i]) {
              downloadList.push(new Promise(function (resolve) {
                resBundle.load(pathvertical[i], SpriteFrame, function (err, res) {
                  if (err) {
                    resolve();
                    return;
                  }

                  _this2.m_promotePictures[adIndex.vertical][i] = res;
                  resolve();
                });
              }));
            }
          };

          for (var i = 0; i < adNums; i++) {
            _loop(i);
          }

          return Promise.all(downloadList).then(function () {
            for (var _i = 0; _i < adNums; _i++) {
              if (!_this2.m_promotePictures[adIndex.vertical][_i]) {
                _this2.m_promotePictures[adIndex.vertical][_i] = _this2.m_promotePictures[adIndex.horizontal][_i];
              }
            }

            log("loadSlogans", _this2.m_promotePictures);
          });
        };

        _proto.PlayAni = function PlayAni(aniName) {
          if (this.m_promoteAni) {
            this.m_promoteAni.play(aniName);
            this.m_curAniName = aniName;
          }
        };
        /**替換宣傳字排程 */


        _proto.StartPromote = function StartPromote() {
          this.m_promoteLock = false;
          this.scheduleOnce(this.ChangePic, this.m_cycle[0][0] == this.m_cycle[0][1] ? this.m_cycle[0][0] : SloganManager.GetRandomInt(this.m_cycle[0][0], this.m_cycle[0][1] + 1));
        }
        /**停止替換 */
        ;

        _proto.StopPromote = function StopPromote() {
          this.m_promoteLock = true;
          this.unschedule(this.RevertPic);
          this.unschedule(this.ChangePic);
          this.EndPromote();
        };

        _proto.EndPromote = function EndPromote() {
          var _this3 = this;

          if (this.m_promoting) {
            this.m_promoting = false;
            this.PlayAni(this.m_animationName.end);
            this.m_promoteAni.once(Animation.EventType.FINISHED, function () {
              _this3.m_curAniName = "";
            });
          }
        }
        /**設定宣傳圖進退場動畫名稱 */
        ;

        _proto.SetAnimationName = function SetAnimationName(nameSet) {
          this.m_animationName = nameSet;
        }
        /**設定宣傳週期 */
        ;

        _proto.SetPromoteCycle = function SetPromoteCycle(m_cycle) {
          this.m_cycle = m_cycle;
        }
        /**獲得當前動畫狀態 */
        ;

        _proto.GetAniState = function GetAniState() {
          return this.m_promoteAni.getState(this.m_curAniName);
        };

        _proto.OnRotation = function OnRotation(m_isLandscape) {
          if (this.m_isLandscape == m_isLandscape) {
            return;
          }

          this.m_isLandscape = m_isLandscape;
          this.m_promotePic.spriteFrame = this.m_promotePictures[this.m_isLandscape ? adIndex.horizontal : adIndex.vertical][this.m_promoteIdx >= this.m_adNums ? this.m_promoteIdx = 0 : this.m_promoteIdx];
        };

        _createClass(SloganManager, [{
          key: "CurAniName",
          get: function get() {
            return this.m_curAniName;
          }
        }, {
          key: "ChangePictureCallback",
          set:
          /**宣傳圖顯示時的callback */
          function set(func) {
            this.m_changePictureCallback = func;
          }
        }, {
          key: "RevertPictureCallback",
          set:
          /**宣傳圖隱藏時的callback */
          function set(func) {
            this.m_revertPictureCallback = func;
          }
        }, {
          key: "Promoting",
          get:
          /**宣傳圖是否顯示中 */
          function get() {
            return this.m_promoting;
          }
        }]);

        return SloganManager;
      }(Component)) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotActivator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2;

      cclegacy._RF.push({}, "e2171n/i+xGsoWeQMXewobE", "SlotActivator", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu; //import SlotActivatorJS from "./Core/SlotActivatorJS.js"

      var SlotActivator = exports('default', (_dec = ccclass('SlotActivator'), _dec2 = menu("Chiron/Spine/SlotActivator"), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotActivator, _Component);

        function SlotActivator() {
          return _Component.apply(this, arguments) || this;
        }

        _createClass(SlotActivator, [{
          key: "Identifier",
          get: // /**
          // * 取得/設定唯一識別名稱
          // */
          function get() {
            return this["identifier"];
          },
          set: function set(identifier) {
            this["identifier"] = identifier;
          } // /**
          // * 控制 slot 開關顯示
          // * @param active 開關控制
          // */

        }, {
          key: "Active",
          get: function get() {
            return this["active"];
          },
          set: function set(active) {
            this["active"] = active;
          }
        }]);

        return SlotActivator;
      }(Component), _class2.SlotActivator = "SlotActivator", _class2)) || _class) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // let SlotActivatorJS = require("./Core/SlotActivatorJS")
      // 
      // const {ccclass, property, menu} = _decorator;
      // 
      // @ccclass
      // @menu("Chiron/Spine/SlotActivator")
      // export default class SlotActivator extends SlotActivatorJS {
      //     public static SlotActivator:string = "SlotActivator";
      // 
      //     /**
      //      * 取得/設定唯一識別名稱
      //      */
      //     public get Identifier(): string {
      //         return this["identifier"];
      //     }
      //     public set Identifier(identifier:string) {
      //         this["identifier"] = identifier;
      //     }
      // 
      //     /**
      //      * 控制 slot 開關顯示
      //      * @param active 開關控制
      //      */
      //     public get Active(): boolean {
      //         return this["active"];
      //     }
      //     public set Active(active:boolean) {
      //         this["active"] = active;
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotActivatorExample.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SlotActivator.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, SlotActivator;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      SlotActivator = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "75f72fwECZC7rGRONSmuMF8", "SlotActivatorExample", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SlotActivatorExample = exports('default', (_dec = ccclass('SlotActivatorExample'), _dec2 = property({
        type: SlotActivator,
        displayName: "Target"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotActivatorExample, _Component);

        function SlotActivatorExample() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_target", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotActivatorExample.prototype;

        _proto.ActiveToggle = function ActiveToggle() {
          this.m_target && (this.m_target.Active = !this.m_target.Active);
        };

        return SlotActivatorExample;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_target", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import SlotActivator from "../../../SlotActivator";
      // 
      // const {ccclass, property} = _decorator;
      // 
      // @ccclass
      // export default class SlotActivatorExample extends Component {
      //     @property({
      //         type: SlotActivator,
      //         displayName: "Target"
      //     })
      //     private m_target:SlotActivator = null;
      // 
      //     public ActiveToggle() {
      //         this.m_target && (this.m_target.Active = !this.m_target.Active);
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotColorFollow.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Enum, math, sp, Sprite, Label, color, UIOpacity, Component, CCClass;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      math = module.math;
      sp = module.sp;
      Sprite = module.Sprite;
      Label = module.Label;
      color = module.color;
      UIOpacity = module.UIOpacity;
      Component = module.Component;
      CCClass = module.CCClass;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3;

      cclegacy._RF.push({}, "e23desmKVBLjKgDg5KLcySp", "SlotColorFollow", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu,
          inspector = _decorator.inspector;
      var DefaultTemp = {
        "None": 0
      };
      var DefaultEnum = Enum(DefaultTemp);

      function setEnumAttr(obj, propName, enumDef) {
        var enumList = Enum.getList(Enum(enumDef));
        CCClass.Attr.setClassAttr(obj, propName, 'type', 'Enum');
        CCClass.Attr.setClassAttr(obj, propName, 'enumList', enumList);
      }

      var SlotColorFollow = exports('default', (_dec = ccclass('SlotColorFollow'), _dec2 = menu("Chiron/Spine/SlotColorFollow"), _dec3 = property({
        visible: false,
        tooltip: "目標 Spine 骨架"
      }), _dec4 = property({
        visible: false,
        tooltip: "目標同步 slot 名稱"
      }), _dec5 = property({
        visible: true,
        displayName: "Preview"
      }), _dec6 = property({
        visible: false,
        type: math.Color
      }), _dec7 = property({
        visible: false,
        type: sp.Skeleton
      }), _dec8 = property({
        visible: true,
        displayName: "Skeleton",
        tooltip: "目標 Spine 骨架",
        type: sp.Skeleton
      }), _dec9 = property({
        visible: false,
        tooltip: "目標同步 slot 名稱"
      }), _dec10 = property({
        visible: false
      }), _dec11 = property({
        visible: true,
        displayName: 'Slot',
        type: DefaultEnum
      }), _dec(_class = _dec2(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotColorFollow, _Component);

        function SlotColorFollow() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.editor = void 0;

          _initializerDefineProperty(_this, "m_preview", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_colorCache", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_spineSkeleton", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_slotName", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "__slotIndex", _descriptor5, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SlotColorFollow.prototype;

        _proto.__preload = function __preload() {};

        _proto.onLoad = function onLoad() {
          if (this.node.getComponent(Sprite)) {
            this._colorCache = this.node.getComponent(Sprite).color;
          } else if (this.node.getComponent(Label)) {
            this._colorCache = this.node.getComponent(Label).color;
          }
        };

        _proto.update = function update() {
          if (this.m_spineSkeleton && this.m_slotName != "") {
            var slot = this.m_spineSkeleton.findSlot(this.m_slotName);
            var r = slot ? slot.color.r * 255 : this._colorCache.r;
            var g = slot ? slot.color.g * 255 : this._colorCache.g;
            var b = slot ? slot.color.b * 255 : this._colorCache.b;
            var a = slot ? slot.color.a * 255 : this._colorCache.a;

            if (r != this._colorCache.r || g != this._colorCache.g || b != this._colorCache.b || a != this._colorCache.a) {
              if (this.node.getComponent(Sprite)) {
                this.node.getComponent(Sprite).color = color(r, g, b, a);

                this._colorCache.set(this.node.getComponent(Sprite).color);
              } else if (this.node.getComponent(Label)) {
                this.node.getComponent(Label).color = color(r, g, b, a);

                this._colorCache.set(this.node.getComponent(Label).color);
              } // 部分節點僅有 UIOpacity


              if (this.node.getComponent(UIOpacity)) {
                this.node.getComponent(UIOpacity).opacity = a;
              }

              this._colorCache.a = a;
            }
          }
        };

        _proto.onDestroy = function onDestroy() {
          this._colorCache = null;
          this.m_spineSkeleton = null;
          this.m_slotName = null;
        };

        _proto._refreshInspector = function _refreshInspector() {
          {
            return;
          }
        };

        _proto._slotEnum = function _slotEnum() {
          {
            return;
          }
        };

        _proto._updateSlotEnum = function _updateSlotEnum() {
          var slotEnum = this._slotEnum();

          setEnumAttr(this, '_slotIndex', slotEnum || DefaultEnum);
        };

        _proto.notify = function notify() {
          {
            return;
          }
        };

        _createClass(SlotColorFollow, [{
          key: "Skeleton",
          get: function get() {
            return this["m_spineSkeleton"];
          },
          set: function set(value) {
            this["m_spineSkeleton"] = value;
          }
        }, {
          key: "SlotName",
          get: function get() {
            return this["m_slotName"];
          },
          set: function set(value) {
            this["m_slotName"] = value;
          }
        }, {
          key: "_spineSkeleton",
          get: function get() {
            {
              return;
            }
          },
          set: function set(value) {
            {
              return;
            }
          }
        }, {
          key: "_slotIndex",
          get: function get() {
            {
              return;
            }
          },
          set: function set(value) {
            {
              return;
            }
          }
        }]);

        return SlotColorFollow;
      }(Component), _class3.SlotColorFollow = "SlotColorFollow", _class3), (_applyDecoratedDescriptor(_class2.prototype, "Skeleton", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "Skeleton"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "SlotName", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "SlotName"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_preview", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_colorCache", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new math.Color(math.Color.WHITE);
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_spineSkeleton", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "_spineSkeleton", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "_spineSkeleton"), _class2.prototype), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_slotName", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "__slotIndex", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "_slotIndex", [_dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "_slotIndex"), _class2.prototype)), _class2)) || _class) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // let SlotColorFollowJS = require("./Core/SlotColorFollowJS")
      // 
      // const {ccclass, property, menu} = _decorator;
      // 
      // @ccclass
      // @menu("Chiron/Spine/SlotColorFollow")
      // export default class SlotColorFollow extends SlotColorFollowJS {
      //     public static SlotColorFollow:string = "SlotColorFollow";
      // 
      //     @property({
      //         visible: false,
      //         tooltip: "目標 Spine 骨架"
      //     })
      //     get Skeleton(): sp.Skeleton {
      //         return this["m_spineSkeleton"];
      //     }
      //     set Skeleton(value:sp.Skeleton) {
      //         this["m_spineSkeleton"] = value;
      //     }
      //     
      //     @property({
      //         visible: false,
      //         tooltip: "目標同步 slot 名稱"
      //     })
      //     get SlotName(): string {
      //         return this["m_slotName"];
      //     }
      //     set SlotName(value:string) {
      //         this["m_slotName"] = value;
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SlotCulling.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _class3;

      cclegacy._RF.push({}, "ff032nME8lBJKBpMlK8O/1z", "SlotCulling", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu; //import SlotCullingJS from "./Core/SlotCullingJS.js"

      /**********************************************************************
       注意：此腳本有啟用 executeInEditMode 模式，若有不需於編輯器執行的情形
          請使用旗標 CC_EDITOR 來判定繞過
      **********************************************************************/

      var SlotCulling = exports('default', (_dec = ccclass('SlotCulling'), _dec2 = menu("Chiron/Spine/SlotCulling"), _dec3 = property({
        visible: false,
        tooltip: "目標 Spine 骨架"
      }), _dec4 = property({
        visible: false,
        tooltip: "反向剔除 Slot 項目(勾選的不會被剔除，未勾選的將被剔除)"
      }), _dec5 = property({
        visible: false,
        tooltip: "遭剔除的 Slot 項目名稱"
      }), _dec(_class = _dec2(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SlotCulling, _Component);

        function SlotCulling() {
          return _Component.apply(this, arguments) || this;
        }

        _createClass(SlotCulling, [{
          key: "Skeleton",
          get: function get() {
            return this["m_spineSkeleton"];
          },
          set: function set(value) {
            this["m_spineSkeleton"] = value;
          }
        }, {
          key: "Invert",
          get: function get() {
            return this["m_invert"];
          },
          set: function set(value) {
            this["m_invert"] = value;
          }
        }, {
          key: "CullingList",
          get: function get() {
            return this["_cullingSlotNames"];
          } // /**
          // * 加入剔除項目的陣列
          // * @param {string} slotNames
          // */
          //     AssignCulling(slotNames:string[]) {
          //         super.AssignCulling(slotNames);
          //     }
          // // /**
          // // * 加入剔除項目
          // // * @param {string} slotName
          // // */
          //     AddCulling(slotName:string) {
          //         super.AddCulling(slotName);
          //     }
          // // /**
          // // * 移除剔除項目
          // // * @param {string} slotName
          // // */
          //     DeleteCulling(slotName:string) {
          //         super.DeleteCulling(slotName);
          //     }
          // // /**
          // // * 清除所有剔除項目
          // // */
          //     ClearAll() {
          //         super.ClearAll();
          //     }

        }], [{
          key: "Name",
          get: function get() {
            return SlotCulling.SlotCulling;
          }
        }]);

        return SlotCulling;
      }(Component), _class3.SlotCulling = "SlotCulling", _class3), (_applyDecoratedDescriptor(_class2.prototype, "Skeleton", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "Skeleton"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "Invert", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "Invert"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "CullingList", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "CullingList"), _class2.prototype)), _class2)) || _class) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // let SlotCullingJS = require("./Core/SlotCullingJS");
      // 
      // /**********************************************************************
      // 　注意：此腳本有啟用 executeInEditMode 模式，若有不需於編輯器執行的情形
      // 　　　　請使用旗標 CC_EDITOR 來判定繞過
      // **********************************************************************/
      // 
      // const {ccclass, property, menu} = _decorator;
      // 
      // @ccclass
      // @menu("Chiron/Spine/SlotCulling")
      // export default class SlotCulling extends SlotCullingJS {
      //     public static SlotCulling:string = "SlotCulling";
      //     public static get Name() {
      //         return SlotCulling.SlotCulling;
      //     }
      // 
      //     @property({
      //         visible: false,
      //         tooltip: "目標 Spine 骨架"
      //     })
      //     get Skeleton(): sp.Skeleton {
      //         return this["m_spineSkeleton"];
      //     }
      //     set Skeleton(value:sp.Skeleton) {
      //         this["m_spineSkeleton"] = value;
      //     }
      // 
      //     @property({
      //         visible: false,
      //         tooltip: "反向剔除 Slot 項目(勾選的不會被剔除，未勾選的將被剔除)"
      //     })
      //     get Invert(): boolean {
      //         return this["m_invert"];
      //     }
      //     set Invert(value:boolean) {
      //         this["m_invert"] = value;
      //     }
      // 
      //     @property({
      //         visible: false,
      //         tooltip: "遭剔除的 Slot 項目名稱"
      //     })
      //     get CullingList(): string[] {
      //         return this["_cullingSlotNames"];
      //     }
      // 
      //     /**
      //      * 加入剔除項目的陣列
      //      * @param {string} slotNames
      //      */
      //     AssignCulling(slotNames:string[]) {
      //         super.AssignCulling(slotNames);
      //     }
      // 
      //     /**
      //      * 加入剔除項目
      //      * @param {string} slotName 
      //      */
      //     AddCulling(slotName:string) {
      //         super.AddCulling(slotName);
      //     }
      // 
      //     /**
      //      * 移除剔除項目
      //      * @param {string} slotName 
      //      */
      //     DeleteCulling(slotName:string) {
      //         super.DeleteCulling(slotName);
      //     }
      // 
      //     /**
      //      * 清除所有剔除項目
      //      */
      //     ClearAll() {
      //         super.ClearAll();
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SoundManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './AudioSourceExtension.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, sys, tween, Node, AudioSource, log, error, Define, AudioSourceExtension;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      tween = module.tween;
      Node = module.Node;
      AudioSource = module.AudioSource;
      log = module.log;
      error = module.error;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      AudioSourceExtension = module.AudioSourceExtension;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6f5e635lldG1IXmhwOo1j7Y", "SoundManager", undefined);

      var SoundManager = exports('default', /*#__PURE__*/function () {
        function SoundManager() {
          this.m_isLoading = false;
          this.m_assignAmount = 0;
          this.m_curLoaded = 0;
          this.m_isMute = false;
          this.m_curBGId = void 0;
          this.m_audioPool = [];
          this.m_rootNode = void 0;

          if (SoundManager._instance) {
            throw new Error("Error: Instantiation failed: Use SoundManager.getInstance() instead of new.");
          }

          SoundManager._instance = this;
        }

        SoundManager.getInstance = function getInstance() {
          if (!this._instance) {
            this._instance = new SoundManager();
          }

          return SoundManager._instance;
        } // audioSource是component只能掛在node裡面，所以要有一個parent來掛音效
        ;

        var _proto = SoundManager.prototype;

        _proto.Init = function Init(node) {
          this.m_rootNode = node;
        };

        SoundManager.OnExit = function OnExit() {
          this.PlayList = {};
          delete this._instance;
          this._instance = null;
        };

        _proto.checkSoundFormat = function checkSoundFormat(path) {
          var head = Define.SOUND_PATH.MP3; //  AsttSound/

          if (Define.SOUND_OGG_ENABLE && sys.os == sys.OS.ANDROID) {
            head = Define.SOUND_PATH.OGG;
          }

          for (var index in path) {
            var check = path[index].match(head);

            if (!check) {
              path[index] = head + path[index];
            }
          }
        }
        /**
         * @param path 音效檔案的路徑物件
         * @param files 載入的AudioClip所存放的物件，key的設定與path相同
         */
        ;

        _proto.LoadAudioAsset = function LoadAudioAsset(path, cb, files, isGame) {
          var _this = this;

          if (isGame === void 0) {
            isGame = false;
          } // if ( this.m_isLoading )
          // {
          //     error( "loadAudioAsset: already loading" );
          //     return;
          // }


          this.m_isLoading = true;

          if (path != null) {
            this.m_assignAmount = Object.keys(path).length;
          }

          var bundle = Define.OtherBundle;

          if (isGame) {
            bundle = Define.GameBundle;
          }

          var _loop = function _loop(key) {
            if (path.hasOwnProperty(key)) {
              var element = path[key];
              log("loadAudioAsset: ", key, element);
              bundle.load(element, function (err, assets) {
                if (err) {
                  error(err.message || err);
                  return;
                }

                files[key] = assets;
                _this.m_curLoaded = _this.m_curLoaded + 1;

                if (_this.m_curLoaded == _this.m_assignAmount) {
                  _this.m_isLoading = false;
                  _this.m_curLoaded = 0;
                }

                cb(element);
              });
            }
          };

          for (var key in path) {
            _loop(key);
          }
        }; // url.raw要用絕對位置


        _proto.FormAbsolutedPath = function FormAbsolutedPath() {//:
          // let isForm: boolean = path.search( /res\/raw-assets\/resources\//g ) !== -1;
          // if ( isForm ) return path;
          // if ( Define.SOUND_OGG_ENABLE && sys.os == sys.OS.ANDROID )
          // {
          //     return url.raw( "resources/" + path + ".ogg" );
          // }
          // else
          // {
          //     return url.raw( "resources/" + path + ".mp3" );
          // }
        };

        _proto.Play = function Play(audio, loop, cb, volume) {
          if (loop === void 0) {
            loop = false;
          }

          if (cb === void 0) {
            cb = null;
          }

          if (volume === void 0) {
            volume = 1;
          }

          if (!audio) {
            return null;
          }

          var audioId = this.PlayAudioSource(audio, loop, volume, cb);
          return audioId;
        };

        _proto.PlayBackGround = function PlayBackGround(audio, loop, cb, volume) {
          if (loop === void 0) {
            loop = false;
          }

          if (cb === void 0) {
            cb = null;
          }

          if (volume === void 0) {
            volume = 1;
          }

          if (!audio) {
            return null;
          }

          var tmpVolume = volume;

          if (this.m_isMute) {
            tmpVolume = 0;
          }

          var audioId = this.PlayAudioSource(audio, loop, tmpVolume, cb);
          this.m_curBGId = audioId;
          return audioId;
        };

        _proto.PlayTimes = function PlayTimes() {
          //:
          // let tmpVolume = volume;
          // if ( this.m_isisMute )
          // {
          //     tmpVolume = 0;
          // }
          // let audioId = this.PlayAudioSound( audio, false, tmpVolume, () =>
          // {
          //     if ( SoundManager.PlayList[ audioId ] )
          //     {
          //         if ( SoundManager.PlayList[ audioId ].repeatTimes - 1 > 0 )
          //         {
          //             let tmpTimes = SoundManager.PlayList[ audioId ].repeatTimes - 1
          //             delete SoundManager.PlayList[ audioId ];
          //             audioId = cc.audioEngine.play( audio, false, tmpVolume );
          //             SoundManager.PlayList[ audioId ] = {};
          //             SoundManager.PlayList[ audioId ].volume = volume;
          //             SoundManager.PlayList[ audioId ].repeatTimes = tmpTimes;
          //             cc.audioEngine.setFinishCallback( audioId, onCB );
          //             if ( updateCb )
          //             {
          //                 updateCb( audioId );
          //             }
          //         }
          //         else
          //         {
          //             delete SoundManager.PlayList[ audioId ];
          //             if ( cb )
          //             {
          //                 cb();
          //             }
          //         }
          //     }
          // } );
          // SoundManager.PlayList[ audioId ].repeatTimes = repeatTimes;
          // return audioId;
          return -1;
        };

        _proto.SetAllMute = function SetAllMute(isMute) {
          this.m_isMute = isMute;

          if (isMute) {
            for (var key in SoundManager.PlayList) {
              if (SoundManager.PlayList.hasOwnProperty(key)) {
                var audioSource = this.m_audioPool[key];

                if (audioSource && !audioSource.IsIdle()) {
                  audioSource.volume = 0;
                }
              }
            }
          } else {
            for (var _key in SoundManager.PlayList) {
              if (SoundManager.PlayList.hasOwnProperty(_key)) {
                var volume = SoundManager.PlayList[_key].volume;
                var _audioSource = this.m_audioPool[_key];

                if (_audioSource && !_audioSource.IsIdle()) {
                  _audioSource.volume = volume;
                }
              }
            }
          }
        };

        _proto.Stop = function Stop(id) {
          var audioSource = this.m_audioPool[id];

          if (audioSource && !audioSource.IsIdle()) {
            audioSource.loop = false;
            audioSource.stop();
          }
        };

        _proto.StopAll = function StopAll() {
          for (var key in SoundManager.PlayList) {
            if (SoundManager.PlayList.hasOwnProperty(key)) {
              var audioSource = this.m_audioPool[key];

              if (audioSource && !audioSource.IsIdle()) {
                audioSource.loop = false;
                audioSource.stop();
              }
            }
          }
        };

        _proto.StopAllEffect = function StopAllEffect() {
          for (var key in SoundManager.PlayList) {
            if (SoundManager.PlayList.hasOwnProperty(key)) {
              var audioSource = this.m_audioPool[key];

              if (Number(key) != this.m_curBGId && audioSource && !audioSource.IsIdle()) {
                audioSource.loop = false;
                audioSource.stop();
              }
            }
          }
        };

        _proto.SetVolumeForAll = function SetVolumeForAll(volume) {
          if (!this.m_isMute) {
            for (var key in SoundManager.PlayList) {
              if (SoundManager.PlayList.hasOwnProperty(key)) {
                var audioSource = this.m_audioPool[key];

                if (audioSource && !audioSource.IsIdle()) {
                  audioSource.volume = volume;
                }
              }
            }
          }
        };

        _proto.Resume = function Resume(id) {
          var audioSource = this.m_audioPool[id];

          if (audioSource && audioSource.state == AudioSourceExtension.AudioState.PAUSED) {
            audioSource.play();

            if (this.m_isMute) {
              audioSource.volume = 0;
            }
          }
        };

        _proto.Pause = function Pause(id) {
          var audioSource = this.m_audioPool[id];

          if (audioSource) {
            audioSource.pause();
          }
        };

        _proto.SetVolume = function SetVolume(id, vol) {
          var audioSetting = SoundManager.PlayList[id];
          var audioSource = this.m_audioPool[id];

          if (audioSetting && audioSource) {
            if (this.m_isMute) {
              audioSource.volume = 0;
            } else {
              audioSource.volume = vol;
              audioSetting.volume = vol;
            }
          }
        };

        _proto.GetVolume = function GetVolume(id) {
          var audioSource = this.m_audioPool[id];

          if (audioSource) {
            return audioSource.volume;
          }

          return 0;
        } // id : 音樂音效的 AudioID
        // maxVolume : 淡入的音量 最大要到多少
        // fadeTime : 淡入使用的時間
        ;

        _proto.SetMusicFadeIn = function SetMusicFadeIn(id, fadeInTime, maxVolume) {
          if (fadeInTime === void 0) {
            fadeInTime = 1;
          }

          if (maxVolume === void 0) {
            maxVolume = 1;
          }

          var audioSetting = SoundManager.PlayList[id];
          var audioSource = this.m_audioPool[id];

          if (audioSetting && audioSource) {
            if (this.m_isMute) {
              audioSource.volume = 0;
            } else {
              var repeatTimes = 10;
              var frequency = fadeInTime / repeatTimes;
              var dt = maxVolume / repeatTimes;
              var volume = 0;
              tween(this.m_rootNode).repeat(repeatTimes, tween().delay(frequency).call(function () {
                if (volume <= maxVolume) {
                  volume += dt;
                  audioSource.volume = volume;
                  audioSetting.volume = volume;
                }
              })).call(function () {
                audioSource.volume = maxVolume;
                audioSetting.volume = maxVolume;
              }).start();
            }
          }
        } // id : 音樂音效的 AudioID
        // fadeOutTime : 淡出使用的時間
        ;

        _proto.SetMusicFadeOut = function SetMusicFadeOut(id, fadeOutTime) {
          if (fadeOutTime === void 0) {
            fadeOutTime = 1;
          }

          var audioSetting = SoundManager.PlayList[id];
          var audioSource = this.m_audioPool[id];

          if (audioSetting && audioSource) {
            if (this.m_isMute) {
              audioSource.volume = 0;
            } else {
              var repeatTimes = 10;
              var frequency = fadeOutTime / repeatTimes;
              var nowVolume = this.GetVolume(id);
              var dt = nowVolume / repeatTimes;
              tween(this.m_rootNode).repeat(repeatTimes, tween().delay(frequency).call(function () {
                if (nowVolume <= 0) {
                  nowVolume -= dt;
                  audioSource.volume = nowVolume;
                  audioSetting.volume = nowVolume;
                }
              })).call(function () {
                audioSource.volume = 0;
                audioSetting.volume = 0;
              }).start();
            }
          }
        };

        _proto.GetDuration = function GetDuration(id) {
          var audioSource = this.m_audioPool[id];

          if (audioSource) {
            return audioSource.duration;
          }

          return 0;
        };

        _proto.GetAudioSource = function GetAudioSource() {
          var canUseAudioSource = null;
          var index = null;

          for (var i = 0; i < this.m_audioPool.length; i++) {
            var audioSource = this.m_audioPool[i];

            if (audioSource.IsIdle() && !audioSource.loop) {
              audioSource.Reset();
              canUseAudioSource = audioSource;
              index = i;
              break;
            }
          }

          if (!canUseAudioSource && this.m_rootNode) {
            var node = new Node();
            this.m_rootNode.addChild(node);
            var source = node.addComponent(AudioSourceExtension);
            this.m_audioPool.push(source);
            index = this.m_audioPool.length - 1;
            canUseAudioSource = source;
          }

          return [canUseAudioSource, index];
        };

        _proto.PlayAudioSource = function PlayAudioSource(audio, loop, volume, endCb) {
          var _this$GetAudioSource = this.GetAudioSource(),
              source = _this$GetAudioSource[0],
              audioId = _this$GetAudioSource[1];

          source.clip = audio;
          source.loop = loop;
          source.volume = this.m_isMute ? 0 : volume;
          SoundManager.PlayList[audioId] = {};
          SoundManager.PlayList[audioId].volume = volume;
          source.play();
          source.node.once(AudioSource.EventType.ENDED, function () {
            delete SoundManager.PlayList[audioId];

            if (endCb) {
              endCb();
            }
          });
          return audioId;
        };

        _createClass(SoundManager, [{
          key: "isMute",
          get: // private static PlayList:Map<number,boolean> = new Map<number, boolean>();
          function get() {
            return this.m_isMute;
          }
        }, {
          key: "isLoading",
          get: function get() {
            return this.m_isLoading;
          }
        }]);

        return SoundManager;
      }());
      SoundManager._instance = new SoundManager();
      SoundManager.PlayList = {};

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SkeletonSync.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Component, SkeletonSync;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }, function (module) {
      SkeletonSync = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "bcb43VH8pdGCo5QU7wPc5Q3", "SpineController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      function AnimationMixing(skeleton, mixAnim, mixTime) {
        if (skeleton && mixAnim && mixAnim.length > 1) {
          for (var i = 0; i < mixAnim.length - 1; i++) {
            var anim1 = mixAnim[i];

            for (var j = i + 1; j < mixAnim.length; j++) {
              var anim2 = mixAnim[j];
              skeleton.setMix(anim1, anim2, mixTime);
              skeleton.setMix(anim2, anim1, mixTime);
            }
          }
        }
      }

      var mixAnim = ["walk", "run", "jump"];
      var SpineController = exports('default', (_dec = ccclass('SpineController'), _dec2 = property({
        type: sp.Skeleton,
        displayName: "Skeleton"
      }), _dec3 = property({
        displayName: "Mixing Time",
        tooltip: "動畫1轉換至動畫2的動作漸變時間"
      }), _dec4 = property({
        type: [SkeletonSync],
        displayName: "SkeletonSync",
        tooltip: "被同步的 Skeleton 對象"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineController, _Component);

        function SpineController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.m_hasStop = false;

          _initializerDefineProperty(_this, "m_skeleton", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_mixTime", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_skeletonSyncList", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SpineController.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          AnimationMixing(this.m_skeleton, mixAnim, this.m_mixTime);

          for (var i = 0; i < this.m_skeletonSyncList.length; i++) {
            var eachSync = this.m_skeletonSyncList[i];
            AnimationMixing(eachSync.Skeleton, mixAnim, this.m_mixTime);
          }

          this.m_skeleton.setCompleteListener(function (trackEntry) {
            var animationName = trackEntry.animation ? trackEntry.animation.name : "";

            if (animationName === 'shoot') {
              _this2.Simulate("clearTrack", 1);
            }
          });
        };

        _proto.onEnable = function onEnable() {
          for (var i = 0; i < this.m_skeletonSyncList.length; i++) {
            var eachSync = this.m_skeletonSyncList[i];
            eachSync && eachSync.Sync(this.node);
          }
        };

        _proto.Stop = function Stop() {
          this.Simulate("clearTrack", 0);
          this.m_hasStop = true;
        };

        _proto.Walk = function Walk() {
          this.Simulate("setAnimation", 0, 'walk', true);
          this.m_hasStop = false;
        };

        _proto.Run = function Run() {
          this.Simulate("setAnimation", 0, 'run', true);
          this.m_hasStop = false;
        };

        _proto.Jump = function Jump() {
          var oldAnim = this.m_skeleton.animation;
          this.Simulate("setAnimation", 0, 'jump', false);

          if (oldAnim && !this.m_hasStop) {
            this.Simulate("addAnimation", 0, oldAnim === 'run' ? 'run' : 'walk', true, 0);
          }
        };

        _proto.Shoot = function Shoot() {
          this.Simulate("setAnimation", 1, 'shoot', false);
        };

        _proto.Simulate = function Simulate(funcName) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          this.m_skeleton[funcName].apply(this.m_skeleton, args);

          for (var i = 0; i < this.m_skeletonSyncList.length; i++) {
            var eachSync = this.m_skeletonSyncList[i];
            eachSync && eachSync.Skeleton[funcName].apply(eachSync.Skeleton, args);
          }
        };

        return SpineController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_skeleton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_mixTime", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_skeletonSyncList", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import SkeletonSync from "../../../SkeletonSync"
      //
      // function AnimationMixing(skeleton:sp.Skeleton, mixAnim:string[], mixTime:number) {
      //     if (skeleton && mixAnim && mixAnim.length > 1) {
      //         for (let i = 0; i < mixAnim.length-1; i++) {
      //             let anim1:string = mixAnim[i];
      //             for (let j = i+1; j < mixAnim.length; j++) {
      //                 let anim2:string = mixAnim[j];
      //                 skeleton.setMix(anim1, anim2, mixTime);
      //                 skeleton.setMix(anim2, anim1, mixTime);
      //             }
      //         }
      //     }
      // }
      //
      // const {ccclass, property} = _decorator;
      // const mixAnim:string[] = ["walk", "run", "jump"];
      //
      // @ccclass
      // export default class SpineController extends Component {
      //     private m_hasStop:boolean = false;
      //
      //     @property({
      //         type:sp.Skeleton,
      //         displayName: "Skeleton"
      //     })
      //     private m_skeleton:sp.Skeleton = null;
      //
      //     @property({
      //         displayName: "Mixing Time",
      //         tooltip: "動畫1轉換至動畫2的動作漸變時間"
      //     })
      //     private m_mixTime: number = 0.2;
      //
      //     @property({
      //         type: [SkeletonSync],
      //         displayName: "SkeletonSync",
      //         tooltip: "被同步的 Skeleton 對象"
      //     })
      //     private m_skeletonSyncList:SkeletonSync[] = [];
      //
      //     public onLoad() {
      //         AnimationMixing(this.m_skeleton, mixAnim, this.m_mixTime);
      //
      //         for (let i = 0; i < this.m_skeletonSyncList.length; i++) {
      //             let eachSync: SkeletonSync = this.m_skeletonSyncList[i];
      //             AnimationMixing(eachSync.Skeleton, mixAnim, this.m_mixTime);
      //         }
      //
      //         this.m_skeleton.setCompleteListener((trackEntry) => {
      //             var animationName = trackEntry.animation ? trackEntry.animation.name : "";
      //             if (animationName === 'shoot') {
      //                 this.Simulate("clearTrack", 1);
      //             }
      //         });
      //     }
      //
      //     public onEnable() {
      //         for (let i = 0; i < this.m_skeletonSyncList.length; i++) {
      //             let eachSync: SkeletonSync = this.m_skeletonSyncList[i];
      //             eachSync && eachSync.Sync(this.node);
      //         }
      //     }
      //
      //     public Stop () {
      //         this.Simulate("clearTrack", 0)
      //         this.m_hasStop = true;
      //     }
      //
      //     public Walk () {
      //         this.Simulate("setAnimation", 0, 'walk', true)
      //         this.m_hasStop = false;
      //     }
      //
      //     public Run () {
      //         this.Simulate("setAnimation", 0, 'run', true)
      //         this.m_hasStop = false;
      //     }
      //
      //     public Jump () {
      //         var oldAnim = this.m_skeleton.animation;
      //         this.Simulate("setAnimation", 0, 'jump', false)
      //         if (oldAnim && !this.m_hasStop) {
      //             this.Simulate("addAnimation", 0, oldAnim === 'run' ? 'run' : 'walk', true, 0)
      //         }
      //     }
      //
      //     public Shoot () {
      //         this.Simulate("setAnimation", 1, 'shoot', false)
      //     }
      //
      //     private Simulate(funcName:string, ...args) {
      //         this.m_skeleton[funcName].apply(this.m_skeleton, args);
      //         for (let i = 0; i < this.m_skeletonSyncList.length; i++) {
      //             let eachSync: SkeletonSync = this.m_skeletonSyncList[i];
      //             eachSync && eachSync.Skeleton[funcName].apply(eachSync.Skeleton, args);
      //         }
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineExampleMenu.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, director, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "49782wAg09E6a11Aa9jCswI", "SpineExampleMenu", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpineExampleMenu = exports('default', (_dec = ccclass('SpineExampleMenu'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineExampleMenu, _Component);

        function SpineExampleMenu() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = SpineExampleMenu.prototype;

        _proto.Basic = function Basic() {
          director.loadScene("SpineBasicExample");
        };

        _proto.BoneFollow = function BoneFollow() {
          director.loadScene("SpineBoneFollowExample");
        };

        _proto.OverLap = function OverLap() {
          director.loadScene("SpineOverlapExample");
        };

        _proto.SkeletonSync = function SkeletonSync() {
          director.loadScene("SpineSkeletonSyncExample");
        };

        _proto.SlotActivator = function SlotActivator() {
          director.loadScene("SpineSlotActivatorExample");
        };

        _proto.SlotColorFollow = function SlotColorFollow() {
          director.loadScene("SpineSlotColorFollowExample");
        };

        _proto.SlotCulling = function SlotCulling() {
          director.loadScene("SpineSlotCullingExample");
        };

        return SpineExampleMenu;
      }(Component)) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // const {ccclass, property} = _decorator;
      // 
      // @ccclass
      // export default class SpineExampleMenu extends Component {
      //     public Basic() {
      //         director.loadScene("SpineBasicExample");
      //     }
      // 
      //     public BoneFollow() {
      //         director.loadScene("SpineBoneFollowExample");
      //     }
      // 
      //     public OverLap() {
      //         director.loadScene("SpineOverlapExample");
      //     }
      // 
      //     public SkeletonSync() {
      //         director.loadScene("SpineSkeletonSyncExample");
      //     }
      // 
      //     public SlotActivator() {
      //         director.loadScene("SpineSlotActivatorExample");
      //     }
      // 
      //     public SlotColorFollow() {
      //         director.loadScene("SpineSlotColorFollowExample");
      //     }
      // 
      //     public SlotCulling() {
      //         director.loadScene("SpineSlotCullingExample");
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineExampleMenuBack.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, director, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ca460nWWplH4r1/BcDKHjlc", "SpineExampleMenuBack", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpineExampleMenuBack = exports('default', (_dec = ccclass('SpineExampleMenuBack'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineExampleMenuBack, _Component);

        function SpineExampleMenuBack() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = SpineExampleMenuBack.prototype;

        _proto.Back = function Back() {
          director.loadScene("SpineExampleMenu");
        };

        return SpineExampleMenuBack;
      }(Component)) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // const {ccclass, property} = _decorator;
      // 
      // @ccclass
      // export default class SpineExampleMenuBack extends Component {
      //     public Back() {
      //         director.loadScene("SpineExampleMenu");
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpinEft.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component, Define, Tools;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "244d3fLXCNFs6UKmTSF5rDp", "SpinEft", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpinEft = exports('default', (_dec = property({
        type: Node,
        tooltip: "一般"
      }), _dec2 = property({
        type: Node,
        tooltip: "街機"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpinEft, _Component);

        function SpinEft() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_normalNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_arcNode", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SpinEft.prototype;

        _proto.SetState = function SetState() {
          this.m_normalNode.active = Tools.Line !== Define.LineSetting.street && Tools.Line !== Define.LineSetting.americas_str;
          this.m_arcNode.active = Tools.Line === Define.LineSetting.street || Tools.Line === Define.LineSetting.americas_str;
        };

        return SpinEft;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_normalNode", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_arcNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineKit.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "eb033pmYDhAjadYFiwbi8gp", "SpineKit", undefined);

      var SpineKit = exports('default', /*#__PURE__*/function () {
        function SpineKit() {}

        SpineKit.PlayAnimation = function PlayAnimation(spine, aniName, loop, trackIdx, eventCb, needRest) {
          if (loop === void 0) {
            loop = false;
          }

          if (trackIdx === void 0) {
            trackIdx = 0;
          }

          if (needRest === void 0) {
            needRest = true;
          }

          return new Promise(function (resolve) {
            //檢查是否有mix設定
            var canClear = true;
            var state = spine.getState();

            if (state) {
              var current = state.expandToIndex(trackIdx);

              if (current) {
                var key = current.animation.name + "." + aniName;
                var value = state.data.animationToMixTime[key];
                canClear = value === undefined;
              }
            } //沒有mix設定才可清除


            if (canClear) {
              if (!spine.isAnimationCached()) {
                spine.clearTrack(trackIdx);
              }

              if (needRest) {
                spine.setToSetupPose();
              }
            }

            var trackEntry = spine.setAnimation(trackIdx, aniName, loop);

            if (trackEntry) {
              spine.setTrackEventListener(trackEntry, function (entry, event) {
                if (!trackEntry || trackEntry.animation.name != entry.animation.name) return;
                eventCb == null ? void 0 : eventCb(event.data.name);
              });
              spine.setTrackCompleteListener(trackEntry, function (entry) {
                if (!trackEntry || trackEntry.animation.name != entry.animation.name) return;
                spine.setTrackCompleteListener(trackEntry, function () {});
                spine.setTrackInterruptListener(trackEntry, function () {});
                resolve(false);
              });
              spine.setTrackInterruptListener(trackEntry, function (entry) {
                if (!trackEntry || trackEntry.animation.name != entry.animation.name) return;
                spine.setTrackCompleteListener(trackEntry, function () {});
                spine.setTrackInterruptListener(trackEntry, function () {});
                resolve(true);
              });
            } else {
              spine.setCompleteListener(function () {
                spine.setCompleteListener(null);
                spine.setInterruptListener(null);
                resolve(false);
              });
              spine.setInterruptListener(function () {
                spine.setCompleteListener(null);
                spine.setInterruptListener(null);
                resolve(true);
              });
            }
          });
        };

        return SpineKit;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StateManager.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, error;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      error = module.error;
    }],
    execute: function () {
      cclegacy._RF.push({}, "018dbfsNTRMeo7UL+ChfKJc", "StateManager", undefined);

      var StateManager = exports('StateManager', /*#__PURE__*/function () {
        function StateManager() {
          this.m_states = {};
          this.m_currState = -1;
          this.m_nextState = -1;
          this.m_toTransit = true;
        }

        var _proto = StateManager.prototype;

        _proto.Init = function Init(states) {
          this.m_states = states;
        }
        /**
         * Tick
         */
        ;

        _proto.Tick = function Tick(dt) {
          if (this.m_toTransit) {
            this.m_toTransit = false;

            if (this.m_states[this.m_nextState]) {
              var _this$m_states$this$m;

              (_this$m_states$this$m = this.m_states[this.m_currState]) == null ? void 0 : _this$m_states$this$m.OnLeave();
              this.m_currState = this.m_nextState;
              this.m_states[this.m_currState].OnEnter();
            } else {
              error("State " + this.m_nextState + " Not Exist!!!");
            }
          }

          if (this.m_states[this.m_currState]) {
            this.m_states[this.m_currState].OnProcess(dt);
          } else {
            error("State " + this.m_currState + " Not Exist!!!");
          }

          return this.m_currState;
        }
        /**
         * 設定狀態轉移
         * @param newState 下個狀態名稱
         */
        ;

        _proto.NextState = function NextState(newState) {
          this.m_nextState = newState;
          this.m_toTransit = true;
        }
        /**
         * 取得目前狀態
         * @returns 狀態機名稱
         */
        ;

        _proto.Current = function Current() {
          return this.m_currState;
        }
        /**
         * 取得狀態物件
         * @param state 要的狀態
         * @returns 回傳該狀態的物件
         */
        ;

        _proto.GetState = function GetState(state) {
          return this.m_states[state];
        };

        return StateManager;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StyleChangeManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './EnvironmentConfig.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, _decorator, SpriteFrame, SpriteAtlas, Prefab, Define, EnvironmentConfig;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      SpriteAtlas = module.SpriteAtlas;
      Prefab = module.Prefab;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, null],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5e1a0utfAhOf5jGOAiMqGtK", "StyleChangeManager", undefined);

      var FolderName = {
        Dice: "Dice"
      };
      var ccclass = _decorator.ccclass;
      var StyleChangeManager = (_dec = ccclass("StyleChangeManager"), _dec(_class = /*#__PURE__*/function () {
        function StyleChangeManager() {
          this.m_styleNo = Define.Style.ORG;
          this.m_folderName = "";
          this.m_needChange = false;
        }

        var _proto = StyleChangeManager.prototype;

        _proto.SetStyle = function SetStyle(str) {
          if (str) {
            var hundreds = str[0]; // 百位: 規模換皮參數 (骰子symbol)

            var tens = str.slice(1); // 十位個位: 時間參數 (季節skin)

            this.m_styleNo = Number(hundreds);

            switch (this.m_styleNo) {
              case Define.Style.DICE:
                this.m_folderName = FolderName.Dice;
                break;
            }
          }
        };

        _proto.SetSymbolStyleToURL = function SetSymbolStyleToURL() {
          //  等網頁組改定義後改掉
          var style = this.m_styleNo == 1 ? 2 : this.m_styleNo; // let style = this.m_styleNo ? this.m_styleNo : Define.Style.ORG;

          EnvironmentConfig.RATIO_URL = EnvironmentConfig.RATIO_URL + "&Style=" + style;
          EnvironmentConfig.HISTORY_URL = EnvironmentConfig.HISTORY_URL + "&Style=" + style;
          EnvironmentConfig.COLLECT_URL = EnvironmentConfig.COLLECT_URL + "&Style=" + style;
          EnvironmentConfig.BACKPACK_URL = EnvironmentConfig.BACKPACK_URL + "&Style=" + style;
          EnvironmentConfig.MEMBER_URL = EnvironmentConfig.MEMBER_URL + "&Style=" + style;
          EnvironmentConfig.ACTION_URL = EnvironmentConfig.ACTION_URL + "&Style=" + style;
          EnvironmentConfig.PROMOTE_ACTION_URL = EnvironmentConfig.PROMOTE_ACTION_URL + "&Style=" + style;
          EnvironmentConfig.PROMOTE_URL = EnvironmentConfig.PROMOTE_URL + "&Style=" + style;
          EnvironmentConfig.WEB_URL = EnvironmentConfig.WEB_URL + "&Style=" + style;
          EnvironmentConfig.CLOSE_URL = EnvironmentConfig.CLOSE_URL + "&Style=" + style;
        };

        _proto.CheckSetting = function CheckSetting(styleSetting) {
          switch (this.m_styleNo) {
            case Define.Style.DICE:
              this.m_needChange = styleSetting.HasDice;

              if (this.m_needChange) {
                this.SetSymbolStyleToURL();
              }

              break;
          }
        };

        _proto.CheckScenePath = function CheckScenePath(orgPath) {
          if (this.m_folderName !== "" && this.m_needChange) {
            return "/" + this.m_folderName + orgPath;
          } else {
            return orgPath;
          }
        };

        _proto.LoadNewIntro = function LoadNewIntro(num, endCb) {
          var _this = this;

          var path = "/" + this.m_folderName + "/Prefab/Intro/Intro_Cell_0";
          var prefabs = [];

          var _loop = function _loop(i) {
            _this.Load(path + (i + 1).toString(), Prefab, function (asset) {
              prefabs[i] = asset;
              var isComplete = true;

              for (var j = 0; j < num; j++) {
                if (!prefabs[j]) {
                  isComplete = false;
                  break;
                }
              }

              if (isComplete) {
                endCb == null ? void 0 : endCb(prefabs);
              }
            });
          };

          for (var i = 0; i < num; i++) {
            _loop(i);
          }
        };

        _proto.LoadNewLogo = function LoadNewLogo(isSingle, endCb) {
          var path = "/" + this.m_folderName + "/Text/logo/logo";
          this.Load(path, isSingle ? SpriteFrame : SpriteAtlas, function (asset) {
            endCb == null ? void 0 : endCb(asset);
          });
        }
        /**
         * 載入新樣式資源
         * @param path 檔案原始路徑
         * @param type 檔案類型
         * @param cb 完成後把原資料取代
         */
        ;

        _proto.LoadRes = function LoadRes(path, type, cb) {
          this.Load("/" + this.m_folderName + "/" + path, type, cb);
        };

        _proto.Load = function Load(path, type, cb) {
          Define.GameBundle.load(path, type, function (err, asset) {
            if (err) {
              console.error(err);
              return;
            }

            cb == null ? void 0 : cb(asset);
          });
        };

        _createClass(StyleChangeManager, [{
          key: "StyleNo",
          get: function get() {
            return this.m_styleNo;
          }
        }, {
          key: "FolderName",
          get: function get() {
            return this.m_folderName;
          }
        }, {
          key: "NeedChange",
          get: function get() {
            return this.m_needChange;
          }
        }]);

        return StyleChangeManager;
      }()) || _class);
      var styleChangeManager = exports('styleChangeManager', new StyleChangeManager());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SwipeManager.ts", ['cc', './iOSDevice.ts', './LocaleStringManager.ts', './Define.ts', './EnvironmentConfig.ts', './AppManager.ts', './env'], function (exports) {
  'use strict';

  var cclegacy, sys, log, Node, UITransform, Size, Button, size, GetiOSDevice, LocaleStringManager, Define, EnvironmentConfig, AppManager, PREVIEW;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      log = module.log;
      Node = module.Node;
      UITransform = module.UITransform;
      Size = module.Size;
      Button = module.Button;
      size = module.size;
    }, function (module) {
      GetiOSDevice = module.GetiOSDevice;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      AppManager = module.default;
    }, function (module) {
      PREVIEW = module.PREVIEW;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bc1c4le62pEKraStRnK7d5L", "SwipeManager", undefined);

      var SwipeManager = exports('default', /*#__PURE__*/function () {
        function SwipeManager() {
          this.m_mask = null;
          this.m_webView = null;
          this.m_oldSize = null;
          this.m_isScrolling = false;
          this.m_scrollInterval = void 0;
          this.m_scrollTimeOut = void 0;
          this.m_isiOS13 = void 0;
          this.maskCloseCb = null;

          if (SwipeManager._instance) {
            throw new Error("Error: Instantiation failed: Use SwipeManager.GetInstance() instead of new.");
          }

          SwipeManager._instance = this;

          if (!sys.isNative) {
            var ua = navigator.userAgent.toLowerCase();
            var ver = ua.match(/cpu iphone os (.*?) like mac os/); // 看看484 ipad

            ver = ver == null ? ua.match(/cpu os (.*?) like mac os/) : ver;

            if (ver && Number(ver[1].replace(/_/g, ".")) < 13) {
              var _ua = navigator.userAgent.toLowerCase();

              var _ver = _ua.match(/cpu iphone os (.*?) like mac os/); // 看看484 ipad


              _ver = _ver == null ? _ua.match(/cpu os (.*?) like mac os/) : _ver;

              if (!_ver || Number(_ver[1].replace(/_/g, ".")) < 13) {
                this.m_isiOS13 = false;
              } else {
                this.m_isiOS13 = true;
              }
            } else if (ver == null && navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1 && !window.MSStream) {
              // ipad iOS 13以上判斷方法
              this.m_isiOS13 = true;
            } else if (ver == null) {
              this.m_isiOS13 = false;
            } else {
              this.m_isiOS13 = true;
            }
          }
        }

        SwipeManager.GetInstance = function GetInstance() {
          return SwipeManager._instance;
        };

        var _proto = SwipeManager.prototype;

        _proto.OpenMask = function OpenMask(canvas, bottomBar, gameId, cb) {
          var _this = this;

          if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST || PREVIEW) {
            return;
          }

          if (sys.isNative || AppManager.LobbyData) {
            return;
          }

          if (cb) this.maskCloseCb = cb;
          var mask_close = document.getElementById('mask_close'); //'เมื่อไม่สามารถทำการสไลด์ได้<br/>กรุณาคลิกที่นี่เพื่อเข้าสู่เกม';
          //'เมื่อไม่สามารถ<br/>ทำการสไลด์ได้<br/>กรุณาคลิกที่นี่เพื่อ<br/>เข้าสู่เกม';

          if (LocaleStringManager.CurrLang === Define.Lang.CN) {
            mask_close.innerHTML = '滑动无效时,<br/>请点击此处进入游戏。';
          } else if (LocaleStringManager.CurrLang === Define.Lang.ID) {
            mask_close.innerHTML = 'Ketika scroll tidak valid,<br/>silakan tekan ini untuk memasuki game';
          } else if (LocaleStringManager.CurrLang === Define.Lang.VN) {
            mask_close.innerHTML = 'Nếu không thể thao tác,<br/>hãy chạm vào đây để vào game';
          } else if (LocaleStringManager.CurrLang === Define.Lang.TH) {
            mask_close.innerHTML = 'เมื่อไม่สามารถทำการสไลด์ได้<br/>กรุณาคลิกที่นี่เพื่อเข้าสู่เกม';
          } else if (LocaleStringManager.CurrLang === Define.Lang.HI) {
            mask_close.innerHTML = 'यदि स्वाइप करने से काम नहीं हो रहा है,<br/>तो गेम में प्रवेश करने के लिए यहाँ छूएँ।';
          } else if (LocaleStringManager.CurrLang === Define.Lang.TA) {
            mask_close.innerHTML = 'ஸ்வைப் செய்வது வேலை செய்யவில்லை என்றால் கேமில் நுழைய இங்கே தொடவும்';
          } else {
            mask_close.innerHTML = 'If sliding is invalid,<br/>click here to enter the game.';
          }

          if (mask_close && mask_close.parentElement && !mask_close.parentElement.onclick) {
            mask_close.parentElement.onclick = function () {
              var mask = document.getElementById('mask');

              if (mask) {
                mask.style.visibility = 'hidden';
                _this.m_mask.active = false;
                if (_this.maskCloseCb) _this.maskCloseCb();
              }
            };
          } //     //baidu
          //     var isBaidu = navigator.userAgent.match( 'baidu' ) != null;
          //     //QQ browser
          //     var isQQ = navigator.userAgent.match( 'MQQBrowser' ) != null;
          //     //Firefox Browser
          //     var isFirefox = navigator.userAgent.match( 'FxiOS' ) != null;
          //     // UC Browser
          //     var isUC = navigator.userAgent.indexOf( "UCBrowser" ) != -1;
          //     // Chrome 1+
          //     var isChrome = navigator.userAgent.match( 'CriOS' ) != null;
          //     //xiaomi
          //     var isXiaomi = navigator.userAgent.match( 'XiaoMi' ) != null;
          //     //Edge
          //     var isEdge = navigator.userAgent.match( 'Edge' ) != null;
          //     // Safari 3.0+ "[object HTMLElementConstructor]"
          //     var isSafari = navigator.userAgent.match( 'Safari' ) && !isBaidu && !isFirefox && !isQQ && !isChrome && !isUC && !isXiaomi && !isEdge;


          this.m_webView = bottomBar.WebView;

          if (sys.os == sys.OS.IOS && this.IsWebview() == false) //&& this.IsChrome() == true )
            {
              document.getElementById("mask").style.display = "inline";

              if (!this.m_mask) {
                this.AddGameViewMask(canvas);
              } // if ( this.IsChrome() == true )
              // {


              var device = GetiOSDevice();

              if (device != null) {
                this.ShowMask();
                var portraitHeight = (screen.height - device.statusHeight - device.homeHeight - 20) * 0.99;
                var landscapeHeight = (screen.width - device.statusHeight - 20) * 0.99;

                document.body.onresize = function () {
                  var height = 0;

                  if (window.innerHeight >= window.innerWidth) {
                    height = portraitHeight;
                  } else {
                    height = landscapeHeight;
                  }

                  if (height <= window.innerHeight) {
                    _this.HideMask();
                  } else {
                    _this.ShowMask();
                  }
                }; // if ( this.m_isiOS13 )
                // {


                window.addEventListener('scroll', function (e) {
                  _this.m_isScrolling = true;
                  log("scrolling");
                }, {
                  capture: false,
                  passive: true
                });
                document.getElementById("mask").addEventListener("touchend", function () {
                  log("end", _this.m_isScrolling);

                  if (_this.m_scrollTimeOut) {
                    clearTimeout(_this.m_scrollTimeOut);
                  }

                  _this.m_scrollTimeOut = setTimeout(function () {
                    window.scrollTo(0, 0);
                    clearInterval(_this.m_scrollInterval);
                  }, 250);
                  var mask = document.getElementById("mask");

                  if (mask && mask.style.visibility == "hidden") {
                    _this.m_mask.active = false;
                  }
                }); // }
              } else {
                this.HideMask();
              } // }
              // else if ( isSafari )
              // {
              //     this.ShowMask();
              //     document.body.onresize = () =>
              //     {
              //         if ( document.getElementById( "bar" ).clientHeight == window.innerHeight )
              //         {
              //             this.HideMask();
              //         }
              //         else
              //         {
              //             this.ShowMask();
              //         }
              //     }
              // }
              // else
              // {
              //     this.HideMask();
              // }

            } else {
            if (this.maskCloseCb) this.maskCloseCb();
          }
        };

        _proto.IsMaskOpen = function IsMaskOpen() {
          return this.m_mask && this.m_mask.active;
        };

        _proto.AddGameViewMask = function AddGameViewMask(canvas) {
          var _this2 = this;

          if (sys.isNative) {
            return;
          } // webView開啟時不開啟提示


          if (this.m_webView && this.m_webView.active) {
            return;
          }

          this.m_mask = new Node();
          this.m_mask.addComponent(UITransform).setContentSize(new Size(1136, 1136));
          this.m_mask.addComponent(Button);
          canvas.addChild(this.m_mask); //檔全螢幕後會觸發到其他元件的touch事件

          this.m_mask.on(Node.EventType.TOUCH_END, function (event) {
            var mask = document.getElementById("mask");

            if (mask && mask.style.visibility == "hidden") {
              _this2.m_mask.active = false;
            }
          });
        }
        /**
         * 開啟WebView前先記錄目前的大小，以便之後有得判斷
         */
        ;

        _proto.WebViewShow = function WebViewShow() {
          if (sys.isNative) {
            return;
          }

          this.m_oldSize = size(window.innerWidth, window.innerHeight);
        };

        _proto.Process = function Process() {
          if (sys.isNative) {
            return;
          } //為iOS且WebView是關閉且有舊的畫面大小資訊


          if (sys.OS.IOS && this.m_webView && !this.m_webView.active && this.m_oldSize && this.m_mask) {
            var _size = new Size(window.innerWidth, window.innerHeight); //高度或寬度小於開啟WebView之前的大小時


            if (this.m_oldSize.width > _size.width || this.m_oldSize.height > _size.height) {
              //如果上滑提示沒有出現
              if (!this.m_mask.active && document.getElementById("mask").style.visibility == "hidden") {
                this.ShowMask();
              }
            } else {
              this.HideMask();
              this.m_oldSize = null;
            }
          }
        };

        _proto.ShowMask = function ShowMask() {
          var _this3 = this;

          if (sys.isNative) {
            return;
          } // webView開啟時不開啟提示


          if (this.m_webView && this.m_webView.active) {
            return;
          }

          if (sys.isNative) {
            return;
          }

          document.getElementById("mask").style.visibility = "visible";

          if (this.m_mask) {
            this.m_mask.active = true;
          }

          window.scrollTo(0, 0);

          if (this.m_isiOS13) {
            if (this.m_scrollInterval) {
              clearInterval(this.m_scrollInterval);
            }

            this.m_scrollInterval = setInterval(function () {
              if (_this3.m_isScrolling) {
                _this3.m_isScrolling = false;

                if (_this3.m_scrollTimeOut) {
                  clearTimeout(_this3.m_scrollTimeOut);
                }

                _this3.m_scrollTimeOut = setTimeout(function () {
                  window.scrollTo(0, 0);
                  clearInterval(_this3.m_scrollInterval);
                  _this3.m_scrollInterval = null;
                }, 250);
              }
            }, 250);
          }
        };

        _proto.HideMask = function HideMask() {
          if (sys.isNative) {
            return;
          }

          if (document.getElementById("mask")) {
            document.getElementById("mask").style.visibility = "hidden";
            if (this.maskCloseCb) this.maskCloseCb();
          } // 確保有被關掉
          // setTimeout( () =>
          // {
          //     if ( this.m_mask.active == true )
          //     {
          //         this.m_mask.active = false;
          //     }
          // }, 3 );

        };

        _proto.IsWebview = function IsWebview() {
          if (sys.isNative) {
            return false;
          }

          var useragent = navigator.userAgent;
          var rules = ['WebView', '(iPhone|iPod|iPad)(?!.*Safari\/)', 'Android.*(wv|\.0\.0\.0)'];
          var regex = new RegExp("(" + rules.join('|') + ")", 'ig');
          return Boolean(useragent.match(regex));
        };

        _proto.IsChrome = function IsChrome() {
          if (sys.isNative) {
            return false;
          }

          return /CriOS/.test(navigator.userAgent);
        };

        return SwipeManager;
      }());
      SwipeManager._instance = new SwipeManager();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TiggerRank.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConnectionManager.ts', './Request.ts', './Define.ts', './EnvironmentConfig.ts', './LocaleStringManager.ts', './Tools.ts', './RankItem.ts', './longhu.mjs_cjs=&original=.js', './NotificationManager.ts', './longhu.js'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, Label, error, log, Animation, instantiate, js, Widget, Component, ConnectionManager, Request, DEFAULT_REQUEST_OPTIONS, Define, EnvironmentConfig, LocaleStringManager, Tools, RankItem, NotificationManager, _cjsExports;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Label = module.Label;
      error = module.error;
      log = module.log;
      Animation = module.Animation;
      instantiate = module.instantiate;
      js = module.js;
      Widget = module.Widget;
      Component = module.Component;
    }, function (module) {
      ConnectionManager = module.default;
    }, function (module) {
      Request = module.Request;
      DEFAULT_REQUEST_OPTIONS = module.DEFAULT_REQUEST_OPTIONS;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      RankItem = module.default;
    }, null, function (module) {
      NotificationManager = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16;

      cclegacy._RF.push({}, "f1b4dTAFfhB6rzMxcWd/z7I", "TiggerRank", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TiggerRank = exports('default', (_dec = property({
        type: Prefab,
        tooltip: "值版prefab"
      }), _dec2 = property({
        type: Prefab,
        tooltip: "橫版prefab"
      }), _dec3 = property({
        type: Node,
        tooltip: "橫版根結點"
      }), _dec4 = property({
        type: Node,
        tooltip: "直版根結點"
      }), _dec5 = property({
        type: Node,
        tooltip: "橫版資料"
      }), _dec6 = property({
        type: Node,
        tooltip: "直版資料"
      }), _dec7 = property({
        type: RankItem,
        tooltip: "橫版自己排名"
      }), _dec8 = property({
        type: RankItem,
        tooltip: "直版自己排名"
      }), _dec9 = property({
        type: Label,
        tooltip: "排行"
      }), _dec10 = property({
        type: Label,
        tooltip: "名稱"
      }), _dec11 = property({
        type: Label,
        tooltip: "倍率"
      }), _dec12 = property({
        type: Label,
        tooltip: "時間"
      }), _dec13 = property({
        type: Label,
        tooltip: "重置提示"
      }), _dec14 = property({
        type: Label,
        tooltip: "更新提示"
      }), _dec15 = property({
        type: Node,
        tooltip: "內頁按鈕"
      }), _dec16 = property({
        type: Label,
        tooltip: "內頁按鈕文字"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TiggerRank, _Component);

        function TiggerRank() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_itemPrefabS", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_itemPrefabL", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rootNodeL", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rootNodeS", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentNodeL", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_contentNodeS", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_myInfoL", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_myInfoS", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_rankLabels", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_nameLabels", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_oddsLabels", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_timeLabels", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_resetLabels", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_refreshLabels", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_inPageBtns", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_inPageBtnsTxt", _descriptor16, _assertThisInitialized(_this));

          _this.m_url = null;
          _this.m_addPageCb = null;
          _this.m_removePageCb = null;
          _this.m_isFirst = true;
          _this.m_checkTime = 0;
          _this.m_nowPage = 0;
          _this.m_have2Page = false;
          _this.m_isShowNickname = false;
          _this.m_changeTime = 0;
          _this.m_data = null;
          _this.m_newData = null;
          _this.m_lostGameCount = 0;
          _this.m_rankItemsL = [];
          _this.m_rankItemsS = [];
          _this.m_isLandscape = false;
          return _this;
        }

        var _proto = TiggerRank.prototype;

        _proto.Init = function Init(isLandscape, addPageCb, removePageCb) {
          var _this2 = this; // //  測試用網址
          // if ( EnvironmentConfig.ENV_TYPE === Define.EVN.TEST )
          // {
          //     EnvironmentConfig.SERVICE_URL = "https://test-wbgame.jlfafafa3.com/smallicon/"
          // }


          this.m_isLandscape = isLandscape;
          this.m_url = EnvironmentConfig.SERVICE_URL + "longhu/GetLonghuList?apiid=" + Define.API_ID + "&accountid=" + Define.AID + "&subagentcode=" + Define.SUB_AGENT_CODE;
          this.m_addPageCb = addPageCb;
          this.m_removePageCb = removePageCb; // this.ReqData();

          this.NewReqData();

          if (this.m_inPageBtns[0]) {
            this.SetInPageBtnOn(0);
            this.m_inPageBtns[0].on(Node.EventType.TOUCH_END, function (event) {
              error('rankInPageBtns 0');
              _this2.m_changeTime = 5;

              _this2.SetInPageBtnOn(0);

              _this2.SetData(0);

              _this2.SetOddTxt();
            });
            this.m_inPageBtns[1].on(Node.EventType.TOUCH_END, function (event) {
              error('rankInPageBtns 1');
              _this2.m_changeTime = 5;

              _this2.SetInPageBtnOn(1);

              _this2.SetData(1);

              _this2.SetOddTxt();
            });
          }
        };

        _proto.update = function update(dt) {
          if (this.m_checkTime > 0) {
            this.m_checkTime -= dt;

            if (this.m_checkTime <= 0) {
              // this.ReqData();
              this.NewReqData();
            }
          }

          if (this.m_changeTime > 0) {
            this.m_changeTime -= dt;

            if (this.m_changeTime <= 0) {
              this.m_isShowNickname = !this.m_isShowNickname;
              this.CheckGameIcon();
              this.m_changeTime = 5;
            }
          }
        };

        _proto.SetInPageBtnOn = function SetInPageBtnOn(page) {
          switch (page) {
            case 0:
              this.m_nowPage = 0;
              this.m_inPageBtns[0].getChildByName("On").active = true;
              this.m_inPageBtns[1].getChildByName("On").active = false;
              break;

            case 1:
              this.m_nowPage = 1;
              this.m_inPageBtns[0].getChildByName("On").active = false;
              this.m_inPageBtns[1].getChildByName("On").active = true;
              break;

            default:
              this.m_nowPage = 0;
              this.m_inPageBtns[0].getChildByName("On").active = true;
              this.m_inPageBtns[1].getChildByName("On").active = false;
              break;
          }
        };

        _proto.SetOddTxt = function SetOddTxt() {
          for (var i = 0; i < this.m_oddsLabels.length; i++) {
            if (this.m_nowPage == 1) {
              this.m_oddsLabels[i].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.FREEWINCASH_WIN);
            } else {
              this.m_oddsLabels[i].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.TIGGER_RANK_ODDS);
            }

            Tools.SetFont(this.m_oddsLabels[i]);
          }
        };

        _proto.SetTxt = function SetTxt() {
          if (this.m_inPageBtnsTxt[0]) {
            this.m_inPageBtnsTxt[0].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_TYPE + "4");
            this.m_inPageBtnsTxt[1].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_TYPE + "4");
            this.m_inPageBtnsTxt[2].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_TYPE + "5");
            this.m_inPageBtnsTxt[3].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.RANK_TYPE + "5");
          }

          for (var i = 0; i < this.m_refreshLabels.length; i++) {
            this.m_refreshLabels[i].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.TIGGER_RANK_REFRESH); // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     if ( LocaleStringManager.CurrLang === Define.Lang.MM )
            //     {
            //         this.m_refreshLabels[ i ].font = Define.DefaultFont;
            //     }
            // } else
            // {

            Tools.SetFont(this.m_refreshLabels[i]); // }
          }

          for (var _i = 0; _i < this.m_rankLabels.length; _i++) {
            this.m_rankLabels[_i].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.TIGGER_RANK_RANK); // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     if ( LocaleStringManager.CurrLang === Define.Lang.MM )
            //     {
            //         this.m_rankLabels[ i ].font = Define.DefaultFont;
            //     }
            // } else
            // {

            Tools.SetFont(this.m_rankLabels[_i]); // }
          }

          for (var _i2 = 0; _i2 < this.m_nameLabels.length; _i2++) {
            this.m_nameLabels[_i2].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.TIGGER_RANK_NAME); // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     if ( LocaleStringManager.CurrLang === Define.Lang.MM )
            //     {
            //         this.m_nameLabels[ i ].font = Define.DefaultFont;
            //     }
            // } else
            // {

            Tools.SetFont(this.m_nameLabels[_i2]); // }
          }

          for (var _i3 = 0; _i3 < this.m_oddsLabels.length; _i3++) {
            this.m_oddsLabels[_i3].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.TIGGER_RANK_ODDS); // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     if ( LocaleStringManager.CurrLang === Define.Lang.MM )
            //     {
            //         this.m_oddsLabels[ i ].font = Define.DefaultFont;
            //     }
            // } else
            // {

            Tools.SetFont(this.m_oddsLabels[_i3]); // }
          }

          for (var _i4 = 0; _i4 < this.m_timeLabels.length; _i4++) {
            this.m_timeLabels[_i4].string = LocaleStringManager.GetInstance().GetString(Define.StringKey.TIGGER_RANK_TIME); // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     if ( LocaleStringManager.CurrLang === Define.Lang.MM )
            //     {
            //         this.m_timeLabels[ i ].font = Define.DefaultFont;
            //     }
            // } else
            // {

            Tools.SetFont(this.m_timeLabels[_i4]); // }
          }
        };

        _proto.NewReqData = function NewReqData() {
          var _this3 = this;

          if (Define.APP) {
            var data = new _cjsExports.longhuProto.GetLonghuListRequest();
            data.accountID = Number(Define.APP.GetAID());
            data.apiID = Number(Define.APP.GetApiID());
            data.subAgentCode = Define.SUB_AGENT_CODE;
            data.GameID = Number(Define.NOW_GAME_ID); // let req = new LonghuListReq();
            // req.reqData = longhuProto.longhuProto.GetLonghuListRequest.encode( data ).finish();

            var body = _cjsExports.longhuProto.GetLonghuListRequest.encode(data).finish();

            var url = EnvironmentConfig.SERVICE_URL + "longhu/GetLonghuListV2";
            Request(ConnectionManager.HTTP_METHOD.TYPE_POST, url, {}, body, DEFAULT_REQUEST_OPTIONS, true).then(function (res) {
              //  測試用網址
              if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
                res.ok = true;
              }

              log("ReqData res.ok:", res.ok);

              if (res.ok) {
                //  測試用網址
                if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) ;else {
                  _this3.OnRecvAck(res.protoData);
                }
              }
            });
          }
        };

        _proto.OnRecvAck = function OnRecvAck(data) {
          var bytes = new Uint8Array(data);

          var info = _cjsExports.longhuProto.LonghuListResponse.decode(bytes); // console.error( 'tigerRank OnRecvAck info', info )


          this.m_newData = {
            ErrorCode: info.errorCode ? info.errorCode : 0,
            Message: info.message ? info.message : "",
            Data: {
              Win: info.data ? info.data.win : null,
              Odd: info.data ? info.data.odd : null
            },
            ResetTime: Number(info.resetTime)
          }; // console.error( 'tigerRank OnRecvAck newData', this.m_newData )

          if (this.m_newData.Data.Win && this.m_newData.Data.Win.playerList.length > 0 && this.m_newData.Data.Odd && this.m_newData.Data.Odd.playerList.length > 0) {
            this.m_have2Page = true;
          }

          if (this.m_newData.ErrorCode == 0) {
            this.CheckGameIcon();
            var nowTime = new Date();
            var nextDay = new Date(nowTime.getFullYear(), nowTime.getMonth(), nowTime.getDate(), nowTime.getHours() + 1, 5);
            this.m_checkTime = nextDay.getTime() - nowTime.getTime();
          } else {
            if (!this.m_isFirst) {
              this.m_removePageCb && this.m_removePageCb();
            }
          }
        };

        _proto.ReqData = function ReqData() {
          var _this4 = this;

          if (this.m_url) {
            Request(ConnectionManager.HTTP_METHOD.TYPE_GET, this.m_url).then(function (res) {
              //  測試用網址
              if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
                res.ok = true;
              }

              log("ReqData res.ok:", res.ok);

              if (res.ok) {
                //  測試用網址
                if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) ;else {
                  _this4.m_data = JSON.parse(res.data);
                }

                if (_this4.m_data.ErrorCode === 0) {
                  _this4.CheckGameIcon();

                  var nowTime = new Date();
                  var nextDay = new Date(nowTime.getFullYear(), nowTime.getMonth(), nowTime.getDate(), nowTime.getHours() + 1, 5);
                  _this4.m_checkTime = nextDay.getTime() - nowTime.getTime();
                } else {
                  if (!_this4.m_isFirst) {
                    _this4.m_removePageCb && _this4.m_removePageCb();
                  }
                }
              }
            });
          }
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          this.m_isLandscape = isLandscape; // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     if ( isLandscape )
          //     {
          //         this.m_rootNodeL.active = true;
          //         this.m_rootNodeS.active = false;
          //     }
          //     else
          //     {
          //         this.m_rootNodeL.active = false;
          //         this.m_rootNodeS.active = true;
          //     }
          // } else
          // {

          var animNameL = "Clip_WinMore_Top50Page_Landscape";
          var animNameS = "Clip_WinMore_Top50Page_Portrait";

          if (this.m_have2Page && !Tools.IsTada) {
            animNameL = "Clip_WinMore_Top50Page_Landscape_Longhu";
            animNameS = "Clip_WinMore_Top50Page_Portrait_Longhu";
          }

          if (isLandscape) {
            this.node.getComponent(Animation).play(animNameL);
          } else {
            this.node.getComponent(Animation).play(animNameS);
          }

          for (var i = 0; i < this.m_rankItemsL.length; i++) // 因為America 直橫版共用同一個
          {
            if (isLandscape) {
              this.m_rankItemsL[i].PlayerAnimate.play("Clip_WinMore_Top50Cell_Landscape");
            } else {
              this.m_rankItemsL[i].PlayerAnimate.play("Clip_WinMore_Top50Cell_Portrait");
            }
          } // }

        };

        _proto.CheckGameIcon = function CheckGameIcon() {
          var _this5 = this;

          var gameList = {}; // for ( let i = 0; i < this.m_data.Data.List.length; i++ )
          // {
          //     gameList[ this.m_data.Data.List[ i ].GameID ] = true;
          // }
          // if ( this.m_data.Data.User.No !== 0 )
          // {
          //     gameList[ this.m_data.Data.User.GameID ] = true;
          // }

          if (this.m_newData.Data.Win) {
            for (var i = 0; i < this.m_newData.Data.Win.playerList.length; i++) {
              gameList[this.m_newData.Data.Win.playerList[i].gameID] = true;
            }
          }

          if (this.m_newData.Data.Odd) {
            for (var _i5 = 0; _i5 < this.m_newData.Data.Odd.playerList.length; _i5++) {
              gameList[this.m_newData.Data.Odd.playerList[_i5].gameID] = true;
            }
          }

          if (this.m_newData.Data.Win && this.m_newData.Data.Win.player.no !== 0) {
            gameList[this.m_newData.Data.Win.player.gameID] = true;
          } else if (this.m_newData.Data.Odd && this.m_newData.Data.Odd.player.no !== 0) {
            gameList[this.m_newData.Data.Odd.player.gameID] = true;
          }

          for (var _key2 in gameList) {
            if (Object.prototype.hasOwnProperty.call(gameList, _key2)) {
              var element = gameList[_key2];

              if (element && !Tools.Icons[_key2]) {
                this.m_lostGameCount++;
                Tools.LoadIcon(LocaleStringManager.CurrLang, Number(_key2), function () {
                  _this5.m_lostGameCount--;

                  if (_this5.m_lostGameCount === 0) {
                    _this5.CheckGameIcon();
                  }
                });
              }
            }
          }

          if (this.m_lostGameCount === 0) {
            this.SetData(this.m_nowPage);
          }
        };

        _proto.SetData = function SetData(page) {
          if (page === void 0) {
            page = 0;
          } //有error就不開了
          // if ( this.m_data.ErrorCode !== 0 )


          if (this.m_newData.ErrorCode) {
            return;
          }

          var listData = this.m_newData.Data.Odd;

          if (page == 1 && this.m_newData.Data.Win) {
            listData = this.m_newData.Data.Win;
          } // for ( let i = 0; i < this.m_data.Data.List.length; i++ )


          if (listData) {
            for (var i = 0; i < listData.playerList.length; i++) {
              //橫版
              var rankItemL = this.m_rankItemsL[i];

              if (!rankItemL) {
                var node = instantiate(this.m_itemPrefabL);
                this.m_contentNodeL.addChild(node);
                rankItemL = node.getComponent(RankItem);
                this.m_rankItemsL.push(rankItemL); // if ( Tools.Line === Define.LineSetting.americas ||
                //     Tools.Line === Define.LineSetting.americas_str )  // 因為America 直橫版共用同一個
                // {
                // TADA 版本靠動畫做直橫轉換

                if (this.m_isLandscape) {
                  rankItemL.PlayerAnimate.play("Clip_WinMore_Top50Cell_Landscape");
                } else {
                  rankItemL.PlayerAnimate.play("Clip_WinMore_Top50Cell_Portrait");
                } // }

              } // this.SetRankItem( this.m_data.Data.List[ i ], rankItemL, true );


              this.SetRankItem(this.SetListData(listData.playerList[i]), rankItemL, true); // if ( Tools.Line !== Define.LineSetting.americas &&
              //     Tools.Line !== Define.LineSetting.americas_str )  // 因為America 直橫版共用同一個
              // {
              //     //直版
              //     let rankItemS: RankItem = this.m_rankItemsS[ i ];
              //     if ( !rankItemS )
              //     {
              //         let node = cc.instantiate( this.m_itemPrefabS );
              //         this.m_contentNodeS.addChild( node );
              //         rankItemS = node.getComponent( RankItem );
              //         this.m_rankItemsS.push( rankItemS );
              //     }
              //     this.SetRankItem( this.m_data.Data.List[ i ], rankItemS, false );
              // }
            } // this.SetRankItem( this.m_data.Data.User, this.m_myInfoL, true, true );


            this.SetRankItem(this.SetListData(listData.player), this.m_myInfoL, true, true); // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     this.SetRankItem( this.m_data.Data.User, this.m_myInfoS, false, true );
            // }
          } // let resetDay: Date = new Date( this.m_data.ResetTime * 1000 );


          var resetDay = new Date(this.m_newData.ResetTime * 1000);
          var str = LocaleStringManager.GetInstance().GetString(Define.StringKey.TIGGER_RANK_RESET);
          var hour = resetDay.getHours() >= 10 ? resetDay.getHours() : "0" + resetDay.getHours();
          var min = resetDay.getMinutes() >= 10 ? resetDay.getMinutes() : "0" + resetDay.getMinutes();
          str = js.formatStr(str, hour + ":" + min);

          for (var _i6 = 0; _i6 < this.m_resetLabels.length; _i6++) {
            this.m_resetLabels[_i6].string = str; // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     if ( LocaleStringManager.CurrLang === Define.Lang.MM )
            //     {
            //         this.m_resetLabels[ i ].font = Define.DefaultFont;
            //     }
            // } else
            // {

            Tools.SetFont(this.m_resetLabels[_i6]); // }
          }

          if (this.m_isFirst && listData) {
            this.m_isFirst = false;
            this.m_changeTime = 5;
            this.m_addPageCb && this.m_addPageCb();
            this.OnRotation(this.m_isLandscape);
            NotificationManager.GetInstance().UpdateLonghuNotify();
          }
        };

        _proto.SetListData = function SetListData(list) {
          var data = {
            No: list.no,
            Account: list.account,
            Nickname: list.nickname,
            GameID: list.gameID,
            Win: list.win,
            Odd: list.odd,
            CreateTime: Number(list.createTime)
          };
          return data;
        };

        _proto.SetRankItem = function SetRankItem(info, item, isLandscape, isSelf) {
          if (isSelf === void 0) {
            isSelf = false;
          }

          if (this.m_isShowNickname) {
            var nickName = info.Nickname;

            if (nickName.length > 9) {
              var str = nickName.slice(-8);
              nickName = "*" + str;
            }

            item.NameLabel.string = nickName !== "" ? nickName : info.Account; // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     if ( LocaleStringManager.CurrLang === Define.Lang.MM )
            //     {
            //         item.NameLabel.font = Define.DefaultFont;
            //     }
            // } else
            // {

            Tools.SetFont(item.NameLabel); // }
          } else {
            Tools.SetFont(item.NameLabel);
            item.NameLabel.string = info.Account;
          }

          if (isSelf && (info.No > 50 || info.No === 0)) {
            item.RankLabel.string = "50+"; // item.IconSprite.node.active = false;

            item.GameIcon.node.active = false;
            item.OddsLabel.string = LocaleStringManager.GetInstance().GetString(Define.StringKey.TIGGER_RANK_OUTSIDE); // if ( Tools.Line !== Define.LineSetting.americas &&
            //     Tools.Line !== Define.LineSetting.americas_str )
            // {
            //     if ( LocaleStringManager.CurrLang === Define.Lang.MM )
            //     {
            //         item.OddsLabel.font = Define.DefaultFont;
            //     }
            // } else
            // {

            Tools.SetFont(item.OddsLabel); // }

            item.TimeLabel.string = "-";

            if (item.OddsLabel.node.getComponent(Widget)) {
              item.OddsLabel.node.getComponent(Widget).enabled = false;
            } // item.OddsLabel.node.getComponent( UITransform ).setAnchorPoint( 0.5, 0.5 );
            // item.OddsLabel.node.setPosition( 0, 0 );


            item.InRankNode.active = false;
            item.OutRankNode.active = true;
          } else {
            item.RankLabel.string = info.No.toString(); // item.IconSprite.node.active = true;;
            // item.IconSprite.spriteFrame = Tools.Icons[ info.GameID ];

            item.GameIcon.node.active = true;
            item.GameIcon.SetGameIcon(Tools.Icons[info.GameID]);

            if (info.Odd) {
              item.OddsLabel.string = info.Odd.toString() + "x";
            } else if (info.Win) {
              item.OddsLabel.string = info.Win.toString();
            } //server只給到秒


            var day = new Date(info.CreateTime * 1000);
            var date = day.getDate() >= 10 ? day.getDate() : "0" + day.getDate();
            var month = day.getMonth() + 1 >= 10 ? day.getMonth() + 1 : "0" + (day.getMonth() + 1); // let hour = day.getHours() >= 10 ? day.getHours() : "0" + day.getHours();
            // let minute = day.getMinutes() >= 10 ? day.getMinutes() : "0" + day.getMinutes();

            if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
              // item.TimeLabel.string = month + "/" + date +
              //     breakStr + hour + ":" + minute;
              item.TimeLabel.string = month + "/" + date;
            } else {
              // item.TimeLabel.string = date + "/" + month +
              //     breakStr + hour + ":" + minute;
              item.TimeLabel.string = date + "/" + month;
            }

            if (item.OddsLabel.node.getComponent(Widget)) {
              item.OddsLabel.node.getComponent(Widget).enabled = true;
            }

            item.GameId = info.GameID;

            if (
            /*!isSelf &&*/
            item.GoToBtn && !Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.AllChangeGameImport)) {
              item.GoToBtn.active = true;
            } // item.OddsLabel.node.getComponent( UITransform ).setAnchorPoint( 1, 0.5 );


            if (isSelf && item.InRankNode && item.OutRankNode) {
              // 最下面顯示自己的資訊才要設定
              item.InRankNode.active = true;
              item.OutRankNode.active = false;
            }
          }

          Tools.SetFont(item.RankLabel);
          Tools.SetFont(item.TimeLabel);
          Tools.SetFont(item.OddsLabel);
        };

        return TiggerRank;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_itemPrefabS", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_itemPrefabL", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_rootNodeL", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_rootNodeS", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_contentNodeL", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_contentNodeS", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_myInfoL", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_myInfoS", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_rankLabels", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_nameLabels", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_oddsLabels", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_timeLabels", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_resetLabels", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_refreshLabels", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_inPageBtns", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_inPageBtnsTxt", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TimeBool.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "34d81gQVlJAaJJHg6IUTjH6", "TimeBool", undefined);

      var MAX_DEFINE;

      (function (MAX_DEFINE) {
        MAX_DEFINE[MAX_DEFINE["MAX_UINT"] = 4294967295] = "MAX_UINT";
        MAX_DEFINE[MAX_DEFINE["MAX_UINT64"] = 18446744073709552000] = "MAX_UINT64";
        MAX_DEFINE[MAX_DEFINE["MAX_INT"] = -1] = "MAX_INT";
        MAX_DEFINE[MAX_DEFINE["MIN_INT"] = 0] = "MIN_INT";
      })(MAX_DEFINE || (MAX_DEFINE = {}));

      var TimeBool = exports('default', /*#__PURE__*/function () {
        function TimeBool() {
          this.m_duration = MAX_DEFINE.MAX_UINT;
          this.m_deadline = MAX_DEFINE.MAX_UINT64;
          this.m_useDT = false;
          this.m_dt = void 0;
          this.m_duration = MAX_DEFINE.MAX_UINT;
          this.m_deadline = MAX_DEFINE.MAX_UINT64;
        }

        var _proto = TimeBool.prototype;

        _proto.IsStarted = function IsStarted() {
          return MAX_DEFINE.MAX_UINT != this.m_duration;
        };

        _proto.Duration = function Duration() {
          return this.m_duration;
        };

        _proto.TicksUntilTrue = function TicksUntilTrue() {
          if (!this.IsStarted()) return MAX_DEFINE.MAX_INT;
          var nowTick = new Date().getTime();
          return this.m_deadline <= nowTick ? 0 : this.m_deadline - nowTick;
        };

        _proto.TicksSinceTrue = function TicksSinceTrue() {
          var nowTick = new Date().getTime();
          return this.m_deadline >= nowTick ? 0 : nowTick - this.m_deadline;
        };

        _proto.TicksSinceStart = function TicksSinceStart() {
          if (!this.IsStarted()) return 0;
          var nowTick = new Date().getTime();
          return nowTick - (this.m_deadline - this.m_duration);
        } //毫秒
        ;

        _proto.Start = function Start(duration) {
          this.m_duration = duration;
          var nowTick = new Date().getTime();
          this.m_deadline = nowTick + duration;
          this.m_dt = 0;
        };

        _proto.Restart = function Restart() {
          this.m_deadline = new Date().getTime() + this.m_duration;
        };

        _proto.Continue = function Continue() {
          this.m_deadline += this.m_duration;
        };

        _proto.ExpireNow = function ExpireNow() {
          this.m_deadline = new Date().getTime();
        };

        _proto.Clear = function Clear() {
          this.m_duration = MAX_DEFINE.MAX_UINT;
          this.m_deadline = MAX_DEFINE.MAX_UINT64;
          this.m_dt = 0;
        };

        _proto.StartWithFirstDue = function StartWithFirstDue(duration, firstDueTime) {
          this.m_duration = duration;

          if (MAX_DEFINE.MAX_UINT == firstDueTime) {
            this.m_deadline = MAX_DEFINE.MAX_UINT64;
          } else {
            this.m_deadline = new Date().getTime() + firstDueTime;
          }
        };

        _proto.ToBool = function ToBool() {
          if (this.m_useDT) {
            return this.m_dt >= this.m_duration;
          } else {
            return new Date().getTime() >= this.m_deadline;
          }
        };

        _proto.TakeAndContinue = function TakeAndContinue() {
          if (!this.ToBool()) return false;
          this.Continue();
          return true;
        };

        _proto.TakeAndRestart = function TakeAndRestart() {
          if (!this.ToBool()) return false;
          this.Restart();
          return true;
        };

        _proto.UseDT = function UseDT(value) {
          this.m_useDT = value;
        };

        _proto.Update = function Update(dt) {
          this.m_dt = this.m_dt + dt;
        };

        return TimeBool;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ToJsonObject.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "cdf80vGGzVNiKTXzSWOdWuZ", "ToJsonObject", undefined);

      var ToJsonObject = exports('default', /*#__PURE__*/function () {
        function ToJsonObject() {}
        /**
        @param obj 傳入class的實體
        @param data 傳入JSON.Parse後的資料
        */


        ToJsonObject.Covert = function Covert(obj, data) {
          for (var key in data) {
            if (data.hasOwnProperty(key)) {
              var element = data[key];
              obj[key] = element;
            }
          }

          return obj;
        };

        return ToJsonObject;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Tools.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './iOSDevice.ts', './AppManager.ts', './EnvironmentConfig.ts', './IframeCommandManager.ts', './FeatureManagerComponent.ts'], function (exports) {
  'use strict';

  var _createClass, _createForOfIteratorHelperLoose, cclegacy, js, Button, Node, SpriteFrame, color, log, Sprite, Label, RichText, ParticleSystem2D, sys, error, v3, Size, v2, assetManager, Texture2D, AudioClip, view, warn, Define, GetiOSDevice, AppManager, EnvironmentConfig, iframeCommandManager, SkinType;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      js = module.js;
      Button = module.Button;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      color = module.color;
      log = module.log;
      Sprite = module.Sprite;
      Label = module.Label;
      RichText = module.RichText;
      ParticleSystem2D = module.ParticleSystem2D;
      sys = module.sys;
      error = module.error;
      v3 = module.v3;
      Size = module.Size;
      v2 = module.v2;
      assetManager = module.assetManager;
      Texture2D = module.Texture2D;
      AudioClip = module.AudioClip;
      view = module.view;
      warn = module.warn;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      GetiOSDevice = module.GetiOSDevice;
    }, function (module) {
      AppManager = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      iframeCommandManager = module.iframeCommandManager;
    }, function (module) {
      SkinType = module.SkinType;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0a4490UT0FN0peFuraPUFM4", "Tools", undefined);
      /**
       * 
       * Created by HuiRu on 2018/07/03.
       */


      var CloseLogoApiID = [6, 8, 15, 16, 691];
      var LockOn2 = [6, 691, 841];
      var IgnoreLockGameIDs = [Define.GAME_ID.GEM];
      var LockOn2ByCurrency = [{
        ApiID: 1051,
        currency: [17]
      }];
      var LockOn2BySAC = [{
        ApiID: 801,
        SAC: [10]
      }];
      /**設定較多的放前面*/

      var FirstBetIndex = [{
        ApiID: 531,
        SAC: 51,
        Index: 0
      }, {
        ApiID: 1072,
        GAME: 101,
        Index: 0
      }, {
        ApiID: 6,
        GAME: 101,
        Index: 0
      }, // test 用
      {
        ApiID: 1291,
        Index: 0
      }, {
        ApiID: 1002,
        Index: 0
      }, {
        ApiID: 1271,
        Index: 0
      }, {
        ApiID: 1272,
        Index: 0
      }, {
        ApiID: 681,
        GAME: 102,
        Index: 0
      }, {
        ApiID: 681,
        GAME: 76,
        Index: 4
      }, {
        ApiID: 681,
        GAME: 2,
        Index: 2
      }, {
        ApiID: 681,
        GAME: 30,
        Index: 2
      }, {
        ApiID: 681,
        GAME: 36,
        Index: 2
      }, {
        ApiID: 681,
        GAME: 37,
        Index: 2
      }, {
        ApiID: 681,
        GAME: 38,
        Index: 2
      }, {
        ApiID: 681,
        GAME: 45,
        Index: 2
      }, {
        ApiID: 681,
        GAME: 47,
        Index: 2
      }, {
        ApiID: 681,
        GAME: 49,
        Index: 2
      }, {
        ApiID: 681,
        GAME: 58,
        Index: 2
      }, {
        ApiID: 681,
        GAME: 16,
        Index: 2
      }, {
        ApiID: 681,
        GAME: 85,
        Index: 2
      }, {
        ApiID: 681,
        GAME: 108,
        Index: 2
      }, {
        ApiID: 681,
        GAME: 137,
        Index: 2
      }, {
        ApiID: 301,
        Index: 0
      }, {
        ApiID: 681,
        Index: 1
      }, {
        ApiID: 1721,
        Index: 4
      }, {
        ApiID: 1130,
        Index: 5
      }, {
        ApiID: 10144,
        Index: 0
      }, {
        ApiID: 766,
        Index: 0
      }, {
        ApiID: 819,
        Index: 0
      }, {
        ApiID: 1958,
        Index: 0
      }, {
        ApiID: 10174,
        Index: 0
      }, {
        ApiID: 10135,
        Index: 3
      }, {
        ApiID: 10137,
        Index: 3
      }];
      var BrandLogo = {
        Org: 0,
        //原本看共用是哪版
        Ace: 1,
        //印度Ace Royale
        UFA: 2,
        //UFA
        Star: 3,
        //Jili Star
        TaDa_App: 4 //TaDa APP

      };
      var Tools = exports('default', /*#__PURE__*/function () {
        function Tools() {}
        /**
         * SetLine 抓取共用分類
         */


        Tools.SetLine = function SetLine(num) {
          if (num === void 0) {
            num = null;
          }

          var line = num ? num : Number(Tools.GetLinkParameterByName("line"));

          if (!isNaN(line)) {
            this.m_line = line;
          }
        };

        Tools.SetTaDa = function SetTaDa(isTaDa) {
          this.m_isTada = isTaDa;
        };
        /**
         * GetFilePath
         * @param path 要轉換的路徑，Astt/%s/bottombar/BarNode_share
         * @returns Astt/framework/bottombar/BarNode_share or Astt/framework_2/bottombar/BarNode_share
         */


        Tools.GetFilePath = function GetFilePath(path, isBottom) {
          if (isBottom === void 0) {
            isBottom = false;
          }

          switch (this.m_line) {
            case Define.LineSetting.bc:
              if (Define.CURRENCY_CHANGE_ENABLE) {
                path = js.formatStr(path, Define.ResFolderName.bc);
              } else {
                path = js.formatStr(path, Define.ResFolderName.org);
              }

              break;

            case Define.LineSetting.sec:
              path = js.formatStr(path, Define.ResFolderName.sec);
              break;

            case Define.LineSetting.street:
              if (isBottom) {
                path = js.formatStr(path, Define.ResFolderName.street);
              } else {
                path = js.formatStr(path, Define.ResFolderName.org);
              }

              break;

            case Define.LineSetting.americas:
              path = js.formatStr(path, Define.ResFolderName.americas);
              break;

            case Define.LineSetting.americas_str:
              if (isBottom) {
                path = js.formatStr(path, Define.ResFolderName.americas_str);
              } else {
                path = js.formatStr(path, Define.ResFolderName.americas);
              }

              break;

            case Define.LineSetting.org:
            default:
              path = js.formatStr(path, Define.ResFolderName.org);
              break;
          }

          return path;
        }
        /**
         * GetFilePathApiId
         * @param path 要轉換的路徑，Astt/%s/bottombar/BarNode_share
         * @returns Astt/framework/bottombar/BarNode_share or Astt/framework_2/bottombar/BarNode_share
         */
        ;

        Tools.GetFilePathApiId = function GetFilePathApiId(path) {
          if (this.isIndia) {
            path = js.formatStr(path, Define.ResFolderName.india);
          } else if (this.isIndia2) {
            path = js.formatStr(path, Define.ResFolderName.india2);
          } else if (this.m_line === Define.LineSetting.americas || this.m_line === Define.LineSetting.americas_str) {
            path = js.formatStr(path, Define.ResFolderName.americas);
          } else {
            path = js.formatStr(path, Define.ResFolderName.org);
          }

          return path;
        };

        Tools.UsingLogoSpriteFrame = function UsingLogoSpriteFrame() {
          if (!this.m_isCheckApi) {
            var apiId = Number(Tools.GetLinkParameterByName("apiId"));
            var isShowLogo = true;

            for (var i = 0; i < CloseLogoApiID.length; i++) {
              if (apiId == CloseLogoApiID[i]) {
                isShowLogo = false;
                break;
              }
            }

            if (this.IsNone) {
              isShowLogo = false;
            }

            if (isShowLogo && this.m_logoSpriteFrames) {
              /*if ( Tools.IsTada )
              {
                  this.m_usingLogoSpriteFrame = this.m_logoSpriteFrames[ BrandLogo.Org ];
              }
              else if ( apiId == 4 ) // 1006 已給BMM使用
              {
                  this.m_usingLogoSpriteFrame = this.m_logoSpriteFrames[ 1 ];
              }
              else*/
              if (this.isIndia) {
                this.m_usingLogoSpriteFrame = this.m_logoSpriteFrames[BrandLogo.Ace];
                this.m_otherLogo = true;
              } else if (this.isIndia2) {
                this.m_usingLogoSpriteFrame = this.m_logoSpriteFrames[BrandLogo.Star];
                this.m_otherLogo = true;
              } else if (this.IsUFAGame) {
                this.m_usingLogoSpriteFrame = this.m_logoSpriteFrames[BrandLogo.UFA];
              } else if (this.IsTadaCasino) {
                this.m_usingLogoSpriteFrame = this.m_logoSpriteFrames[BrandLogo.TaDa_App];
              } else {
                this.m_usingLogoSpriteFrame = this.m_logoSpriteFrames[BrandLogo.Org];
              }
            }

            this.m_isCheckApi = true;
          }

          return this.m_usingLogoSpriteFrame;
        };
        /**
         * SetKeepGLI 從GLI列表除名後，部分機制需保留GLI設定
         */


        Tools.SetKeepGLI = function SetKeepGLI(keep) {
          this.m_keepGLISetting = keep;
        };

        Tools.CheckUFAIcon = function CheckUFAIcon() {
          var gameId = Number(Define.NOW_GAME_ID);

          for (var i = 0; i < Define.UFA_ICONS.length; i++) {
            if (gameId == Define.UFA_ICONS[i]) {
              return true;
            }
          }

          return false;
        };

        Tools.IsNativeWebView = function IsNativeWebView() {
          if (!navigator) {
            return false;
          }

          var useragent = navigator.userAgent;
          var rules = ["WebView", "(iPhone|iPod|iPad)(?!.*Safari/)", "Android.*(wv)"];
          var regex = new RegExp("(" + rules.join("|") + ")", "ig");
          return Boolean(useragent.match(regex)).valueOf();
        } //---
        ;
        /**設定小數點顯示位數 */


        Tools.SetDotDigit = function SetDotDigit(dotDigit, currencyNumber) {
          var canLock = true;
          var gameId = Number(Define.NOW_GAME_ID);

          if (!isNaN(gameId)) {
            for (var i = 0; i < IgnoreLockGameIDs.length; i++) {
              if (gameId === IgnoreLockGameIDs[i]) {
                canLock = false;
                break;
              }
            }
          } //特定api id只能有小數點下兩位數


          var apiId = Number(Tools.GetLinkParameterByName("apiId"));

          if (!isNaN(apiId)) {
            for (var _i = 0; _i < LockOn2.length; _i++) {
              if (apiId == LockOn2[_i] && canLock) {
                this.m_dotDigit = 2;
                return;
              }
            } //特定廠商的特定幣別


            for (var _i2 = 0; _i2 < LockOn2ByCurrency.length; _i2++) {
              if (canLock && apiId == LockOn2ByCurrency[_i2].ApiID) {
                var currency = LockOn2ByCurrency[_i2].currency;

                for (var j = 0; j < currency.length; j++) {
                  if (currencyNumber == currency[j]) {
                    this.m_dotDigit = 2;
                    return;
                  }
                }
              }
            } //特定廠商的特定站


            for (var _i3 = 0; _i3 < LockOn2BySAC.length; _i3++) {
              if (canLock && apiId == LockOn2BySAC[_i3].ApiID) {
                var sac = LockOn2BySAC[_i3].SAC;

                for (var _j = 0; _j < sac.length; _j++) {
                  if (Define.SUB_AGENT_CODE == sac[_j]) {
                    this.m_dotDigit = 2;
                    return;
                  }
                }
              }
            }
          }

          if (dotDigit > Tools.SmallDotDigit) {
            dotDigit = Tools.SmallDotDigit;
          }

          this.m_dotDigit = dotDigit;
        };

        Tools.SetRevertDot = function SetRevertDot(isRevert) {
          this.m_isRevert = isRevert;
        }
        /**
         * 格式化顯示的數字
         * @param num 要轉字串的數值
         * @param type 字串的格式
         * @param isThousands 是否增加千分位，預設要加
         * @param digits 小數點要顯示到第幾位
         */
        ;

        Tools.FormatNumberThousands = function FormatNumberThousands(num, type, isThousands, digits) {
          var _this = this;

          if (type === void 0) {
            type = Tools.FORMAT_NUMBER_TYPE.NONE_DOT;
          }

          if (isThousands === void 0) {
            isThousands = true;
          }

          if (digits === void 0) {
            digits = this.m_dotDigit;
          }

          if (type == Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT) {
            type = Tools.CURR_DEFINE_FORMAT_NUMBER_TYPE;
          }

          if (this.CheckSwitchOff(Define.SwitchOffKeyDefine.CoinAccuracy)) {
            type = Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT;
            digits = 2;
          }

          if (this.CheckSwitchOff(Define.SwitchOffKeyDefine.RemoveDecimal)) {
            // 先使用這個看看，(也許應該先用DEFINE_DOT_NONE_ZERO看會不會有神奇情況)
            type = Tools.FORMAT_NUMBER_TYPE.NONE_DOT;
          }

          var intFormat = function intFormat(subStr) {
            if (subStr != undefined && Number(subStr) >= 1000 && isThousands) {
              var template = "$1,$2";

              if (_this.m_isRevert) {
                template = "$1.$2";
              }

              var pattern = /(-?\d+)(\d{3})/;

              while (pattern.test(subStr)) {
                subStr = subStr.replace(pattern, template);
              }
            }

            return subStr;
          };

          var sign = num < 0 ? "-" : "";
          var str = Math.abs(num).toString();
          var arr = str.split(".");
          var dot = ".";

          if (this.m_isRevert) {
            dot = ",";
          }

          if (digits <= 0) {
            dot = "";
          }

          switch (type) {
            case Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT:
              {
                arr[0] = intFormat(arr[0]);

                if (arr[1] == undefined) {
                  arr[1] = "0";
                }

                arr[1] = arr[1] + "00";
                str = arr[0] + dot + arr[1].substr(0, digits);
                break;
              }

            case Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO:
              {
                arr[0] = intFormat(arr[0]);

                if (arr[1] == undefined) {
                  str = arr[0];
                } else {
                  str = arr[0] + dot + arr[1].substr(0, digits);
                }

                break;
              }

            case Tools.FORMAT_NUMBER_TYPE.ALL_DIGITS:
              {
                break;
              }

            case Tools.FORMAT_NUMBER_TYPE.SPECIFY_DOT:
              {
                arr[0] = intFormat(arr[0]);

                if (arr[1] == undefined) {
                  arr[1] = "0";
                }

                arr[1] = arr[1] + "0000000000";
                str = arr[0] + dot + arr[1].substr(0, digits);
                break;
              }

            case Tools.FORMAT_NUMBER_TYPE.NONE_DOT:
            default:
              {
                //str = intFormat(str);
                str = intFormat(Math.floor(Number(str)).toString());
                break;
              }
          }

          return sign + str;
        } //---Component------------------------

        /**
         * 主動在node上新增一個Button並綁定callback
         * 注意: 因為沒有傳回調者的功能(每次新增都要丟進來很麻煩，所以不處理)，在回調時要記得自己處理回調的this!
         * @param btnNode 需要增加Button 的節點
         * @param callback 被觸發時回call的function
         * @param normal 在一般狀態的圖片或顏色 若要有滑鼠三態 一定要傳入
         * @param pressed 在點下時的圖片或顏色 預設normal
         * @param hover 在滑入時的圖片或顏色 預設 pressed > normal
         * @param disabled disable的圖片或顏色 預設normal
         */
        ;

        Tools.oldAddButton = function oldAddButton(btnNode, callback, normal, pressed, hover, disabled) {
          if (normal === void 0) {
            normal = null;
          }

          if (pressed === void 0) {
            pressed = null;
          }

          if (hover === void 0) {
            hover = null;
          }

          if (disabled === void 0) {
            disabled = null;
          }

          if (btnNode != null) {
            var btnComp = btnNode.addComponent(Button);
            btnComp.node.on(Node.EventType.TOUCH_END, callback);

            if (normal != null) {
              if (normal instanceof SpriteFrame) {
                btnComp.transition = Button.Transition.SPRITE;
                btnComp.normalSprite = normal;
                btnComp.pressedSprite = pressed || normal;
                btnComp.hoverSprite = hover || pressed || normal;
                btnComp.disabledSprite = disabled || normal;
              } else if (normal instanceof color) {
                btnComp.transition = Button.Transition.COLOR; //ru
              }
            }
          } else {
            log("Tools.AddButton is null.", btnNode);
          }

          return btnNode;
        };

        Tools.AddButton = function AddButton(btnNode, callback, normal, pressed, hover, disabled) {
          if (normal === void 0) {
            normal = null;
          }

          if (pressed === void 0) {
            pressed = null;
          }

          if (hover === void 0) {
            hover = null;
          }

          if (disabled === void 0) {
            disabled = null;
          }

          if (btnNode != null) {
            var btnComp = btnNode.addComponent(Button);

            if (normal != null) {
              if (normal instanceof SpriteFrame) {
                btnComp.transition = Button.Transition.NONE;
                btnComp.normalSprite = normal;
                btnComp.pressedSprite = pressed || normal;
                btnComp.hoverSprite = hover || pressed || normal;
                btnComp.disabledSprite = disabled || normal;
                btnComp.node.on(Node.EventType.MOUSE_ENTER, function () {
                  if (btnComp.enabled) {
                    btnComp.getComponent(Sprite).spriteFrame = btnComp.pressedSprite;
                  }
                });
                btnComp.node.on(Node.EventType.MOUSE_LEAVE, function () {
                  btnComp.getComponent(Sprite).spriteFrame = btnComp.normalSprite;
                });
                btnComp.node.on(Node.EventType.TOUCH_START, function (event) {
                  if (btnComp.enabled) {
                    btnComp.getComponent(Sprite).spriteFrame = btnComp.pressedSprite;
                    callback(event);
                  }
                });
                btnComp.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
                  btnComp.getComponent(Sprite).spriteFrame = btnComp.normalSprite;
                  callback(event);
                });
                btnComp.node.on(Node.EventType.TOUCH_END, function (event) {
                  if (btnComp.enabled) {
                    btnComp.getComponent(Sprite).spriteFrame = btnComp.normalSprite;
                    callback(event);
                  }
                });
              } else if (normal instanceof color) {
                btnComp.transition = Button.Transition.COLOR; //ru
              }
            } else {
              btnComp.node.on(Node.EventType.TOUCH_START, callback);
              btnComp.node.on(Node.EventType.TOUCH_CANCEL, callback);
              btnComp.node.on(Node.EventType.TOUCH_END, callback);
            }
          } else {
            log("Tools.AddButton is null.", btnNode);
          }

          return btnNode;
        }
        /**
         * 設定label的文字，數字會自動加逗號
         * @param labelNode Node
         * @param value 字串或數字
         * @param thousType FormatNumberThousands的type
         */
        ;

        Tools.SetLabelString = function SetLabelString(labelNode, value, thousType) {
          if (thousType === void 0) {
            thousType = null;
          }

          var label = labelNode.getComponent(Label); // log( "SetLabelString input", labelNode, thousType, label.string, value );

          if (label != null && label != undefined) {
            if (thousType == null || thousType == undefined) {
              label.string = value.toString();
            } else {
              var num;

              if (typeof value === "number") {
                num = value;
              } else {
                var repValue = value.replace(/,/g, "");

                if (isNaN(Number(repValue))) {
                  num = 0;
                } else {
                  num = Number(repValue);
                }
              }

              label.string = Tools.FormatNumberThousands(num, thousType);
            }

            if (!label.font) {
              label.font = Define.DefaultFont;
            }
          } else {
            log("Warning!!!!!!!!!! SetLabelString: ", labelNode);
          } // log( "SetLabelString output", label.string );

        }
        /**
         * 取的label的數字(只會去除逗號)
         * @param labelNode Node
         */
        ;

        Tools.GetLabelNumber = function GetLabelNumber(labelNode) {
          var label = labelNode.getComponent(Label) || labelNode.getComponent(RichText);
          var num = 0;

          if (label != null && label != undefined) {
            var repValue = "";

            if (this.m_isRevert) {
              var split = label.string.split(".");

              for (var i = 0; i < split.length; i++) {
                repValue += split[i];
              }

              repValue = repValue.replace(",", ".");
            } else {
              var _split = label.string.split(",");

              for (var _i4 = 0; _i4 < _split.length; _i4++) {
                repValue += _split[_i4];
              }
            }

            if (isNaN(Number(repValue))) {
              num = 0;
            } else {
              num = Number(repValue);
            }
          } else {
            log("Warning!!!!!!!!!! GetLabelNumber: ", labelNode);
          }

          return num;
        }
        /**
         * 打開節點裡的particle
         * @param particleNode Node
         * @param all 是否開啟所有的
         */
        ;

        Tools.PlayParticle = function PlayParticle(particleNode, all) {
          if (all === void 0) {
            all = false;
          }

          if (particleNode == null && particleNode == undefined) {
            return;
          }

          if (all) {
            var ptcList = particleNode.getComponentsInChildren(ParticleSystem2D);

            for (var _key in ptcList) {
              if (ptcList.hasOwnProperty(_key)) {
                ptcList[_key].resetSystem();
              }
            }
          } else {
            var ptc = particleNode.getComponent(ParticleSystem2D);

            if (ptc != null && ptc != undefined) {
              ptc.resetSystem();
            }
          }
        }
        /**
         * 關閉節點裡的particle
         * @param particleNode Node
         * @param all 是否關閉所有的
         * @param clean 是否清除目前畫面上的particle
         */
        ;

        Tools.StopParticle = function StopParticle(particleNode, all, clean) {
          if (all === void 0) {
            all = false;
          }

          if (clean === void 0) {
            clean = false;
          }

          if (particleNode == null && particleNode == undefined) {
            return;
          }

          if (all) {
            var ptcList = particleNode.getComponentsInChildren(ParticleSystem2D);
            log(ptcList);

            for (var _key2 in ptcList) {
              if (ptcList.hasOwnProperty(_key2)) {
                if (clean) {
                  ptcList[_key2].resetSystem();
                }

                ptcList[_key2].stopSystem();
              }
            }
          } else {
            var ptc = particleNode.getComponent(ParticleSystem2D);

            if (ptc != null && ptc != undefined) {
              if (clean) {
                ptc.resetSystem();
              }

              ptc.stopSystem();
            }
          }
        } //---Inanna------------------------
        //---JavaScript 浮點數運算----------

        /**
         * 把錯誤的數據轉正
         * strip(0.09999999999999998)=0.1
         */
        ;

        Tools.strip = function strip(num, precision) {
          if (precision === void 0) {
            precision = 12;
          } // 小數後4位


          if (Tools.integerDigitLength(num) + 4 > 12 && Tools.integerDigitLength(num) + 4 <= 21) {
            precision = Tools.integerDigitLength(num) + 4;
          }

          return +parseFloat(num.toPrecision(precision));
        }
        /**
         * Return integer digits length of a number
         * @param {*number} num Input number
         */
        ;

        Tools.integerDigitLength = function integerDigitLength(num) {
          // Get integer digit length
          var eSplit = num.toString().split(/[eE]/);
          var len = (eSplit[0].split(".")[0] || "").length - +(eSplit[1] || 0);
          return len > 0 ? len : 0;
        }
        /**
         * Return digits length of a number
         * @param {*number} num Input number
         */
        ;

        Tools.digitLength = function digitLength(num) {
          // Get digit length of e
          var eSplit = num.toString().split(/[eE]/);
          var len = (eSplit[0].split(".")[1] || "").length - +(eSplit[1] || 0);
          return len > 0 ? len : 0;
        }
        /**
         * 把小數轉成整數，支持科學計數法。如果是小數則放大成整數
         * @param {*number} num 输入数
         */
        ;

        Tools.float2Fixed = function float2Fixed(num) {
          if (num.toString().indexOf("e") === -1) {
            return Number(num.toString().replace(".", ""));
          }

          var dLen = Tools.digitLength(num);
          return dLen > 0 ? num * Math.pow(10, dLen) : num;
        }
        /**
         * 檢測數字是否越界，如果越界給出提示
         * @param {*number} num 输入数
         */
        ;

        Tools.checkBoundary = function checkBoundary(num) {}
        /**
         * 精確乘法
         */
        ;

        Tools.times = function times(num1, num2) {
          for (var _len = arguments.length, others = new Array(_len > 2 ? _len - 2 : 0), _key3 = 2; _key3 < _len; _key3++) {
            others[_key3 - 2] = arguments[_key3];
          }

          if (others.length > 0) {
            return Tools.times.apply(Tools, [Tools.times(num1, num2), others[0]].concat(others.slice(1)));
          }

          var num1Changed = Tools.float2Fixed(num1);
          var num2Changed = Tools.float2Fixed(num2);
          var baseNum = Tools.digitLength(num1) + Tools.digitLength(num2);
          var leftValue = num1Changed * num2Changed;
          Tools.checkBoundary(leftValue);
          return leftValue / Math.pow(10, baseNum);
        }
        /**
         * 精確加法
         */
        ;

        Tools.plus = function plus(num1, num2) {
          for (var _len2 = arguments.length, others = new Array(_len2 > 2 ? _len2 - 2 : 0), _key4 = 2; _key4 < _len2; _key4++) {
            others[_key4 - 2] = arguments[_key4];
          }

          if (others.length > 0) {
            return Tools.plus.apply(Tools, [Tools.plus(num1, num2), others[0]].concat(others.slice(1)));
          }

          var baseNum = Math.pow(10, Math.max(Tools.digitLength(num1), Tools.digitLength(num2)));
          return (Tools.times(num1, baseNum) + Tools.times(num2, baseNum)) / baseNum;
        }
        /**
         * 精確減法
         */
        ;

        Tools.minus = function minus(num1, num2) {
          for (var _len3 = arguments.length, others = new Array(_len3 > 2 ? _len3 - 2 : 0), _key5 = 2; _key5 < _len3; _key5++) {
            others[_key5 - 2] = arguments[_key5];
          }

          if (others.length > 0) {
            return Tools.minus.apply(Tools, [Tools.minus(num1, num2), others[0]].concat(others.slice(1)));
          }

          var baseNum = Math.pow(10, Math.max(Tools.digitLength(num1), Tools.digitLength(num2)));
          return (Tools.times(num1, baseNum) - Tools.times(num2, baseNum)) / baseNum;
        }
        /**
         * 精確除法
         */
        ;

        Tools.divide = function divide(num1, num2) {
          for (var _len4 = arguments.length, others = new Array(_len4 > 2 ? _len4 - 2 : 0), _key6 = 2; _key6 < _len4; _key6++) {
            others[_key6 - 2] = arguments[_key6];
          }

          if (others.length > 0) {
            return Tools.divide.apply(Tools, [Tools.divide(num1, num2), others[0]].concat(others.slice(1)));
          }

          var num1Changed = Tools.float2Fixed(num1);
          var num2Changed = Tools.float2Fixed(num2);
          Tools.checkBoundary(num1Changed);
          Tools.checkBoundary(num2Changed);
          return Tools.times(num1Changed / num2Changed, Math.pow(10, Tools.digitLength(num2) - Tools.digitLength(num1)));
        }
        /**
         * 四捨五入
         */
        ;

        Tools.round = function round(num, ratio) {
          var base = Math.pow(10, ratio);
          return Tools.divide(Math.round(Tools.times(num, base)), base);
        } //---Other------------------------

        /**
         * 取得Url上的參數
         * @param name 參數名
         * @param url 網址
         */
        ;

        Tools.GetLinkParameterByName = function GetLinkParameterByName(name, url) {
          if (url === void 0) {
            url = null;
          }

          if (!url) {
            if (sys.isNative || AppManager.LobbyData) {
              try {
                url = AppManager.GetUrl();

                if (url === "") {
                  error("No URL!");
                }
              } catch (error) {
                error(JSON.stringify(error));
              }
            } else {
              url = window.location.href;
            }
          }

          name = name.replace(/[[\]]/g, "\\$&");
          var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)");
          var results = regex.exec(url);
          if (!results) return null;
          if (!results[2]) return "";
          return decodeURIComponent(results[2].replace(/\+/g, " "));
        };

        Tools.GetLinkParameterByNameForLobbyData = function GetLinkParameterByNameForLobbyData(name) {
          var url = window.location.href;
          name = name.replace(/[[\]]/g, "\\$&");
          var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)");
          var results = regex.exec(url);
          if (!results) return null;
          if (!results[2]) return "";
          return decodeURIComponent(results[2].replace(/\+/g, " "));
        };

        Tools.GetCookie = function GetCookie(cookieName) {
          if (sys.isNative) {
            return "";
          }

          var name = cookieName + "=";
          error("強調用的cookie:" + document.cookie);
          var ca = document.cookie.split(";");

          for (var i = 0; i < ca.length; i++) {
            var c = ca[i];

            while (c.charAt(0) == " ") {
              c = c.substring(1);
            }

            if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
          }

          return "";
        };

        Tools.SetCookie = function SetCookie(cookieName, dataStr, expires, pathB) {
          if (expires === void 0) {
            expires = undefined;
          }

          if (pathB === void 0) {
            pathB = false;
          }

          if (sys.isNative) {
            return "";
          }

          if (expires == undefined) {
            expires = new Date();
            expires.setTime(expires.getTime() + 86400000); //24*60*60*1000
          }

          var pathStr = "";

          if (pathB) {
            pathStr = ";path=/";
          }

          window.document.cookie = cookieName + "=" + escape(dataStr) + ";expires=" + expires.toUTCString() + pathStr;
          return "";
        }
        /**
        * 轉換語系寫法
        * cn -> zh-CN
        */
        ;

        Tools.ConvertLanguageToFull = function ConvertLanguageToFull(lang) {
          lang = lang.toLocaleLowerCase();

          if (lang == Define.Lang.CN || lang == Define.FullLang.CN.toLocaleLowerCase()) {
            return Define.FullLang.CN;
          } else if (lang == Define.Lang.EN || lang == Define.FullLang.EN.toLocaleLowerCase()) {
            return Define.FullLang.EN;
          } else if (lang == Define.Lang.TH || lang == Define.FullLang.TH.toLocaleLowerCase()) {
            return Define.FullLang.TH;
          } else if (lang == Define.Lang.VN || lang == Define.FullLang.VN.toLocaleLowerCase()) {
            return Define.FullLang.VN;
          } else if (lang == Define.Lang.ID || lang == Define.FullLang.ID.toLocaleLowerCase()) {
            return Define.FullLang.ID;
          } else if (lang == Define.Lang.HI || lang == Define.FullLang.HI.toLocaleLowerCase()) {
            return Define.FullLang.HI;
          } else if (lang == Define.Lang.TA || lang == Define.FullLang.TA.toLocaleLowerCase()) {
            return Define.FullLang.TA;
          } else if (lang == Define.Lang.MM || lang == Define.FullLang.MM.toLocaleLowerCase()) {
            return Define.FullLang.MM;
          } else if (lang == Define.Lang.JP || lang == Define.FullLang.JP.toLocaleLowerCase()) {
            return Define.FullLang.JP;
          } else if (lang == Define.Lang.MS || lang == Define.FullLang.MS.toLocaleLowerCase()) {
            return Define.FullLang.MS;
          } else if (lang == Define.Lang.KO || lang == Define.FullLang.KO.toLocaleLowerCase()) {
            return Define.FullLang.KO;
          } else if (lang == Define.Lang.BN || lang == Define.FullLang.BN.toLocaleLowerCase()) {
            return Define.FullLang.BN;
          } else if (lang == Define.Lang.ES || lang == Define.FullLang.ES.toLocaleLowerCase()) {
            return Define.FullLang.ES;
          } else if (lang == Define.Lang.PT || lang == Define.FullLang.PT.toLocaleLowerCase()) {
            return Define.FullLang.PT;
          } else if (lang == Define.Lang.IT || lang == Define.FullLang.IT.toLocaleLowerCase()) {
            return Define.FullLang.IT;
          } else if (lang == Define.Lang.SE || lang == Define.FullLang.SE.toLocaleLowerCase()) {
            return Define.FullLang.SE;
          } else if (lang == Define.Lang.DE || lang == Define.FullLang.DE.toLocaleLowerCase()) {
            return Define.FullLang.DE;
          } else if (lang == Define.Lang.DADK || lang == Define.FullLang.DADK.toLocaleLowerCase()) {
            return Define.FullLang.DADK;
          } else if (lang == Define.Lang.RORO || lang == Define.FullLang.RORO.toLocaleLowerCase()) {
            return Define.FullLang.RORO;
          } else if (lang == Define.Lang.NLNL || lang == Define.FullLang.NLNL.toLocaleLowerCase()) {
            return Define.FullLang.NLNL;
          } else if (lang == Define.Lang.TRTR.toLocaleLowerCase() || lang == Define.FullLang.TRTR.toLocaleLowerCase()) {
            return Define.FullLang.TRTR;
          } else if (lang == Define.Lang.RURU.toLocaleLowerCase() || lang == Define.FullLang.RURU.toLocaleLowerCase()) {
            return Define.FullLang.RURU;
          } else if (lang == Define.Lang.GRGR.toLocaleLowerCase() || lang == Define.FullLang.GRGR.toLocaleLowerCase()) {
            return Define.FullLang.GRGR;
          } else if (lang == Define.Lang.FRFR.toLocaleLowerCase() || lang == Define.FullLang.FRFR.toLocaleLowerCase()) {
            return Define.FullLang.FRFR;
          }

          return "";
        }
        /**
        * 轉換語系寫法
        * zh-CN -> cn
        */
        ;

        Tools.ConvertLanguageToSimple = function ConvertLanguageToSimple(lang) {
          lang = lang.toLocaleLowerCase();

          if (lang == Define.Lang.CN || lang == Define.FullLang.CN.toLocaleLowerCase()) {
            return Define.Lang.CN;
          } else if (lang == Define.Lang.EN || lang == Define.FullLang.EN.toLocaleLowerCase()) {
            return Define.Lang.EN;
          } else if (lang == Define.Lang.TH || lang == Define.FullLang.TH.toLocaleLowerCase()) {
            return Define.Lang.TH;
          } else if (lang == Define.Lang.VN || lang == Define.FullLang.VN.toLocaleLowerCase()) {
            return Define.Lang.VN;
          } else if (lang == Define.Lang.ID || lang == Define.FullLang.ID.toLocaleLowerCase()) {
            return Define.Lang.ID;
          } else if (lang == Define.Lang.HI || lang == Define.FullLang.HI.toLocaleLowerCase()) {
            return Define.Lang.HI;
          } else if (lang == Define.Lang.TA || lang == Define.FullLang.TA.toLocaleLowerCase()) {
            return Define.Lang.TA;
          } else if (lang == Define.Lang.MM || lang == Define.FullLang.MM.toLocaleLowerCase()) {
            return Define.Lang.MM;
          } else if (lang == Define.Lang.JP || lang == Define.FullLang.JP.toLocaleLowerCase()) {
            return Define.Lang.JP;
          } else if (lang == Define.Lang.MS || lang == Define.FullLang.MS.toLocaleLowerCase()) {
            return Define.Lang.MS;
          } else if (lang == Define.Lang.KO || lang == Define.FullLang.KO.toLocaleLowerCase()) {
            return Define.Lang.KO;
          } else if (lang == Define.Lang.BN || lang == Define.FullLang.BN.toLocaleLowerCase()) {
            return Define.Lang.BN;
          } else if (lang == Define.Lang.ES || lang == Define.FullLang.ES.toLocaleLowerCase()) {
            return Define.Lang.ES;
          } else if (lang == Define.Lang.PT || lang == Define.FullLang.PT.toLocaleLowerCase()) {
            return Define.Lang.PT;
          } else if (lang == Define.Lang.IT || lang == Define.FullLang.IT.toLocaleLowerCase()) {
            return Define.Lang.IT;
          } else if (lang == Define.Lang.SE || lang == Define.FullLang.SE.toLocaleLowerCase()) {
            return Define.Lang.SE;
          } else if (lang == Define.Lang.DE || lang == Define.FullLang.DE.toLocaleLowerCase()) {
            return Define.Lang.DE;
          } else if (lang == Define.Lang.DADK || lang == Define.FullLang.DADK.toLocaleLowerCase()) {
            return Define.Lang.DADK;
          } else if (lang == Define.Lang.RORO || lang == Define.FullLang.RORO.toLocaleLowerCase()) {
            return Define.Lang.RORO;
          } else if (lang == Define.Lang.NLNL || lang == Define.FullLang.NLNL.toLocaleLowerCase()) {
            return Define.Lang.NLNL;
          } else if (lang == Define.Lang.TRTR.toLocaleLowerCase() || lang == Define.FullLang.TRTR.toLocaleLowerCase()) {
            return Define.Lang.TRTR;
          } else if (lang == Define.Lang.RURU.toLocaleLowerCase() || lang == Define.FullLang.RURU.toLocaleLowerCase()) {
            return Define.Lang.RURU;
          } else if (lang == Define.Lang.GRGR.toLocaleLowerCase() || lang == Define.FullLang.GRGR.toLocaleLowerCase()) {
            return Define.Lang.GRGR;
          } else if (lang == Define.Lang.FRFR.toLocaleLowerCase() || lang == Define.FullLang.FRFR.toLocaleLowerCase()) {
            return Define.Lang.FRFR;
          }

          return "";
        };

        Tools.CloseGameTab = function CloseGameTab(isSelf) {
          if (isSelf === void 0) {
            isSelf = true;
          }

          if (sys.isNative || AppManager.LobbyData
          /*|| AppManager.UrlLobbyData*/
          ) {
              AppManager.LeaveGame(isSelf);
            } else {
            var CloseWebPage = function CloseWebPage() {
              window.opener = null;
              window.open("", "_self", "");
              window.close(); //以上三行可關閉單個頁面

              window.open("", "_top");
              window.top.close();
              window.location.href = "about:blank ";
              window.close(); //上面兩次關閉適用於FireFox等瀏覽器
            };

            switch (Define.LobbyMode) {
              case Define.LobbyModeType.CLOSE:
                if (Define.Platform === Define.PlatformType.APP && Tools.CloseUrl) {
                  window.location.replace(Tools.CloseUrl);
                } else {
                  CloseWebPage();
                }

                break;

              case Define.LobbyModeType.TO_JILI:
                if (!Define.IsLifeSocketClose && Define.LifeSocketReqUrl) {
                  Define.LifeSocketReqUrl(Define.GAME_ID.WEBLOBBY, undefined);
                } else {
                  CloseWebPage();
                }

                break;

              case Define.LobbyModeType.TO_URL:
                if (Define.HOME_URL && Define.HOME_URL != "") {
                  if (window.top === window.self) {
                    window.location.href = Define.HOME_URL;
                  } else {
                    top.location.href = Define.HOME_URL;
                  }
                } else {
                  CloseWebPage();
                }

                break;

              case Define.LobbyModeType.USING_IFRAME:
                iframeCommandManager.SendClosed();
                break;

              case Define.LobbyModeType.CHANGE_IFRAME:
                if (Define.HOME_URL && Define.HOME_URL != "") {
                  window.location.href = Define.HOME_URL;
                } else {
                  CloseWebPage();
                }

                break;

              default:
                CloseWebPage();
                break;
            }
          }
        }
        /**
        * 判斷是否能用WebGL
        */
        ;

        Tools.CanUseWebGL = function CanUseWebGL() {
          if (sys.isNative) {
            return true;
          }

          var cvs = document.getElementById("GameCanvas"); // let gl = cvs.getContext( "webgl" )
          //     || cvs.getContext( "experimental-webgl" )
          //     || cvs.getContext( "webkit-3d" )
          //     || cvs.getContext( "moz-webgl" );
          // return ( gl && ( gl instanceof WebGLRenderingContext ) );

          var gl = cvs.getContext("webgl") || cvs.getContext("webgl2");
          return gl && gl instanceof WebGLRenderingContext || gl instanceof WebGL2RenderingContext;
        }
        /**
        * 模擬String.format
        * @param targetString 目標字串
        * @param args 取代參數
        * @example StringFormat( "My name is {0}, age is {1}.", "Peter", 20 ) 
        * return My name is Peter, age is 20.
        */
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ;

        Tools.StringFormat = function StringFormat(targetString) {
          for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i++) {
            var reg = new RegExp("\\{" + i + "\\}", "gm");
            targetString = targetString.replace(reg, i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1]);
          }

          return targetString;
        }
        /**
        * 另一種String.format
        * @param targetString 目標字串
        * @param args 自定義取代參數(object)
        * @example StringFormat( "My name is {name}, age is {age}.", { name:"Peter", age:"20"} ) 
        * return My name is Peter, age is 20.
        */
        ;

        Tools.CustomStringFormat = function CustomStringFormat(targetString, args) {
          Object.keys(args).forEach(function (key) {
            var reg = new RegExp("\\{" + key + "\\}", "gm");
            targetString = targetString.replace(reg, args[key]);
          });
          return targetString;
        }
        /**
         * 判斷遊戲錯誤從何而來的方法 (回傳字串 1開頭來自平台 2開頭來自Game Server 3開頭來自各Game Client 回傳-1代表資訊有誤)
         * @param ErrorStatus 來自平台、遊戲server、Spin時...情況等
         * @param ErrorCode client收到的錯誤碼
         */
        ;

        Tools.GetErrorCode = function GetErrorCode(ErrorStatus, ErrorCode, StatusCode) {
          error("GetErrorCode", ErrorStatus, ErrorCode, StatusCode);
          var msg = {
            prefix: "(MSG ",
            suffix: ")"
          };
          var realMsg = msg.prefix + Define.ErrorStatus.Unknow.toString() + msg.suffix;
          var aid = -1;
          var apiid = -1;

          if (Define.AID && Define.AID != "") {
            aid = Number(Define.AID);
          }

          if (Define.API_ID && Define.API_ID != "") {
            apiid = Number(Define.API_ID);
          }

          switch (ErrorStatus) {
            case Define.ErrorStatus.PlatForm:
              {
                var code = Define.ErrorStatus.PlatForm + ErrorCode;
                var status = "";

                if (StatusCode) {
                  status = ".." + StatusCode.toString();
                }

                realMsg = msg.prefix + code.toString() + status + msg.suffix;

                if (Define.SendBtnClickEvent && Define.FormBtnClickParams) {
                  Define.SendBtnClickEvent(Define.FormBtnClickParams(aid, apiid, Number(Define.NOW_GAME_ID), Define.VERSION, Define.BTN_CLICK_EVENT.PLATFORM_ERROR_MESSAGE, code, false));
                }

                break;
              }

            case Define.ErrorStatus.Game:
            case Define.ErrorStatus.Spin:
              {
                if (StatusCode) {
                  realMsg = msg.prefix + ".." + StatusCode.toString() + msg.suffix;

                  if (Define.SendBtnClickEvent && Define.FormBtnClickParams) {
                    Define.SendBtnClickEvent(Define.FormBtnClickParams(aid, apiid, Number(Define.NOW_GAME_ID), Define.VERSION, Define.BTN_CLICK_EVENT.GAME_ERROR, StatusCode, false));
                  }
                } else {
                  realMsg = msg.prefix + ErrorCode.toString() + msg.suffix;

                  if (Define.SendBtnClickEvent && Define.FormBtnClickParams) {
                    Define.SendBtnClickEvent(Define.FormBtnClickParams(aid, apiid, Number(Define.NOW_GAME_ID), Define.VERSION, Define.BTN_CLICK_EVENT.GAME_ERROR, ErrorCode, false));
                  }
                }

                break;
              }
          }

          return realMsg;
        }
        /**
         * 抓取手機型號
         */
        ;

        Tools.GetDeviceName = function GetDeviceName() {
          if (sys.os == sys.OS.IOS) {
            var device = GetiOSDevice();

            if (device != null) {
              return device.name;
            }
          } else if (sys.os == sys.OS.ANDROID && !sys.isNative) {
            var regex = /Mozilla\/5.0\s*\([^()]*?(Android[^()]*?);\s*([^()]*?)\)/g;
            var m = regex.exec(navigator.userAgent);

            if (m && m.length > 2) {
              var info = m[2].split(" Build")[0];
              var split = info.split(";");

              if (split.length == 1) {
                return split[0];
              } else if (split.length == 2) {
                return split[1].substring(1);
              }

              return info;
            }
          }

          return "";
        };

        Tools.GetBrowserTag = function GetBrowserTag() {
          var result = Tools.CanUseWebGL() ? Define.GL_RESULT.TRUE : Define.GL_RESULT.FALSE;
          result *= 100;

          switch (sys.os) {
            case sys.OS.ANDROID:
              result += 10;
              break;

            case sys.OS.IOS:
              result += 20;
              break;

            case sys.OS.WINDOWS:
              result += 30;
              break;

            default:
              result += 0;
              break;
          }

          switch (sys.browserType) {
            case sys.BrowserType.CHROME:
              result += 1;
              break;

            case sys.BrowserType.SAFARI:
              result += 2;
              break;

            case sys.BrowserType.IE:
              result += 3;
              break;

            case sys.BrowserType.UC:
              result += 4;
              break;

            case sys.BrowserType.QQ:
            case sys.BrowserType.MOBILE_QQ:
              result += 5;
              break;

            case sys.BrowserType.FIREFOX:
              result += 6;
              break;

            default:
              result += 0;
              break;
          }

          return result;
        }
        /**對object做淺拷貝 */
        ;

        Tools.shallowCopy = function shallowCopy(data) {
          var ret = {};
          Object.keys(data).forEach(function (key) {
            ret[key] = data[key];
          });
          return ret;
        }
        /**
         * 判斷引擎版號是否大於2.0.0以上
         */
        ;

        Tools.CheckEnginVersion = function CheckEnginVersion() {
          return true;
        };

        Tools.DiffPos = function DiffPos(parentAnchorPoint, isLandscape, parent) {
          var pos = v3(0, 0);
          var gameSize;

          if (isLandscape) {
            gameSize = Define.DEFAULT_LANDSCAPE_SIZE;
          } else {
            gameSize = new Size(Define.DEFAULT_LANDSCAPE_SIZE.height, Define.DEFAULT_LANDSCAPE_SIZE.width);
          }

          var width = gameSize.width / 2;
          var height = gameSize.height / 2;

          if (parentAnchorPoint.equals(v2(0.5, 0))) {
            pos = pos.add(v3(0, height));
          } else if (parentAnchorPoint.equals(v2(0.5, 0.5))) {
            if (parent) {
              if (parent.position.x === width) {
                width = 0;
              }

              if (parent.position.x === height) {
                height = 0;
              }
            }

            pos = pos.add(v3(width, height));
          } else if (parentAnchorPoint.equals(v2(0, 0.5))) {
            pos = pos.add(v3(width, 0));
          }

          return pos;
        };

        Tools.LoadTag = function LoadTag(lang, name, index, checkCb) {
          var _this2 = this;

          if (this.m_url === "") {
            if (sys.isNative || AppManager.LobbyData) {
              try {
                var url = AppManager.GetUrl();
                var reg = /\.com/g;
                this.m_url = url.slice(0, url.search(reg) + 4) + "/smallicon/";

                if (url === "") {
                  error("No URL!");
                }
              } catch (error) {
                error(JSON.stringify(error));
              }
            } else {
              var _url = window.location.href;
              var _reg = /\.com/g;
              this.m_url = _url.slice(0, _url.search(_reg) + 4) + "/smallicon/";
            }
          }

          if (lang !== Define.Lang.CN && lang !== Define.Lang.EN) {
            lang = Define.Lang.EN;
          }

          if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
            this.m_url = "https://test-wbgame.jlfafafa3.com/smallicon/";
          }

          var remoteUrl = this.m_url + "tags/" + name + lang + ".png";
          assetManager.loadRemote(remoteUrl, {
            ext: ".png"
          }, function (err, imageAsset) // assetManager.loadRemote( this.m_url + "tags/" + name + lang + ".png", { reload: true }, ( error: Error, resource: Texture2D ) =>
          {
            if (err) {
              error("assetManager err:", err); //失敗，重新載入

              Tools.LoadTag(lang, name, index, checkCb);
              return;
            }

            _this2.m_tags[index] = new SpriteFrame();
            var texture = new Texture2D();
            texture.image = imageAsset;
            _this2.m_tags[index].texture = texture;

            if (checkCb) {
              checkCb();
            }
          });
        };

        Tools.LoadIcon = function LoadIcon(lang, gameId, checkCb) {
          var _this3 = this;

          if (gameId === Define.GAME_ID.ENTITY || gameId === Define.GAME_ID.DEFAULT) {
            return;
          }

          if (this.m_url === "") {
            if (sys.isNative || AppManager.LobbyData) {
              try {
                var url = AppManager.GetUrl();
                var reg = /\.com/g;
                this.m_url = url.slice(0, url.search(reg) + 4) + "/smallicon/";

                if (url === "") {
                  error("No URL!");
                }
              } catch (error) {
                error(JSON.stringify(error));
              }
            } else {
              var _url2 = window.location.href;
              var _reg2 = /\.com/g;
              this.m_url = _url2.slice(0, _url2.search(_reg2) + 4) + "/smallicon/";
            }
          }

          if (lang !== Define.Lang.CN && lang !== Define.Lang.EN) {
            lang = Define.Lang.EN;
          }

          if (Object.keys(this.m_tadaIcons).length === 0) {
            for (var i = 0; i < Define.TADA_ICONS.length; i++) {
              this.m_tadaIcons[Define.TADA_ICONS[i]] = true;
            }
          }

          var preName = "";

          if (this.IsTada && this.m_tadaIcons[gameId]) {
            preName = "tada_";
          }

          if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
            this.m_url = "https://test-wbgame.jlfafafa3.com/smallicon/";
          } // let remoteUrl = this.m_url + "Icons/" + gameId + "_" + lang + ".png";


          var remoteUrl = this.m_url + "Icons/" + preName + gameId + "_" + lang + ".jpg";
          assetManager.loadRemote(remoteUrl, {
            ext: ".jpg"
          }, function (err, imageAsset) // assetManager.loadRemote( this.m_url + "Icons/" + preName + gameId + "_" + lang + ".png", { reload: true }, ( error: Error, resource: Texture2D ) =>
          {
            if (err) {
              error("assetManager LoadIcon err:", err); //失敗，重新載入

              Tools.LoadIcon(lang, gameId, checkCb);
              return;
            }

            _this3.m_icons[gameId] = new SpriteFrame();
            var texture = new Texture2D();
            texture.image = imageAsset;
            _this3.m_icons[gameId].texture = texture;

            if (checkCb) {
              checkCb();
            }
          });
        }
        /**
         * 載印度人頭像
         * @param str 頭像編號1-50
         * @param sp 放頭像的節點
         */
        ;

        Tools.LoadHeadIcon = function LoadHeadIcon(str, sp) {
          if (this.m_url === "") {
            if (sys.isNative || AppManager.LobbyData) {
              try {
                var url = AppManager.GetUrl();
                var reg = /\.com/g;
                this.m_url = url.slice(0, url.search(reg) + 4) + "/smallicon/";

                if (url === "") {
                  error("No URL!");
                }
              } catch (error) {
                error(JSON.stringify(error));
              }
            } else {
              var _url3 = window.location.href;
              var _reg3 = /\.com/g;
              this.m_url = _url3.slice(0, _url3.search(_reg3) + 4) + "/smallicon/";
            }
          }

          if (EnvironmentConfig.ENV_TYPE !== Define.EVN.TEST) {
            assetManager.loadRemote(this.m_url + "headIcons/" + str + ".jpg", {
              reload: true
            }, function (err, resource) {
              if (err) {
                error(err.message || err);
                return;
              }

              var spriteFrame = new SpriteFrame();
              spriteFrame.texture = resource;
              if (spriteFrame) sp.spriteFrame = spriteFrame;
            });
          }
        }
        /**
         * 載入音效
         * @param bundle 資源所在的bundle
         * @param name 要載入的資源或資料夾名稱
         * @param isFolder 是否為資料夾
         * @param endCb 完成後的Callback
         */
        ;

        Tools.LoadAudoiClips = function LoadAudoiClips(bundle, name, isFolder, endCb) {
          if (isFolder) {
            bundle.loadDir(name, AudioClip, function (error, assets) {
              if (error) {
                Tools.LoadAudoiClips(bundle, name, isFolder, endCb);
                return;
              }

              endCb && endCb(assets);
            });
          } else {
            bundle.load(name, function (error, assets) {
              if (error) {
                Tools.LoadAudoiClips(bundle, name, isFolder, endCb);
                return;
              }

              endCb && endCb(assets);
            });
          }
        }
        /**
         * 取得動畫特定事件的時間點
         * @param animClip 指定的動畫
         * @param funcName event的func名稱
         * @param paramNames event的參數名稱，須按設定的順序且數量要一致
         * @returns 返回該事件的時間點，沒找到會回傳0
         */
        ;

        Tools.GetAnimEventTime = function GetAnimEventTime(animClip, funcName) {
          var time = 0;
          var events = animClip.events;

          for (var i = 0; i < events.length; i++) {
            var event = events[i];

            if (event.func === funcName && (arguments.length <= 2 ? 0 : arguments.length - 2) === event.params.length) {
              var sameCount = 0;
              var params = event.params;

              for (var j = 0; j < params.length; j++) {
                if (params[j] === (j + 2 < 2 || arguments.length <= j + 2 ? undefined : arguments[j + 2])) {
                  sameCount++;
                }
              }

              if (sameCount === params.length) {
                time = event.frame;
                break;
              }
            }
          }

          return time;
        };

        Tools.GetAllAnimEventTime = function GetAllAnimEventTime(animClip, funcName) {
          var times = [];
          var events = animClip.events;

          for (var i = 0; i < events.length; i++) {
            var event = events[i];

            if (event.func === funcName && (arguments.length <= 2 ? 0 : arguments.length - 2) === event.params.length) {
              var sameCount = 0;
              var params = event.params;

              for (var j = 0; j < params.length; j++) {
                if (params[j] === (j + 2 < 2 || arguments.length <= j + 2 ? undefined : arguments[j + 2])) {
                  sameCount++;
                }
              }

              if (sameCount === params.length) {
                times.push(event.frame);
              }
            }
          }

          return times;
        };

        Tools.GetFirstBetIndex = function GetFirstBetIndex(ApiID) {
          if (Define.BET_LEVEL > 0) {
            //Server資料從1開始
            return Define.BET_LEVEL - 1;
          }

          var index = 2; // 預設值

          for (var i = 0; i < FirstBetIndex.length; i++) {
            if (FirstBetIndex[i].ApiID == Tools.strip(Number(ApiID))) {
              if (FirstBetIndex[i].SAC && FirstBetIndex[i].SAC == Define.SUB_AGENT_CODE) {
                index = FirstBetIndex[i].Index;
                break;
              } else if (FirstBetIndex[i].GAME && FirstBetIndex[i].GAME == Number(Define.NOW_GAME_ID)) {
                index = FirstBetIndex[i].Index;
                break;
              } else if (!FirstBetIndex[i].SAC && !FirstBetIndex[i].GAME) {
                index = FirstBetIndex[i].Index;
                break;
              }
            }
          }

          return index;
        };

        Tools.CheckSwitchOff = function CheckSwitchOff(key) {
          if (Define.SwitchOffKeys.length != 0) {
            for (var i = 0; i < Define.SwitchOffKeys.length; i++) {
              if (Define.SwitchOffKeys[i] == key) {
                return true;
              }
            }
          }

          return false;
        };

        Tools.SetSwitchOffCbs = function SetSwitchOffCbs(key, cb) {
          this.m_switchOffCbs[key] = cb;
        };

        Tools.SwitchOffUpdate = function SwitchOffUpdate() {
          for (var _key7 in this.m_switchOffCbs) {
            if (Object.prototype.hasOwnProperty.call(this.m_switchOffCbs, _key7)) {
              var element = this.m_switchOffCbs[_key7];

              var _isClose = this.CheckSwitchOff(Number(_key7));

              element && element(_isClose);
            }
          }
        };

        Tools.CheckBMMRequest = function CheckBMMRequest(requestApi) {
          var nowApi = Number(Define.API_ID);

          for (var i = 0; i < requestApi.length; i++) {
            if (nowApi == requestApi[i]) {
              return true;
            }
          }

          return false;
        };

        Tools.DecodeProtoString = function DecodeProtoString(str) {
          error("DecodeProtoString", str, window.btoa(str));
          var binary_string = null;

          try {
            binary_string = window.atob(str);
          } catch (error) {
            try {
              binary_string = window.btoa(str);
            } catch (error) {
              error("Can't decode string", str);
            }
          }

          if (binary_string) {
            var len = binary_string.length;
            var bytes = new Uint8Array(len);

            for (var i = 0; i < len; i++) {
              bytes[i] = binary_string.charCodeAt(i);
            }

            return bytes;
          }

          return null;
        };

        Tools.CheckPathAmerica = function CheckPathAmerica(path) {
          // error( "CheckPathAmerica path:", path )
          if (path.indexOf(Define.ResFolderName.americas) > 0) {
            return true;
          }

          return false;
        };

        Tools.SetFont = function SetFont(label) {
          if (!label.font) {
            if (this.m_lang == Define.Lang.BN || this.m_lang == Define.Lang.HI || this.m_lang == Define.Lang.TH) {
              label.cacheMode = Label.CacheMode.NONE;
            }

            if (label instanceof Label) {
              if (label.isBold && Define.DefaultExtraFont) {
                label.font = Define.DefaultExtraFont;

                if (sys.os == sys.OS.IOS) {
                  label.isBold = false;
                }
              } else {
                label.font = Define.DefaultFont;
              }
            } else {
              label.font = Define.DefaultFont;
            }
          }
        } //前導
        ;

        Tools.HasReadyCb = function HasReadyCb() {
          if (this.m_readyCb) {
            return true;
          } else {
            return false;
          }
        };

        Tools.AddReadyCb = function AddReadyCb(cb) {
          this.m_readyCb = cb;
        };

        Tools.GameReady = function GameReady() {
          return this.m_readyCb && this.m_readyCb();
        };

        Tools.AddProgressCb = function AddProgressCb(cb) {
          this.m_progressCb = cb;
        };

        Tools.PerformanceProgress = function PerformanceProgress(p) {
          return this.m_progressCb && this.m_progressCb(p);
        };

        Tools.AddOnRotationCb = function AddOnRotationCb(cb) {
          var _this4 = this;

          this.m_onRotationCbs.push(cb);

          if (this.m_onRotationCbs.length === 1) {
            view.setResizeCallback(function () {
              for (var i = 0; i < _this4.m_onRotationCbs.length; i++) {
                _this4.m_onRotationCbs[i]();
              }
            });
          }
        }
        /**
         * 模仿原本zIndex功能
         * @param node 要設定的節點
         * @param zIndex Z Index值
         */
        ;

        Tools.SetZIndex = function SetZIndex(node, zIndex) {
          if (!node) {
            return;
          }

          var parent = node.parent;

          if (zIndex === undefined || zIndex === null) {
            node.zIndex = 0;
          } else {
            node.zIndex = zIndex;
          }

          if (parent) {
            var children = parent.children.concat();
            children.sort(function (a, b) {
              if (a.zIndex == null) {
                a.zIndex = 0;
              }

              if (b.zIndex == null) {
                b.zIndex = 0;
              }

              if (a.zIndex > b.zIndex) {
                return 1;
              } else if (a.zIndex < b.zIndex) {
                return -1;
              } else {
                return 0;
              }
            });
            var maxIndex = children.length;

            for (var _iterator = _createForOfIteratorHelperLoose(children), _step; !(_step = _iterator()).done;) {
              var _node = _step.value;

              _node.setSiblingIndex(maxIndex);
            }
          } else {
            warn("No Parent Node，Can't Sort Node!!");
          }
        }
        /*@ch 原本節點已經是排序好的才能使用*/
        ;

        Tools.SetOrderedZindex = function SetOrderedZindex(node, zIndex, parent) {
          if (zIndex === void 0) {
            zIndex = 0;
          }

          if (!node) {
            error("Node missed!!");
            return;
          }

          if (!parent && !node.parent) {
            error("Must give a parent");
            return;
          }

          parent = parent || node.parent;
          node.zIndex = zIndex;
          var children = parent.children.concat();
          var pos = this.zIndexBinarySearch(children, node);
          parent.insertChild(node, pos);
        }
        /*@ch 給Zindex用的Binary Search*/
        ;

        Tools.zIndexBinarySearch = function zIndexBinarySearch(children, target) {
          var left = 0;
          var right = children.length - 1;
          var mid;

          while (left <= right) {
            mid = Math.floor(this.divide(left + right, 2)); // console.log( "Processing...", left, mid, right );
            // 保險

            if (children[mid].zIndex === undefined) children[mid].zIndex = 0;
            if (target.zIndex < children[mid].zIndex) right = mid - 1;else left = mid + 1;
          }

          return left;
        };

        Tools.OnExit = function OnExit() {
          this.m_line = 0;
          this.m_switchOffCbs = {};
          this.m_logoSpriteFrames = null;
          this.m_usingLogoSpriteFrame = null;
          this.m_isCheckApi = false;
          this.m_defineFormatNumType = Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT;
          this.m_dotDigit = 2;
          this.SmallDotDigit = 3;
          this.m_closeUrl = null;
          this.m_url = "";
          this.m_icons = {};
          this.m_tadaIcons = {};
          this.m_tags = {};
          this.CloseIntroLoading = [];
          this.TriggerFeaturesShow = null;
          this.TriggerUnshow = null;
          this.NotifyFeaturesDemoOpen = null;
          this.m_readyCb = null;
          this.m_onRotationCbs = [];
        };
        /**
         * atf是否包含flag
         * @param atf Server給予的AwardTypeFlag
         * @param flag 要確認的flag
         * @returns 包含的話回傳true
         */


        Tools.ParseAwardTypeFlag = function ParseAwardTypeFlag(atf, flag) {
          if ((atf & flag) == flag) {
            return true;
          } else {
            return false;
          }
        };

        _createClass(Tools, null, [{
          key: "Line",
          get: function get() {
            return this.m_line;
          }
        }, {
          key: "isIndia",
          get: function get() {
            var skin = Tools.GetLinkParameterByName("skin");
            return Define.API_ID == "200" || Define.API_ID == "201" || skin && skin == SkinType.ACE_ROYALE.toString();
          }
          /** india2 = jili star */

        }, {
          key: "isIndia2",
          get: function get() {
            var skin = Tools.GetLinkParameterByName("skin");
            return Define.API_ID == "202" || skin && skin == SkinType.JILI_START.toString();
          }
        }, {
          key: "IsTada",
          get: function get() {
            return this.m_isTada;
          }
        }, {
          key: "IsTadaCasino",
          get: function get() {
            var skin = Tools.GetLinkParameterByName("skin");
            return Define.API_ID == "301" || skin && skin == SkinType.TADA_CASINO.toString();
          }
        }, {
          key: "IsUFAGame",
          get: function get() {
            var skin = Tools.GetLinkParameterByName("skin");
            return (Define.API_ID == "1072" || Define.API_ID == "1003") && this.CheckUFAIcon() || skin && skin == SkinType.UFA.toString();
          }
        }, {
          key: "IsNone",
          get: function get() {
            var skin = Tools.GetLinkParameterByName("skin");
            return skin && skin == SkinType.NONE.toString();
          }
        }, {
          key: "LogoSpriteFrames",
          set: function set(v) {
            this.m_logoSpriteFrames = v;
          }
        }, {
          key: "OtherLogo",
          get: function get() {
            return this.m_otherLogo;
          }
        }, {
          key: "KeepGLISetting",
          get: function get() {
            return this.m_keepGLISetting;
          }
        }, {
          key: "CURR_DEFINE_FORMAT_NUMBER_TYPE",
          get: function get() {
            return Tools.m_defineFormatNumType;
          }
          /**小數點顯示位數 */

        }, {
          key: "CloseUrl",
          get: function get() {
            return this.m_closeUrl;
          },
          set: function set(v) {
            this.m_closeUrl = v;
          }
        }, {
          key: "Icons",
          get: function get() {
            return this.m_icons;
          }
        }, {
          key: "Tags",
          get: function get() {
            return this.m_tags;
          }
        }, {
          key: "Lang",
          set: function set(v) {
            this.m_lang = v;
          }
        }, {
          key: "IsUKGC",
          get: function get() {
            return Define.API_ID == Define.BMMApi.UKGC.toString();
          }
        }]);

        return Tools;
      }());
      Tools.m_line = 0;
      Tools.m_isTada = false;
      Tools.m_switchOffCbs = {};
      Tools.m_logoSpriteFrames = null;
      Tools.m_usingLogoSpriteFrame = null;
      Tools.m_isCheckApi = false;
      Tools.m_otherLogo = false;
      Tools.m_keepGLISetting = false;
      Tools.FORMAT_NUMBER_TYPE = {
        /**完全不需要顯示小數點*/
        NONE_DOT: 0,

        /**看設定是否要顯示小數點*/
        DEFINE_DOT: 1,

        /**常駐小數點*/
        PERMANENT_DOT: 2,

        /**小數點為0不顯示，有的話就顯示*/
        DEFINE_DOT_NONE_ZERO: 3,

        /**顯示所有位數*/
        ALL_DIGITS: 4,

        /**顯示指定位數小數點(超過三位) **/
        SPECIFY_DOT: 5
      };
      Tools.m_defineFormatNumType = Tools.FORMAT_NUMBER_TYPE.PERMANENT_DOT;
      Tools.m_dotDigit = 2;
      Tools.SmallDotDigit = 3;
      Tools.m_isRevert = false;
      Tools.m_closeUrl = null;
      Tools.m_url = "";
      Tools.m_icons = {};
      Tools.m_tags = {};
      Tools.m_tadaIcons = {};
      Tools.m_lang = "";
      Tools.CloseIntroLoading = [];
      Tools.TriggerFeaturesShow = null;
      Tools.TriggerUnshow = null;
      Tools.NotifyFeaturesDemoOpen = null;
      Tools.m_readyCb = null;
      Tools.m_progressCb = null;
      Tools.m_onRotationCbs = [];

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TrialManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './ConnectManager.ts', './LocaleStringManager.ts', './gaiaProto.mjs_cjs=&original=.js', './GaiaManager.ts', './ManagerDataStructure.ts', './VipManager.ts', './Protocol.ts', './EnvironmentConfig.ts', './gaiaProto.js'], function (exports) {
  'use strict';

  var _createClass, cclegacy, Define, ConnectManager, LocaleStringManager, gaiaManager, ManagerDataStructure, VipManager, BackpackProtocol, EnvironmentConfig, _cjsExports;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      ConnectManager = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, null, function (module) {
      gaiaManager = module.gaiaManager;
    }, function (module) {
      ManagerDataStructure = module.ManagerDataStructure;
    }, function (module) {
      VipManager = module.default;
    }, function (module) {
      BackpackProtocol = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "009a9Z9FD5E46xEILiYYpYM", "TrialManager", undefined);

      var TrialCommandType = {
        PROTOCOL_TYPE_TRIAL_INFO: 51,
        PROTOCOL_TYPE_TRIAL_SIGNUP: 52,
        PROTOCOL_TYPE_TRIAL_GIVEUP: 53
      };

      var TrialManager = /*#__PURE__*/function () {
        function TrialManager() {
          this.m_trial = null;
          this.m_createViewCb = null;
        }

        var _proto = TrialManager.prototype;

        _proto.OnLoad = function OnLoad(trial) {
          this.m_trial = trial;
        };

        _proto.OnDestroy = function OnDestroy() {
          this.m_trial = null;
        };

        _proto.Init = function Init(extraManager, infoCb, signUpCb, giveUpCb, startTrialCb, stopTrialCb, trialCb) {
          var _this$m_trial;

          (_this$m_trial = this.m_trial) == null ? void 0 : _this$m_trial.Init(extraManager, infoCb, signUpCb, giveUpCb, startTrialCb, stopTrialCb, trialCb);
        };

        _proto.NewInit = function NewInit(gameCb, gameEndCb, gameChangeBetCb) {
          var _this = this;

          var infoCb = function infoCb(cb) {
            if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST) {
              var _ack = {
                "info": {
                  "acktype": 0,
                  "nowactno": 22101301,
                  "targettype": 0,
                  "awarddesc": [{
                    "award": 1,
                    "type": 0,
                    "gate": 30,
                    "gameid": 184,
                    "itemid": 1184301,
                    "amount": 1,
                    "data": {
                      "star": 1,
                      "icon": 31184,
                      "type": 3,
                      "bet": 0.06,
                      "gamename": "免費遊戲"
                    },
                    "money": 100
                  }, {
                    "award": 2,
                    "type": 1,
                    "gate": 60,
                    "gameid": 0,
                    "itemid": 0,
                    "amount": 0,
                    "data": {
                      "star": 0,
                      "icon": 0,
                      "type": 0,
                      "bet": 0,
                      "gamename": ""
                    },
                    "money": 200
                  }, {
                    "award": 3,
                    "type": 2,
                    "gate": 90,
                    "gameid": 0,
                    "itemid": 0,
                    "amount": 0,
                    "data": {
                      "star": 0,
                      "icon": 0,
                      "type": 0,
                      "bet": 0,
                      "gamename": ""
                    },
                    "money": 300
                  }],
                  "pstate": 5,
                  "trialinfo": {
                    "apiid": 6,
                    "gameid": 184,
                    "sac": 0,
                    "activityno": 22101301,
                    "totalbet": 9,
                    "totalwin": 0,
                    "property": 996
                  },
                  "bet": [1.2],
                  "remind": false,
                  "remindinfo": {
                    "award": 0,
                    "type": 0,
                    "gate": 0,
                    "gameid": 0,
                    "itemid": 0,
                    "amount": 0,
                    "data": {
                      "star": 0,
                      "icon": 0,
                      "type": 0,
                      "bet": 0,
                      "gamename": ""
                    },
                    "money": 0
                  },
                  // "rtag": 0,
                  "start": 1665594000,
                  "end": 1667581200
                },
                "ret": 0 // "token": "bcc2298a623e50fc8a05e0e417a201a45dd49ed9",
                // "type": 51

              };

              _this.m_trial.OnRecvTrialInfo(_ack);
            }

            if (Define.APP) {
              var data = new _cjsExports.gaiaProto.TrialInfoReq();
              data.aid = Number(Define.APP.GetAID());
              data.token = Define.APP.GetAToken();
              data.vip = VipManager.GetInstance().VipInfo.Lv;
              data.lang = BackpackProtocol.Language[LocaleStringManager.CurrLang];
              var req = new ManagerDataStructure.TrialInfoReq();
              req.reqData = _cjsExports.gaiaProto.TrialInfoReq.encode(data).finish();
              ConnectManager.GetInstance().SendCommand(req, function (ack) {
                gaiaManager.CheckAck(ack, function (type, data) {
                  _this.OnRecvAck(type, data);
                });
              }, false, true);
            }
          };

          var signUpCb = function signUpCb(cb, actNo) {
            if (Define.APP) {
              var data = new _cjsExports.gaiaProto.TrialSignUpReq();
              data.token = Define.APP.GetAToken();
              data.aid = Number(Define.APP.GetAID());
              data.vip = VipManager.GetInstance().VipInfo.Lv;
              data.actno = actNo;
              var req = new ManagerDataStructure.TrialSignUpReq();
              req.reqData = _cjsExports.gaiaProto.TrialSignUpReq.encode(data).finish();
              ConnectManager.GetInstance().SendCommand(req, function (ack) {
                gaiaManager.CheckAck(ack, function (type, data) {
                  _this.OnRecvAck(type, data);
                });
              }, false, true);
            }
          };

          var giveUpCb = function giveUpCb(cb, actNo) {
            if (Define.APP) {
              var data = new _cjsExports.gaiaProto.TrialGiveUpReq();
              data.aid = Number(Define.APP.GetAID());
              data.token = Define.APP.GetAToken();
              data.actno = actNo;
              var req = new ManagerDataStructure.TrialGiveUpReq();
              req.reqData = _cjsExports.gaiaProto.TrialGiveUpReq.encode(data).finish();
              ConnectManager.GetInstance().SendCommand(req, function (ack) {
                gaiaManager.CheckAck(ack, function (type, data) {
                  _this.OnRecvAck(type, data);
                });
              }, false, true);
            }
          };

          this.m_createViewCb(gameCb, gameEndCb, gameChangeBetCb, infoCb, signUpCb, giveUpCb);
        };

        _proto.OnRecvAck = function OnRecvAck(type, data) {
          switch (type) {
            case TrialCommandType.PROTOCOL_TYPE_TRIAL_INFO:
              {
                var _info = _cjsExports.gaiaProto.TrialInfoAck.decode(data);

                var ackInfo = this.ReBuildInfoAck(_info);
                var _ack2 = {
                  ret: 0,
                  info: ackInfo
                };
                this.OnRecvTrialInfo(_ack2);
                break;
              }

            case TrialCommandType.PROTOCOL_TYPE_TRIAL_SIGNUP:
              {
                var _info2 = _cjsExports.gaiaProto.TrialSignUpAck.decode(data);

                var trialinfoPData = {
                  apiid: _info2.trialinfo.apiid,
                  gameid: _info2.trialinfo.gameid,
                  sac: _info2.trialinfo.sac,
                  activityno: _info2.trialinfo.activityno,
                  totalbet: _info2.trialinfo.totalbet,
                  totalwin: _info2.trialinfo.totalwin,
                  property: _info2.trialinfo.property
                };
                var _ackInfo = {
                  acktype: _info2.acktype,
                  trialinfo: trialinfoPData
                };
                var _ack3 = {
                  ret: 0,
                  info: _ackInfo
                };
                this.OnRecvTrialSignUp(_ack3);
                break;
              }

            case TrialCommandType.PROTOCOL_TYPE_TRIAL_GIVEUP:
              {
                var _info3 = _cjsExports.gaiaProto.TrialGiveUpAck.decode(data);

                var _ackInfo2 = {
                  acktype: _info3.acktype,
                  award: _info3.award
                };
                var _ack4 = {
                  ret: 0,
                  info: _ackInfo2
                };
                this.OnRecvTrialGiveUp(_ack4);
                break;
              }
          }
        };

        _proto.ReBuildInfoAck = function ReBuildInfoAck(info) {
          var infoAwarddesc = []; // for ( let i = 0; i < info.awarddesc.length; i++ )

          for (var i = info.awarddesc.length - 1; i >= 0; i--) {
            var infoData = {
              star: info.awarddesc[i].data.star,
              icon: info.awarddesc[i].data.icon,
              type: info.awarddesc[i].data.type,
              bet: info.awarddesc[i].data.bet,
              gamename: info.awarddesc[i].data.gamename
            };
            var tempAwarddesc = {
              award: info.awarddesc[i].award,
              type: info.awarddesc[i].type,
              gate: info.awarddesc[i].gate,
              gameid: info.awarddesc[i].gameid,
              itemid: info.awarddesc[i].itemid,
              amount: info.awarddesc[i].amount,
              data: infoData,
              money: info.awarddesc[i].money
            };
            infoAwarddesc.push(tempAwarddesc);
          }

          var infoPData = {
            apiid: info.trialinfo.apiid,
            gameid: info.trialinfo.gameid,
            sac: info.trialinfo.sac,
            activityno: info.trialinfo.activityno,
            totalbet: info.trialinfo.totalbet,
            totalwin: info.trialinfo.totalwin,
            property: info.trialinfo.property
          };
          var remindinfoData = {
            star: info.remindinfo.data.star,
            icon: info.remindinfo.data.icon,
            type: info.remindinfo.data.type,
            bet: info.remindinfo.data.bet,
            gamename: info.remindinfo.data.gamename
          };
          var infoAwardData = {
            award: info.remindinfo.award,
            type: info.remindinfo.type,
            gate: info.remindinfo.gate,
            gameid: info.remindinfo.gameid,
            itemid: info.remindinfo.itemid,
            amount: info.remindinfo.amount,
            data: remindinfoData,
            money: info.remindinfo.money
          };
          var ackInfo = {
            acktype: info.acktype,
            nowactno: info.nowactno,
            targettype: info.targettype,
            awarddesc: infoAwarddesc,
            pstate: info.pstate,
            trialinfo: infoPData,
            bet: info.bet,
            remind: info.remind,
            remindinfo: infoAwardData,
            start: Number(info.start),
            end: Number(info.end)
          };
          return ackInfo;
        };

        _proto.OnRecvTrialInfo = function OnRecvTrialInfo(ack) {
          var _this$m_trial2;

          (_this$m_trial2 = this.m_trial) == null ? void 0 : _this$m_trial2.OnRecvTrialInfo(ack);
        };

        _proto.OnRecvTrialSignUp = function OnRecvTrialSignUp(ack) {
          var _this$m_trial3;

          (_this$m_trial3 = this.m_trial) == null ? void 0 : _this$m_trial3.OnRecvTrialSignUp(ack);
        };

        _proto.OnRecvTrialGiveUp = function OnRecvTrialGiveUp(ack) {
          var _this$m_trial4;

          (_this$m_trial4 = this.m_trial) == null ? void 0 : _this$m_trial4.OnRecvTrialGiveUp(ack);
        };

        _proto.SetSpinAckTrialInfo = function SetSpinAckTrialInfo(trialfinish, trialaward) {
          var _this$m_trial5;

          (_this$m_trial5 = this.m_trial) == null ? void 0 : _this$m_trial5.SetSpinAckTrialInfo(trialfinish, trialaward);
        };

        _proto.SetGameState = function SetGameState(reason) {
          var _this$m_trial6;

          (_this$m_trial6 = this.m_trial) == null ? void 0 : _this$m_trial6.SetGameState(reason);
        };

        _proto.ShowTrialView = function ShowTrialView() {
          var _this$m_trial7;

          (_this$m_trial7 = this.m_trial) == null ? void 0 : _this$m_trial7.ShowTrialView();
        };

        _proto.CloseTrialView = function CloseTrialView() {
          var _this$m_trial8;

          (_this$m_trial8 = this.m_trial) == null ? void 0 : _this$m_trial8.CloseTrialView();
        };

        _proto.IsTrialFinish = function IsTrialFinish() {
          return this.m_trial ? this.m_trial.IsTrialFinish() : false;
        };

        _proto.FinishTrial = function FinishTrial(infoAckType) {
          var _this$m_trial9;

          (_this$m_trial9 = this.m_trial) == null ? void 0 : _this$m_trial9.FinishTrial(infoAckType);
        };

        _proto.SetProgess = function SetProgess(totalWin, totalBet) {
          var _this$m_trial10;

          (_this$m_trial10 = this.m_trial) == null ? void 0 : _this$m_trial10.SetProgess(totalWin, totalBet);
        };

        _proto.LoadAtlasFile = function LoadAtlasFile() {
          var _this$m_trial11;

          (_this$m_trial11 = this.m_trial) == null ? void 0 : _this$m_trial11.LoadAtlasFile();
        };

        _proto.SetTxt = function SetTxt() {
          var _this$m_trial12;

          (_this$m_trial12 = this.m_trial) == null ? void 0 : _this$m_trial12.SetTxt();
        };

        _proto.AddEndCb = function AddEndCb(cb) {
          var _this$m_trial13;

          (_this$m_trial13 = this.m_trial) == null ? void 0 : _this$m_trial13.AddEndCb(cb);
        };

        _proto.GetTrialLvlHint = function GetTrialLvlHint() {
          return this.m_trial ? this.m_trial.GetTrialLvlHint() : null;
        };

        _proto.GetCurrentLevelInfo = function GetCurrentLevelInfo() {
          return this.m_trial ? this.m_trial.GetCurrentLevelInfo() : null;
        };

        _proto.GetRecordByType = function GetRecordByType() {
          var _this$m_trial14;

          (_this$m_trial14 = this.m_trial) == null ? void 0 : _this$m_trial14.GetRecordByType();
        };

        _proto.GetTimeString = function GetTimeString(time) {
          var _this$m_trial15;

          (_this$m_trial15 = this.m_trial) == null ? void 0 : _this$m_trial15.GetTimeString(time);
        };

        _createClass(TrialManager, [{
          key: "CreateViewCb",
          set: function set(v) {
            this.m_createViewCb = v;
          }
        }, {
          key: "GetTrailBetList",
          get: function get() {
            return this.m_trial ? this.m_trial.GetTrailBetList : null;
          }
        }, {
          key: "GetNowActNo",
          get: function get() {
            return this.m_trial ? this.m_trial.GetNowActNo : null;
          }
        }, {
          key: "IsTrialViewOpen",
          get: function get() {
            return this.m_trial ? this.m_trial.IsTrialViewOpen : false;
          }
        }, {
          key: "HasTrial",
          get: function get() {
            if (this.m_trial) {
              return true;
            } else {
              return false;
            }
          }
        }]);

        return TrialManager;
      }();

      var trialManager = exports('trialManager', new TrialManager());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TrialReward.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TrialSetting.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Component, TrialSetting;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      TrialSetting = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "9c9b9slgSdOe721e4uFX8ck", "TrialReward", undefined);

      var RewardImg = exports('RewardImg', {
        Img_Card: 0,
        Img_Card_Dark: 1,
        Img_Cash: 2,
        Img_Cash_Dark: 3,
        Img_Coin: 4,
        Img_Coin_Dark: 5
      });
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TrialReward = exports('default', (_dec = property({
        type: Node,
        tooltip: "獎勵"
      }), _dec2 = property({
        type: Node,
        tooltip: "獎勵描述"
      }), _dec3 = property({
        type: Node,
        tooltip: "箭頭"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TrialReward, _Component);

        function TrialReward() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_awards", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_awardsDesc", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_arrow", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = TrialReward.prototype;

        _proto.start = function start() {} // awards : 獎項細節
        // isTwoAward : 是否顯示兩個獎項 (兩個獎項左邊的表示已獲得：要亮起來)
        // showArrow : 該獎項是否要顯示箭頭(箭頭右邊才要顯示)
        ;

        _proto.UpdateAwardPanel = function UpdateAwardPanel(awards, showArrow) {
          if (showArrow === void 0) {
            showArrow = true;
          }

          if (awards) {
            this.m_arrow.active = showArrow; // 獎項 -----------------------------------------

            for (var i = 0; i < this.m_awards.length; i++) {
              this.m_awards[i].active = false;
            }

            var awardIdx = awards.type * 2; // 暗圖

            if (!showArrow) {
              awardIdx = awardIdx + 1; // 亮圖
            }

            this.m_awards[awardIdx].active = true; // 下方說明 -----------------------------------------

            this.m_awardsDesc[0].active = false;
            this.m_awardsDesc[1].active = false;

            if (awards.type == TrialSetting.AwardType.AwardTypeCard) {
              this.m_awardsDesc[0].active = false; // this.m_awardsDesc[ 1 ].active = true;

              this.m_awardsDesc[1].active = false; // 後來改不用顯示

              this.m_awardsDesc[1].getComponent(Label).string = awards.amount.toString();
            } else if (awards.type == TrialSetting.AwardType.AwardTypeRemainChips) {
              this.m_awardsDesc[0].active = false;
              this.m_awardsDesc[1].active = true;
              this.m_awardsDesc[1].getComponent(Label).string = "?";
            } else {
              this.m_awardsDesc[0].active = false;
              this.m_awardsDesc[1].active = true;
              this.m_awardsDesc[1].getComponent(Label).string = awards.money.toString();
            }
          }
        };

        return TrialReward;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_awards", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_awardsDesc", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_arrow", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TrialSetting.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, Enum;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Enum = module.Enum;
    }],
    execute: function () {
      cclegacy._RF.push({}, "97178Yah69MrIv8f/vl4PgG", "TrialSetting", undefined);

      var PlayerStateCode;

      (function (PlayerStateCode) {
        PlayerStateCode[PlayerStateCode["PStateNoActivity"] = 0] = "PStateNoActivity";
        PlayerStateCode[PlayerStateCode["PStateNoQualifi"] = 1] = "PStateNoQualifi";
        PlayerStateCode[PlayerStateCode["PStateCanSignUp"] = 2] = "PStateCanSignUp";
        PlayerStateCode[PlayerStateCode["PStateDontWant"] = 3] = "PStateDontWant";
        PlayerStateCode[PlayerStateCode["PStateFull"] = 4] = "PStateFull";
        PlayerStateCode[PlayerStateCode["PStateInTrial"] = 5] = "PStateInTrial";
        PlayerStateCode[PlayerStateCode["PStateFinished"] = 6] = "PStateFinished";
        PlayerStateCode[PlayerStateCode["PStateCardExploded"] = 7] = "PStateCardExploded";
        PlayerStateCode[PlayerStateCode["PStateOverValue"] = 8] = "PStateOverValue";
      })(PlayerStateCode || (PlayerStateCode = {}));

      var AckTypeCode;

      (function (AckTypeCode) {
        AckTypeCode[AckTypeCode["AckTypeSuccess"] = 0] = "AckTypeSuccess";
        AckTypeCode[AckTypeCode["AckTypeNoPlayer"] = 1] = "AckTypeNoPlayer";
        AckTypeCode[AckTypeCode["AckTypeTokenError"] = 2] = "AckTypeTokenError";
        AckTypeCode[AckTypeCode["AckTypeNotLogin"] = 3] = "AckTypeNotLogin";
        AckTypeCode[AckTypeCode["AckTypeSigned"] = 4] = "AckTypeSigned";
        AckTypeCode[AckTypeCode["AckTypeNoQualifi"] = 5] = "AckTypeNoQualifi";
        AckTypeCode[AckTypeCode["AckTypeFull"] = 6] = "AckTypeFull";
        AckTypeCode[AckTypeCode["AckTypeGivenUp"] = 7] = "AckTypeGivenUp";
        AckTypeCode[AckTypeCode["AckTypeActEnd"] = 8] = "AckTypeActEnd";
        AckTypeCode[AckTypeCode["AckTypeNoData"] = 9] = "AckTypeNoData";
        AckTypeCode[AckTypeCode["AckTypeWrongAct"] = 10] = "AckTypeWrongAct";
        AckTypeCode[AckTypeCode["AckTypeDBError"] = 11] = "AckTypeDBError";
        AckTypeCode[AckTypeCode["AckTypeInitFail"] = 12] = "AckTypeInitFail";
        AckTypeCode[AckTypeCode["AckTypeNoQualifiRtag"] = 13] = "AckTypeNoQualifiRtag";
        AckTypeCode[AckTypeCode["AckTypeNoQualifiVIP"] = 14] = "AckTypeNoQualifiVIP";
        AckTypeCode[AckTypeCode["AckTypeOverValue"] = 15] = "AckTypeOverValue";
        AckTypeCode[AckTypeCode["AckTypeIPBlocked"] = 16] = "AckTypeIPBlocked";
        AckTypeCode[AckTypeCode["AckTypeIFinished"] = 17] = "AckTypeIFinished";
      })(AckTypeCode || (AckTypeCode = {}));

      var FinishStateCode;

      (function (FinishStateCode) {
        FinishStateCode[FinishStateCode["FinishTypeNone"] = 0] = "FinishTypeNone";
        FinishStateCode[FinishStateCode["FinishTypeDone"] = 1] = "FinishTypeDone";
        FinishStateCode[FinishStateCode["FinishTypeTimeup"] = 2] = "FinishTypeTimeup";
        FinishStateCode[FinishStateCode["FinishTypeNoMoney"] = 3] = "FinishTypeNoMoney";
      })(FinishStateCode || (FinishStateCode = {}));

      var ServerErrorCode;

      (function (ServerErrorCode) {
        ServerErrorCode[ServerErrorCode["SERVER_SUCCESS"] = 0] = "SERVER_SUCCESS";
        ServerErrorCode[ServerErrorCode["SERVER_TRIAL_BETFAIL"] = 433] = "SERVER_TRIAL_BETFAIL";
        ServerErrorCode[ServerErrorCode["TRIAL_DB_ERROR"] = 401] = "TRIAL_DB_ERROR";
        ServerErrorCode[ServerErrorCode["TRIAL_NET_ERROR"] = 402] = "TRIAL_NET_ERROR";
        ServerErrorCode[ServerErrorCode["SERVER_ERROR_SEATE"] = 799] = "SERVER_ERROR_SEATE";
        ServerErrorCode[ServerErrorCode["SERVER_NOUSE"] = 899] = "SERVER_NOUSE";
        ServerErrorCode[ServerErrorCode["SERVER_MAINTAIN"] = 998] = "SERVER_MAINTAIN";
        ServerErrorCode[ServerErrorCode["SERVER_SHUTDOWN"] = 999] = "SERVER_SHUTDOWN";
        ServerErrorCode[ServerErrorCode["SERVER_NEED_AID"] = 1001] = "SERVER_NEED_AID";
        ServerErrorCode[ServerErrorCode["SERVER_NEED_LOGIN"] = 1002] = "SERVER_NEED_LOGIN";
        ServerErrorCode[ServerErrorCode["SERVER_TOKEN_ERROR"] = 1003] = "SERVER_TOKEN_ERROR";
      })(ServerErrorCode || (ServerErrorCode = {}));

      var TargetType;

      (function (TargetType) {
        TargetType[TargetType["TargetTypeWin"] = 0] = "TargetTypeWin";
        TargetType[TargetType["TargetTypeBet"] = 1] = "TargetTypeBet";
      })(TargetType || (TargetType = {}));

      var AwardType;

      (function (AwardType) {
        AwardType[AwardType["AwardTypeCard"] = 0] = "AwardTypeCard";
        AwardType[AwardType["AwardTypeMoney"] = 1] = "AwardTypeMoney";
        AwardType[AwardType["AwardTypeRemainChips"] = 2] = "AwardTypeRemainChips";
      })(AwardType || (AwardType = {}));

      var FinishType;

      (function (FinishType) {
        FinishType[FinishType["FinishTypeNone"] = 0] = "FinishTypeNone";
        FinishType[FinishType["FinishTypeDone"] = 1] = "FinishTypeDone";
        FinishType[FinishType["FinishTypeTimeup"] = 2] = "FinishTypeTimeup";
        FinishType[FinishType["FinishTypeNoMoney"] = 3] = "FinishTypeNoMoney";
      })(FinishType || (FinishType = {}));

      var TrialSetting = exports('default', function TrialSetting() {});
      TrialSetting.PlayerState = Enum(PlayerStateCode);
      TrialSetting.AckType = Enum(AckTypeCode);
      TrialSetting.ServerErrorType = Enum(ServerErrorCode);
      TrialSetting.Ret_Success = 0;
      TrialSetting.TargetType = Enum(TargetType);
      TrialSetting.AwardType = Enum(AwardType);
      TrialSetting.FinishStateCode = Enum(FinishStateCode);
      TrialSetting.COLOR_BEGIN = "<color=#cbb068 >";
      TrialSetting.COLOR_END = "</color>";

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TrialView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TrialSetting.ts', './Tools.ts', './ItemList.ts', './Define.ts', './MsgBox.ts', './LocaleStringManager.ts', './DataStruct.ts', './TrialReward.ts', './TrialManager.ts', './Wallet.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, _applyDecoratedDescriptor, _initializerDefineProperty, _assertThisInitialized, cclegacy, color, _decorator, Node, RichText, ProgressBar, Label, Button, Sprite, log, tween, v3, SpriteAtlas, error, Component, TrialSetting, Tools, ItemList, Define, MsgBox, LocaleStringManager, ConnectionDataStruct, TrialReward, trialManager, walletManger;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
      _decorator = module._decorator;
      Node = module.Node;
      RichText = module.RichText;
      ProgressBar = module.ProgressBar;
      Label = module.Label;
      Button = module.Button;
      Sprite = module.Sprite;
      log = module.log;
      tween = module.tween;
      v3 = module.v3;
      SpriteAtlas = module.SpriteAtlas;
      error = module.error;
      Component = module.Component;
    }, function (module) {
      TrialSetting = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      ItemList = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      MsgBox = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      ConnectionDataStruct = module.ConnectionDataStruct;
    }, function (module) {
      TrialReward = module.default;
    }, function (module) {
      trialManager = module.trialManager;
    }, function (module) {
      walletManger = module.walletManger;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19;

      cclegacy._RF.push({}, "6aeda5C00xD85YKw7obpqTM", "TrialView", undefined); // export const LangToNumber =
      // {
      //     cn: 0, // 簡體中文
      //     tw: 1, // 繁體中文
      //     en: 2, // 英文
      //     th: 3, // 泰文
      // }


      var TrialParam = exports('TrialParam', function TrialParam() {
        this.aid = -1;
        this.token = "";
        this.vip = 0;
        this.lang = 0;
      });
      var TrialActParam = exports('TrialActParam', function TrialActParam() {
        this.aid = -1;
        this.token = "";
        this.vip = 0;
        this.actno = -1;
      });
      var TrialInfo = exports('TrialInfo', /*#__PURE__*/function (_ConnectionDataStruct) {
        _inheritsLoose(TrialInfo, _ConnectionDataStruct);

        function TrialInfo() {
          var _this;

          _this = _ConnectionDataStruct.call(this) || this;
          _this.method = ConnectionDataStruct.RequestMethod.Get;
          _this.url = "/trial/info";
          _this.info = new TrialParam();
          return _this;
        }

        return TrialInfo;
      }(ConnectionDataStruct.ProtocolData));
      var TrialSignUp = exports('TrialSignUp', /*#__PURE__*/function (_ConnectionDataStruct2) {
        _inheritsLoose(TrialSignUp, _ConnectionDataStruct2);

        function TrialSignUp() {
          var _this2;

          _this2 = _ConnectionDataStruct2.call(this) || this;
          _this2.method = ConnectionDataStruct.RequestMethod.Get;
          _this2.url = "/trial/signup";
          _this2.info = new TrialActParam();
          return _this2;
        }

        return TrialSignUp;
      }(ConnectionDataStruct.ProtocolData));
      var TrialGiveUp = exports('TrialGiveUp', /*#__PURE__*/function (_ConnectionDataStruct3) {
        _inheritsLoose(TrialGiveUp, _ConnectionDataStruct3);

        function TrialGiveUp() {
          var _this3;

          _this3 = _ConnectionDataStruct3.call(this) || this;
          _this3.method = ConnectionDataStruct.RequestMethod.Get;
          _this3.url = "/trial/giveup";
          _this3.info = new TrialActParam();
          return _this3;
        }

        return TrialGiveUp;
      }(ConnectionDataStruct.ProtocolData));
      var BoxColor = {
        Active: color(255, 255, 255),
        Disable: color(119, 119, 119)
      };
      var BtnColor = {
        Active: color(255, 255, 255),
        Disable: color(100, 100, 100)
      };
      var SCALE_TIME = 0.05;
      var SpriteName = {
        Title: "FreeWinCash_Title",
        BtnTitle: "FreeWinCash_IconBtn_WinCash"
      }; // FreeWinCash_Title
      // FreeWinCash_IconBtn_WinCash
      // FreeWinCash_IconBtn_Free

      var TARGET_TYPE = [Define.StringKey.FREEWINCASH_WIN, Define.StringKey.FREEWINCASH_BET];
      var AWARD_TYPE = [Define.StringKey.FREEWINCASH_DEMOCOINS, Define.StringKey.FREEWINCASH_DEMOCOINS, Define.StringKey.FREEWINCASH_DEMOCOINS];
      var AWARD_TYPE_DESC = [Define.StringKey.FREEWINCASH_INSTRUCTION_6, Define.StringKey.FREEWINCASH_INSTRUCTION_7, Define.StringKey.FREEWINCASH_INSTRUCTION_8];
      var RefusedReason = exports('RefusedReason', {
        None: 0,
        Playing: 1,
        Item: 2
      });
      var GateInfo = exports('GateInfo', /*#__PURE__*/function () {
        var _proto = GateInfo.prototype;

        _proto.SetData = function SetData(gate, nowLevelIndex, awardType, progress) {
          this.m_gate = gate;
          this.m_nowLevelIndex = nowLevelIndex;
          this.m_awardType = awardType;
          this.m_progress = progress;
        };

        function GateInfo(gate, nowLevelIndex, awardType, progress) {
          this.m_gate = 0;
          this.m_nowLevelIndex = 0;
          this.m_awardType = 0;
          this.m_progress = 0;
          this.m_gate = gate;
          this.m_nowLevelIndex = nowLevelIndex;
          this.m_awardType = awardType;
          this.m_progress = progress;
        }

        _createClass(GateInfo, [{
          key: "Gate",
          get: // 目前階級的進度
          function get() {
            return this.m_gate;
          }
        }, {
          key: "NowLevelIndex",
          get: function get() {
            return this.m_nowLevelIndex;
          }
        }, {
          key: "AwardType",
          get: function get() {
            return this.m_awardType;
          }
        }, {
          key: "Progress",
          get: function get() {
            return this.m_progress;
          }
        }]);

        return GateInfo;
      }());
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TrialView = exports('default', (_dec = property({
        type: Node,
        tooltip: "洗碼介面"
      }), _dec2 = property({
        type: RichText,
        tooltip: "說明文字"
      }), _dec3 = property({
        type: ProgressBar,
        tooltip: "進度條"
      }), _dec4 = property({
        type: Label,
        tooltip: "進度累積贏分提示"
      }), _dec5 = property({
        type: Label,
        tooltip: "進度累積贏分提示(底下那層有顏色的也要同步顯示)"
      }), _dec6 = property({
        type: Button,
        tooltip: "參加/領取按鈕"
      }), _dec7 = property({
        type: Button,
        tooltip: "放棄按鈕"
      }), _dec8 = property({
        type: Button,
        tooltip: "領獎並離開活動按鈕"
      }), _dec9 = property({
        type: Button,
        tooltip: "繼續按鈕"
      }), _dec10 = property({
        type: Sprite,
        tooltip: "標題文字圖"
      }), _dec11 = property({
        type: Sprite,
        tooltip: "btn標題文字圖"
      }), _dec12 = property({
        type: Button,
        tooltip: "打叉按鈕"
      }), _dec13 = property({
        type: Button,
        tooltip: "說明頁按鈕"
      }), _dec14 = property({
        type: TrialReward,
        tooltip: "寶箱s"
      }), _dec15 = property({
        type: Label,
        tooltip: "目標類型"
      }), _dec16 = property({
        type: Label,
        tooltip: "signUpBtnLabel"
      }), _dec17 = property({
        type: Label,
        tooltip: "giveUpBtnLabel"
      }), _dec18 = property({
        type: Label,
        tooltip: "claimBtnLabel"
      }), _dec19 = property({
        type: Label,
        tooltip: "continueBtnLabel"
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TrialView, _Component);

        function TrialView() {
          var _this4;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this4 = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this4, "m_trialNode", _descriptor, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_descLabel", _descriptor2, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_progressBar", _descriptor3, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_totalWinLabel", _descriptor4, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_totalWinLabel_Under", _descriptor5, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_signUpBtn", _descriptor6, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_giveUpBtn", _descriptor7, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_claimBtn", _descriptor8, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_continueBtn", _descriptor9, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_titleSprite", _descriptor10, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_btnTitleSprite", _descriptor11, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_closeBtn", _descriptor12, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_descriptionBtn", _descriptor13, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_trialRewards", _descriptor14, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_targetTypeLabel", _descriptor15, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_signUpBtnLabel", _descriptor16, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_giveUpBtnLabel", _descriptor17, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_claimBtnLabel", _descriptor18, _assertThisInitialized(_this4));

          _initializerDefineProperty(_this4, "m_continueBtnLabel", _descriptor19, _assertThisInitialized(_this4));

          _this4.m_infoCb = null;
          _this4.m_signUpCb = null;
          _this4.m_giveUpCb = null;
          _this4.m_startTrialCb = null;
          _this4.m_stopTrialCb = null;
          _this4.m_currentTouchName = null;
          _this4.m_extraManager = null;
          _this4.m_spriteAtlas = null;
          _this4.m_isStartTrial = false;
          _this4.m_nowGateInfo = null;
          _this4.m_targetType = 0;
          _this4.m_awardDatas = null;
          _this4.m_trailBetList = null;
          _this4.m_playerData = null;
          _this4.m_nowActNo = 0;
          _this4.m_trialEndCbs = null;
          _this4.m_trialCb = null;
          _this4.m_refusedReason = RefusedReason.None;
          _this4.m_nowLvIndex = 0;
          _this4.m_trialAtlas = null;
          _this4.m_trialFinish = 0;
          _this4.m_trialAward = 0;
          return _this4;
        }

        var _proto2 = TrialView.prototype;

        _proto2.onLoad = function onLoad() {
          trialManager.OnLoad(this);
        };

        _proto2.start = function start() {}
        /**
         * 初始化洗碼
         * @param infoCb 洗碼資訊取得
         * @param signUpCb 參加洗碼
         * @param giveUpCb 離開洗碼
         * @param trialCb 洗碼結束通知，有需要知道洗碼結束才需要
         */
        ;

        _proto2.Init = function Init(extraManager, infoCb, signUpCb, giveUpCb, startTrialCb, stopTrialCb, trialCb) {
          var _this5 = this;

          this.m_extraManager = extraManager;
          this.m_infoCb = infoCb;
          this.m_signUpCb = signUpCb;
          this.m_giveUpCb = giveUpCb;
          this.m_startTrialCb = startTrialCb;
          this.m_stopTrialCb = stopTrialCb; // if ( this.m_recordView )
          // {
          //     this.m_recordView.GameId = Number( Define.NOW_GAME_ID );
          //     this.m_recordView.ExtraManager = this.m_extraManager;
          //     this.m_recordView.TrialView = this;
          // }

          if (!this.m_trialEndCbs) {
            this.m_trialEndCbs = new Array();
          }

          if (trialCb) {
            this.m_trialCb = trialCb;
          } // 按鈕初始化


          this.InitBtn();

          if (this.m_infoCb) {
            this.m_infoCb(function (ack) {
              log("OnRecvTrialInfo ack:", ack);
              var promise = new Promise(function () {
                _this5.OnRecvTrialInfo(ack);
              });
            });
          }

          ItemList.GetInstance().LoadItemList();
          this.LoadAtlasFile();
          this.m_trialNode.active = false;
        };

        _proto2.SetSpinAckTrialInfo = function SetSpinAckTrialInfo(trialfinish, trialaward) {
          this.m_trialFinish = trialfinish;
          this.m_trialAward = trialaward;
        };

        _proto2.GetAwardData = function GetAwardData(index) {
          if (index < this.m_awardDatas.length) {
            var awardData = this.m_awardDatas[index];
            var awardMoney = walletManger.HasWallet ? Tools.strip(Tools.divide(awardData.money, walletManger.Rate)) : awardData.money;
            awardMoney = Number(Tools.FormatNumberThousands(awardMoney, Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO, false));
            var t_award = {
              award: awardData.award,
              type: awardData.type,
              gate: this.m_extraManager.GetDisplayValue(awardData.gate),
              gameid: awardData.gameid,
              itemid: awardData.itemid,
              amount: awardData.amount,
              data: awardData.data,
              money: this.m_extraManager.GetDisplayValue(awardMoney)
            };
            return t_award;
          } else {
            return null;
          }
        };

        _proto2.UpdateAward = function UpdateAward(stateCanSignUp) {
          if (stateCanSignUp === void 0) {
            stateCanSignUp = false;
          }

          this.m_trialRewards[0].node.active = false;
          this.m_trialRewards[1].node.active = false; // 寶箱

          if (this.m_awardDatas.length == 1 || stateCanSignUp || this.m_nowLvIndex == 0) {
            var gateInfo = this.GetCurrentLevelInfo();
            this.m_trialRewards[0].node.active = true;
            this.m_trialRewards[0].UpdateAwardPanel(this.GetAwardData(gateInfo.NowLevelIndex), false);
          } else {
            var _gateInfo = this.GetCurrentLevelInfo();

            this.m_trialRewards[0].node.active = true;
            this.m_trialRewards[0].UpdateAwardPanel(this.GetAwardData(_gateInfo.NowLevelIndex - 1), false);
            this.m_trialRewards[1].node.active = true;
            this.m_trialRewards[1].UpdateAwardPanel(this.GetAwardData(_gateInfo.NowLevelIndex), true);
          }
        };

        _proto2.InitBtn = function InitBtn() {
          var _this6 = this; //參加按鈕


          this.m_signUpBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            log("m_signUpBtn TOUCH_START"); // event.stopPropagationImmediate();
            // event.stopPropagation();

            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this6.m_currentTouchName == null && _this6.m_signUpBtn.interactable) {
              _this6.m_currentTouchName = event.target.name;
              tween(_this6.m_signUpBtn.node).to(SCALE_TIME, {
                scale: v3(0.9, 0.9, 1)
              }).start();
            } else {
              if (event.target && event.target.active == false) {
                _this6.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_signUpBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            log("m_signUpBtn TOUCH_CANCEL");
            tween(_this6.m_signUpBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName == event.target.name) {
              _this6.m_currentTouchName = null;
            }
          });
          this.m_signUpBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            log("m_signUpBtn TOUCH_END");
            tween(_this6.m_signUpBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName != event.target.name) {
              return;
            }

            _this6.m_currentTouchName = null;

            if (_this6.m_signUpBtn.interactable) {
              // if ( this.m_playerData.activityno > 0 )
              // {
              //     //在活動中
              //     this.CloseTrialView();
              // }
              // else
              // {
              //不在活動中
              if (_this6.m_signUpBtn) {
                _this6.m_signUpCb(function (ack) {
                  var promise = new Promise(function () {
                    _this6.OnRecvTrialSignUp(ack);
                  });
                }, _this6.m_nowActNo);
              } // }

            }
          }); //放棄按鈕

          this.m_giveUpBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            // event.stopPropagationImmediate();
            // event.stopPropagation();
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this6.m_currentTouchName == null && _this6.m_giveUpBtn.interactable) {
              _this6.m_currentTouchName = event.target.name;
              tween(_this6.m_giveUpBtn.node).to(SCALE_TIME, {
                scale: v3(0.9, 0.9, 1)
              }).start();
            } else {
              if (event.target && event.target.active == false) {
                _this6.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_giveUpBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            tween(_this6.m_giveUpBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName == event.target.name) {
              _this6.m_currentTouchName = null;
            }
          });
          this.m_giveUpBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            tween(_this6.m_giveUpBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName != event.target.name) {
              return;
            }

            _this6.m_currentTouchName = null;

            if (_this6.m_giveUpBtn.interactable) {
              if (_this6.m_playerData.activityno > 0) {
                //在活動中
                _this6.ShowTrialEndHint();
              } else {
                _this6.m_trialNode.active = false;
              }
            }
          }); //繼續按鈕

          this.m_continueBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            // event.stopPropagationImmediate();
            // event.stopPropagation();
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this6.m_currentTouchName == null && _this6.m_continueBtn.interactable) {
              _this6.m_currentTouchName = event.target.name;
              tween(_this6.m_continueBtn.node).to(SCALE_TIME, {
                scale: v3(0.9, 0.9, 1)
              }).start();
            } else {
              if (event.target && event.target.active == false) {
                _this6.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_continueBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            tween(_this6.m_continueBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName == event.target.name) {
              _this6.m_currentTouchName = null;
            }
          });
          this.m_continueBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            tween(_this6.m_continueBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName != event.target.name) {
              return;
            }

            _this6.m_currentTouchName = null;

            if (_this6.m_continueBtn.interactable) {
              if (_this6.m_playerData.activityno > 0) {
                //在活動中
                _this6.CloseTrialView();
              }
            }
          }); //放棄按鈕

          this.m_claimBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            // event.stopPropagationImmediate();
            // event.stopPropagation();
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this6.m_currentTouchName == null && _this6.m_claimBtn.interactable) {
              _this6.m_currentTouchName = event.target.name;
              tween(_this6.m_claimBtn.node).to(SCALE_TIME, {
                scale: v3(0.9, 0.9, 1)
              }).start();
            } else {
              if (event.target && event.target.active == false) {
                _this6.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_claimBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            tween(_this6.m_claimBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName == event.target.name) {
              _this6.m_currentTouchName = null;
            }
          });
          this.m_claimBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            tween(_this6.m_claimBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName != event.target.name) {
              return;
            }

            _this6.m_currentTouchName = null;

            if (_this6.m_claimBtn.interactable) {
              if (_this6.m_playerData.activityno > 0) {
                //在活動中
                _this6.ShowTrialEndHint();
              } else {
                _this6.m_trialNode.active = false;
              }
            }
          }); //離開按鈕

          this.m_closeBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            // event.stopPropagationImmediate();
            // event.stopPropagation();
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this6.m_currentTouchName == null && _this6.m_closeBtn.interactable) {
              _this6.m_currentTouchName = event.target.name;
              tween(_this6.m_closeBtn.node).to(SCALE_TIME, {
                scale: v3(0.9, 0.9, 1)
              }).start();
            } else {
              if (event.target && event.target.active == false) {
                _this6.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_closeBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            tween(_this6.m_closeBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName == event.target.name) {
              _this6.m_currentTouchName = null;
            }
          });
          this.m_closeBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            tween(_this6.m_closeBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName != event.target.name) {
              return;
            }

            _this6.m_currentTouchName = null;

            if (_this6.m_closeBtn.interactable) {
              _this6.CloseTrialView();
            }
          }); //說明頁按鈕

          this.m_descriptionBtn.node.on(Node.EventType.TOUCH_START, function (event) {
            // event.stopPropagationImmediate();
            // event.stopPropagation();
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this6.m_currentTouchName == null && _this6.m_descriptionBtn.interactable) {
              _this6.m_currentTouchName = event.target.name;
              tween(_this6.m_descriptionBtn.node).to(SCALE_TIME, {
                scale: v3(0.9, 0.9, 1)
              }).start();
            } else {
              if (event.target && event.target.active == false) {
                _this6.m_currentTouchName = event.target.name;
              }
            }
          });
          this.m_descriptionBtn.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            tween(_this6.m_descriptionBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName == event.target.name) {
              _this6.m_currentTouchName = null;
            }
          });
          this.m_descriptionBtn.node.on(Node.EventType.TOUCH_END, function (event) {
            tween(_this6.m_descriptionBtn.node).to(SCALE_TIME, {
              scale: v3(1, 1, 1)
            }).start();

            if (_this6.m_currentTouchName != event.target.name) {
              return;
            }

            _this6.m_currentTouchName = null;

            if (_this6.m_descriptionBtn.interactable) {
              _this6.ShowDescription();
            }
          });
        }
        /**
         * 設定遊戲狀態
         * @param reason 使用 REFUSED_REASON 內的定義
         */
        ;

        _proto2.SetGameState = function SetGameState(reason) {
          this.m_refusedReason = reason; // return;
        };

        _proto2.ShowTrialView = function ShowTrialView() {
          if (this.m_refusedReason !== RefusedReason.None) {
            MsgBox.getInstance().ShowMessageBox(Define.StringKey.TRIAL_REFUSED_REASON + this.m_refusedReason);
          } else {
            if (this.m_extraManager.GetTrialBtnState()) {
              this.m_trialNode.active = true; // 節點未打開   貌似不會更新條bar

              this.UpdateProgessBar();
            }
          }
        };

        _proto2.CloseTrialView = function CloseTrialView() {
          if (this.m_extraManager.GetTrialBtnState()) {
            this.m_trialNode.active = false;
          }
        };

        _proto2.IsTrialFinish = function IsTrialFinish() {
          var _this7 = this;

          if (this.m_playerData && this.m_playerData.activityno > 0 && this.m_trialFinish > TrialSetting.FinishStateCode.FinishTypeNone) {
            // 完成最高階級
            if (this.m_trialFinish == TrialSetting.FinishStateCode.FinishTypeDone) {
              this.FinishTrial(TrialSetting.AckType.AckTypeSuccess); //體驗幣用盡
            } else if (this.m_trialFinish == TrialSetting.FinishStateCode.FinishTypeNoMoney) {
              //  11/23  體驗幣用盡提示
              MsgBox.getInstance().ShowMessageBox(this.GetString(Define.StringKey.FREEWINCASH_MESSAGE_3), this.GetString(Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO));
              this.FinishTrial(TrialSetting.AckType.AckTypeSuccess);
            } else if (this.m_giveUpCb) // 其他都走一般結束流程
              {
                this.m_giveUpCb(function (ack) {
                  var promise = new Promise(function () {
                    _this7.OnRecvTrialGiveUp(ack);
                  });
                }, this.m_nowActNo);
              }

            return true;
          }

          return false;
        };

        _proto2.ShowTrial = function ShowTrial() {
          this.m_extraManager.SetTrialBtnState(true);
        } // 結束活動
        ;

        _proto2.CloseTrialViewAndBtn = function CloseTrialViewAndBtn() {
          // if ( this.m_isStartTrial )
          // {
          // this.ForceCloseTrial();
          this.m_isStartTrial = false;
          this.m_extraManager.SetTrialBtnState(false);
          this.m_trialNode.active = false;

          if (this.m_stopTrialCb) {
            this.m_stopTrialCb();
          } // }

        } // ForceCloseTrial()
        // {
        //     this.m_isStartTrial = false;
        //     this.m_extraManager.SetTrialBtnState( false );
        //     this.m_trialNode.active = false;
        //     if ( this.m_stopTrialCb )
        //     {
        //         this.m_stopTrialCb();
        //     }
        // }
        ;

        _proto2.FinishTrial = function FinishTrial(infoAckType) {
          if (infoAckType === void 0) {
            infoAckType = TrialSetting.AckType.AckTypeActEnd;
          }

          var tempAck = {
            info: {
              acktype: infoAckType,
              award: this.m_trialAward
            },
            ret: 0
          };
          this.OnRecvTrialGiveUp(tempAck);
        };

        _proto2.UpdateProgessBar = function UpdateProgessBar() {
          // test
          this.m_progressBar.progress = 0.1;
          var info = this.GetCurrentLevelInfo();
          this.m_totalWinLabel.string = Tools.FormatNumberThousands(Tools.strip(this.m_extraManager.GetDisplayValue(info.Progress)), Tools.FORMAT_NUMBER_TYPE.DEFINE_DOT_NONE_ZERO).toString() + " / " + this.m_extraManager.GetDisplayValue(info.Gate).toString();
          this.m_totalWinLabel_Under.string = this.m_totalWinLabel.string;
          var rate = Tools.divide(info.Progress, info.Gate);

          if (rate > 1) {
            rate = 1;
          }

          this.m_progressBar.progress = rate;
        } // 設定進度
        ;

        _proto2.SetProgess = function SetProgess(totalWin, totalBet) {
          this.m_playerData.totalwin = Tools.strip(totalWin);
          this.m_playerData.totalbet = Tools.strip(totalBet);
          this.SetCurrentLevelInfo();
        }
        /**
          * 載入共用合圖
          */
        ;

        _proto2.LoadAtlasFile = function LoadAtlasFile() {
          var _this8 = this;

          var filePath = "/framework/Trial/trial";
          var url = "AsttText/" + LocaleStringManager.CurrLang + filePath;
          log("LoadAtlasFile url:", url);
          Define.OtherBundle.load(url, SpriteAtlas, function (err, assets) {
            if (err) {
              error(err.message || err);
              return;
            }

            _this8.m_trialAtlas = assets;

            _this8.SetAtlas();
          });
        };

        _proto2.SetAtlas = function SetAtlas() {
          // if ( LocaleStringManager.CurrLang === Define.Lang.EN )
          // {
          //     return;
          // }
          this.m_titleSprite.spriteFrame = this.m_trialAtlas.getSpriteFrame(SpriteName.Title);

          if (this.m_btnTitleSprite) {
            this.m_btnTitleSprite.spriteFrame = this.m_trialAtlas.getSpriteFrame(SpriteName.BtnTitle);
          } else {
            error("btnTitleSprite not found");
          } // if ( LocaleStringManager.CurrLang === Define.Lang.CN || LocaleStringManager.CurrLang === Define.Lang.TW )
          // {
          //     this.m_btnTitleSprite.sizeMode = cc.Sprite.SizeMode.CUSTOM;
          //     this.m_btnTitleSprite.node.setContentSize( 80, 20 );
          //     this.m_btnTitleSprite.spriteFrame = this.m_trialAtlas.getSpriteFrame( SpriteName.Title );
          // }

        };

        _proto2.SetTxt = function SetTxt() {
          // if ( LocaleStringManager.CurrLang === Define.Lang.EN )
          // {
          //     return;
          // }
          // 進度調左邊的目標類型提示
          this.m_targetTypeLabel.string = this.GetString(TARGET_TYPE[this.m_targetType]);

          if (!this.m_targetTypeLabel.font) {
            this.m_targetTypeLabel.font = Define.DefaultFont;
          }

          log("LoadAtlasFile this.m_targetTypeLabel.string:", this.m_targetTypeLabel.string);
          this.m_signUpBtnLabel.string = this.GetString(Define.StringKey.FREEWINCASH_WINCASHNOW);

          if (!this.m_signUpBtnLabel.font) {
            this.m_signUpBtnLabel.font = Define.DefaultFont;
          }

          this.m_giveUpBtnLabel.string = this.GetString(Define.StringKey.FREEWINCASH_GIVEUPWIN);

          if (!this.m_giveUpBtnLabel.font) {
            this.m_giveUpBtnLabel.font = Define.DefaultFont;
          }

          this.m_claimBtnLabel.string = this.GetString(Define.StringKey.FREEWINCASH_COLLECTANDLEAVE);

          if (!this.m_claimBtnLabel.font) {
            this.m_claimBtnLabel.font = Define.DefaultFont;
          }

          this.m_continueBtnLabel.string = this.GetString(Define.StringKey.FREEWINCASH_WINMORECASH);

          if (!this.m_continueBtnLabel.font) {
            this.m_continueBtnLabel.font = Define.DefaultFont;
          }
        };

        _proto2.AddEndCb = function AddEndCb(cb) {
          if (!this.m_trialEndCbs) {
            this.m_trialEndCbs = new Array();
          }

          if (cb) {
            this.m_trialEndCbs.push(cb);
          }
        }
        /**
         * 拿取階段提示
         * @param lvl 階段
         * @param hintNum 使用的提示編號，預設2
         */
        ;

        _proto2.GetTrialLvlHint = function GetTrialLvlHint() {
          var string = this.GetString(Define.StringKey.FREEWINCASH_TIER);
          string = string.replace("{0}", (this.m_nowLvIndex + 1).toString());
          string = string.replace("{1}", this.GetString(TARGET_TYPE[this.m_targetType]));
          return string;
        };

        _proto2.IsCompleteAllTrial = function IsCompleteAllTrial() {
          var gateInfo = this.GetCurrentLevelInfo();

          if (this.m_nowLvIndex >= this.m_awardDatas.length - 1) {
            if (gateInfo.Progress >= gateInfo.Gate) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        };

        _proto2.SetCurrentLevelInfo = function SetCurrentLevelInfo() {
          var nowGate = 0;
          var nowProgress = 0;
          var nowLvIndex = 0;
          var targetNum = 0;

          for (var i = 0; i < this.m_awardDatas.length; i++) {
            log("SetCurrentLevelInfo i:", i);

            if (this.m_targetType == TrialSetting.TargetType.TargetTypeBet) {
              targetNum = this.m_playerData.totalbet;
            } else if (this.m_targetType == TrialSetting.TargetType.TargetTypeWin) {
              targetNum = this.m_playerData.totalwin;
            }

            if (i > 0) {
              nowGate = this.m_awardDatas[i].gate - this.m_awardDatas[i - 1].gate;
              nowProgress = targetNum - this.m_awardDatas[i - 1].gate;
            } else {
              nowGate = this.m_awardDatas[i].gate;
              nowProgress = targetNum;
            }

            log("SetCurrentLevelInfo nowGate:", nowGate);
            log("SetCurrentLevelInfo nowProgress:", nowProgress);
            nowLvIndex = i;

            if (nowProgress < nowGate) {
              // nowLvIndex = i;
              break;
            }
          } // 整理數字


          if (nowLvIndex == this.m_awardDatas.length - 1 && nowProgress >= nowGate) {
            nowProgress = nowGate;
          }

          if (this.m_nowGateInfo) {
            this.m_nowGateInfo.SetData(nowGate, nowLvIndex, this.m_awardDatas[nowLvIndex].type, nowProgress);
          } else {
            this.m_nowGateInfo = new GateInfo(nowGate, nowLvIndex, this.m_awardDatas[nowLvIndex].type, nowProgress);
          }

          log("SetCurrentLevelInfo this.m_nowGateInfo:", this.m_nowGateInfo);
          this.UpdateProgessBar();
          var isLvUp = nowLvIndex == this.m_nowLvIndex ? false : true;

          if (isLvUp) {
            this.m_nowLvIndex = nowLvIndex;
            this.UpdateAward();
            this.ChangeBtnState(this.m_playerData ? this.m_playerData.activityno : 0);
          }

          log("SetCurrentLevelInfo isLvUp:", isLvUp);
        };

        _proto2.GetCurrentLevelInfo = function GetCurrentLevelInfo() {
          return this.m_nowGateInfo;
        };

        _proto2.GetRecordByType = function GetRecordByType() {
          if (this.m_targetType == TrialSetting.TargetType.TargetTypeWin) {
            return this.m_playerData.totalwin;
          } else if (this.m_targetType == TrialSetting.TargetType.TargetTypeBet) {
            return this.m_playerData.totalbet;
          }
        };

        _proto2.IsGetAward = function IsGetAward() {
          return this.m_nowLvIndex > 0;
        };

        _proto2.ShowTrialEndHint = function ShowTrialEndHint() {
          var _this9 = this;

          var setting = {};

          if (this.IsGetAward()) {
            //有獎
            setting.contextKey = this.GetString(Define.StringKey.FREEWINCASH_TXT_2);
          } else {
            //無獎
            setting.contextKey = this.GetString(Define.StringKey.FREEWINCASH_TXT_1);
          }

          setting.titleKey = this.GetString(Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO);
          setting.showCancelBtn = true;
          setting.showConfirmBtn = true;
          setting.showCloseBtn = false;

          setting.confirmCB = function () {
            if (_this9.m_giveUpCb) {
              _this9.m_giveUpCb(function (ack) {
                _this9.OnRecvTrialGiveUp(ack);
              }, _this9.m_nowActNo);
            }
          };

          setting.cancelCB = function () {};

          MsgBox.getInstance().PushMessageBoxSetting(setting);
        };

        _proto2.ShowDescription = function ShowDescription() {
          // let setting: MsgBoxSetting = {} as MsgBoxSetting;
          var str1 = this.GetString(Define.StringKey.FREEWINCASH_DESC_1) + "\n";
          str1 = str1.replace("{0}", this.GetString(Define.StringKey.FREEWINCASH_DEMOCOINS)); // 檢查目前獎項  決定顯示得獎條件

          var gateInfo = this.GetCurrentLevelInfo();
          var awatdData = this.GetAwardData(gateInfo.NowLevelIndex);
          var str2 = "";

          if (awatdData && awatdData.type == TrialSetting.AwardType.AwardTypeRemainChips) {
            str2 = this.GetString(Define.StringKey.FREEWINCASH_DESC_2) + "\n";
            str2 = str2.replace("{0}", this.GetString(Define.StringKey.FREEWINCASH_DEMOCOINS));
            str2 = str2.replace("{1}", this.GetString(Define.StringKey.FREEWINCASH_DEMOCOINS));
          }

          var brand = LocaleStringManager.GetInstance().GetString(Define.StringKey.BRAND_JILI);

          if (Tools.Line === Define.LineSetting.americas || Tools.Line === Define.LineSetting.americas_str) {
            brand = LocaleStringManager.GetInstance().GetString(Define.StringKey.BRAND_TADA);
          }

          var str3 = this.GetString(Define.StringKey.FREEWINCASH_DESC_3) + "\n";
          str3 = str3.replace(/\{brand\}/g, brand);
          var str4 = this.GetString(Define.StringKey.FREEWINCASH_DESC_4) + "\n";
          str4 = str4.replace(/\{brand\}/g, brand);
          var contentString = str1 + str2 + str3 + str4; // setting.contextKey = contentString;
          // setting.titleKey = Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO;
          // setting.showCancelBtn = false;
          // setting.showConfirmBtn = true;
          // setting.showCloseBtn = false;
          // setting.confirmCB = () => { };
          // setting.cancelCB = () => { };
          // MsgBox.getInstance().PushMessageBoxSetting( setting );

          this.m_extraManager.BottomBarManager.SetContentText_HorizontalAlign(Label.HorizontalAlign.LEFT);
          this.m_extraManager.BottomBarManager.OpenCommonText(LocaleStringManager.GetInstance().GetString(Define.StringKey.FREEWINCASH), contentString);
        };

        _proto2.ChangeBtnState = function ChangeBtnState(actNo) {
          if (Tools.Line === Define.LineSetting.bc) {
            return;
          }

          this.m_signUpBtn.node.active = false;
          this.m_giveUpBtn.node.active = false;
          this.m_claimBtn.node.active = false;
          this.m_continueBtn.node.active = false;

          if (actNo !== 0) {
            if (this.IsGetAward()) {
              this.m_continueBtn.node.active = true;
              this.m_claimBtn.node.active = true;
            } else {
              this.m_continueBtn.node.active = true;
              this.m_giveUpBtn.node.active = true;
            }
          } else {
            this.m_signUpBtn.node.active = true;
            this.m_giveUpBtn.node.active = false;
            this.m_claimBtn.node.active = false;
            this.m_continueBtn.node.active = false;
          }
        };

        _proto2.GetString = function GetString(stringKey) {
          return LocaleStringManager.GetInstance().GetString(stringKey);
        };

        _proto2.OnRecvTrialInfo = function OnRecvTrialInfo(ack) {
          if (ack.ret === TrialSetting.Ret_Success) {
            var _info = ack.info;

            switch (_info.acktype) {
              case TrialSetting.AckType.AckTypeSuccess:
                this.m_nowActNo = _info.nowactno; // type： 贏分 或 下注

                this.m_targetType = _info.targettype;
                this.m_awardDatas = _info.awarddesc;
                this.m_playerData = _info.trialinfo;
                this.m_trailBetList = _info.bet; // let awareLevel = 0;
                // if ( this.m_awardDatas && this.m_awardDatas[ this.m_nowLvIndex ] )
                // {
                //     awareLevel = this.m_awardDatas[ this.m_nowLvIndex ].type
                // }

                var str2 = this.GetString(Define.StringKey.FREEWINCASH_INSTRUCTION_2);
                str2 = str2.replace("{0}", this.GetString(AWARD_TYPE[this.m_targetType]));
                var str3 = this.GetString(Define.StringKey.FREEWINCASH_INSTRUCTION_3);
                str3 = str3.replace("{0}", TrialSetting.COLOR_BEGIN + this.GetString(TARGET_TYPE[this.m_targetType]) + TrialSetting.COLOR_END);
                var timeStr = TrialSetting.COLOR_BEGIN + this.GetTimeString(_info.start) + " - " + this.GetTimeString(_info.end) + TrialSetting.COLOR_END;
                var awardStr = this.GetString(Define.StringKey.FREEWINCASH_INSTRUCTION_6);

                if (this.m_awardDatas[0]) {
                  switch (this.m_awardDatas[0].type) {
                    case 0:
                      awardStr = this.GetString(Define.StringKey.FREEWINCASH_INSTRUCTION_6);
                      break;

                    case 1:
                      awardStr = this.GetString(Define.StringKey.FREEWINCASH_INSTRUCTION_7);
                      break;

                    case 2:
                      awardStr = this.GetString(Define.StringKey.FREEWINCASH_INSTRUCTION_8);
                      awardStr.replace("{0}", this.GetString(Define.StringKey.FREEWINCASH_DEMOCOINS));
                      break;

                    default:
                      awardStr = this.GetString(Define.StringKey.FREEWINCASH_INSTRUCTION_6);
                      break;
                  }
                }

                var str4 = TrialSetting.COLOR_BEGIN + awardStr + TrialSetting.COLOR_END; // let str4 = TrialSetting.COLOR_BEGIN + this.GetString( Define.StringKey.FREEWINCASH_INSTRUCTION_6 ) + TrialSetting.COLOR_END;
                // str4 = str4.replace( "{0}", this.GetString( AWARD_TYPE_DESC[ this.m_targetType ] ) );
                // str4 = str4.replace( "{1}", this.GetString( Define.StringKey.FREEWINCASH_DEMOCOINS ) );

                var descString = this.GetString(Define.StringKey.FREEWINCASH_INSTRUCTION_1) + "\n" + str2 + "\n" + str3 + "\n" // + "\n"
                + this.GetString(Define.StringKey.FREEWINCASH_INSTRUCTION_4) + "\n" + timeStr + "\n" // + "\n"
                + this.GetString(Define.StringKey.FREEWINCASH_INSTRUCTION_5) + "\n" + str4;
                this.m_descLabel.string = descString;

                if (!this.m_descLabel.font) {
                  this.m_descLabel.font = Define.DefaultFont;
                } // 玩家狀態判斷 (有無活動、有無資格、額滿、已報名...)


                switch (_info.pstate) {
                  case TrialSetting.PlayerState.PStateInTrial:
                    if (this.m_startTrialCb) {
                      this.m_isStartTrial = true;
                      this.SetCurrentLevelInfo();
                      this.m_startTrialCb(this.m_playerData.property, this.m_playerData.totalwin, this.m_playerData.totalbet, this.GetCurrentLevelInfo());
                      this.ChangeBtnState(this.m_playerData ? this.m_playerData.activityno : 0);
                    }

                  case TrialSetting.PlayerState.PStateCanSignUp:
                    this.SetCurrentLevelInfo(); // 資訊都好了才能作其他事情

                    this.UpdateAward(_info.pstate == TrialSetting.PlayerState.PStateCanSignUp);
                    this.ShowTrial();
                    this.ChangeBtnState(this.m_playerData ? this.m_playerData.activityno : 0);
                    break;

                  case TrialSetting.PlayerState.PStateCardExploded:
                    this.CloseTrialViewAndBtn();
                    break;

                  default:
                    this.CloseTrialViewAndBtn();
                    break;
                }

                this.SetTxt();
                break;

              default:
                this.CloseTrialViewAndBtn();
                break;
            }
          } else {
            this.CloseTrialViewAndBtn();
          }
        };

        _proto2.OnRecvTrialSignUp = function OnRecvTrialSignUp(ack) {
          if (ack.ret === TrialSetting.Ret_Success) {
            var _info2 = ack.info;

            switch (_info2.acktype) {
              case TrialSetting.AckType.AckTypeSuccess: // 0 成功         --all

              case TrialSetting.AckType.AckTypeSigned:
                // 重複報名         --sign
                this.m_playerData = _info2.trialinfo;
                this.SetCurrentLevelInfo();

                if (this.m_startTrialCb) {
                  this.m_isStartTrial = true;
                  this.m_startTrialCb(this.m_playerData.property, this.m_playerData.totalwin, this.m_playerData.totalbet, this.GetCurrentLevelInfo());
                }

                this.ChangeBtnState(this.m_playerData ? this.m_playerData.activityno : 0);
                this.m_trialNode.active = false;
                break;

              case TrialSetting.AckType.AckTypeFull: // 名額已滿           --sign

              case TrialSetting.AckType.AckTypeActEnd: // 活動已結束           --sign

              case TrialSetting.AckType.AckTypeOverValue:
                // 超出價值     
                this.CloseTrialViewAndBtn();
                MsgBox.getInstance().ShowMessageBox(Define.StringKey.FREEWINCASH_MESSAGE_2, Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO, function () {// this.ForceCloseTrial();
                });
                break;

              default:
                this.CloseTrialViewAndBtn();
                break;
            }
          } else {
            this.CloseTrialViewAndBtn();
          }
        } // 主動 或是 被動放棄(活動結束而截止)
        ;

        _proto2.OnRecvTrialGiveUp = function OnRecvTrialGiveUp(ack) {
          var _this10 = this;

          if (ack.ret === TrialSetting.Ret_Success) {
            // 關掉洗馬界面和按鈕
            this.CloseTrialViewAndBtn();
            var _info3 = ack.info;

            switch (_info3.acktype) {
              case TrialSetting.AckType.AckTypeSuccess:
              case TrialSetting.AckType.AckTypeGivenUp:
                var award = null;

                for (var i = 0; i < this.m_awardDatas.length; i++) {
                  if (this.m_awardDatas[i].award === _info3.award) {
                    award = this.m_awardDatas[i];
                    break;
                  }
                }

                if (award !== null) {
                  if (_info3.award === this.m_awardDatas.length) {
                    var str = this.GetString(Define.StringKey.FREEWINCASH_TXT_6);
                    str = str.replace("{0}", this.GetString(Define.StringKey.FREEWINCASH));
                    var subStr = Define.StringKey.FREEWINCASH_WALLET;

                    if (award.type == TrialSetting.AwardType.AwardTypeCard) {
                      subStr = Define.StringKey.FREEWINCASH_BACKPACK;
                    }

                    str = str.replace("{1}", this.GetString(subStr));
                    MsgBox.getInstance().ShowMessageBox(str, this.GetString(Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO));
                  } else {
                    var _str = this.GetString(Define.StringKey.FREEWINCASH_TXT_5);

                    var _subStr = Define.StringKey.FREEWINCASH_WALLET;

                    if (award.type == TrialSetting.AwardType.AwardTypeCard) {
                      _subStr = Define.StringKey.FREEWINCASH_BACKPACK;
                    }

                    _str = _str.replace("{0}", this.GetString(_subStr));
                    MsgBox.getInstance().ShowMessageBox(_str, this.GetString(Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO));
                  }
                }

                break;

              case TrialSetting.AckType.AckTypeFull: // 名額已滿           --sign

              case TrialSetting.AckType.AckTypeOverValue:
                // 超出價值     
                if (this.IsGetAward() && _info3.award == 0) {
                  MsgBox.getInstance().ShowMessageBox(this.GetString(Define.StringKey.FREEWINCASH_MESSAGE_1), this.GetString(Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO));
                }

                break;

              case TrialSetting.AckType.AckTypeActEnd:
                // 活動已結束           --sign
                MsgBox.getInstance().ShowMessageBox(this.GetString(Define.StringKey.FREEWINCASH_MESSAGE_1), this.GetString(Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO));
                break;

              default:
                MsgBox.getInstance().ShowMessageBox(this.GetString(Define.StringKey.FREEWINCASH_MESSAGE_1), this.GetString(Define.StringKey.MSGBOX_TITLE_SYSTEM_INFO));
                break;
            } //通知所有註冊cb


            for (var _i = 0; _i < this.m_trialEndCbs.length; _i++) {
              if (this.m_trialEndCbs[_i]) {
                this.m_trialEndCbs[_i](_info3.award);
              }
            } // if ( this.m_trialCb )
            // {
            //     // this.m_trialCb( info.money );
            //     this.m_trialCb( info.award );
            // }
            //把資料清空


            this.m_nowActNo = 0;
            this.m_playerData = null;

            while (this.m_awardDatas.length > 0) {
              this.m_awardDatas.pop();
            }

            if (this.m_infoCb) {
              this.m_infoCb(function (ack) {
                var promise = new Promise(function () {
                  _this10.OnRecvTrialInfo(ack);
                });
              });
            }
          }
        };

        _proto2.GetTimeString = function GetTimeString(time) {
          var date = new Date(time * 1000);
          var mon = (date.getMonth() + 1).toString();
          var day = date.getDate().toString();
          var hour = date.getHours().toString();
          var min = date.getMinutes();
          var minString = "";

          if (min < 10) {
            minString = "0" + min.toString();
          } else {
            minString = min.toString();
          }

          var dateString = mon + "/" + day + " " + hour + ":" + minString;
          return dateString;
        };

        _createClass(TrialView, [{
          key: "BtnTitleSprite",
          set: function set(s) {
            this.m_btnTitleSprite = s;
          }
        }, {
          key: "TargetType",
          get: function get() {
            return this.m_targetType;
          }
        }, {
          key: "GetTrailBetList",
          get: function get() {
            return this.m_trailBetList;
          }
        }, {
          key: "GetNowActNo",
          get: function get() {
            return this.m_nowActNo;
          }
        }, {
          key: "IsTrialViewOpen",
          get: function get() {
            return this.m_trialNode.active;
          }
        }]);

        return TrialView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_trialNode", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_descLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_progressBar", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_totalWinLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_totalWinLabel_Under", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_signUpBtn", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_giveUpBtn", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_claimBtn", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_continueBtn", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_titleSprite", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_btnTitleSprite", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_closeBtn", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_descriptionBtn", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_trialRewards", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_targetTypeLabel", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_signUpBtnLabel", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "m_giveUpBtnLabel", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "m_claimBtnLabel", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "m_continueBtnLabel", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ViewTemplate.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _class;

      cclegacy._RF.push({}, "d6ef0CEJWpHD4Z3a5lWrFJ/", "ViewTemplate", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ViewTemplate = exports('default', ccclass(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ViewTemplate, _Component);

        function ViewTemplate() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.m_currentTouchName = null;
          return _this;
        }

        _createClass(ViewTemplate, [{
          key: "CurrentTouchName",
          get: function get() {
            return this.m_currentTouchName;
          },
          set: function set(v) {
            this.m_currentTouchName = v;
          }
        }]);

        return ViewTemplate;
      }(Component)) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VipManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConnectionManager.ts', './LifeSocket.ts', './Define.ts', './EnvironmentConfig.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, ConnectionManager, LifeSocket, Define, EnvironmentConfig;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ConnectionManager = module.default;
    }, function (module) {
      LifeSocket = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      EnvironmentConfig = module.default;
    }],
    execute: function () {
      exports('VIP', void 0);

      cclegacy._RF.push({}, "ab9b45+0ENJ4oSEILedjE+x", "VipManager", undefined);

      var VIP;

      (function (_VIP) {})(VIP || (VIP = exports('VIP', {})));

      var UpdateTime = 30000; //ms

      var VipManager = exports('default', /*#__PURE__*/function () {
        function VipManager() {
          this.m_updateCbs = {};
          this.m_startTime = null;
          this.m_id = null;
          this.m_vipInfo = {
            Exp: 0,
            IsMax: false,
            Lv: 0,
            NextLevel: 0,
            TreasureExp: 0
          };
        }

        VipManager.GetInstance = function GetInstance() {
          if (!this._instance) {
            this._instance = new VipManager();
          }

          return this._instance;
        };

        VipManager.OnExit = function OnExit() {
          delete this._instance;
          this._instance = null;
        };

        var _proto = VipManager.prototype;

        _proto.OnExit = function OnExit() {
          if (this.m_id !== null) {
            clearInterval(this.m_id);
            this.m_id = null;
          }

          this.m_updateCbs = {};
        };

        _proto.ReqVipInfo = function ReqVipInfo() {
          var _this = this;

          if (EnvironmentConfig.ENV_TYPE === Define.EVN.TEST || Define.IS_DEMO || Object.keys(this.m_updateCbs).length === 0 || LifeSocket.GetInstance().IsClose) {
            return;
          }

          if (!ConnectionManager.getInstance().CheckSetting(Define.PROTOCOL.VIP) && Define.AID != "-1" && Define.API_ID != "0") {
            ConnectionManager.getInstance().AddSetting(Define.PROTOCOL.VIP, ConnectionManager.CONNECT_TYPE.TYPE_HTTP, null, null, EnvironmentConfig.SERVICE_URL + "vipservice/VIPGet?apiid=" + Define.API_ID + "&accountid=" + Define.AID);
          }

          ConnectionManager.getInstance().SendCommand(Define.PROTOCOL.VIP, null, null, null, function (ack) {
            _this.OnRecvVipInfo(ack.Data);
          });

          if (this.m_id === null) {
            this.Step();
          }
        };

        _proto.OnRecvVipInfo = function OnRecvVipInfo(info) {
          if (info) {
            this.m_vipInfo = info;

            for (var _key in this.m_updateCbs) {
              if (Object.prototype.hasOwnProperty.call(this.m_updateCbs, _key)) {
                var element = this.m_updateCbs[_key]; //通知就好，不需等待

                element(this.m_vipInfo);
              }
            }
          }
        };

        _proto.Step = function Step() {
          var _this2 = this;

          this.m_id = setInterval(function () {
            _this2.ReqVipInfo();
          }, UpdateTime);
        }
        /**
         * 增加監聽vip資訊
         * @param key 使用Define.CbKey當參數
         * @param cb callback要為async的function
         */
        ;

        _proto.AddUpdateCb = function AddUpdateCb(key, cb) {
          this.m_updateCbs[key] = cb;
        };

        _createClass(VipManager, [{
          key: "VipInfo",
          get: function get() {
            return this.m_vipInfo;
          }
        }]);

        return VipManager;
      }());
      VipManager._instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VolatilityBar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ConnectionManager.ts', './Define.ts', './LocaleStringManager.ts', './LocalStorageManager.ts', './SoundManager.ts', './Tools.ts', './ExtraManager.ts', './VolatilityIcon.ts', './VolatilityManager.ts', './VolatilityMsg.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Prefab, Sprite, Node, SpriteFrame, UIRenderer, color, SpriteAtlas, error, instantiate, tween, Layout, UITransform, v3, Component, ConnectionManager, Define, LocaleStringManager, LocalStorageManager, SoundManager, Tools, ExtraManager, VolatilityIcon, VolatilityManager, VolatilityMsg;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Sprite = module.Sprite;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      UIRenderer = module.UIRenderer;
      color = module.color;
      SpriteAtlas = module.SpriteAtlas;
      error = module.error;
      instantiate = module.instantiate;
      tween = module.tween;
      Layout = module.Layout;
      UITransform = module.UITransform;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      ConnectionManager = module.default;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      LocalStorageManager = module.default;
    }, function (module) {
      SoundManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      ExtraManager = module.default;
    }, function (module) {
      VolatilityIcon = module.default;
    }, function (module) {
      VolatilityManager = module.default;
    }, function (module) {
      VolatilityMsg = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16;

      cclegacy._RF.push({}, "ae833AQyEBHD6X23+FaPjqc", "VolatilityBar", undefined);

      var TxtName;

      (function (TxtName) {
        TxtName["title"] = "Volatility_btn_txt";
        TxtName["iconTop"] = "img_btn_frame03";
        TxtName["icon"] = "img_btn_frame03";
        TxtName["msgTitle"] = "Description_txt_Volatility";
        TxtName["chili"] = "chili_light";
        TxtName["chiliEmpty"] = "chili_empty";
        TxtName["Volatility_High"] = "Volatility_High";
        TxtName["Volatility_Medium"] = "Volatility_Medium";
        TxtName["Volatility_Low"] = "Volatility_Low";
        TxtName["Volatility_Text"] = "Volatility_Text";
      })(TxtName || (TxtName = {}));

      var CloseTime = 15;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var VolatilityBar = exports('default', (_dec = property(Prefab), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Sprite), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Sprite), _dec10 = property(Prefab), _dec11 = property(Node), _dec12 = property(Node), _dec13 = property(Node), _dec14 = property(Sprite), _dec15 = property(SpriteFrame), _dec16 = property(Sprite), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(VolatilityBar, _Component);

        function VolatilityBar() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_volatilityIconPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_volatilityQuestPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_volatilityMsgPrefab", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_title", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_layout", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_layoutBg", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_chili", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_chiliAmountParent", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_chiliAmount", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_volatilityIconPrefab_New", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_volatilityQuest", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_waiting", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_normal", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_Img_Volatility", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_Volatility_Icon", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_chili_New", _descriptor16, _assertThisInitialized(_this));

          _this.m_bottomBar = null;
          _this.m_timerTween = null;
          _this.m_iconList = [];
          _this.m_quest = null;
          _this.m_msg = null;
          _this.m_isLandscape = false;
          _this.m_lock = false;
          _this.m_info = null;
          _this.m_atlas = null;
          _this.m_nowVolatility = -1;
          return _this;
        }

        var _proto = VolatilityBar.prototype;

        _proto.Init = function Init(info, bottomBar) {
          this.m_bottomBar = bottomBar;
          this.m_info = info; // 目前選擇位置

          var key = Define.AID + ":" + Define.NOW_GAME_ID + ":Volatility";
          var value = LocalStorageManager.GetInt(key);

          if (value != null) {
            // 防呆
            if (value < 0) {
              value = 0;
            }

            if (value >= this.m_info.VolList.length) {
              value = this.m_info.VolList.length - 1;
            }

            this.m_nowVolatility = value;
          } else {
            this.m_nowVolatility = this.m_info.VolPos;
            LocalStorageManager.SetInt(key, this.m_nowVolatility);
          }

          this.CreateIcon();
          this.TouchEvent();
          this.ShowVolBar();
          this.ChangeChili(true);
          this.LoadAtlas();
        };

        _proto.SetTxt = function SetTxt(stringAtlas) {
          if (this.m_title) {
            this.m_title.spriteFrame = stringAtlas.getSpriteFrame(TxtName.title);
          }

          if (this.m_msg) {
            this.m_msg.Title = stringAtlas.getSpriteFrame(TxtName.msgTitle);
          }

          if (this.m_iconList) {
            for (var i = 0; i < this.m_iconList.length; i++) {
              // if ( Tools.Line === Define.LineSetting.americas ||
              //     Tools.Line === Define.LineSetting.americas_str )
              // {
              //     // this.m_iconList[ i ].SetTxt( this.m_atlas );
              // } else
              // {
              this.m_iconList[i].SetTxt(stringAtlas); // }
            }
          }
        };

        _proto.ShowVolBar = function ShowVolBar(isOpenIcon) {
          if (isOpenIcon === void 0) {
            isOpenIcon = true;
          }

          this.node.active = true;
          isOpenIcon ? this.ShowVolIcon() : this.HideVolIcon();
        };

        _proto.HideVolBar = function HideVolBar() {
          this.node.active = false;
          this.HideVolIcon();
        };

        _proto.UnableVolBar = function UnableVolBar() {
          this.m_lock = true;
          this.HideVolIcon();

          if (this.m_msg) {
            this.m_msg.HideMsg();
          }

          this.m_bottomBar.CloseCommonText(); // if ( this.m_msg_New )
          // {
          //     this.m_msg_New.CloseCommonText();
          // }

          this.node.getComponent(UIRenderer).color = color(165, 165, 165);
        };

        _proto.CanUseVolBar = function CanUseVolBar() {
          this.m_lock = false;
          this.node.getComponent(UIRenderer).color = color(255, 255, 255);
        };

        _proto.LoadAtlas = function LoadAtlas() {
          var _this2 = this; // if ( Tools.Line === Define.LineSetting.americas ||
          //     Tools.Line === Define.LineSetting.americas_str )
          // {
          // let path: string = "AsttText/" + LocaleStringManager.CurrLang + "/framework_americas/volatility/volatility";


          var path = "AsttText/" + LocaleStringManager.CurrLang + "/%s/volatility/volatility";
          path = Tools.GetFilePath(path);
          Define.OtherBundle.load(path, SpriteAtlas, function (err, assets) {
            if (err) {
              error(err);

              _this2.LoadAtlas();

              return;
            }

            _this2.m_atlas = assets;

            _this2.SetTxt_America();
          }); // }
          // else
          // {
          // }
        };

        _proto.SetTxt_America = function SetTxt_America() {
          if (this.m_info) {
            var amount = this.m_info.VolList[this.m_nowVolatility];

            if (this.m_atlas) {
              switch (VolatilityManager.GetInstance().GetPos(amount)) {
                case 0:
                  if (this.m_atlas.getSpriteFrame(TxtName.Volatility_Low)) {
                    this.m_Img_Volatility.spriteFrame = this.m_atlas.getSpriteFrame(TxtName.Volatility_Low);
                  } else {
                    this.m_Img_Volatility.spriteFrame = this.m_Volatility_Icon[0];
                    error("TxtName.Volatility_Low is null");
                  }

                  break;

                case 1:
                  if (this.m_atlas.getSpriteFrame(TxtName.Volatility_Medium)) {
                    this.m_Img_Volatility.spriteFrame = this.m_atlas.getSpriteFrame(TxtName.Volatility_Medium);
                  } else {
                    this.m_Img_Volatility.spriteFrame = this.m_Volatility_Icon[1];
                    error("TxtName.Volatility_Medium is null");
                  }

                  break;

                default:
                  if (this.m_atlas.getSpriteFrame(TxtName.Volatility_High)) {
                    this.m_Img_Volatility.spriteFrame = this.m_atlas.getSpriteFrame(TxtName.Volatility_High);
                  } else {
                    this.m_Img_Volatility.spriteFrame = this.m_Volatility_Icon[2];
                    error("TxtName.Volatility_High is null");
                  }

                  break;
              }
            }
          }

          if (this.m_iconList) {
            for (var i = 0; i < this.m_iconList.length; i++) {
              // if ( Tools.Line === Define.LineSetting.americas ||
              //     Tools.Line === Define.LineSetting.americas_str )
              // {
              this.m_iconList[i].SetTxt(this.m_atlas); // }
            }
          } // America


          if (this.m_chili_New) {
            var volIcon = this.m_iconList[this.m_nowVolatility].getComponent(VolatilityIcon);
            this.m_chili_New.spriteFrame = volIcon.GetNowChillSprite();
          }
        };

        _proto.ChangeChili = function ChangeChili(isOpen) {
          if (this.m_layout) {
            if (isOpen) {
              if (this.m_chili && this.m_chiliAmountParent) {
                this.m_chili.active = true;
                this.m_chiliAmountParent.active = false;
              } else {
                this.m_waiting.active = true;
                this.m_normal.active = false;
              }
            } else {
              // 關閉
              if (this.m_chili && this.m_chiliAmountParent && this.m_chiliAmount.length > 0) {
                this.m_chili.active = false;
                this.m_chiliAmountParent.active = true;

                if (this.m_info) {
                  var amount = this.m_info.VolList[this.m_nowVolatility];
                  var commAtlas = this.m_bottomBar.GetCommAtlas();

                  if (commAtlas) {
                    for (var i = 0; i < this.m_chiliAmount.length; i++) {
                      if (i < amount) {
                        this.m_chiliAmount[i].spriteFrame = commAtlas.getSpriteFrame(TxtName.chili);
                      } else {
                        this.m_chiliAmount[i].spriteFrame = commAtlas.getSpriteFrame(TxtName.chiliEmpty);
                      }
                    }
                  }
                }
              } else {
                if (this.m_waiting && this.m_normal) {
                  this.m_waiting.active = false;
                  this.m_normal.active = true;
                  this.SetTxt_America();
                }
              }
            }
          }
        };

        _proto.ShowVolIcon = function ShowVolIcon() {
          if (this.m_layout) {
            this.m_layout.active = true;
            this.HideTimer();
          }

          if (this.m_layoutBg) {
            this.m_layoutBg.active = true;
          }

          this.ChangeChili(true);
        };

        _proto.HideVolIcon = function HideVolIcon() {
          if (this.m_layout) {
            this.m_layout.active = false;
            this.ResetTween();
          }

          if (this.m_layoutBg) {
            this.m_layoutBg.active = false;
          }

          this.ChangeChili(false);
        };

        _proto.TouchEvent = function TouchEvent() {
          var _this3 = this;

          this.node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this3.m_lock) {
              return;
            }

            if (_this3.m_bottomBar.CurrentTouchName == null) {
              _this3.m_bottomBar.CurrentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this3.m_bottomBar.CurrentTouchName = event.target.name;
              }
            }

            _this3.m_bottomBar.SetScaleAction(_this3.node, true);
          });
          this.node.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this3.m_lock) {
              return;
            }

            if (_this3.m_bottomBar.CurrentTouchName == event.target.name) {
              _this3.m_bottomBar.CurrentTouchName = null;
            }

            _this3.m_bottomBar.SetScaleAction(_this3.node, false);
          });
          this.node.on(Node.EventType.TOUCH_END, function (event) {
            if (_this3.m_lock) {
              return;
            }

            if (_this3.m_bottomBar.CurrentTouchName != event.target.name) {
              return;
            }

            _this3.m_bottomBar.CurrentTouchName = null;

            if (_this3.m_layout) {
              if (_this3.m_layout.active) {
                _this3.HideVolIcon();
              } else {
                _this3.ShowVolIcon();
              }
            }

            SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);

            _this3.m_bottomBar.SetScaleAction(_this3.node, false);

            ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.VOLATILITY));
          });
        };

        _proto.CreateIcon = function CreateIcon() {
          var _this4 = this;

          if (!this.m_info) {
            return;
          } // 起伏選擇


          for (var i = 0; i < this.m_info.VolList.length; i++) {
            if (this.m_volatilityIconPrefab) {
              (function () {
                var icon = instantiate(_this4.m_volatilityIconPrefab);
                icon.name += i;

                var commAtlas = _this4.m_bottomBar.GetCommAtlas();

                if (i == _this4.m_info.VolList.length - 1) {
                  icon.getComponent(Sprite).spriteFrame = commAtlas.getSpriteFrame(TxtName.iconTop);
                } else {
                  icon.getComponent(Sprite).spriteFrame = commAtlas.getSpriteFrame(TxtName.icon);
                }

                var volIcon = icon.getComponent(VolatilityIcon);
                volIcon.Init(_this4.m_info.VolList[i], commAtlas);
                _this4.m_iconList[i] = volIcon;
                icon.on(Node.EventType.TOUCH_START, function (event) {
                  event.propagationImmediateStopped = true;
                  event.propagationStopped = true;

                  if (_this4.m_lock) {
                    return;
                  }

                  if (_this4.m_bottomBar.CurrentTouchName == null) {
                    _this4.m_bottomBar.CurrentTouchName = event.target.name;
                  } else {
                    if (event.target && event.target.active == false) {
                      _this4.m_bottomBar.CurrentTouchName = event.target.name;
                    }
                  }

                  for (var j = 0; j < _this4.m_info.VolList.length; j++) {
                    var touchIcon = _this4.m_iconList[j];

                    if (touchIcon && touchIcon.node.name == event.target.name) {
                      touchIcon.Show(true);
                      _this4.m_nowVolatility = j;
                      var key = Define.AID + ":" + Define.NOW_GAME_ID + ":Volatility";
                      LocalStorageManager.SetInt(key, _this4.m_nowVolatility);

                      _this4.SetScaleAction(icon, true);
                    } else {
                      touchIcon.Show(false);
                    }
                  }
                });
                icon.on(Node.EventType.TOUCH_CANCEL, function (event) {
                  if (_this4.m_lock) {
                    return;
                  }

                  if (_this4.m_bottomBar.CurrentTouchName == event.target.name) {
                    _this4.m_bottomBar.CurrentTouchName = null;
                  }

                  _this4.HideVolIcon();

                  _this4.SetScaleAction(icon, false);
                });
                icon.on(Node.EventType.TOUCH_END, function (event) {
                  if (_this4.m_lock) {
                    return;
                  }

                  if (_this4.m_bottomBar.CurrentTouchName != event.target.name) {
                    return;
                  }

                  _this4.m_bottomBar.CurrentTouchName = null;

                  _this4.m_bottomBar.node.getComponent(ExtraManager).SetFeaturesVolatility();

                  _this4.HideVolIcon();

                  SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
                  var eventlog = _this4.m_nowVolatility > 0 ? Define.BTN_CLICK_EVENT.VOLATILITY_HIGH : Define.BTN_CLICK_EVENT.VOLATILITY_LOW;
                  ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, eventlog));

                  _this4.SetScaleAction(icon, false);
                });
              })();
            } else {
              (function () {
                // America
                var icon = instantiate(_this4.m_volatilityIconPrefab_New);
                icon.name += i;

                var commAtlas = _this4.m_bottomBar.GetCommAtlas();

                var volIcon = icon.getComponent(VolatilityIcon);
                volIcon.Init(_this4.m_info.VolList[i], commAtlas);
                _this4.m_iconList[i] = volIcon;
                icon.on(Node.EventType.TOUCH_START, function (event) {
                  event.propagationImmediateStopped = true;
                  event.propagationStopped = true;

                  if (_this4.m_lock) {
                    return;
                  }

                  if (_this4.m_bottomBar.CurrentTouchName == null) {
                    _this4.m_bottomBar.CurrentTouchName = event.target.name;
                  } else {
                    if (event.target && event.target.active == false) {
                      _this4.m_bottomBar.CurrentTouchName = event.target.name;
                    }
                  }

                  for (var j = 0; j < _this4.m_info.VolList.length; j++) {
                    var touchIcon = _this4.m_iconList[j];

                    if (touchIcon && touchIcon.node.name == event.target.name) {
                      touchIcon.Show(true);
                      _this4.m_nowVolatility = j;
                      var key = Define.AID + ":" + Define.NOW_GAME_ID + ":Volatility";
                      LocalStorageManager.SetInt(key, _this4.m_nowVolatility);

                      _this4.SetScaleAction(icon, true);
                    } else {
                      touchIcon.Show(false);
                    }
                  }
                });
                icon.on(Node.EventType.TOUCH_CANCEL, function (event) {
                  if (_this4.m_lock) {
                    return;
                  }

                  if (_this4.m_bottomBar.CurrentTouchName == event.target.name) {
                    _this4.m_bottomBar.CurrentTouchName = null;
                  }

                  _this4.HideVolIcon();

                  _this4.SetScaleAction(icon, false);
                });
                icon.on(Node.EventType.TOUCH_END, function (event) {
                  if (_this4.m_lock) {
                    return;
                  }

                  if (_this4.m_bottomBar.CurrentTouchName != event.target.name) {
                    return;
                  }

                  _this4.m_bottomBar.CurrentTouchName = null;

                  _this4.m_bottomBar.node.getComponent(ExtraManager).SetFeaturesVolatility();

                  _this4.HideVolIcon();

                  SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);
                  var eventlog = _this4.m_nowVolatility > 0 ? Define.BTN_CLICK_EVENT.VOLATILITY_HIGH : Define.BTN_CLICK_EVENT.VOLATILITY_LOW;
                  ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, eventlog));

                  _this4.SetScaleAction(icon, false);
                });
              })();
            }
          }

          for (var _i = 0; _i < this.m_info.VolList.length; _i++) {
            if (_i == this.m_nowVolatility) {
              for (var j = 0; j < this.m_info.VolList.length; j++) {
                var touchIcon = this.m_iconList[j];
                _i == j ? touchIcon.Show(true) : touchIcon.Show(false);
              }
            }
          }

          if (this.m_volatilityMsgPrefab) {
            // 訊息框
            this.m_msg = instantiate(this.m_volatilityMsgPrefab).getComponent(VolatilityMsg);
            this.m_bottomBar.node.addChild(this.m_msg.node); // this.m_msg.node.zIndex = Define.ZOrder.VOLATILITY;
            // this.m_msg.node.setSiblingIndex( Define.ZOrder.VOLATILITY );

            Tools.SetZIndex(this.m_msg.node, Define.ZOrder.VOLATILITY);
            this.m_msg.ConFormTxt = LocaleStringManager.GetInstance().GetString(Define.StringKey.MSGBOX_CONFIRM);
            this.m_msg.Content = LocaleStringManager.GetInstance().GetString(Define.StringKey.VOLATILITY_TEXT);
            this.m_msg.OnRotation(this.m_isLandscape);
            this.m_msg.HideMsg();
            this.m_msg.Close.on(Node.EventType.TOUCH_START, function (event) {
              event.propagationImmediateStopped = true;
              event.propagationStopped = true;

              if (_this4.m_lock) {
                return;
              }

              if (_this4.m_bottomBar.CurrentTouchName == null) {
                _this4.m_bottomBar.CurrentTouchName = event.target.name;
              } else {
                if (event.target && event.target.active == false) {
                  _this4.m_bottomBar.CurrentTouchName = event.target.name;
                }
              }

              _this4.m_bottomBar.SetScaleAction(_this4.m_msg.Close, true);
            });
            this.m_msg.Close.on(Node.EventType.TOUCH_CANCEL, function (event) {
              if (_this4.m_lock) {
                return;
              }

              if (_this4.m_bottomBar.CurrentTouchName == event.target.name) {
                _this4.m_bottomBar.CurrentTouchName = null;
              }

              _this4.m_bottomBar.SetScaleAction(_this4.m_msg.Close, false);
            });
            this.m_msg.Close.on(Node.EventType.TOUCH_END, function (event) {
              if (_this4.m_lock) {
                return;
              }

              if (_this4.m_bottomBar.CurrentTouchName != event.target.name) {
                return;
              }

              _this4.m_bottomBar.CurrentTouchName = null;

              _this4.m_bottomBar.SetScaleAction(_this4.m_msg.Close, false);

              _this4.m_msg.HideMsg();

              SoundManager.getInstance().Play(Define.AudioClips.COMMON_CANCEL_BTN);
            });
          } // layout


          if (this.m_layout) {
            if (this.m_iconList) {
              this.m_iconList.forEach(function (icon) {
                _this4.m_layout.addChild(icon.node);
              });
            }

            if (this.m_volatilityQuestPrefab) {
              // 問號紐
              this.m_quest = instantiate(this.m_volatilityQuestPrefab);
              this.m_layout.addChild(this.m_quest);
            } else {
              this.m_quest = this.m_volatilityQuest;
            }
          }

          this.m_quest.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationImmediateStopped = true;
            event.propagationStopped = true;

            if (_this4.m_lock) {
              return;
            }

            if (_this4.m_bottomBar.CurrentTouchName == null) {
              _this4.m_bottomBar.CurrentTouchName = event.target.name;
            } else {
              if (event.target && event.target.active == false) {
                _this4.m_bottomBar.CurrentTouchName = event.target.name;
              }
            }

            _this4.m_bottomBar.SetScaleAction(_this4.m_quest, true);
          });
          this.m_quest.on(Node.EventType.TOUCH_CANCEL, function (event) {
            if (_this4.m_lock) {
              return;
            }

            if (_this4.m_bottomBar.CurrentTouchName == event.target.name) {
              _this4.m_bottomBar.CurrentTouchName = null;
            }

            _this4.m_bottomBar.SetScaleAction(_this4.m_quest, false);
          });
          this.m_quest.on(Node.EventType.TOUCH_END, function (event) {
            if (_this4.m_lock) {
              return;
            }

            if (_this4.m_bottomBar.CurrentTouchName != event.target.name) {
              return;
            }

            _this4.m_bottomBar.CurrentTouchName = null;

            if (_this4.m_msg) {
              _this4.m_msg.ShowMsg();
            } // 訊息框  ver 3


            var titile = LocaleStringManager.GetInstance().GetString(Define.StringKey.VOLATILITY_INFO);
            var content = LocaleStringManager.GetInstance().GetString(Define.StringKey.VOLATILITY_TEXT);

            _this4.m_bottomBar.OpenCommonText(titile, content);

            SoundManager.getInstance().Play(Define.AudioClips.COMMON_BTN);

            _this4.m_bottomBar.SetScaleAction(_this4.m_quest, false);

            ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.VOLATILITY_QUEST));
          });
        };

        _proto.HideTimer = function HideTimer() {
          var _this5 = this;

          this.m_timerTween = tween(this.m_layout).delay(CloseTime).call(function () {
            if (_this5.m_layout.active) {
              _this5.HideVolIcon();

              ConnectionManager.getInstance().SendBtnClickEvent(ConnectionManager.FormBtnClickParams(Number(Define.AID), Number(Define.API_ID), Number(Define.NOW_GAME_ID), Define.GAME_VERSION, Define.BTN_CLICK_EVENT.VOLATILITY_CLOSE));
            }

            _this5.ResetTween();
          }).start();
        };

        _proto.ResetTween = function ResetTween() {
          if (this.m_timerTween) {
            this.m_timerTween.stop();
          }

          this.m_timerTween = null;
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          this.m_isLandscape = isLandscape;

          if (this.m_msg) {
            this.m_msg.OnRotation(this.m_isLandscape);
          }

          if (this.m_layout) {
            var cLayout = this.m_layout.getComponent(Layout); // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {
            // if ( this.m_isLandscape )
            // {

            this.m_layout.setPosition(0, this.node.getComponent(UITransform).height / 2, 0);
            this.m_layout.getComponent(UITransform).width = this.node.getComponent(UITransform).width;
            this.m_layout.getComponent(UITransform).anchorX = 0.5;
            this.m_layout.getComponent(UITransform).anchorY = 0;
            cLayout.type = Layout.Type.VERTICAL;
            cLayout.resizeMode = Layout.ResizeMode.CONTAINER;
            cLayout.verticalDirection = Layout.VerticalDirection.BOTTOM_TO_TOP;
            cLayout.alignHorizontal = true; // for ( let i = 0; i < this.m_layout.childrenCount; i++ )
            // {
            //     this.m_layout.children[ i ].x = 0;
            // }
            // }
            // else
            // {
            //     this.m_layout.position = cc.v3( -this.node.width / 2, 0, 0 );
            //     this.m_layout.height = this.node.height;
            //     this.m_layout.anchorX = 1.0;
            //     this.m_layout.anchorY = 0.5;
            //     cLayout.type = cc.Layout.Type.HORIZONTAL;
            //     cLayout.resizeMode = cc.Layout.ResizeMode.CONTAINER;
            //     cLayout.horizontalDirection = cc.Layout.HorizontalDirection.RIGHT_TO_LEFT;
            //     for ( let i = 0; i < this.m_layout.childrenCount; i++ )
            //     {
            //         this.m_layout.children[ i ].y = 0;
            //     }
            // }
            // } else
            // {
            //     if ( this.m_isLandscape )
            //     {
            //         this.m_layout.position = cc.v3( 0, this.node.height / 2, 0 );
            //         this.m_layout.width = this.node.width;
            //         this.m_layout.anchorX = 0.5;
            //         this.m_layout.anchorY = 0;
            //         cLayout.type = cc.Layout.Type.VERTICAL;
            //         cLayout.resizeMode = cc.Layout.ResizeMode.CONTAINER;
            //         cLayout.verticalDirection = cc.Layout.VerticalDirection.BOTTOM_TO_TOP;
            //         for ( let i = 0; i < this.m_layout.childrenCount; i++ )
            //         {
            //             this.m_layout.children[ i ].x = 0;
            //         }
            //     }
            //     else
            //     {
            //         this.m_layout.position = cc.v3( -this.node.width / 2, 0, 0 );
            //         this.m_layout.height = this.node.height;
            //         this.m_layout.anchorX = 1.0;
            //         this.m_layout.anchorY = 0.5;
            //         cLayout.type = cc.Layout.Type.HORIZONTAL;
            //         cLayout.resizeMode = cc.Layout.ResizeMode.CONTAINER;
            //         cLayout.horizontalDirection = cc.Layout.HorizontalDirection.RIGHT_TO_LEFT;
            //         for ( let i = 0; i < this.m_layout.childrenCount; i++ )
            //         {
            //             this.m_layout.children[ i ].y = 0;
            //         }
            //     }
            // }
          }

          if (this.m_layoutBg) {
            if (this.m_isLandscape) {
              this.m_layoutBg.angle = 0;
              this.m_layoutBg.setPosition(0, 24.5, 0);
              this.m_layoutBg.getComponent(UITransform).width = 86;

              if (this.m_iconList) {
                var height = 0;
                this.m_iconList.forEach(function (icon) {
                  height += icon.node.getComponent(UITransform).height;
                });
                this.m_layoutBg.getComponent(UITransform).height = height + 10;
              }
            } else {
              this.m_layoutBg.angle = 90;
              this.m_layoutBg.setPosition(-33.5, 0, 0);
              this.m_layoutBg.getComponent(UITransform).width = 70;

              if (this.m_iconList) {
                var _height = 0;
                this.m_iconList.forEach(function (icon) {
                  _height += icon.node.getComponent(UITransform).width;
                }); // this.m_layoutBg.height = height + 10;
              }
            }
          }
        };

        _proto.SetScaleAction = function SetScaleAction(node, isPress) {
          if (isPress) {
            tween(node).to(0.05, {
              scale: v3(0.9, 0.9, 0.9)
            }).start();
          } else {
            tween(node).to(0.05, {
              scale: v3(1, 1, 1)
            }).start();
          }
        };

        _createClass(VolatilityBar, [{
          key: "Volatility",
          get: function get() {
            return this.m_nowVolatility;
          }
        }]);

        return VolatilityBar;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_volatilityIconPrefab", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_volatilityQuestPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_volatilityMsgPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_title", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_layout", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_layoutBg", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_chili", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "m_chiliAmountParent", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "m_chiliAmount", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "m_volatilityIconPrefab_New", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "m_volatilityQuest", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "m_waiting", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "m_normal", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "m_Img_Volatility", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "m_Volatility_Icon", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "m_chili_New", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VolatilityIcon.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './VolatilityManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Sprite, SpriteFrame, UIRenderer, color, Component, VolatilityManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      UIRenderer = module.UIRenderer;
      color = module.color;
      Component = module.Component;
    }, function (module) {
      VolatilityManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "e16a3pBgD5JDJ1aFb/b/Jxh", "VolatilityIcon", undefined);

      var TxtName;

      (function (TxtName) {
        TxtName["chili"] = "chili_light";
        TxtName["chiliEmpty"] = "chili_empty";
        TxtName["high"] = "Volatility_btn_Unfold_txt_high";
        TxtName["low"] = "Volatility_btn_Unfold_txt_low";
        TxtName["mid"] = "Volatility_btn_Unfold_txt_medium";
        TxtName["Volatility_High"] = "Volatility_High";
        TxtName["Volatility_Medium"] = "Volatility_Medium";
        TxtName["Volatility_Low"] = "Volatility_Low";
      })(TxtName || (TxtName = {}));

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var VolatilityIcon = exports('default', (_dec = property(Node), _dec2 = property(Node), _dec3 = property(Sprite), _dec4 = property(Sprite), _dec5 = property(Sprite), _dec6 = property(Sprite), _dec7 = property(SpriteFrame), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(VolatilityIcon, _Component);

        function VolatilityIcon() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_backGround", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_backGroundFrame", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_title", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_chili", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_title_New", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_chili_New", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_chili_Icons", _descriptor7, _assertThisInitialized(_this));

          _this.m_amount = -1;
          return _this;
        }

        var _proto = VolatilityIcon.prototype;

        _proto.Init = function Init(amount, commAtlas) {
          this.m_amount = amount;

          if (this.m_chili.length > 0) {
            for (var i = 0; i < this.m_chili.length; i++) {
              if (i < this.m_amount) {
                this.m_chili[i].spriteFrame = commAtlas.getSpriteFrame(TxtName.chili);
              } else {
                this.m_chili[i].spriteFrame = commAtlas.getSpriteFrame(TxtName.chiliEmpty);
              }
            }
          } // America


          if (this.m_chili_New) {
            this.m_chili_New.spriteFrame = this.m_chili_Icons[amount];
          }
        };

        _proto.SetTxt = function SetTxt(stringAtlas) {
          if (this.m_title) {
            // switch ( this.GetPos() )
            switch (VolatilityManager.GetInstance().GetPos(this.m_amount)) {
              case 0:
                this.m_title.spriteFrame = stringAtlas.getSpriteFrame(TxtName.low);
                break;

              case 1:
                this.m_title.spriteFrame = stringAtlas.getSpriteFrame(TxtName.mid);
                break;

              default:
                this.m_title.spriteFrame = stringAtlas.getSpriteFrame(TxtName.high);
                break;
            }
          } else {
            switch (VolatilityManager.GetInstance().GetPos(this.m_amount)) {
              case 0:
                if (stringAtlas.getSpriteFrame(TxtName.Volatility_Low)) {
                  this.m_title_New.spriteFrame = stringAtlas.getSpriteFrame(TxtName.Volatility_Low);
                }

                break;

              case 1:
                if (stringAtlas.getSpriteFrame(TxtName.Volatility_Medium)) {
                  this.m_title_New.spriteFrame = stringAtlas.getSpriteFrame(TxtName.Volatility_Medium);
                }

                break;

              default:
                if (stringAtlas.getSpriteFrame(TxtName.Volatility_High)) {
                  this.m_title_New.spriteFrame = stringAtlas.getSpriteFrame(TxtName.Volatility_High);
                }

                break;
            }
          }
        };

        _proto.GetNowChillSprite = function GetNowChillSprite() {
          if (this.m_chili_New) {
            return this.m_chili_New.spriteFrame;
          } else {
            return null;
          }
        };

        _proto.Show = function Show(isOpen) {
          isOpen ? this.ShowBackGround() : this.HideBackGround();

          for (var i = 0; i < this.node.getComponentsInChildren(Sprite).length; i++) {
            var sprite = this.node.getComponentsInChildren(Sprite)[i];

            if (sprite) {
              sprite.node.getComponent(UIRenderer).color = isOpen ? color(255, 255, 255) : color(165, 165, 165);
            }
          }
        };

        _proto.ShowBackGround = function ShowBackGround() {
          if (this.m_backGround) {
            this.m_backGround.active = true;
          }

          if (this.m_backGroundFrame) {
            this.m_backGroundFrame.active = true;
          }
        };

        _proto.HideBackGround = function HideBackGround() {
          if (this.m_backGround) {
            this.m_backGround.active = false;
          }

          if (this.m_backGroundFrame) {
            this.m_backGroundFrame.active = false;
          }
        };

        return VolatilityIcon;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_backGround", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_backGroundFrame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_title", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_chili", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_title_New", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "m_chili_New", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "m_chili_Icons", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VolatilityManager.ts", ['cc', './Define.ts', './LocaleStringManager.ts', './Tools.ts', './ExtraManager.ts', './VolatilityBar.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, Prefab, error, instantiate, Sprite, Define, LocaleStringManager, Tools, ExtraManager, VolatilityBar;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      error = module.error;
      instantiate = module.instantiate;
      Sprite = module.Sprite;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      LocaleStringManager = module.default;
    }, function (module) {
      Tools = module.default;
    }, function (module) {
      ExtraManager = module.default;
    }, function (module) {
      VolatilityBar = module.default;
    }],
    execute: function () {
      var _class, _class2;

      cclegacy._RF.push({}, "a4067gSwKRKbYgsM4v459Wc", "VolatilityManager", undefined);

      var VolatilityPrefabPath_New = "Astt/%s/volatility/Prefab/Volatility_Btn";
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var VolatilityManager = exports('default', ccclass(_class = (_class2 = /*#__PURE__*/function () {
        function VolatilityManager() {
          this.m_volatility = null;
          this.m_isLandscape = false;
          this.m_info = null;
          this.m_bottomBar = null;
          this.m_isOpen = false;
        }

        VolatilityManager.GetInstance = function GetInstance() {
          if (!VolatilityManager._instance) {
            VolatilityManager._instance = new VolatilityManager();
          }

          return VolatilityManager._instance;
        };

        VolatilityManager.OnExit = function OnExit() {
          delete this._instance;
          this._instance = null;
        };

        var _proto = VolatilityManager.prototype;

        _proto.Init = function Init(info, bottomBar, parent, custSprite) {
          var _this = this;

          if (custSprite === void 0) {
            custSprite = null;
          }

          this.m_info = info;
          this.m_bottomBar = bottomBar;

          if (info && info.VolPos >= 0 && info.VolList && info.VolList.length > 0) {
            // let path: string = Tools.GetFilePath( VolatilityPrefabPath );
            // if ( Tools.Line === Define.LineSetting.americas ||
            //     Tools.Line === Define.LineSetting.americas_str )
            // {
            var path = Tools.GetFilePath(VolatilityPrefabPath_New);
            Define.CommonBundle.load(path, Prefab, function (err, prefab) {
              if (err) {
                error(err.message || err);
                return;
              }

              var volBarNode = instantiate(prefab);
              parent.addChild(volBarNode);

              if (custSprite) {
                volBarNode.getComponent(Sprite).spriteFrame = custSprite;
              }

              _this.m_volatility = volBarNode.getComponent(VolatilityBar);

              _this.m_volatility.Init(info, bottomBar);

              _this.SetTxt(); // 更新地BAR


              _this.m_bottomBar.node.getComponent(ExtraManager).SetFeaturesVolatility();

              _this.m_isOpen = true; // 向地bar註冊關閉開啟BTN的CB

              _this.m_bottomBar.AddOpenCloseBtnCb(Define.CbKey.Volatility, function () {
                _this.ShowVolatilityBtn(false);
              }, function () {
                _this.HideVolatilityBtn();
              });

              _this.OnRotation(_this.m_isLandscape);
            }); // } else
            // {
            //     Define.CommonBundle.load( path, cc.Prefab, ( err, prefab: cc.Prefab ) =>
            //     {
            //         if ( err )
            //         {
            //             cc.error( err.message || err );
            //             return;
            //         }
            //         let volBarNode = cc.instantiate( prefab );
            //         parent.addChild( volBarNode );
            //         this.m_volatility = volBarNode.getComponent( VolatilityBar );
            //         this.m_volatility.Init( info, bottomBar );
            //         this.SetTxt();
            //         this.m_bottomBar.SetFeaturesVolatility();
            //         this.m_isOpen = true;
            //         // 向地bar註冊關閉開啟BTN的CB
            //         this.m_bottomBar.AddOpenCloseBtnCb(
            //             Define.CbKey.Volatility,
            //             () =>
            //             {
            //                 this.ShowVolatilityBtn( false );
            //             },
            //             () =>
            //             {
            //                 this.HideVolatilityBtn();
            //             }
            //         );
            //         this.OnRotation( this.m_isLandscape );
            //     } );
            // }
          }
        };

        _proto.ShowVolatilityBtn = function ShowVolatilityBtn(isOpenIcon) {
          if (isOpenIcon === void 0) {
            isOpenIcon = true;
          }

          if (this.m_volatility) {
            this.m_volatility.ShowVolBar(isOpenIcon);
          }
        };

        _proto.HideVolatilityBtn = function HideVolatilityBtn() {
          if (this.m_volatility) {
            this.m_volatility.HideVolBar();
          }
        };

        _proto.UnableVolatilityBtn = function UnableVolatilityBtn() {
          if (this.m_volatility) {
            this.m_volatility.UnableVolBar();
          }
        };

        _proto.CanUseVolatilityBtn = function CanUseVolatilityBtn() {
          if (this.m_volatility) {
            this.m_volatility.CanUseVolBar();
          }
        };

        _proto.GetVolatility = function GetVolatility() {
          if (this.m_volatility) {
            return this.m_volatility.Volatility;
          }

          return -1;
        };

        _proto.GetVolatilityChili = function GetVolatilityChili() {
          if (this.m_info && this.m_volatility) {
            return this.m_info.VolList[this.m_volatility.Volatility];
          }

          return -1;
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          this.m_isLandscape = isLandscape;

          if (this.m_volatility) {
            this.m_volatility.OnRotation(this.m_isLandscape);
          }
        };

        _proto.SetTxt = function SetTxt() {
          var stringAtlas = LocaleStringManager.GetInstance().GetCommonAtlas();

          if (stringAtlas == null || !this.m_volatility) {
            return;
          }

          this.m_volatility.SetTxt(stringAtlas);
        };

        _proto.IsOpen = function IsOpen() {
          return this.m_isOpen;
        };

        _proto.GetPos = function GetPos(amount) {
          switch (amount) {
            case 1:
            case 2:
              // 低
              return 0;

            case 3:
            case 4:
              // 中
              return 1;

            default:
              // 高
              return 2;
          }
        };

        return VolatilityManager;
      }(), _class2._instance = null, _class2)) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VolatilityMsg.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Label, Node, Vec3, Component, Define;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Node = module.Node;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      Define = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "50de1Dlt0pB9qNklddzytpN", "VolatilityMsg", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var VolatilityMsg = exports('default', (_dec = property(Sprite), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Node), _dec5 = property(Node), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(VolatilityMsg, _Component);

        function VolatilityMsg() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "m_title", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_conformTxt", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_content", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_close", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "m_frame", _descriptor5, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = VolatilityMsg.prototype;

        _proto.ShowMsg = function ShowMsg() {
          this.node.active = true;
        };

        _proto.HideMsg = function HideMsg() {
          this.node.active = false;
        };

        _proto.OnRotation = function OnRotation(isLandscape) {
          if (isLandscape) {
            this.m_frame.scale = new Vec3(1, 1, 1);
            this.node.setPosition(0, 400, 0);
          } else {
            this.m_frame.scale = new Vec3(0.9, 0.9, 0.9);
            this.node.setPosition(0, 600, 0);
          }
        };

        _createClass(VolatilityMsg, [{
          key: "Title",
          set: function set(title) {
            this.m_title.spriteFrame = title;
          }
        }, {
          key: "ConFormTxt",
          set: function set(conformTxt) {
            if (!this.m_conformTxt.font) {
              this.m_conformTxt.font = Define.DefaultFont;
            }

            this.m_conformTxt.string = conformTxt;
          }
        }, {
          key: "Content",
          set: function set(content) {
            if (!this.m_content.font) {
              this.m_content.font = Define.DefaultFont;
            }

            this.m_content.string = content;
          } // @property( Node )
          // private m_conform: Node = null;
          // public get ConForm()
          // {
          //     return this.m_conform;
          // }

        }, {
          key: "Close",
          get: function get() {
            return this.m_close;
          }
        }, {
          key: "Frame",
          get: function get() {
            return this.m_frame;
          }
        }]);

        return VolatilityMsg;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "m_title", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "m_conformTxt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "m_content", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "m_close", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "m_frame", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Wallet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Define.ts', './Tools.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, sys, log, Define, Tools;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      log = module.log;
    }, function (module) {
      Define = module.default;
    }, function (module) {
      Tools = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9f157b5iAVAlKpDrkReXTSo", "Wallet", undefined);

      var currencyNameOrder = exports('currencyNameOrder', {
        "TRX": 1,
        "ETH": 2,
        "EOS": 3,
        "USDT": 4,
        "BTC": 6
      });
      var walletInfo = exports('walletInfo', function walletInfo() {
        this.currencyNumber = void 0;
        this.currencyName = void 0;
        this.currencySymbol = void 0;
        this.unit = void 0;
        this.coin = void 0;
        this.bet = void 0;
        this.ratio = void 0;
        this.rate = void 0;
        this.cycle = void 0;
        this.lower = void 0;
        this.upper = void 0;
        this.decimal = void 0;
      } //小數點
      );
      var walletCoinInfo = exports('walletCoinInfo', function walletCoinInfo() {
        this.currencyNumber = void 0;
        this.coin = void 0;
      });
      var walletFullInfo = exports('walletFullInfo', /*#__PURE__*/function (_walletInfo) {
        _inheritsLoose(walletFullInfo, _walletInfo);

        function walletFullInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _walletInfo.call.apply(_walletInfo, [this].concat(args)) || this;
          _this.betTypeS = void 0;
          return _this;
        }

        return walletFullInfo;
      }(walletInfo));
      var currencyNumber = {
        RMB: 0
      };

      var Wallet = /*#__PURE__*/function () {
        function Wallet() {
          this.m_wallets = void 0;
          this.m_currentIdx = 0;
          this.m_eventListeners = {};
          this.m_bottomBar = null;
          this.ToTypeS = void 0;
          this.Div = void 0;
        }

        var _proto = Wallet.prototype;

        _proto.GetDollarFontFamily = function GetDollarFontFamily(dollarSymbol) {
          if (dollarSymbol == "₽" && sys.os == sys.OS.IOS && parseInt(sys.osVersion) >= 13) {
            return "-apple-system";
          } else {
            return "Arial";
          }
        }
        /**
         * 獲得當前選的貨幣index(不是貨幣ID!!)
         */
        ;
        /**
         * 設定錢包資料
         * @param wallets 
         */


        _proto.SetWallet = function SetWallet(wallets, bottombarManager) {
          log(wallets);
          this.m_bottomBar = bottombarManager;
          this.m_wallets = wallets;
          this.ChangeNowCurrency(wallets[0].currencyNumber);
        };

        _proto.GetWallet = function GetWallet() {
          return this.m_wallets;
        };

        _proto.GetWalletByID = function GetWalletByID(id) {
          for (var i = 0; i < this.m_wallets.length; i++) {
            var wallet = this.m_wallets[i];

            if (wallet.currencyNumber == id) {
              return wallet;
            }
          }
        }
        /**
         * 註冊監聽事件
         * @param listener 
         */
        ;

        _proto.AddEventListener = function AddEventListener(listener, key) {
          if (key === void 0) {
            key = "key";
          }

          this.m_eventListeners[key] = listener;
        };

        _proto.Trigger = function Trigger(name) {
          for (var key in this.m_eventListeners) {
            if (Object.prototype.hasOwnProperty.call(this.m_eventListeners, key)) {
              var element = this.m_eventListeners[key];
              element && element(name);
            }
          }
        };
        /**
         * 變更錢包幣別
         * @param id 第幾個錢包
         */


        _proto.ChangeNowCurrency = function ChangeNowCurrency(id) {
          var _this2 = this;

          var wallet = this.GetWalletByID(id);

          if (wallet == undefined) {
            throw new Error("set Currency out of range!!");
          }

          this.m_currentIdx = id;
          var isShowSymbol = true;
          var apiId = Number(this.m_bottomBar.ApiID);

          for (var i = 0; i < Define.NoSymbolApiID.length; i++) {
            if (Define.NoSymbolApiID[i] === apiId) {
              isShowSymbol = false;
              break;
            }
          }

          if (isShowSymbol) {
            var cond = function cond() {
              if (wallet.currencySymbol && wallet.currencySymbol != "") {
                if (Tools.CheckSwitchOff(Define.SwitchOffKeyDefine.CurrencySymbol)) {
                  Define.DollarSymbol = "";
                } else {
                  Define.DollarSymbol = wallet.currencySymbol;
                }

                Define.DollarFontFamily = _this2.GetDollarFontFamily(wallet.currencySymbol);
                return true;
              }
            };

            switch (Define.DollorSymbolDisplayPriority) {
              case true:
                if (cond()) {
                  break;
                }

              case false:
                if (wallet.currencyName && wallet.currencyName != "") {
                  Define.DollarSymbolSuffix = " " + wallet.currencyName;
                  break;
                }

              default:
                cond();
            }
          }

          var baseDot = Tools.SmallDotDigit;

          if (wallet.decimal >= 0) {
            // 若server有給小數點位數，使用server給的最後與原始規則以min判定最終小數點數值
            baseDot = wallet.decimal;
          }

          if (Tools.IsTada) {
            Tools.SetDotDigit(Math.min(2, baseDot), wallet.currencyNumber);
          } else if (wallet.ratio && wallet.ratio < 1) {
            var ratio = Tools.strip(wallet.ratio).toString();
            Tools.SetDotDigit(Math.min(ratio.length - ratio.search(/\./) + 1, baseDot), wallet.currencyNumber);
          } else {
            var hasDot = false;
            var left = wallet.bet.length % Define.BetColumnLimit;

            if (left > 0) {
              for (var _i = 0; _i < wallet.bet.length; _i++) {
                var bet = this.GetDisplayValue(wallet.bet[_i]);

                if (typeof bet === "number" && bet < 1) {
                  hasDot = true;
                  break;
                }
              }
            }

            if (hasDot) {
              Tools.SetDotDigit(Math.min(Tools.SmallDotDigit, baseDot), wallet.currencyNumber);
            } else {
              Tools.SetDotDigit(Math.min(2, baseDot), wallet.currencyNumber);
            }
          }

          if (!wallet.betTypeS) {
            var betList = [];
            wallet.bet.forEach(function (value) {
              betList.push(_this2.ToTypeS(_this2.Div(value, wallet.unit)));
            });
            wallet.betTypeS = betList;
          }

          this.Trigger(Wallet.EventType.ChangeCurrency);
        };

        _proto.GetDisplayValue = function GetDisplayValue(value) {
          return this.ToTypeS(this.Div(value, this.GetWalletByID(this.m_currentIdx).unit));
        }
        /**設定財產(除以rate前) */
        ;

        _proto.SetCoin = function SetCoin(coin) {
          this.GetWalletByID(this.m_currentIdx).coin = coin;
        }
        /**設定所有財產(除以rate前) */
        ;

        _proto.SetAllCoin = function SetAllCoin(balances) {
          var _this3 = this;

          balances.forEach(function (balance) {
            for (var i = 0; i < _this3.m_wallets.length; i++) {
              var wallet = _this3.m_wallets[i];

              if (wallet.currencyNumber == balance.currencyNumber) {
                wallet.coin = balance.coin;
                break;
              }
            }
          });
        }
        /**目前幣別數值是否較大*/
        ;

        _proto.IsEnlarge = function IsEnlarge() {
          var wallet = this.GetWalletByID(this.m_currentIdx);
          var ratio = wallet.ratio;
          var unit = Number(wallet.unit);
          return ratio / unit > 1;
        }
        /**該幣別財產(除以rate後) */
        ;

        _createClass(Wallet, [{
          key: "NowWalletId",
          get: function get() {
            return this.m_currentIdx;
          }
        }, {
          key: "HasWallet",
          get: function get() {
            return !!this.m_wallets;
          }
        }, {
          key: "IsRMB",
          get: function get() {
            return this.GetWalletByID(this.m_currentIdx).currencyNumber === currencyNumber.RMB;
          }
        }, {
          key: "Coin",
          get: function get() {
            return this.ToTypeS(this.Div(this.GetWalletByID(this.m_currentIdx).coin, this.GetWalletByID(this.m_currentIdx).unit));
          }
          /**該幣別財產(除以rate前) */

        }, {
          key: "RawCoin",
          get: function get() {
            return this.ToTypeS(this.GetWalletByID(this.m_currentIdx).coin);
          }
          /**押注清單(除以rate後) */

        }, {
          key: "BetList",
          get: function get() {
            return this.GetWalletByID(this.m_currentIdx).betTypeS;
          }
          /**押注清單(除以rate前) */

        }, {
          key: "RawBetList",
          get: function get() {
            return this.GetWalletByID(this.m_currentIdx).bet;
          }
          /**錢包清單 */

        }, {
          key: "List",
          get: function get() {
            var _this4 = this;

            var list = [];
            this.m_wallets.forEach(function (wallet) {
              list.push({
                id: wallet.currencyNumber,
                coin: _this4.ToTypeS(_this4.Div(wallet.coin, wallet.unit)),
                name: wallet.currencyName
              });
            });
            return list;
          }
          /**貨幣ID */

        }, {
          key: "CurencyID",
          get: function get() {
            return this.GetWalletByID(this.m_currentIdx).currencyNumber;
          }
          /**貨幣名 */

        }, {
          key: "CurencyName",
          get: function get() {
            return this.GetWalletByID(this.m_currentIdx).currencyName;
          }
          /**貨幣的比值 */

        }, {
          key: "Unit",
          get: function get() {
            return this.ToTypeS(this.GetWalletByID(this.m_currentIdx).unit);
          }
          /**貨幣倍率 */

        }, {
          key: "Rate",
          get: function get() {
            return this.GetWalletByID(this.m_currentIdx).rate;
          }
        }, {
          key: "Ratio",
          get: function get() {
            return this.GetWalletByID(this.m_currentIdx).ratio;
          }
        }]);

        return Wallet;
      }();

      Wallet.EventType = {
        ChangeCurrency: "ChangeCurrency"
      };
      var walletManger = exports('walletManger', new Wallet());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WebPage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, WebView, error, UITransform, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      WebView = module.WebView;
      error = module.error;
      UITransform = module.UITransform;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "6e6c2uczmtEgLzi0z3+prLI", "WebPage", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WebPage = exports('default', (_dec = property(Node), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(WebView), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(WebPage, _Component);

        function WebPage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "pageNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bg", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "title", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btn_close", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "webView", _descriptor5, _assertThisInitialized(_this));

          _this.webPos = null;
          _this.weburl = "";
          _this.refPoint = void 0;
          return _this;
        }

        var _proto = WebPage.prototype;

        _proto.start = function start() {// if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     this.webView.node.on( 'loaded', () =>
          //     {
          //         if ( this.webView.url != "" )
          //         {
          //             this.webView.node.position = this.webPos;
          //         }
          //     } );
          //     this.webPos = this.webView.node.position;
          //     this.webView.node.position = cc.v3( 0, 10000, 0 );
          // }
        };

        _proto.show = function show() {
          this.pageNode.active = true; // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     this.scheduleOnce( () =>
          //     {
          //         if ( this.weburl != "" )
          //         {
          //             this.webView.url = this.weburl;
          //             this.webView.node.position = cc.v3( 0, 10000, 0 );
          //             this.weburl = ""
          //         }
          //         else
          //         {
          //             this.webView.node.position = this.webPos;
          //         }
          //     }, 0 )
          // } else
          // {

          error("WebPage this.webView.url:", this.webView.url);
          this.webView.url = this.weburl; // this.weburl = ""
          // }
        };

        _proto.close = function close(cache) {
          var _this2 = this;

          if (cache === void 0) {
            cache = true;
          }

          if (!cache) {
            this.weburl = this.webView.url;
            this.webView.url = "";
          } // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     this.webView.node.position = cc.v3( 0, 10000, 0 );
          // }


          this.scheduleOnce(function () {
            _this2.pageNode.active = false;
          }, 0);
        };

        _proto.isShow = function isShow() {
          return this.pageNode.active;
        };

        _proto.reload = function reload() {
          var _this3 = this;

          if (this.pageNode.active) {
            var reloadurl = this.webView.url;
            this.webView.url = "";
            this.scheduleOnce(function () {
              _this3.webView.url = reloadurl; // if ( Tools.Line !== Define.LineSetting.americas &&
              //     Tools.Line !== Define.LineSetting.americas_str )
              // {
              //     this.webView.node.position = cc.v3( 0, 10000, 0 );
              // }
            }, 0);
          }
        };

        _proto.setUrl = function setUrl(str) {
          this.weburl = str;
        };

        _proto.setPos = function setPos(node) {
          this.pageNode.position = node.position;
          this.refPoint = node;
        };

        _proto.onRotation = function onRotation(isLandscape) {
          // if ( Tools.Line !== Define.LineSetting.americas &&
          //     Tools.Line !== Define.LineSetting.americas_str )
          // {
          //     if ( this.refPoint )
          //     {
          //         this.scheduleOnce( () =>
          //         {
          //             this.setPos( this.refPoint );
          //         }, 0 )
          //     }
          //     if ( isLandscape )
          //     {
          //         if ( this.bg )
          //         {
          //             this.bg.setContentSize( 775, 516 );
          //         }
          //         if ( this.btn_close )
          //         {
          //             this.btn_close.position = cc.v3( 348, 228, 0 );
          //         }
          // this.webView.node.getComponent( UITransform ).setContentSize( 755, 445 );
          this.webView.node.getComponent(UITransform).getComponent(UITransform).setContentSize(755, 445); //         this.webView.node.setContentSize( 755, 445 );
          //         this.webView.node.y = -24;
          //         if ( this.title )
          //         {
          //             this.title.width = 764;
          //             this.title.y = 229;
          //         }
          //     }
          //     else
          //     {
          //         if ( this.bg )
          //         {
          //             this.bg.setContentSize( 630, 775 );
          //         }
          //         if ( this.btn_close )
          //         {
          //             this.btn_close.position = cc.v3( 275, 358, 0 );
          //         }
          //         this.webView.node.setContentSize( 610, 709 );
          //         this.webView.node.y = -21;
          //         if ( this.title )
          //         {
          //             this.title.width = 619;
          //             this.title.y = 360;
          //         }
          //     }
          // } else
          // {

          if (isLandscape) {
            this.webView.node.getComponent(UITransform).setContentSize(706, 490);
          } else {
            this.webView.node.getComponent(UITransform).setContentSize(465, 860);
          } // }

        };

        return WebPage;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "pageNode", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btn_close", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "webView", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/other', 'chunks:///_virtual/other'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});